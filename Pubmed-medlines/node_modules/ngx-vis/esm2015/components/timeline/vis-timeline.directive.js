import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';
import { VisTimelineService } from './vis-timeline.service';
/**
 * Use this directive with a div container to show timeline data.
 *
 * @export
 * @class VisTimelineDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
let VisTimelineDirective = class VisTimelineDirective {
    /**
     * Creates an instance of VisTimelineDirective.
     *
     * @param {ElementRef} elementRef The HTML element reference.
     * @param {VisTimelineService} visTimelineService The VisTimelineService.
     *
     * @memberOf VisTimelineDirective
     */
    constructor(elementRef, visTimelineService) {
        this.elementRef = elementRef;
        this.visTimelineService = visTimelineService;
        /**
         * This event will be raised when the timline is initialized.
         * At this point of time the timeline is successfully registered
         * with the VisNetworkService and you can register to events.
         * The event data is the name of the timeline as a string.
         *
         * @type {EventEmitter<any>}
         * @memberOf VisTimelineDirective
         */
        this.initialized = new EventEmitter();
        this.isInitialized = false;
        this.visTimelineContainer = elementRef.nativeElement;
    }
    /**
     * Create the timeline when at least visNetwork and visNetworkData
     * are defined.
     *
     * @memberOf VisTimelineDirective
     */
    ngOnInit() {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
    }
    /**
     * Update the timeline data, groups or options on reference changes to
     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.
     *
     * @param {{[propName: string]: SimpleChange}} changes
     *
     * @memberOf VisTimelineDirective
     */
    ngOnChanges(changes) {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
        for (const propertyName in changes) {
            if (changes.hasOwnProperty(propertyName)) {
                const change = changes[propertyName];
                if (!change.isFirstChange()) {
                    if (propertyName === 'visTimelineItems') {
                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineOptions') {
                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineGroups') {
                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);
                    }
                }
            }
        }
    }
    /**
     * Calls the destroy function for this timeline instance.
     *
     *
     * @memberOf VisTimelineDirective
     */
    ngOnDestroy() {
        this.isInitialized = false;
        this.visTimelineService.destroy(this.visTimeline);
    }
    createTimeline() {
        if (this.visTimelineGroups) {
            this.visTimelineService.createWithItemsAndGroups(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineGroups, this.visTimelineOptions);
        }
        else {
            this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);
        }
        this.isInitialized = true;
        this.initialized.emit(this.visTimeline);
    }
};
VisTimelineDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: VisTimelineService }
];
tslib_1.__decorate([
    Input('visTimeline')
], VisTimelineDirective.prototype, "visTimeline", void 0);
tslib_1.__decorate([
    Input()
], VisTimelineDirective.prototype, "visTimelineItems", void 0);
tslib_1.__decorate([
    Input()
], VisTimelineDirective.prototype, "visTimelineGroups", void 0);
tslib_1.__decorate([
    Input()
], VisTimelineDirective.prototype, "visTimelineOptions", void 0);
tslib_1.__decorate([
    Output()
], VisTimelineDirective.prototype, "initialized", void 0);
VisTimelineDirective = tslib_1.__decorate([
    Directive({
        selector: '[visTimeline]'
    })
], VisTimelineDirective);
export { VisTimelineDirective };
//# sourceMappingURL=data:application/json;base64,