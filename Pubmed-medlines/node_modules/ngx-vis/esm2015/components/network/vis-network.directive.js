import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';
import { VisNetworkService } from './vis-network.service';
/**
 * Use this directive with a div container to show network data.
 *
 * @export
 * @class VisNetworkDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
let VisNetworkDirective = class VisNetworkDirective {
    /**
     * Creates an instance of VisNetworkDirective.
     *
     * @param {ElementRef} elementRef The HTML element reference.
     * @param {VisNetworkService} visNetworkService The VisNetworkService.
     *
     * @memberOf VisNetworkDirective
     */
    constructor(elementRef, visNetworkService) {
        this.elementRef = elementRef;
        this.visNetworkService = visNetworkService;
        /**
         * This event will be raised when the network is initialized.
         * At this point of time the network is successfully registered
         * with the VisNetworkService and you can register to events.
         * The event data is the name of the network as a string.
         *
         * @type {EventEmitter<any>}
         * @memberOf VisNetworkDirective
         */
        this.initialized = new EventEmitter();
        this.isInitialized = false;
        this.visNetworkContainer = elementRef.nativeElement;
    }
    /**
     * Create the network when at least visNetwork and visData
     * are defined.
     *
     * @memberOf VisNetworkDirective
     */
    ngOnInit() {
        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {
            this.createNetwork();
        }
    }
    /**
     * Update the network data or options on reference changes to
     * the visData or visOptions properties.
     *
     * @param {{[propName: string]: SimpleChange}} changes
     *
     * @memberOf VisNetworkDirective
     */
    ngOnChanges(changes) {
        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {
            this.createNetwork();
        }
        for (const propertyName in changes) {
            if (changes.hasOwnProperty(propertyName)) {
                const change = changes[propertyName];
                if (!change.isFirstChange()) {
                    if (propertyName === 'visData') {
                        this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visOptions') {
                        this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);
                    }
                }
            }
        }
    }
    /**
     * Calls the destroy function for this network instance.
     *
     * @memberOf VisNetworkDirective
     */
    ngOnDestroy() {
        this.isInitialized = false;
        this.visNetworkService.destroy(this.visNetwork);
    }
    createNetwork() {
        this.visNetworkService.create(this.visNetwork, this.visNetworkContainer, this.visNetworkData, this.visNetworkOptions);
        this.isInitialized = true;
        this.initialized.emit(this.visNetwork);
    }
};
VisNetworkDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: VisNetworkService }
];
tslib_1.__decorate([
    Input('visNetwork')
], VisNetworkDirective.prototype, "visNetwork", void 0);
tslib_1.__decorate([
    Input()
], VisNetworkDirective.prototype, "visNetworkData", void 0);
tslib_1.__decorate([
    Input()
], VisNetworkDirective.prototype, "visNetworkOptions", void 0);
tslib_1.__decorate([
    Output()
], VisNetworkDirective.prototype, "initialized", void 0);
VisNetworkDirective = tslib_1.__decorate([
    Directive({
        selector: '[visNetwork]'
    })
], VisNetworkDirective);
export { VisNetworkDirective };
//# sourceMappingURL=data:application/json;base64,