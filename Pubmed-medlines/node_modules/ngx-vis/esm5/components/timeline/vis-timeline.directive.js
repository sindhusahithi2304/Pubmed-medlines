import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';
import { VisTimelineService } from './vis-timeline.service';
/**
 * Use this directive with a div container to show timeline data.
 *
 * @export
 * @class VisTimelineDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
var VisTimelineDirective = /** @class */ (function () {
    /**
     * Creates an instance of VisTimelineDirective.
     *
     * @param {ElementRef} elementRef The HTML element reference.
     * @param {VisTimelineService} visTimelineService The VisTimelineService.
     *
     * @memberOf VisTimelineDirective
     */
    function VisTimelineDirective(elementRef, visTimelineService) {
        this.elementRef = elementRef;
        this.visTimelineService = visTimelineService;
        /**
         * This event will be raised when the timline is initialized.
         * At this point of time the timeline is successfully registered
         * with the VisNetworkService and you can register to events.
         * The event data is the name of the timeline as a string.
         *
         * @type {EventEmitter<any>}
         * @memberOf VisTimelineDirective
         */
        this.initialized = new EventEmitter();
        this.isInitialized = false;
        this.visTimelineContainer = elementRef.nativeElement;
    }
    /**
     * Create the timeline when at least visNetwork and visNetworkData
     * are defined.
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnInit = function () {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
    };
    /**
     * Update the timeline data, groups or options on reference changes to
     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.
     *
     * @param {{[propName: string]: SimpleChange}} changes
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnChanges = function (changes) {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
        for (var propertyName in changes) {
            if (changes.hasOwnProperty(propertyName)) {
                var change = changes[propertyName];
                if (!change.isFirstChange()) {
                    if (propertyName === 'visTimelineItems') {
                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineOptions') {
                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineGroups') {
                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);
                    }
                }
            }
        }
    };
    /**
     * Calls the destroy function for this timeline instance.
     *
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnDestroy = function () {
        this.isInitialized = false;
        this.visTimelineService.destroy(this.visTimeline);
    };
    VisTimelineDirective.prototype.createTimeline = function () {
        if (this.visTimelineGroups) {
            this.visTimelineService.createWithItemsAndGroups(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineGroups, this.visTimelineOptions);
        }
        else {
            this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);
        }
        this.isInitialized = true;
        this.initialized.emit(this.visTimeline);
    };
    VisTimelineDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VisTimelineService }
    ]; };
    tslib_1.__decorate([
        Input('visTimeline')
    ], VisTimelineDirective.prototype, "visTimeline", void 0);
    tslib_1.__decorate([
        Input()
    ], VisTimelineDirective.prototype, "visTimelineItems", void 0);
    tslib_1.__decorate([
        Input()
    ], VisTimelineDirective.prototype, "visTimelineGroups", void 0);
    tslib_1.__decorate([
        Input()
    ], VisTimelineDirective.prototype, "visTimelineOptions", void 0);
    tslib_1.__decorate([
        Output()
    ], VisTimelineDirective.prototype, "initialized", void 0);
    VisTimelineDirective = tslib_1.__decorate([
        Directive({
            selector: '[visTimeline]'
        })
    ], VisTimelineDirective);
    return VisTimelineDirective;
}());
export { VisTimelineDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzLXRpbWVsaW5lLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC12aXMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL3RpbWVsaW5lL3Zpcy10aW1lbGluZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RDs7Ozs7Ozs7R0FRRztBQUlIO0lBMkRFOzs7Ozs7O09BT0c7SUFDSCw4QkFBMkIsVUFBc0IsRUFBVSxrQkFBc0M7UUFBdEUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUF2QmpHOzs7Ozs7OztXQVFHO1FBRUksZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUd4RCxrQkFBYSxHQUFZLEtBQUssQ0FBQztRQVdyQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSx1Q0FBUSxHQUFmO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDcEUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSwwQ0FBVyxHQUFsQixVQUFtQixPQUE2QztRQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNwRSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7UUFFRCxLQUFLLElBQU0sWUFBWSxJQUFJLE9BQU8sRUFBRTtZQUNsQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3hDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRTtvQkFDM0IsSUFBSSxZQUFZLEtBQUssa0JBQWtCLEVBQUU7d0JBQ3ZDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ3hGO29CQUNELElBQUksWUFBWSxLQUFLLG9CQUFvQixFQUFFO3dCQUN6QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO3FCQUMxRjtvQkFDRCxJQUFJLFlBQVksS0FBSyxtQkFBbUIsRUFBRTt3QkFDeEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztxQkFDekY7aUJBQ0Y7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksMENBQVcsR0FBbEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sNkNBQWMsR0FBdEI7UUFDRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsa0JBQWtCLENBQUMsd0JBQXdCLENBQzlDLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FDeEIsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN0STtRQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQyxDQUFDOztnQkF4RXNDLFVBQVU7Z0JBQThCLGtCQUFrQjs7SUExRGpHO1FBREMsS0FBSyxDQUFDLGFBQWEsQ0FBQzs2REFDTTtJQVczQjtRQURDLEtBQUssRUFBRTtrRUFDd0M7SUFXaEQ7UUFEQyxLQUFLLEVBQUU7bUVBQzBDO0lBV2xEO1FBREMsS0FBSyxFQUFFO29FQUNtQztJQVkzQztRQURDLE1BQU0sRUFBRTs2REFDdUQ7SUF0RHJELG9CQUFvQjtRQUhoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZUFBZTtTQUMxQixDQUFDO09BQ1csb0JBQW9CLENBNEloQztJQUFELDJCQUFDO0NBQUEsQUE1SUQsSUE0SUM7U0E1SVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YUdyb3VwQ29sbGVjdGlvblR5cGUsIERhdGFJdGVtQ29sbGVjdGlvblR5cGUsIFRpbWVsaW5lT3B0aW9ucyB9IGZyb20gJ3Zpcy10aW1lbGluZSc7XG5cbmltcG9ydCB7IFZpc1RpbWVsaW5lU2VydmljZSB9IGZyb20gJy4vdmlzLXRpbWVsaW5lLnNlcnZpY2UnO1xuXG4vKipcbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB3aXRoIGEgZGl2IGNvbnRhaW5lciB0byBzaG93IHRpbWVsaW5lIGRhdGEuXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFZpc1RpbWVsaW5lRGlyZWN0aXZlXG4gKiBAaW1wbGVtZW50cyB7T25Jbml0fVxuICogQGltcGxlbWVudHMge09uRGVzdHJveX1cbiAqIEBpbXBsZW1lbnRzIHtPbkNoYW5nZXN9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t2aXNUaW1lbGluZV0nXG59KVxuZXhwb3J0IGNsYXNzIFZpc1RpbWVsaW5lRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvciBpZGVudGlmaWVyIG9mIHRoZSB0aW1lbGluZSAobXVzdCBiZSB1bmlxdWUgaW4geW91ciBhcHBsaWNhdGlvbikuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBvbmNlIG9uIGluaXQgYW5kIG11c3Qgbm90IGJlIGNoYW5nZWQuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJPZiBWaXNUaW1lbGluZURpcmVjdGl2ZVxuICAgKi9cbiAgQElucHV0KCd2aXNUaW1lbGluZScpXG4gIHB1YmxpYyB2aXNUaW1lbGluZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIHRpbWVsaW5lLlxuICAgKiBDaGFuZ2VzIHdpbGwgYmUgZGV0ZWN0ZWQuIElmIHRoZSByZWZlcmVuY2UgY2hhbmdlcyB0aGVuXG4gICAqIHNldERhdGEgd2lsbCBiZSBjYWxsZWQgb24gdGhpcyB0aW1lbGluZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHR5cGUge1Zpc1RpbWVsaW5lSXRlbXN9XG4gICAqIEBtZW1iZXJPZiBWaXNUaW1lbGluZURpcmVjdGl2ZVxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIHZpc1RpbWVsaW5lSXRlbXM6IERhdGFJdGVtQ29sbGVjdGlvblR5cGU7XG5cbiAgLyoqXG4gICAqIFRoZSBncm91cHMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSB0aW1lbGluZS5cbiAgICogQ2hhbmdlcyB3aWxsIGJlIGRldGVjdGVkLiBJZiB0aGUgcmVmZXJlbmNlIGNoYW5nZXMgdGhlblxuICAgKiBzZXRHcm91cHMgd2lsbCBiZSBjYWxsZWQgb24gdGhpcyB0aW1lbGluZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHR5cGUge1Zpc1RpbWVsaW5lR3JvdXBzfVxuICAgKiBAbWVtYmVyT2YgVmlzVGltZWxpbmVEaXJlY3RpdmVcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB2aXNUaW1lbGluZUdyb3VwczogRGF0YUdyb3VwQ29sbGVjdGlvblR5cGU7XG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25zIHRoYXQgd2lsbCBiZSB1c2VkIHdpdGggdGhpcyB0aW1lbGluZS5cbiAgICogQ2hhbmdlcyB3aWxsIGJlIGRldGVjdGVkLiBJZiB0aGUgcmVmZXJlbmNlIGNoYW5nZXMgdGhlblxuICAgKiBzZXRPcHRpb25zIHdpbGwgYmUgY2FsbGVkIG9uIHRoaXMgdGltZWxpbmUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEB0eXBlIHtWaXNUaW1lbGluZU9wdGlvbnN9XG4gICAqIEBtZW1iZXJPZiBWaXNUaW1lbGluZURpcmVjdGl2ZVxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIHZpc1RpbWVsaW5lT3B0aW9uczogVGltZWxpbmVPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IHdpbGwgYmUgcmFpc2VkIHdoZW4gdGhlIHRpbWxpbmUgaXMgaW5pdGlhbGl6ZWQuXG4gICAqIEF0IHRoaXMgcG9pbnQgb2YgdGltZSB0aGUgdGltZWxpbmUgaXMgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWRcbiAgICogd2l0aCB0aGUgVmlzTmV0d29ya1NlcnZpY2UgYW5kIHlvdSBjYW4gcmVnaXN0ZXIgdG8gZXZlbnRzLlxuICAgKiBUaGUgZXZlbnQgZGF0YSBpcyB0aGUgbmFtZSBvZiB0aGUgdGltZWxpbmUgYXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8YW55Pn1cbiAgICogQG1lbWJlck9mIFZpc1RpbWVsaW5lRGlyZWN0aXZlXG4gICAqL1xuICBAT3V0cHV0KClcbiAgcHVibGljIGluaXRpYWxpemVkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByaXZhdGUgdmlzVGltZWxpbmVDb250YWluZXI6IGFueTtcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVmlzVGltZWxpbmVEaXJlY3RpdmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gZWxlbWVudFJlZiBUaGUgSFRNTCBlbGVtZW50IHJlZmVyZW5jZS5cbiAgICogQHBhcmFtIHtWaXNUaW1lbGluZVNlcnZpY2V9IHZpc1RpbWVsaW5lU2VydmljZSBUaGUgVmlzVGltZWxpbmVTZXJ2aWNlLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgVmlzVGltZWxpbmVEaXJlY3RpdmVcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgdmlzVGltZWxpbmVTZXJ2aWNlOiBWaXNUaW1lbGluZVNlcnZpY2UpIHtcbiAgICB0aGlzLnZpc1RpbWVsaW5lQ29udGFpbmVyID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdGltZWxpbmUgd2hlbiBhdCBsZWFzdCB2aXNOZXR3b3JrIGFuZCB2aXNOZXR3b3JrRGF0YVxuICAgKiBhcmUgZGVmaW5lZC5cbiAgICpcbiAgICogQG1lbWJlck9mIFZpc1RpbWVsaW5lRGlyZWN0aXZlXG4gICAqL1xuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgJiYgdGhpcy52aXNUaW1lbGluZSAmJiB0aGlzLnZpc1RpbWVsaW5lSXRlbXMpIHtcbiAgICAgIHRoaXMuY3JlYXRlVGltZWxpbmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0aW1lbGluZSBkYXRhLCBncm91cHMgb3Igb3B0aW9ucyBvbiByZWZlcmVuY2UgY2hhbmdlcyB0b1xuICAgKiB0aGUgdmlzVGltZWxpbmVJdGVtcywgdmlzVGltZWxpbmVHcm91cHMgb3IgdmlzVGltZWxpbmVPcHRpb25zIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7e1twcm9wTmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlfX0gY2hhbmdlc1xuICAgKlxuICAgKiBAbWVtYmVyT2YgVmlzVGltZWxpbmVEaXJlY3RpdmVcbiAgICovXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlIH0pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCAmJiB0aGlzLnZpc1RpbWVsaW5lICYmIHRoaXMudmlzVGltZWxpbmVJdGVtcykge1xuICAgICAgdGhpcy5jcmVhdGVUaW1lbGluZSgpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIGNoYW5nZXMpIHtcbiAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlID0gY2hhbmdlc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICBpZiAoIWNoYW5nZS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSAndmlzVGltZWxpbmVJdGVtcycpIHtcbiAgICAgICAgICAgIHRoaXMudmlzVGltZWxpbmVTZXJ2aWNlLnNldEl0ZW1zKHRoaXMudmlzVGltZWxpbmUsIGNoYW5nZXNbcHJvcGVydHlOYW1lXS5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSAndmlzVGltZWxpbmVPcHRpb25zJykge1xuICAgICAgICAgICAgdGhpcy52aXNUaW1lbGluZVNlcnZpY2Uuc2V0T3B0aW9ucyh0aGlzLnZpc1RpbWVsaW5lLCBjaGFuZ2VzW3Byb3BlcnR5TmFtZV0uY3VycmVudFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3Zpc1RpbWVsaW5lR3JvdXBzJykge1xuICAgICAgICAgICAgdGhpcy52aXNUaW1lbGluZVNlcnZpY2Uuc2V0R3JvdXBzKHRoaXMudmlzVGltZWxpbmUsIGNoYW5nZXNbcHJvcGVydHlOYW1lXS5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZGVzdHJveSBmdW5jdGlvbiBmb3IgdGhpcyB0aW1lbGluZSBpbnN0YW5jZS5cbiAgICpcbiAgICpcbiAgICogQG1lbWJlck9mIFZpc1RpbWVsaW5lRGlyZWN0aXZlXG4gICAqL1xuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy52aXNUaW1lbGluZVNlcnZpY2UuZGVzdHJveSh0aGlzLnZpc1RpbWVsaW5lKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVGltZWxpbmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmlzVGltZWxpbmVHcm91cHMpIHtcbiAgICAgIHRoaXMudmlzVGltZWxpbmVTZXJ2aWNlLmNyZWF0ZVdpdGhJdGVtc0FuZEdyb3VwcyhcbiAgICAgICAgdGhpcy52aXNUaW1lbGluZSxcbiAgICAgICAgdGhpcy52aXNUaW1lbGluZUNvbnRhaW5lcixcbiAgICAgICAgdGhpcy52aXNUaW1lbGluZUl0ZW1zLFxuICAgICAgICB0aGlzLnZpc1RpbWVsaW5lR3JvdXBzLFxuICAgICAgICB0aGlzLnZpc1RpbWVsaW5lT3B0aW9uc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aXNUaW1lbGluZVNlcnZpY2UuY3JlYXRlV2l0aEl0ZW1zKHRoaXMudmlzVGltZWxpbmUsIHRoaXMudmlzVGltZWxpbmVDb250YWluZXIsIHRoaXMudmlzVGltZWxpbmVJdGVtcywgdGhpcy52aXNUaW1lbGluZU9wdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQuZW1pdCh0aGlzLnZpc1RpbWVsaW5lKTtcbiAgfVxufVxuIl19