import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';
import { VisNetworkService } from './vis-network.service';
/**
 * Use this directive with a div container to show network data.
 *
 * @export
 * @class VisNetworkDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
var VisNetworkDirective = /** @class */ (function () {
    /**
     * Creates an instance of VisNetworkDirective.
     *
     * @param {ElementRef} elementRef The HTML element reference.
     * @param {VisNetworkService} visNetworkService The VisNetworkService.
     *
     * @memberOf VisNetworkDirective
     */
    function VisNetworkDirective(elementRef, visNetworkService) {
        this.elementRef = elementRef;
        this.visNetworkService = visNetworkService;
        /**
         * This event will be raised when the network is initialized.
         * At this point of time the network is successfully registered
         * with the VisNetworkService and you can register to events.
         * The event data is the name of the network as a string.
         *
         * @type {EventEmitter<any>}
         * @memberOf VisNetworkDirective
         */
        this.initialized = new EventEmitter();
        this.isInitialized = false;
        this.visNetworkContainer = elementRef.nativeElement;
    }
    /**
     * Create the network when at least visNetwork and visData
     * are defined.
     *
     * @memberOf VisNetworkDirective
     */
    VisNetworkDirective.prototype.ngOnInit = function () {
        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {
            this.createNetwork();
        }
    };
    /**
     * Update the network data or options on reference changes to
     * the visData or visOptions properties.
     *
     * @param {{[propName: string]: SimpleChange}} changes
     *
     * @memberOf VisNetworkDirective
     */
    VisNetworkDirective.prototype.ngOnChanges = function (changes) {
        if (!this.isInitialized && this.visNetwork && this.visNetworkData) {
            this.createNetwork();
        }
        for (var propertyName in changes) {
            if (changes.hasOwnProperty(propertyName)) {
                var change = changes[propertyName];
                if (!change.isFirstChange()) {
                    if (propertyName === 'visData') {
                        this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visOptions') {
                        this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);
                    }
                }
            }
        }
    };
    /**
     * Calls the destroy function for this network instance.
     *
     * @memberOf VisNetworkDirective
     */
    VisNetworkDirective.prototype.ngOnDestroy = function () {
        this.isInitialized = false;
        this.visNetworkService.destroy(this.visNetwork);
    };
    VisNetworkDirective.prototype.createNetwork = function () {
        this.visNetworkService.create(this.visNetwork, this.visNetworkContainer, this.visNetworkData, this.visNetworkOptions);
        this.isInitialized = true;
        this.initialized.emit(this.visNetwork);
    };
    VisNetworkDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VisNetworkService }
    ]; };
    tslib_1.__decorate([
        Input('visNetwork')
    ], VisNetworkDirective.prototype, "visNetwork", void 0);
    tslib_1.__decorate([
        Input()
    ], VisNetworkDirective.prototype, "visNetworkData", void 0);
    tslib_1.__decorate([
        Input()
    ], VisNetworkDirective.prototype, "visNetworkOptions", void 0);
    tslib_1.__decorate([
        Output()
    ], VisNetworkDirective.prototype, "initialized", void 0);
    VisNetworkDirective = tslib_1.__decorate([
        Directive({
            selector: '[visNetwork]'
        })
    ], VisNetworkDirective);
    return VisNetworkDirective;
}());
export { VisNetworkDirective };
//# sourceMappingURL=data:application/json;base64,