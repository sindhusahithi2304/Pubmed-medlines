{"version":3,"sources":["../../../projects/angular-gridster2/src/lib/gridsterConfig.interface.ts","../../../projects/angular-gridster2/src/lib/gridster.interface.ts","../../../projects/angular-gridster2/src/lib/gridsterCompact.service.ts","../../../projects/angular-gridster2/src/lib/gridsterConfig.constant.ts","../../../projects/angular-gridster2/src/lib/gridsterUtils.service.ts","../../../projects/angular-gridster2/src/lib/gridsterEmptyCell.service.ts","../../../projects/angular-gridster2/src/lib/gridsterRenderer.service.ts","../../../projects/angular-gridster2/src/lib/gridster.component.ts","../../../projects/angular-gridster2/src/lib/gridsterScroll.service.ts","../../../projects/angular-gridster2/src/lib/gridsterItem.interface.ts","../../../projects/angular-gridster2/src/lib/gridsterPush.service.ts","../../../projects/angular-gridster2/src/lib/gridsterSwap.service.ts","../../../projects/angular-gridster2/src/lib/gridsterDraggable.service.ts","../../../projects/angular-gridster2/src/lib/gridsterPushResize.service.ts","../../../projects/angular-gridster2/src/lib/gridsterResizable.service.ts","../../../projects/angular-gridster2/src/lib/gridsterItem.component.ts","../../../projects/angular-gridster2/src/lib/gridsterPreview.component.ts","../../../projects/angular-gridster2/src/lib/gridster.module.ts"],"names":["GridType","DisplayGrid","CompactType","DirTypes","GridsterCompact","gridster","this","prototype","destroy","checkCompact","$options","compactType","None","CompactUp","checkCompactUp","CompactLeft","checkCompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","checkCompactRight","CompactUpAndRight","CompactRightAndUp","checkCompactItem","item","moveUpTillCollision","moveLeftTillCollision","moveRightTillCollision","widget","widgetMovedUp","l","grid","length","i","$item","compactEnabled","y","itemChanged","checkCollision","x","Injectable","GridsterComponentInterface","GridsterConfigService","gridType","Fit","scale","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","mobileBreakpoint","allowMultiLayer","defaultLayerIndex","maxLayerIndex","baseLayerIndex","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","enableOccupiedCellDrop","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableScrollHorizontal","disableScrollVertical","disableAutoPositionOnConflict","dirType","LTR","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","checkTouchEvent","clientX","touches","clientY","changedTouches","checkContentClassForEvent","checkDragHandleClass","target","currentTarget","checkContentClass","checkContentClassForEmptyCellClickEvent","current","hasAttribute","classnames","getAttribute","split","indexOf","parentNode","contentClass","compareItems","a","b","GridsterEmptyCell","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","_this","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","buttons","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","getPixelsX","rect","left","scrollLeft","gridRenderer","getLeftMargin","getPixelsY","top","scrollTop","getTopMargin","oldItem","getBoundingClientRect","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","GridsterRenderer","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","VerticalFixed","HorizontalFixed","removeClass","getGridColumnStyle","Object","assign","getLeftPosition","gridRows","getGridRowStyle","getTopPosition","gridColumns","d","dPosition","RTL","transform","xPosition","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","checkCollisionTwoItemsForSwaping","item2","horizontalBoundaryItem1","horizontalBoundaryItem2","verticalBoundaryItem1","verticalBoundaryItem2","checkCollisionTwoItems","layerIndex","ngOnInit","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","getItemComponent","clientWidth","clientHeight","offsetWidth","offsetHeight","checkIfToResize","windowResize","widgetsIndex","ngOnDestroy","scrollWidth","scrollHeight","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","getNewArrayLength","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","findItemsWithItem","newItem","startingFrom","colsIndex","rowsIndex","canAddToRows","canAddToColumns","tmpItem","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","find","checkCollisionForSwaping","findItemWithItemForSwaping","overallSize","size","newLength","Number","isFinite","Component","selector","template","encapsulation","ViewEncapsulation","ElementRef","decorators","type","Inject","Renderer2","ChangeDetectorRef","NgZone","Input","GridsterPush","gridsterItem","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","direction","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","pushedItem","setPushedItems","checkItemChanges","checkPushBack","change","checkPushedItem","conflicts","invert","sort","itemCollision","makePush","canBeDragged","call","lastIndexOf","j","pop","removeFromPushedItem","gridsterItemCollide","addToTempPushed","addToPushed","tempPosition","removeFromPushed","lastPosition","path","GridsterItemComponentInterface","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterSwap","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","pushedBy","gridsterItemCollision","copyCollisionX","copyCollisionY","copyX","copyY","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","mouseleave","cancelOnBlur","touchend","touchcancel","originalClientX","originalClientY","diffLeft","diffTop","calculateItemPositionFromMousePosition","calculateItemPositionWithScale","calculateItemPositionWithoutScale","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelMouseLeave","cancelTouchMove","eventMove","cancelTouchEnd","cancelTouchCancel","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","_a","directionFunction","handleN","_b","handleE","handleW","_c","handleS","handleNE","handleNW","handleSE","handleSW","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","defineProperty","getLayerIndex","init","dragEnabled","updateItemSize","scrollIntoView","newValue","oldValue","bringToFront","offset","topIndex","targetIndex","sendToBack","HostBinding","GridsterPreviewComponent","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes =\n  'none'\n  | 'compactUp'\n  | 'compactLeft'\n  | 'compactUp&Left'\n  | 'compactLeft&Up'\n  | 'compactRight'\n  | 'compactUp&Right'\n  | 'compactRight&Up';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up',\n  CompactRight = 'compactRight',\n  CompactUpAndRight = 'compactUp&Right',\n  CompactRightAndUp = 'compactRight&Up',\n}\n\nexport enum DirTypes {\n  LTR = 'ltr',\n  RTL = 'rtl'\n}\n\nexport type dirTypes = 'ltr' | 'rtl';\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  scale?: number;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  allowMultiLayer?: boolean;\n  defaultLayerIndex?: number;\n  maxLayerIndex?: number;\n  baseLayerIndex?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  useTransformPositioning?: boolean;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  swapWhileDragging?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  disableScrollHorizontal?: boolean;\n  disableScrollVertical?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  enableOccupiedCellDrop?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  dirType?: dirTypes;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getItemComponent?: (item: GridsterItem) => GridsterItemComponentInterface | undefined\n  };\n\n  // tslint:disable-next-line:no-any\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  // tslint:disable-next-line:no-any\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n","import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: GridsterItemComponentInterface[];\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  checkCollisionForSwaping: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => GridsterItemComponentInterface[];\n  checkGridCollision: (item: GridsterItem) => boolean;\n  checkCollisionTwoItems: (item: GridsterItem, item2: GridsterItem) => boolean;\n  getItemComponent: (item: GridsterItem) => GridsterItemComponentInterface | undefined;\n  el: HTMLElement;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {CompactType} from './gridsterConfig.interface';\n\n@Injectable()\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactUp();\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactLeft();\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactRight();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactUp();\n        this.checkCompactRight();\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactRight();\n        this.checkCompactUp();\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveUpTillCollision(item);\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveLeftTillCollision(item);\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveUpTillCollision(item);\n        this.moveRightTillCollision(item);\n      }\n    }\n  }\n\n  checkCompactUp(): void {\n    let widgetMovedUp = false;\n    let widget: GridsterItemComponentInterface;\n    let moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveUpTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.y = widget.$item.y;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveUpTillCollision(item: GridsterItem): boolean {\n    item.y -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.y += 1;\n      return false;\n    } else {\n      this.moveUpTillCollision(item);\n      return true;\n    }\n  }\n\n  checkCompactLeft(): void {\n    let widgetMovedUp = false;\n    let widget: GridsterItemComponentInterface;\n    let moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveLeftTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  checkCompactRight(): void {\n    let widgetMovedUp = false;\n    let widget: GridsterItemComponentInterface;\n    let moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveRightTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveLeftTillCollision(item: GridsterItem): boolean {\n    item.x -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x += 1;\n      return false;\n    } else {\n      this.moveLeftTillCollision(item);\n      return true;\n    }\n  }\n\n  moveRightTillCollision(item: GridsterItem): boolean {\n    item.x += 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x -= 1;\n      return false;\n    } else {\n      this.moveRightTillCollision(item);\n      return true;\n    }\n  }\n}\n","import {CompactType, DirTypes, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  scale: 1, // scale param to zoom in/zoom out\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  useTransformPositioning: true, // toggle between transform or top/left positioning of items\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  enableOccupiedCellDrop: false, // enable occupied cell drop events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  swapWhileDragging: false, // allow items to switch position while dragging\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableScrollHorizontal: false, // disable horizontal scrolling\n  disableScrollVertical: false, // disable vertical scrolling\n  disableAutoPositionOnConflict: false,  // disable auto-position of items on conflict state,\n  dirType: DirTypes.LTR, // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n};\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterUtils {\n\n  // tslint:disable-next-line:no-any\n  static merge(obj1: any, obj2: any, properties: any): any {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: () => void, wait: number): () => void {\n    let timeout: number | undefined;\n    return function(): void {\n      const context = this;\n      const args = arguments;\n      const later = () => {\n        timeout = undefined;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // tslint:disable-next-line:no-any\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: MouseEvent): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: MouseEvent): boolean {\n    return GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n      gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkDragHandleClass(target: HTMLElement, current: HTMLElement, dragHandleClass: string, ignoreContentClass): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class')) {\n      // @ts-ignore\n      const classnames = target.getAttribute('class').split(' ');\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    }\n    // @ts-ignore\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n\n  static checkContentClass(target: HTMLElement, current: HTMLElement, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    // @ts-ignore\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      // @ts-ignore\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: (() => void) | null;\n  emptyCellClickTouch: (() => void) | null;\n  emptyCellContextMenu: (() => void) | null;\n  emptyCellDrop: (() => void) | null;\n  emptyCellDrag: (() => void) | null;\n  emptyCellDragTouch: (() => void) | null;\n  emptyCellMMove: () => void;\n  emptyCellMMoveTouch: () => void;\n  emptyCellUp: () => void;\n  emptyCellUpTouch: () => void;\n  emptyCellMove: (() => void) | null;\n  emptyCellExit: (() => void) | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.initialItem;\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: MouseEvent): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: MouseEvent): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: DragEvent): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: DragEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n      }\n      this.gridster.movingItem = item;\n    } else {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'none';\n      }\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: MouseEvent): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    const leftMouseButtonCode = 1;\n    if (!item || e.buttons !== leftMouseButtonCode) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: MouseEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: MouseEvent): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getPixelsX(e: MouseEvent, rect: ClientRect): number {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n\n  getPixelsY(e: MouseEvent, rect: ClientRect): number {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n\n  getValidItemFromEvent(e: MouseEvent, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n","import {Injectable, Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes, GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  updateItem(el: Element, item: GridsterItem, renderer: Renderer2): void {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n      } else {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth / item.cols) + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      // set the cell style\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n\n  updateGridster(): void {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      this.gridster.curColWidth = this.gridster.curRowHeight;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number): { [key: string]: string } {\n    return {\n      ...this.getLeftPosition(this.gridster.curColWidth * i),\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number): { [key: string]: string } {\n    return {\n      ...this.getTopPosition(this.gridster.curRowHeight * i),\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getLeftPosition(d: number): { left: string } | { transform: string } {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)',\n      };\n    } else {\n      return {\n        left: (this.getLeftMargin() + dPosition) + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d: number): { top: string } | { transform: string } {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)',\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer: Renderer2, el: Element): void {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer: Renderer2, el: Element, x: number, y: number): void {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterCompact} from './gridsterCompact.service';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig, GridType} from './gridsterConfig.interface';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterUtils} from './gridsterUtils.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'gridster',\n  templateUrl: './gridster.html',\n  styleUrls: ['./gridster.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: HTMLElement;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: GridsterItemComponentInterface[];\n  columns = 0;\n  rows = 0;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(@Inject(ElementRef) el: ElementRef, @Inject(Renderer2) public renderer: Renderer2,\n              @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n              @Inject(NgZone) public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  // ------ Function for swapWhileDragging option\n\n  // identical to checkCollision() except that here we add boundaries.\n  static checkCollisionTwoItemsForSwaping(item: GridsterItem, item2: GridsterItem): boolean {\n    // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n    const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n    const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n    const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n    const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n    return item.x + horizontalBoundaryItem1 < item2.x + item2.cols\n      && item.x + item.cols > item2.x + horizontalBoundaryItem2\n      && item.y + verticalBoundaryItem1 < item2.y + item2.rows\n      && item.y + item.rows > item2.y + verticalBoundaryItem2;\n  }\n\n  checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    const collision = item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n    if (!collision) {\n      return false;\n    }\n    if (!this.$options.allowMultiLayer) {\n      return true;\n    }\n    const defaultLayerIndex = this.$options.defaultLayerIndex;\n    const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n    const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n    return layerIndex === layerIndex2;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n        getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options && this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options && this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    delete this.emptyCell;\n    this.compact.destroy();\n    delete this.compact;\n  }\n\n  onResize(): void {\n    if (this.options.setGridSize) { // reset width/height so the size is recalculated afterwards\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    const el = this.el;\n    let width;\n    let height;\n    if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows;\n    let columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    this.updateGrid();\n\n    if (this.$options.setGridSize) {\n      this.renderer.addClass(this.el, 'gridSize');\n      if (!this.mobile) {\n        this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n        this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n      }\n    } else {\n      this.renderer.removeClass(this.el, 'gridSize');\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n    this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex = 0;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex = 0;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0;\n    let colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: { y: number, x: number }, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: (x: number) => number, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: (x: number) => number, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n\n  getItemComponent(item: GridsterItem): GridsterItemComponentInterface | undefined {\n    return this.grid.find(c => c.item === item);\n  }\n\n  // ------ Functions for swapWhileDragging option\n\n  // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n  checkCollisionForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItemForSwaping(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n  findItemWithItemForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  // ------ End of functions for swapWhileDragging option\n\n  // tslint:disable-next-line:member-ordering\n  private static getNewArrayLength(length: number, overallSize: number, size: number): number {\n    const newLength = Math.max(length, Math.floor(overallSize / size));\n\n    if (newLength < 0) {\n      return 0;\n    }\n\n    if (Number.isFinite(newLength)) {\n      return Math.floor(newLength);\n    }\n\n    return 0;\n  }\n}\n","import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: HTMLElement | null;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\ninterface Position {\n  clientX: number;\n  clientY: number;\n}\n\ntype CalculatePosition = (position: Position) => void;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: Position,\n                       calculateItemPosition: CalculatePosition, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType): void {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n      if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n        return;\n      }\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n      if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n        return;\n      }\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== e.clientY) {\n      cancelVertical();\n    }\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n      if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n        return;\n      }\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n      if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n        return;\n      }\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== e.clientX) {\n      cancelHorizontal();\n    }\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: CalculatePosition, lastMouse: Position): number {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    // @ts-ignore\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: CalculatePosition, lastMouse: Position): number {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    // @ts-ignore\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll(): void {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\n\nfunction cancelHorizontal(): void {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical(): void {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE(): void {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW(): void {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS(): void {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN(): void {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n","import {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  canBeResized: () => boolean;\n  bringToFront: (offset: number) => void;\n  sendToBack: (v: number) => void;\n  el: HTMLElement;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n\nexport interface GridsterItem {\n  x: number;\n  y: number;\n  rows: number;\n  cols: number;\n  layerIndex?: number;\n  initCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  dragEnabled?: boolean;\n  resizeEnabled?: boolean;\n  compactEnabled?: boolean;\n  maxItemRows?: number;\n  minItemRows?: number;\n  maxItemCols?: number;\n  minItemCols?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n\n  // tslint:disable-next-line:no-any\n  [propName: string]: any;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: GridsterItemComponentInterface[];\n  private pushedItemsTemp: GridsterItemComponentInterface[];\n  private pushedItemsTempPath: { x: number, y: number }[][];\n  private pushedItemsPath: { x: number, y: number }[][];\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: GridsterItemComponentInterface[];\n  private tryPattern: {\n    fromEast: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromWest: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromNorth: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromSouth: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[]\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const conflicts: GridsterItemComponentInterface[] = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest;\n    // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n\n    });\n    let i = 0;\n    let itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const pushedItems: GridsterItemComponentInterface[] = [];\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n      if (itemCollision === this.gridsterItem) {\n        makePush = false;\n        break;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) { // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    let gridsterItemCollision;\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n      gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n      pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n      pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes} from './gridsterConfig.interface';\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {cancelScroll, scroll} from './gridsterScroll.service';\n\nimport {GridsterSwap} from './gridsterSwap.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {MouseEvent2} from './gridsterResizeEventType.interface';\n\n@Injectable()\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  originalClientX: number;\n  originalClientY: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: MouseEvent) => void;\n  dragFunction: (event: MouseEvent) => void;\n  dragStopFunction: (event: MouseEvent) => void;\n  mousemove: () => void;\n  mouseup: () => void;\n  mouseleave: () => void;\n  cancelOnBlur: () => void;\n  touchmove: () => void;\n  touchend: () => void;\n  touchcancel: () => void;\n  mousedown: () => void;\n  touchstart: () => void;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean = false;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: MouseEvent): void {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = (e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left);\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0});\n  }\n\n  dragMove(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: MouseEvent): void {\n    if (this.gridster.options.scale) {\n      this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n    } else {\n      this.calculateItemPositionWithoutScale(e);\n    }\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  calculateItemPositionWithScale(e: MouseEvent, scale: number): void {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.offsetLeft - this.diffLeft;\n    }\n    this.top = this.originalClientY + ((e.clientY - this.originalClientY) / scale) + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPositionWithoutScale(e: MouseEvent): void {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n\n  dragStop(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag(): void {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    if (this.push) {\n      this.push.restoreItems();\n    }\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  makeDrag(): void {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition(): void {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y});\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle(): void {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: MouseEvent2): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: MouseEvent): void {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag(): void {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromWest:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromNorth:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromSouth:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: GridsterItemComponentInterface | boolean = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number };\n    let x;\n    let y;\n    let cols;\n    let rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes} from './gridsterConfig.interface';\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterResizeEventType, MouseEvent2} from './gridsterResizeEventType.interface';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterUtils} from './gridsterUtils.service';\n\n@Injectable()\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: number[];\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: (e: { clientX: number, clientY: number }) => void;\n  dragFunction: (event: MouseEvent) => void;\n  dragStopFunction: (event: MouseEvent2) => void;\n  resizeEnabled: boolean;\n  mousemove: () => void;\n  mouseup: () => void;\n  mouseleave: () => void;\n  cancelOnBlur: () => void;\n  touchmove: () => void;\n  touchend: () => void;\n  touchcancel: () => void;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  originalClientX: number;\n  originalClientY: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n  }\n\n  dragStart(e: MouseEvent2): void {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      } else {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      }\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      } else {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      }\n    }\n  }\n\n  dragMove(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n\n    const scale = this.gridster.options.scale || 1;\n    this.directionFunction({\n      clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n      clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n    });\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  handleN(e: MouseEvent): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: MouseEvent): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: MouseEvent): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: MouseEvent): void {\n    this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: MouseEvent): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: MouseEvent): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: MouseEvent): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: MouseEvent): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: MouseEvent | TouchEvent): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e as MouseEvent2);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e as MouseEvent2);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: MouseEvent): void {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - (e as MouseEvent).clientX) > 9\n        || Math.abs(eventMove.clientY - (e as MouseEvent).clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag(): void {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  templateUrl: './gridsterItem.html',\n  styleUrls: ['./gridsterItem.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: HTMLElement;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  @HostBinding('style.z-index')\n  get zIndex(): number {\n    return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n  }\n\n  constructor(@Inject(ElementRef) el: ElementRef, gridster: GridsterComponent, @Inject(Renderer2) public renderer: Renderer2,\n              @Inject(NgZone) private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit() {\n    this.gridster.addItem(this);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.item) {\n      this.updateOptions();\n\n      if (!this.init) {\n        this.gridster.calculateLayoutDebounce();\n      }\n    }\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      layerIndex: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    delete this.gridster;\n    this.drag.destroy();\n    delete this.drag;\n    this.resize.destroy();\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize(): void {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n    this.top = top;\n    this.left = left;\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n  bringToFront(offset: number): void {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    const topIndex = this.gridster.$options.maxLayerIndex;\n    if (layerIndex < topIndex) {\n      const targetIndex = offset ? layerIndex + offset : topIndex;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n    }\n  }\n\n  sendToBack(offset: number): void {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    if (layerIndex > 0) {\n      const targetIndex = offset ? layerIndex - offset : 0;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n    }\n  }\n\n  private getLayerIndex(): number {\n    if (this.item.layerIndex !== undefined) {\n      return this.item.layerIndex;\n    }\n    if (this.gridster.$options.defaultLayerIndex !== undefined) {\n      return this.gridster.$options.defaultLayerIndex;\n    }\n    return 0;\n  }\n\n}\n","import {Component, ElementRef, Inject, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styleUrls: ['./gridsterPreview.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: HTMLElement;\n  gridster: GridsterComponent;\n\n  constructor(@Inject(ElementRef)  el: ElementRef,  gridster: GridsterComponent, @Inject(Renderer2) public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    delete this.el;\n    delete this.gridster.previewStyle;\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent]\n})\nexport class GridsterModule {\n}\n"]}