{"version":3,"sources":["./projects/core/login/authentication-oauth.service.ts","./projects/core/app-utils/index.ts","./projects/core/app-utils/app-service-helpers.ts","./projects/core/base/index.ts","./projects/core/login/token.service.ts","./locale-data/complete.js (ignored)","./projects/core/load-component/module.providers.ts","./projects/core/web-services/principal.web.service.ts","./projects/core/validation/index.ts","./projects/core/web-services/suggest-field.web.service.ts","./projects/core/validation/validation-message.component.ts","./projects/core/base/keyboard.ts","./projects/core/web-services/http-client.ts","./projects/core/modal/messages/de.ts","./projects/hello-search/src/environments/environment.ts","./projects/core/load-component/load-component.module.ts","./projects/core/app-utils/module.providers.ts","./projects/core/modal/modal.module.ts","./projects/core/intl/intl.module.ts","./projects/core/login/authentication-popup.service.ts","./projects/core/web-services/similar-documents.web.service.ts","./projects/core/notification/notifications.interceptor.ts","./projects/core/modal/modal-ref.ts","./projects/core/notification/public-api.ts","./projects/core/login/login.interceptor.ts","./projects/core/modal/messages/en.ts","./projects/core/intl/index.ts","./projects/core/web-services/sponsored-links.web.service.ts","./projects/core/load-component/load-component.service.ts","./projects/core/intl/messages/fr.ts","./projects/core/base/iterator-adaptor.ts","./projects/core/web-services/web-services.module.ts","./projects/core/web-services/public-api.ts","./projects/core/app-utils/app-utils.module.ts","./projects/hello-search/src/main.ts","./projects/core/web-services/rfm.web.service.ts","./projects/core/validation/validation.directive.ts","./projects/core/validation/validation.module.ts","./projects/core/login/module.providers.ts","./projects/core/modal/confirm.component.ts","./projects/core/notification/notifications.service.ts","./projects/core/web-services/app.web.service.ts","./projects/core/login/authentication.service.ts","./projects/core/web-services/audit.web.service.ts","./projects/core/modal/public-api.ts","./projects/core/web-services/queryintent.service.ts","./projects/core/login/messages/en.ts","./projects/core/validation/validation.service.ts","./projects/core/validation/public-api.ts","./projects/core/web-services/module.providers.ts","./projects/core/web-services/download.web.service.ts","./projects/core/web-services/suggest-query.web.service.ts","./projects/core/login/component-with-login.component.ts","./projects/core/web-services/json-method-plugin.web.service.ts","./projects/core/validation/messages/en.ts","./projects/core/app-utils/public-api.ts","./projects/core/web-services/config/ccapp.ts","./node_modules/moment/locale sync ^\\.\\/.*$","./projects/core/base/polyfills.ts","./projects/core/messages/index.ts","./projects/core/web-services/query.web.service.ts","./projects/core/load-component/index.ts","./projects/core/modal/module.providers.ts","./projects/core/login/login.module.ts","./projects/core/base/base.module.ts","./projects/core/intl/module.providers.ts","./projects/core/web-services/index.ts","./projects/hello-search/$_lazy_route_resource lazy namespace object","./projects/core/login/index.ts","./projects/core/default-locales-config.ts","./projects/core/base/utils.ts","./projects/core/app-utils/app.service.ts","./projects/core/intl/messages/de.ts","./projects/core/login/messages/index.ts","./projects/core/intl/intl.service.ts","./projects/core/modal/messages/index.ts","./projects/core/web-services/recent-queries.web.service.ts","./projects/core/login/jwt.service.ts","./projects/core/login/login.component.ts","./projects/core/intl/message.pipe.ts","./projects/core/load-component/public-api.ts","./projects/core/web-services/user-ratings.web.service.ts","./projects/core/app-utils/query/expr-parser.ts","./projects/core/web-services/query-export.web.service.ts","./projects/core/validation/module.providers.ts","./projects/core/web-services/labels.web.service.ts","./projects/core/intl/messages/index.ts","./projects/core/modal/messages/fr.ts","./projects/core/modal/modal.service.ts","./projects/core/intl/import-moment.ts","./projects/hello-search/src/app/app.module.ts","./projects/core/web-services/user-settings.web.service.ts","./projects/core/public-api.ts","./projects/core/intl/abstract-intl.pipe.ts","./projects/core/app-utils/audit.interceptor.ts","./projects/hello-search/src/app/app.component.ts","./projects/hello-search/src/app/app.component.html","./projects/core/base/public-api.ts","./projects/core/validation/validation-error.pipe.ts","./projects/core/app-utils/format.service.ts","./projects/core/notification/module.providers.ts","./projects/core/app-utils/query/expr-builder.ts","./projects/core/base/item-array-view.ts","./projects/core/validation/messages/de.ts","./projects/core/modal/prompt.component.ts","./projects/core/login/messages/fr.ts","./projects/core/notification/notification.module.ts","./projects/core/login/public-api.ts","./projects/core/validation/messages/fr.ts","./projects/core/base/error.ts","./projects/core/validation/messages/index.ts","./projects/core/intl/public-api.ts","./projects/core/modal/index.ts","./projects/core/login/login.service.ts","./projects/core/web-services/start-config.web.service.ts","./projects/core/intl/messages/en.ts","./projects/core/app-utils/query/query.ts","./projects/core/web-services/dataset.web.service.ts","./projects/core/notification/index.ts","./projects/core/web-services/preview.web.service.ts","./projects/core/login/messages/de.ts","./projects/core/base/pattern-matcher.ts","./projects/core/load-component/load-component.directive.ts","./projects/core/web-services/http.service.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {OauthService, SharedService, PopupService, ConfigService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's state handling to retrieve a state from the Sinequa server\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationOauthService extends OauthService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient,\n        protected sharedService: SharedService,\n        protected popupService: PopupService,\n        protected configService: ConfigService) {\n        super(httpClient, sharedService, configService, popupService);\n    }\n\n    authenticate<T extends object | string>(name: string, userData: any): Observable<T> {\n        const options = this.configService.options.providers[name];\n        if (options.sqInitState) {\n            return this.httpClient.get<{state: string}>(Utils.addUrl(this.startConfig.apiPath!, \"oauth\"), {\n                params: Utils.makeHttpParams({\n                    action: \"initstate\",\n                    provider: options.name,\n                    tokenInCookie: true,\n                    loginInPopup: true,\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            }).pipe<T>(flatMap<{state: string}, Observable<T>>((ret) => {\n                options.state = ret.state;\n                return super.authenticate(name, userData);\n            }));\n        }\n        return super.authenticate(name, userData);\n    }\n}\n","export * from \"./public-api\";","import {CCColumn, EngineType, EngineTypeModifier} from \"@sinequa/core/web-services\";\n\n/**\n * @ignore\n *\n * Used internally to avoid circular references between ExprParser, AppService and FormatService.\n * Do not export from the app-utils module.\n */\nexport class AppServiceHelpers {\n    static isString(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.string) {\n            return true;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.x) === EngineTypeModifier.x) {\n            return true;\n        }\n        return false;\n    }\n\n    static isCsv(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.x) !== EngineTypeModifier.x) {\n            return true;\n        }\n        return false;\n    }\n\n    static isTree(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.t) === EngineTypeModifier.t) {\n            return true;\n        }\n        return false;\n    }\n\n    static isEntity(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & (EngineTypeModifier.e | EngineTypeModifier.l)) === (EngineTypeModifier.e | EngineTypeModifier.l)) {\n            return true;\n        }\n        return false;\n    }\n\n    static isBoolean(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.bool) {\n            return true;\n        }\n        return false;\n    }\n\n    static isDate(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.date || column.eType === EngineType.dateTime || column.eType === EngineType.time) {\n            return true;\n        }\n        return false;\n    }\n\n    static isDouble(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.double || column.eType === EngineType.float) {\n            return true;\n        }\n        return false;\n    }\n\n    static isInteger(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.integer || column.eType === EngineType.unsigned) {\n            return true;\n        }\n        return false;\n    }\n\n    static isNumber(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isInteger(column) || AppServiceHelpers.isDouble(column);\n    }\n\n    static isScalar(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isNumber(column) || AppServiceHelpers.isDate(column) || AppServiceHelpers.isBoolean(column);\n    }\n\n    static isSortable(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isString(column) || AppServiceHelpers.isScalar(column) ||\n            (AppServiceHelpers.isCsv(column) && !!column && ((column.eTypeModifier & EngineTypeModifier.l) === EngineTypeModifier.l));\n    }\n}\n","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n/**\n * A service to manage JWT and CSRF tokens. The methods of this service\n * can be called before the authentication process has completed\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class TokenService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Retrieve the CSRF token corresponding to the current JWT cookie\n     * which should accompany the request. This method is called by\n     * [AuthenticationService.autoAuthenticate]{@link AuthenticationService#autoAuthenticate}\n     *\n     * @param notify `true` if any errors should be notified using the {@NotificationService}\n     */\n    getCsrfToken(notify = false): Observable<string> {\n        return this.httpClient.get<{csrfToken: string}>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"getCsrfToken\",\n                suppressErrors: !notify,\n                noUserOverride: true,\n                noAutoAuthentication: true,\n                noNotify: !notify\n            })\n        }).pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n\n    /**\n     * Delete the current JWT cookie.\n     * This method is called by [AuthenticationService.logout]{@link AuthenticationService#logout}\n     */\n    deleteWebTokenCookie(): Observable<void> {\n        return this.httpClient.get<void>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"deleteWebTokenCookie\",\n                noUserOverride: true,\n                noAutoAuthentication: true\n            })\n        });\n    }\n}\n","/* (ignored) */","const LOAD_COMPONENT_MODULE_PROVIDERS = [];\n\nexport {LOAD_COMPONENT_MODULE_PROVIDERS};\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {pluck} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Describes a Sinequa princpal\n */\nexport interface Principal {\n    id: string;\n    id2: string;\n    id3: string;\n    id4: string;\n    id5: string;\n    name: string;\n    email: string;\n    description: string;\n    longName: string;\n    userId: string;\n    fullName: string;\n    isAdministrator: boolean;\n    isDelegatedAdmin: boolean;\n    param1: string;\n    param2: string;\n    param3: string;\n    param4: string;\n    param5: string;\n    param6: string;\n    param7: string;\n    param8: string;\n    param9: string;\n    param10: string;\n}\n\nexport interface PrincipalUserInfo {\n    id: string;\n    userId: string;\n    name: string;\n    fullName: string;\n    longName: string;\n    email: string;\n    isUser: string;\n    isGroup: string;\n}\n\nexport interface PrincipalParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    isUser?: boolean;   // true\n    isGroup?: boolean;  // true\n    search?: string;    // search by name, fullname or email\n\n}\n\nexport interface PrincipalUserIdsParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    userIds: string[];\n}\n\n/**\n * A base event from which all events that can be issued by the {@link PrincipalWebService} are derived\n */\nexport interface PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [principal]{@link PrincipalWebService#principal} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface PrincipalChangedEvent extends PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the principal web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PrincipalWebService extends HttpService implements OnDestroy {\n    private _principal: Principal | undefined;\n    private _events = new Subject<PrincipalChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<PrincipalChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link Principal}\n     */\n    get principal(): Principal | undefined {\n        return this._principal;\n    }\n\n    /**\n     * Sets the current {@link Principal} and issues the \"changed\" event\n     */\n    set principal(value: Principal | undefined) {\n        this._principal = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    /**\n     * Gets the list of user info (user or group)\n     *\n     * @param params query params to specify the search\n     * @returns list of user info\n     */\n    list(params?: PrincipalParams): Observable<(PrincipalUserInfo | undefined)[]> {\n        return this.httpClient.get<(PrincipalUserInfo | undefined)[]>(this.makeUrl(\"principal/list\"), {\n            params: this.makeParams({...params})\n        });\n    }\n\n    userId(userId: string): Observable<Partial<PrincipalUserInfo>> {\n        return this.httpClient.get<Partial<PrincipalUserInfo>>(this.makeUrl(`principal/userId/${userId}`));\n    }\n\n    userIds(params?: PrincipalUserIdsParams): Observable<Partial<PrincipalUserInfo[]>> {\n        return this.httpClient.post<Partial<PrincipalUserInfo>>(this.makeUrl(\"principal/userids\"), params).pipe(\n            pluck(\"principals\")\n        );\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials\n     *\n     * @param autoAuthenticate Determines whether the {@link HttpInterceptor} should perform HTTP 401 handling\n     * for this request\n     */\n    get(autoAuthenticate = true): Observable<Principal> {\n        return this.httpClient.get<Principal>(this.makeUrl(\"principal\"), {\n            params: this.makeParams({\n                action: \"get\",\n                noAutoAuthentication: !autoAuthenticate\n            })\n        });\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials and sets the\n     * principal member\n     */\n    load(): Observable<Principal> {\n        const observable = this.get();\n        Utils.subscribe(observable,\n            (response) => {\n                this.principal = response;\n                return response;\n            },\n            (error) => {\n                console.log(\"principalService.get failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Suggestion} from \"./suggest/suggestion\";\nimport {IQuery} from \"./query/query\";\n\n/**\n * A service for calling the suggestfield web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestFieldWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields and in the context of the passed query\n     *\n     * @param text The text to match\n     * @param fields The fields for which to return suggestions\n     * @param query The query context\n     */\n    get(text: string, fields: string | string[], query?: IQuery): Observable<Suggestion[]> {\n        if (!fields) {\n            return of([]);\n        }\n        else {\n            if (!Utils.isArray(fields)) {\n                fields = [fields];\n            }\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestfield\"), {\n                app: this.appName,\n                text: text,\n                fields: fields,\n                query: query\n            }).pipe(map((value) => {\n                value.suggests.forEach(value => value.display = Utils.toSqlValue(value.display)); // because dates get automatically converted by the interceptor\n                return value.suggests;\n            }));\n            return observable;\n        }\n    }\n}","import {Component, Input} from \"@angular/core\";\n\n/**\n * A default component to be used by the {@link ValidationDirective} directive to display\n * a validation error message using {@link MessagePipe}.\n */\n@Component({\n    selector: \"sq-validation-message\",\n    template: `\n        <div class=\"sq-validation-message\">{{text | sqMessage:{values: info} }}</div>\n    `\n})\nexport class ValidationMessageComponent {\n    /**\n     * The error message text passed to the `sqMessage` pipe.\n     */\n    @Input() text: string;\n    /**\n     * The entry for the validator in a `ValidationErrors` object. This is passed\n     * as the values to the `sqMessage` pipe.\n     */\n    @Input() info: any;\n}\n","/**\n * An enumeration of keyboard code values\n */\nexport enum Keys {\n    up = 38,\n    down = 40,\n    left = 37,\n    right = 39,\n    del = 46,\n    tab = 9,\n    enter = 13,\n    esc = 27,\n    comma = 188,\n    space = 32,\n    pageUp = 33,\n    pageDown = 34,\n    home = 36,\n    end = 35,\n    backspace = 8\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpRequest, HttpHandler} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {share, tap} from \"rxjs/operators\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A helper service that overrides the standard Angular [HttpClient]{@link https://angular.io/api/common/http/HttpClient}\n * to prevent multiple subscribers from causing multiple requests to be issued and to mitigate against request flooding\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SqHttpClient extends HttpClient {\n\n    private responseCache = new Map<string, Observable<any>>();\n\n    constructor(\n        httpHandler: HttpHandler) {\n        super(httpHandler);\n    }\n\n    private getRequestHash(first: string | HttpRequest<any>, url?: string, options = {}): string {\n        // The replacer ensures that object keys are always serialized in the same order\n        const strRequest = JSON.stringify([first, url, options],\n            (key: string, value: any) => {\n                if (Utils.isObject(value) && !Utils.isIterable(value)) {\n                    return Object.keys(value).sort().reduce(\n                        (s, k) => {\n                            s[k] = value[k];\n                            return s;\n                        }, {});\n                }\n                else {\n                    return value;\n                }\n            });\n        return Utils.sha256(strRequest);\n    }\n\n    /**\n     * Overrides the standard `HttpClient.request` method to change its behavior as follows:\n     * * pipes the observable to the share operator so that only a single request is issued even if there are multiple subscribers\n     * * to mitigate request flooding, a cache of pending response observables keyed by the request thumbprint is maintained.\n     * An observable from the cache is returned if the incoming request is identical to one in the cache\n     */\n    request(first: string | HttpRequest<any>, url?: string, options = {}): Observable<any> {\n        const requestHash = this.getRequestHash(first, url, options);\n        let observable = this.responseCache.get(requestHash);\n        if (!observable) {\n            observable = super.request(first as string, url as string, options)\n                .pipe(share())\n                .pipe(tap(() => this.responseCache.delete(requestHash)));\n            this.responseCache.set(requestHash, observable);\n        }\n        return observable;\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Abbrechen\",\n            \"yes\": \"Ja\",\n            \"no\": \"Nein\",\n            \"abort\": \"Abbrechen\",\n            \"retry\": \"Wiederholen\",\n            \"ignore\": \"Ignorieren\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Bestätigen\"\n        },\n        \"prompt\": {\n            \"title\": \"Geben Sie einen Wert ein\"\n        }\n    }\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n  };\n\n  /*\n   * For easier debugging in development mode, you can import the following file\n   * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n   *\n   * This import should be commented out in production mode because it will have a negative impact\n   * on performance if an error is thrown.\n   */\n  // import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {LoadComponentDirective} from \"./load-component.directive\";\nimport {LOAD_COMPONENT_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides functionality for the dynamic loading of components based on the\n * techniques described in the [angular documentation]{@link https://angular.io/guide/dynamic-component-loader}\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        LoadComponentDirective\n    ],\n    exports: [\n        LoadComponentDirective\n    ],\n    providers: [\n        ...LOAD_COMPONENT_MODULE_PROVIDERS\n    ]\n})\nexport class LoadComponentModule {\n}\n","const APP_UTILS_MODULE_PROVIDERS = [];\n\nexport {APP_UTILS_MODULE_PROVIDERS};\n","import {NgModule, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {MODAL_CONFIRM} from \"./modal.service\";\nimport {MODAL_PROMPT} from \"./modal.service\";\n\nimport {MODAL_MODULE_PROVIDERS} from \"./module.providers\";\n\nimport {Confirm} from \"./confirm.component\";\nimport {Prompt} from './prompt.component';\n\n/**\n * This module contains an implementation of a [modal dialog service]{@link ModalService} which can be extended\n * to support UI frameworks such as Bootstrap and Material Design. It uses the `Overlay` and `Portal` funcionality\n * provided by the [Angular CDK]{@link https://material.angular.io/cdk/categories} library.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        IntlModule,\n        ValidationModule,\n    ],\n    declarations: [\n        Confirm,    // Default confirm\n        Prompt\n    ],\n    exports: [\n    ],\n    providers: [\n        ...MODAL_MODULE_PROVIDERS\n    ]\n})\nexport class ModalModule {\n    static forRoot(confirmModal: Type<any> = Confirm, promptModal: Type<any> = Prompt): ModuleWithProviders<ModalModule> {\n        return {\n            ngModule: ModalModule,\n            providers: [\n                {provide: MODAL_CONFIRM, useValue: confirmModal},\n                {provide: MODAL_PROMPT, useValue: promptModal},\n            ]\n        };\n    }\n}\n","import {NgModule, APP_INITIALIZER, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {IntlService, LOCALES_CONFIG, LocalesConfig} from \"./intl.service\";\nimport {MessagePipe} from \"./message.pipe\";\nimport {INTL_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * An APP_INITIALIZER factory function for initialising the {@link IntlService} before any UI is displayed\n */\nexport function IntlInitializer(intlService: IntlService): () => Promise<string> {\n    const init = () => intlService.init().toPromise();\n    return init;\n}\n\n/**\n * This module contains core internationalization functionality for the formatting of numbers, dates and strings.\n * It is based on the industry standard\n * [Intl]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl} API\n * and an implementation of the ICU Message syntax provided by [FormatJS]{@link https://formatjs.io/}.\n *\n * The module provides mechanisms for the definition and loading of locales which can be extended with library specific\n * locale information. By default, locales contain support for `Moment.js` and `D3.js`.\n *\n * The module can be initialized by importing it using the `forRoot` static method or otherwise providing the\n * {@link LOCALES_CONFIG} injection token\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        MessagePipe\n    ],\n    exports: [\n        MessagePipe\n    ],\n    providers: [\n        {provide: APP_INITIALIZER, useFactory: IntlInitializer, deps: [IntlService], multi: true},\n        ...INTL_MODULE_PROVIDERS\n    ]\n})\nexport class IntlModule {\n    static forRoot(localeConfig: Type<LocalesConfig>): ModuleWithProviders<IntlModule> {\n        return {\n            ngModule: IntlModule,\n            providers: [\n                {provide: LOCALES_CONFIG, useClass: localeConfig},\n            ]\n        };\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {PopupService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's popup handling as it doesn't work with SAML + IE11 because\n * of a double redirection.\n * The initial request is to Sinequa which redirects to the authentication provider.\n * On successful authentication, the authentication provider redirects back\n * to Sinequa to perform the login.\n * In IE the initial redirection causes the popup window to be reported as \"closed\"\n * which breaks the process.\n * So, override ng2-ui-auth's PopupService and do the inital request to get the\n * redirect url outside of the popup\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationPopupService extends PopupService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient) {\n        super();\n    }\n\n    open(url: string, options: any/*IOauth2Options | IOauth1Options*/, cordova: boolean | undefined): Observable<Window> {\n        if (Utils.startsWith(url, this.startConfig.apiPath!)) {\n            return this.httpClient.get<{redirectUrl: string}>(url, {\n                params: Utils.makeHttpParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true,\n                    tokenInCookie: true,\n                    loginInPopup: true\n                })\n            }).pipe(flatMap((ret) => {\n                return super.open(ret.redirectUrl, options, cordova);\n            }));\n        }\n        return super.open(url, options, cordova);\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from \"./http.service\";\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { Record } from \"./query.web.service\";\n\n/**\n * A service for calling the similardocuments web service\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class SimilarDocumentsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets an array of documents (records) similar to the passed document\n     *\n     * @param sourceDocumentId The id of the document for which to retrieve similar documents\n     * @param queryName The name of the query\n     */\n    public get(sourceDocumentId: string, queryName: string): Observable<Record[]> {\n      return this.httpClient.post<{data: Record[]}>(this.makeUrl(\"similardocuments\"),\n        {\n          app: this.appName,\n          sourceDocumentId,\n          query: {\n            name: queryName\n          }\n        }).pipe(map((response) => response.data));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {NotificationsService, Notification, NotificationType} from \"./notifications.service\";\n\n/**\n * An `HttpInterceptor` to process notifications attached to the response body\n * in the `$notifications` member.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsInterceptor implements HttpInterceptor {\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        private notificationsService: NotificationsService) {\n    }\n\n    protected shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    protected processNotifications(notifications: Notification[] | undefined) {\n        if (Utils.isArray(notifications)) {\n            for (const notification of notifications) {\n                let  type = notification.type;\n                if (Utils.isUndefined(type)) {\n                    type = NotificationType.Info;\n                }\n                const text = notification.text;\n                if (text) {\n                    const params = notification.params;\n                    const title = notification.title;\n                    let autoClose = notification.autoClose;\n                    if (Utils.isUndefined(autoClose)) {\n                        autoClose = (type === NotificationType.Success) || (type === NotificationType.Info);\n                    }\n                    this.notificationsService.notify(type, text, params, title, autoClose);\n                }\n            }\n        }\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url)) {\n            return next.handle(request);\n        }\n        return next.handle(request).pipe(\n            tap(event => {\n                if (event instanceof HttpResponse) {\n                    if (request.responseType === \"json\" && Utils.isObject(event.body)) {\n                        this.processNotifications(event.body.$notifications);\n                    }\n                }\n            }));\n   }\n}\n","import {Type} from \"@angular/core\";\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subject, Observable, of} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ModalResult} from \"./modal.service\";\n\n/**\n * Describes the event raised by an {@link IModalRef} instance before a modal dialog is closed.\n */\nexport interface CheckCloseEvent {\n    /**\n     * The result passed to the [IModalRef.close]{@link IModalRef#close} method.\n     */\n    result: ModalResult;\n    /**\n     * A flag that can be set by the event receiver to indicate that the closing of the modal dialog\n     * should be cancelled.\n     */\n    cancelled?: Observable<boolean>;\n}\n\n/**\n * Describes the object returned by the [ModalService.openRef]{@link ModalService.openRef} method\n * to maintain a reference to the opened modal.\n */\nexport interface IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent>;\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult>;\n    /**\n     * A stream that emits after the referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult>;\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result: ModalResult);\n}\n\n/**\n * An implementation of the {@link IModalRef} interface.\n */\nexport class ModalRef implements IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A flag indicating whether the referenced modal has been submitted.\n     */\n    submitted: boolean;\n    private _checkClose = new Subject<CheckCloseEvent>();\n    private _beforeClosed = new Subject<ModalResult>();\n    private _afterClosed = new Subject<ModalResult>();\n    private formElement: HTMLFormElement | undefined;\n\n    constructor(private overlayRef: OverlayRef) {\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent> {\n        return this._checkClose.asObservable();\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * A stream that emits aftervthe referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result = ModalResult.Cancel) {\n        // Delay to allow submit handling\n        Utils.delay().then(() => {\n            const checkCloseEvent: CheckCloseEvent = { result };\n            this._checkClose.next(checkCloseEvent);\n            (checkCloseEvent.cancelled || of(false)).subscribe(\n                (cancelled) => {\n                    if (!cancelled) {\n                        this._checkClose.complete();\n                        this._beforeClosed.next(result);\n                        this._beforeClosed.complete();\n                        this.removeSubmitListener();\n                        this.overlayRef.detachBackdrop();\n                        this.overlayRef.dispose();\n                        this.componentInstance = undefined;\n                        this._afterClosed.next(result);\n                        this._afterClosed.complete();\n                    }\n                }\n            );\n        });\n    }\n\n    private submitListener = (event) => {\n        this.submitted = true;\n        event.preventDefault();\n        return false;\n    }\n\n    /**\n     * Disable the standard browser submit handling on any HTML form in the modal component.\n     */\n    disableSubmit() {\n        if (!this.formElement) {\n            const formElement = this.overlayRef.overlayElement.querySelector(\"form\");\n            if (formElement) {\n                this.formElement = formElement;\n                this.formElement.addEventListener(\"submit\", this.submitListener);\n            }\n        }\n    }\n\n    private removeSubmitListener() {\n        if (this.formElement) {\n            this.formElement.removeEventListener(\"submit\", this.submitListener);\n            this.formElement = undefined;\n        }\n    }\n}\n","export * from \"./notifications.service\";\nexport * from \"./notifications.interceptor\";\nexport * from \"./notification.module\";\n","import {Injectable, Inject, InjectionToken, Optional} from \"@angular/core\";\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpEvent, HttpErrorResponse, HttpParams, HttpResponse\n} from \"@angular/common/http\";\nimport {from, Observable, throwError} from \"rxjs\";\nimport {catchError, map, switchMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {LoginService} from \"./login.service\";\nimport {AuthenticationService} from \"./authentication.service\";\n\nexport type HttpRequestInitializer = (request: HttpRequest<any>) => boolean;\nexport const HTTP_REQUEST_INITIALIZERS = new InjectionToken<HttpRequestInitializer[]>(\"HTTP_REQUEST_INITIALIZERS\");\n\ntype Options = {noAutoAuthentication: boolean, noUserOverride: boolean, hadCredentials: boolean, userOverrideActive: boolean};\n\n/**\n * An `HttpInterceptor` to handle `HTTP 401 unauthorized` error responses by calling\n * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles\n * the `sinequa-jwt-refresh` header set when auto refreshing of JWT is configured in\n * the Sinequa administration console.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginInterceptor implements HttpInterceptor {\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        @Optional() @Inject(HTTP_REQUEST_INITIALIZERS) private requestInitializers: HttpRequestInitializer[],\n        private notificationsService: NotificationsService,\n        private loginService: LoginService,\n        private authService: AuthenticationService) {}\n\n    private processRequestInitializers(request: HttpRequest<any>) {\n        if (this.requestInitializers) {\n            for (const requestInitializer of this.requestInitializers) {\n                if (!requestInitializer(request)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private notifyError(error: any) {\n        let message;\n        const title = \"msg#error.serverError\";\n        if (error instanceof HttpErrorResponse) {\n            const response = error;\n            try {\n                let data = response.error;\n                if (Utils.isString(data)) {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (exception) {\n                    }\n                }\n                if (data && data.errorMessage) {\n                    message = data.errorMessage;\n                    if (data.errorCodeText) {\n                        message = `${message} (${data.errorCodeText})`;\n                    }\n                    else if (data.errorCode) {\n                        message = `${message} (${data.errorCode})`;\n                    }\n                }\n            }\n            catch (exception) {\n            }\n            if (!message) {\n                if (response.status === 200) {\n                    message = \"msg#error.responseLoadFailure\";\n                }\n                else if (response.statusText) {\n                    message = `${response.statusText} (${response.status})`;\n                }\n                else {\n                    message = `HTTP error: ${response.status}`;\n                }\n            }\n        }\n        else if (SqError.is(error)) {\n            message = error.message;\n        }\n        else {\n            message = (error + \"\") || \"msg#error.unknownError\";\n        }\n        this.notificationsService.error(message, undefined, title);\n    }\n\n    private getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        return this.loginService.getCredentials(response, acceptCurrent)\n            .catch((error) => {\n                if (SqError.is(error, SqErrorCode.processedCredentialsError)) {\n                    return this.getCredentials(response, acceptCurrent);\n                }\n                throw error;\n            });\n    }\n\n    /**\n     * Handles `HTTP 401 unauthorized errors responses by calling\n     * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles auto\n     * refreshing of JWT by processing the `sinequa-jwt-refresh` header. The JWT cookie itself\n     * is updated by a `Set-Cookie` header in the response. There are a number of flags that\n     * can be set in the request parameters which will be removed before the request is actually\n     * sent:\n     * * `noAutoAuthentication` - set to bypass the `HTTP 401` handling\n     * * `noUserOverride` - set to not add the current user override to the request\n     * * `noNotify` - set to not notify errors using the {@link NotificationService}\n     *\n     * @param request The intercepted request\n     * @param next The next interceptor in the chain\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url) || request.params.has(\"noIntercept\")) {\n            return next.handle(request);\n        }\n\n        let config = {headers: request.headers, params: request.params};\n\n        const options: Options = {\n            noAutoAuthentication: Utils.isTrue(config.params.get(\"noAutoAuthentication\")) || false,\n            noUserOverride: Utils.isTrue(config.params.get(\"noUserOverride\")) || false,\n            hadCredentials: this.authService.haveCredentials,\n            userOverrideActive: false\n        }\n\n        const noNotify = Utils.isTrue(config.params.get(\"noNotify\")) || false;\n\n        config.params = config.params.delete(\"noAutoAuthentication\");\n        config.params = config.params.delete(\"noUserOverride\");\n        config.params = config.params.delete(\"noNotify\");\n\n        config = this.authService.addAuthentication(config);\n\n        if (this.authService.userOverrideActive && !options.noUserOverride) {\n            options.userOverrideActive = true;\n            config.headers = this.authService.addUserOverride(config);\n        }\n\n        config.headers = config.headers.set(\"sinequa-force-camel-case\", \"true\");\n\n        if (this.isJsonable(request.body)) {\n            this.processRequestInitializers(request);\n        }\n\n        this.notificationsService.enter(\"network\");\n        \n        const _request = request.clone({\n            headers: config.headers,\n            params: config.params,\n            body: request.body,\n            withCredentials: true\n        });\n\n        return next.handle(_request).pipe(\n            catchError((error, caught) => {\n                this.notificationsService.leave(\"network\");\n                if (error instanceof HttpErrorResponse) {\n                    switch (error.status) {\n                        case 401: {\n                            return this.handle401Error(error, _request, next, options, caught);\n                        }\n                    }\n                }\n                if (!noNotify) {\n                    this.notifyError(error);\n                }\n                return throwError(error);\n            }),\n            map((event) => {\n                if (event instanceof HttpResponse) {\n                    this.notificationsService.leave(\"network\");\n                    this.authService.updateAuthentication(event);\n                }\n                return event;\n            })\n        );\n    }\n\n    private handle401Error(err: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler, options: Options, caught: Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\n        if (!options.noAutoAuthentication) {\n            if (options.userOverrideActive) {\n                if (this.authService.userOverrideActive) {\n                    this.authService.deactivateUserOverride();\n                    this.authService.userOverrideFailed = true;\n                    this.notificationsService.error(\"msg#error.userOverrideFailure\");\n                }\n                return throwError(err);\n            }\n\n            return from(this.getCredentials(err, !options.hadCredentials))\n                .pipe(\n                    switchMap(value => {\n                        const {headers} = this.authService.addAuthentication(req);\n                        return next.handle(req.clone({headers}));\n                    }),\n                    catchError(err => \n                        // in case of an Http error, 'caught' must be returned to be catched by the interceptor\n                        err instanceof HttpErrorResponse ? caught : throwError(err)\n                    ));\n        }\n\n        return throwError(err);\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Cancel\",\n            \"yes\": \"Yes\",\n            \"no\": \"No\",\n            \"abort\": \"Abort\",\n            \"retry\": \"Retry\",\n            \"ignore\": \"Ignore\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirm\"\n        },\n\n        \"prompt\": {\n            \"title\": \"Enter a value\"\n        }\n    }\n};\n","export * from \"./public-api\";\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport { IntlService } from \"@sinequa/core/intl\";\nimport {Utils} from \"@sinequa/core/base\";\n\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { IQuery } from './query/query';\n\n/**\n * Describes a single sponsored link\n */\nexport interface LinkResult {\n    id: string;\n    title: string;\n    url: string;\n    icon: string;\n    thumbnail: string;\n    tooltip: string;\n    summary: string;\n    rank: number;\n    relevance: number;\n}\n\n/**\n * Describes a set of sponsored links\n */\nexport interface LinksResults {\n    sql: string[];\n    links: LinkResult[];\n}\n\n/**\n * A service for calling the query.links web service.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SponsoredLinksWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Queries the server for sponsored links.\n     *\n     * @param query The query information.\n     * @param webService The web service configuration.\n     */\n    getLinks(query: IQuery, webService: string): Observable<LinksResults> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n\n        const url = this.makeUrl(\"query.links\");\n        const observable = this.httpClient.post<LinksResults>(url, {\n            app: this.appName,\n            webservice: webService,\n            query,\n            locale: this.intlService.currentLocale.name\n        });\n\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"SponsoredLinksService.getLinks success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"SponsoredLinksService.getLinks failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, ViewContainerRef, ComponentRef, Type, ComponentFactory, ComponentFactoryResolver, ApplicationRef,\n    Injector, SimpleChanges, SimpleChange, EventEmitter} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the options that can be passed to [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadComponentOptions {\n    /**\n     * The type of the component to load\n     */\n    component: Type<any>;\n    /**\n     * The initial values for the component's `@Input` decorated properties\n     */\n    inputs?: MapOf<any>;\n    /**\n     * The handlers for the component's `@Output` decorated events\n     */\n    outputs?: MapOf<any>;\n    /**\n     * The index at which to insert the loaded component's host view into the container.\n     * If not specified, appends the new view as the last entry.\n     * See [ViewContainerRef.createComponent]{@link https://angular.io/api/core/ViewContainerRef#createComponent}\n     */\n    index?: number;\n}\n\n/**\n * Describes the object returned by [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadedComponent {\n    /**\n     * The loaded component instance\n     */\n    componentRef: ComponentRef<any>;\n    /**\n     * The subscriptions made to the component's output events\n     */\n    subscriptions?: Subscription;\n}\n\n/**\n * This service provides methods to dynamically load and unload an angular component from its type.\n * The component's initial inputs and outputs are respected and the first call to the component's\n * `ngOnChanges` method is made.\n * Changes to the inputs and outputs can be made by calling {@link #bindComponent} which will call\n * the component's `ngOnChanges` method again\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoadComponentService {\n\n    // A cache of resolved component factories\n    private factories = new Map<Type<any>, ComponentFactory<any>>();\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private applicationRef: ApplicationRef) {\n    }\n\n    private _bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent, initialLoad: boolean) {\n        if (!initialLoad) {\n            this.unbindComponent(loadedComponent);\n        }\n        const ngOnChanges: (changes: SimpleChanges) => void = loadedComponent.componentRef.instance.ngOnChanges;\n        let simpleChanges: SimpleChanges | undefined;\n        const makeSimpleChanges = Utils.isFunction(ngOnChanges) && !!options.inputs;\n        if (!!options.inputs) {\n            // Assign inputs and generate SimpleChanges if required\n            Object.keys(options.inputs).forEach(name => {\n                if (makeSimpleChanges) {\n                    const previousValue = initialLoad ? undefined : loadedComponent.componentRef.instance[name];\n                    const currentValue = options.inputs![name];\n                    if (initialLoad || currentValue !== previousValue) {\n                        if (!simpleChanges) {\n                            simpleChanges = {};\n                        }\n                        simpleChanges[name] = new SimpleChange(previousValue, currentValue, initialLoad);\n                    }\n                }\n                loadedComponent.componentRef.instance[name] = options.inputs![name];\n            });\n        }\n        if (!!options.outputs) {\n            Object.keys(options.outputs).forEach(name => {\n                const eventEmitter: EventEmitter<any> = loadedComponent.componentRef.instance[name];\n                if (eventEmitter) {\n                    const subscription = eventEmitter.subscribe(options.outputs![name]);\n                    if (!loadedComponent.subscriptions) {\n                        loadedComponent.subscriptions = subscription;\n                    }\n                    else {\n                        loadedComponent.subscriptions.add(subscription);\n                    }\n                }\n            });\n        }\n        if (simpleChanges) {\n            ngOnChanges.call(loadedComponent.componentRef.instance, simpleChanges);\n        }\n    }\n\n    /**\n     * Bind a component's input and output properties according to the passed options. Generate a\n     * call to the component's `ngOnChanges` method if the inputs have changed since the last call.\n     * If the component has been previously bound it is first unbound by calling {@link #unbindComponent}\n     * which will unsubscribe the component's outputs\n     *\n     * @param options Specify the inputs and outputs for the component\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    public bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent) {\n        return this._bindComponent(options, loadedComponent, false);\n    }\n\n    /**\n     * Unbind a previously bound dynamically loaded component. Subscriptions to the component's\n     * outputs are unsubscribed\n     *\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    unbindComponent(loadedComponent: LoadedComponent) {\n        if (!!loadedComponent.subscriptions) {\n            loadedComponent.subscriptions.unsubscribe();\n            loadedComponent.subscriptions = undefined;\n        }\n    }\n\n    /**\n     * Dynamically load a component from its type. The component's inputs and outputs will be initialized\n     * by calling {@link #bindComponent}.\n     *\n     * @param options The options containing the component to load and its inputs and outputs\n     * @param viewContainerRef Specifies where the loaded component should be attached. If not specified then the\n     * loaded component is inserted before the application component\n     * @param injector Overrides the injector to use as the parent for the component. By default this will be\n     * the injector held on the `viewContainerRef`\n     */\n    loadComponent<T>(options: LoadComponentOptions, viewContainerRef?: ViewContainerRef, injector?: Injector): LoadedComponent {\n        let componentRef: ComponentRef<T>;\n        let factory = this.factories.get(options.component);\n        if (!factory) {\n            factory = this.componentFactoryResolver.resolveComponentFactory(options.component);\n        }\n        if (!viewContainerRef) {\n            const appElement: Element = this.applicationRef.components[0].location.nativeElement;\n            const injector1 = this.applicationRef.components[0].injector;\n            componentRef = factory.create(injector1, [[appElement]]);\n            this.applicationRef.attachView(componentRef.hostView);\n            if (appElement.parentElement) {\n                appElement.parentElement.insertBefore(componentRef.location.nativeElement, appElement.nextSibling);\n            }\n        }\n        else {\n            if (!injector) {\n                injector = viewContainerRef.injector;\n            }\n            const index = !Utils.isEmpty(options.index) ? options.index : undefined;\n            componentRef = viewContainerRef.createComponent(factory, index, injector, []);\n        }\n        const loadedComponent: LoadedComponent = {\n            componentRef\n        };\n        this._bindComponent(options, loadedComponent, true);\n        loadedComponent.componentRef.changeDetectorRef.detectChanges();\n        return loadedComponent;\n    }\n\n    /**\n     * Unload a dynamically loaded component. It is unbound prior to being destroyed\n     *\n     * @param component A loaded component\n     */\n    unloadComponent(component: LoadedComponent) {\n        if (!!component) {\n            this.unbindComponent(component);\n            component.componentRef.destroy();\n        }\n    }\n}\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date} à {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {vrai} other {faux}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \" : \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} o\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} Ko\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} Mo\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} Go\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} To\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} Po\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Erreur de serveur\",\n        \"loginCancelled\": \"Connexion annulée\",\n        \"processedCredentialsError\": \"Impossible d'obtenir les informations d'identification\",\n        \"autoLoginError\": \"Echec de la connexion\",\n        \"principalSwitched\": \"L'utilisateur connecté a été modifié\",\n        \"userOverrideFailure\": \"Echec de surchargement de l'utilisateur\",\n        \"responseLoadFailure\": \"Echec de chargement de la réponse\",\n        \"unknownError\": \"Erreur inconnue\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabe\",\n        \"da\": \"Danois\",\n        \"de\": \"Allemand\",\n        \"el\": \"Grec\",\n        \"en\": \"Anglais\",\n        \"es\": \"Espagnol\",\n        \"fi\": \"Finlandais\",\n        \"fr\": \"Français\",\n        \"it\": \"Italien\",\n        \"ja\": \"Japonais\",\n        \"ko\": \"Coréen\",\n        \"nl\": \"Néerlandais\",\n        \"no\": \"Norvégien\",\n        \"pl\": \"Polonais\",\n        \"pt\": \"Portugais\",\n        \"ro\": \"Roumain\",\n        \"ru\": \"Russe\",\n        \"sv\": \"Suédois\",\n        \"th\": \"Thaïlandais\",\n        \"zh\": \"Chinois traditionnel\",\n        \"zs\": \"Chinois simplifié\",\n        \"zz\": \"Inconnu\"\n    },\n};\n","export class IteratorAdaptor<T,B> implements IterableIterator<T> {\n    readonly return?: (value?: any) => IteratorResult<T>;\n    readonly throw?: (error?: any) => IteratorResult<T>;\n\n    constructor(private base: Iterator<B>, private adaptor: (b: B) => T) {\n        this.return = (base.return) ? (v) => this.translate(this.base.return!(v)) : undefined;\n        this.throw  = (base.throw)  ? (e) => this.translate(this.base.throw!(e))  : undefined;\n    }\n\n    static forIterable<B, T>(iterable: Iterable<B>, adaptor: (b: B) => T): IterableIterator<T> {\n        /*if (iterable === undefined) {\n            return undefined;\n        }*/\n\n        return new IteratorAdaptor<T,B>(\n            iterable[Symbol.iterator](),\n            adaptor\n        );\n    }\n\n    private translate(result: IteratorResult<B>): IteratorResult<T> {\n        if (result.done) {\n            return {\n                done: result.done,\n                value: (result.done && result.value === undefined) ? undefined : this.adaptor(result.value)\n            };\n        }\n        else {\n            return {\n                value: this.adaptor(result.value)\n            };\n        }\n    }\n\n    next(value?: any)  { return this.translate(this.base.next(value)); }\n\n    [Symbol.iterator](): IterableIterator<T> { return this; }\n}\n","import {HttpClientModule} from \"@angular/common/http\";\n\nimport {NgModule, ModuleWithProviders, APP_INITIALIZER} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\n// Intl is required by various web services\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\n// StartConfig\nimport {StartConfigWebService, START_CONFIG, StartConfig} from \"./start-config.web.service\";\n\nimport {WEB_SERVICES_MODULE_PROVIDERS} from \"./module.providers\";\n\n// Used to ensure that the StartConfigWebService is instantiated\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<void> {\n    const init = () => Promise.resolve();\n    return init;\n}\n\n/**\n * This module implements client services for the Sinequa web service APIs\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BaseModule,\n        IntlModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        // Ensure that the StartConfigWebService is instantiated so StartConfig is initialized\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n        ...WEB_SERVICES_MODULE_PROVIDERS\n    ]\n})\nexport class WebServicesModule {\n    /**\n     * Configures the module with a start configuration\n     *\n     * @param startConfig The start configuration object\n     *\n     * @returns The configured module\n     */\n    static forRoot(startConfig: StartConfig) : ModuleWithProviders<WebServicesModule> {\n        return {\n            ngModule: WebServicesModule,\n            providers: [\n                // Provide START_CONFIG\n                {provide: START_CONFIG, useValue: startConfig},\n            ]\n        };\n    }\n}","export * from \"./config/ccapp\";\n\nexport * from \"./query/query\";\nexport * from \"./suggest/suggestion\";\n\nexport * from \"./app.web.service\";\nexport * from \"./audit.web.service\";\nexport * from \"./dataset.web.service\";\nexport * from \"./download.web.service\";\nexport * from \"./http-client\";\nexport * from \"./http.service\";\nexport * from \"./json-method-plugin.web.service\";\nexport * from \"./labels.web.service\";\nexport * from \"./preview.web.service\";\nexport * from \"./principal.web.service\";\nexport * from \"./query-export.web.service\";\nexport * from \"./query.web.service\";\nexport * from \"./recent-queries.web.service\";\nexport * from \"./rfm.web.service\";\nexport * from \"./similar-documents.web.service\";\nexport * from './sponsored-links.web.service';\nexport * from \"./start-config.web.service\";\nexport * from \"./suggest-field.web.service\";\nexport * from \"./suggest-query.web.service\";\nexport * from \"./user-ratings.web.service\";\nexport * from \"./user-settings.web.service\";\nexport * from \"./queryintent.service\";\nexport * from \"./web-services.module\";\n","import {NgModule} from \"@angular/core\";\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {WebServicesModule} from \"@sinequa/core/web-services\";\n\nimport {APP_UTILS_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module contains a utility {@link AppService} for managing the configuration of a Sinequa SBA and a {@link FormatService}\n * for handling the formatting and parsing of Sinequa field values. It also contains an implementation of a {@link Query} class\n * as well as classes for manipulating Sinequa fielded search expressions.\n *\n * The {@link AuditInterceptor} in this module should be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        BaseModule,\n        IntlModule,\n        WebServicesModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        ...APP_UTILS_MODULE_PROVIDERS\n    ]\n})\nexport class AppUtilsModule {\n}\n","import \"hammerjs\";\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {preserveWhitespaces: true})\n    .catch(err => console.error(err));\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, EMPTY} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {Results, RFMData} from \"./query.web.service\";\n\n/**\n * A service for calling the search.rfm web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RfmWebService extends HttpService {\n    private static readonly endpoint = \"search.rfm\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get RFM data for a set of results\n     *\n     * @param rfm The name of the RFM\n     * @param results The results for which to retrieve RFM data\n     */\n    getRfmData(rfm: string, results: Results): Observable<MapOf<RFMData>> {\n        const ids: string[] = [];\n        for (const record of results.records) {\n            if (!!record.flags && record.flags.indexOf(\"r\") !== -1) {\n                ids.push(record.id);\n            }\n        }\n        if (ids.length === 0) {\n            return EMPTY;\n        }\n        const data = {\n            rfm,\n            queryHash: results.rfmQueryHash,\n            ids\n        };\n        const observable = this.httpClient.post<MapOf<RFMData>>(this.makeUrl(RfmWebService.endpoint), data);\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"rfmService.getRfmData failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Directive, Input, OnInit, DoCheck, InjectionToken, Type, Inject, ViewContainerRef} from \"@angular/core\";\nimport {FormGroup, AbstractControl} from \"@angular/forms\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {LoadComponentService, LoadedComponent} from \"@sinequa/core/load-component\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * Describes the options that can be passed to {@link ValidationDirective}.\n */\nexport interface ValidationOptions {\n    /**\n     * The `FormGroup` container.\n     */\n    form: FormGroup;\n    /**\n     * Identifies the control to validate. Defaults to the value of the `formControlName`\n     * attribute on the element to which the `ValidationDirective` is attached.\n     */\n    controlName?: string;\n    /**\n     * The class name to set on the element if validation passes. Defaults to `is-valid`.\n     */\n    validClass?: string;\n    /**\n     * The class name to set on the element if validation fails. Defaults to `is-invalid`.\n     */\n    invalidClass?: string;\n    /**\n     * The selector to identify children of the element to which to also apply the validity\n     * classes. Defaults to `.form-control`. Set to `null` to not select any children.\n     */\n    childSelector?: string;\n    /**\n     * Custom error messages to use for the validators. By default the messages defined in\n     * {@link ValidationService} are used.\n     */\n    errorMessages?: MapOf<string>;\n}\n\n/**\n * An injection token that can be provided to override the component loaded by {@link ValidationDirective}\n * to display validation error messages. The default component is {@link ValidationMessageComponent}.\n */\nexport const VALIDATION_MESSAGE_COMPONENT = new InjectionToken<Type<any>>(\"VALIDATION_MESSAGE_COMPONENT\");\n\n/**\n * A directive to automatically add validity classes to the element to which it is attached. In addition,\n * when the associated `FormControl` is invalid a component is dynamically loaded after the element to display\n * the validation message.\n * The component to load can be specified by providing the {@link VALIDATION_MESSAGE_COMPONENT} injection token.\n * By default, the {@link ValidationMessageComponent} component is used.\n */\n@Directive({\n    selector: \"[sqValidation]\"\n})\nexport class ValidationDirective implements OnInit, DoCheck {\n    @Input(\"sqValidation\") options: FormGroup | ValidationOptions;\n    private element: HTMLElement;\n    private form: FormGroup;\n    private control: AbstractControl;\n    private validClass?: string;\n    private invalidClass?: string;\n    private childSelector?: string;\n    private errorMessages?: MapOf<string>;\n    private validationMessage: LoadedComponent;\n    private active: boolean;\n    private valid: boolean;\n    private dirty: boolean;\n    private error?: string;\n    private errorInfo?: string;\n\n    constructor(\n        @Inject(VALIDATION_MESSAGE_COMPONENT) private validationMessageComponent: Type<any>,\n        private viewContainerRef: ViewContainerRef,\n        private loadComponentService: LoadComponentService,\n        private validationService: ValidationService) {\n        this.element = viewContainerRef.element.nativeElement;\n    }\n\n    ngOnInit() {\n        if (!this.options) {\n            console.log(\"Validation.ngOnInit - no options\");\n            return;\n        }\n        let controlName;\n        if (this.options instanceof FormGroup) {\n            this.form = this.options;\n        }\n        else {\n            this.form = this.options.form;\n            controlName = this.options.controlName;\n            this.validClass = this.options.validClass;\n            this.invalidClass = this.options.invalidClass;\n            this.childSelector = this.options.childSelector;\n            this.errorMessages = this.options.errorMessages;\n        }\n        if (!this.form) {\n            console.log(\"Validation.ngOnInit - no form model\");\n            return;\n        }\n        if (!this.form.controls) {\n            console.log(\"Validation.ngOnInit - no form controls\");\n            return;\n        }\n        if (controlName) {\n            this.control = this.form.controls[controlName];\n        }\n        else {\n            const formControlName = this.element.getAttribute(\"formControlName\");\n            if (formControlName) {\n                this.control = this.form.controls[formControlName];\n            }\n        }\n        if (!this.control) {\n            console.log(\"Validation.ngOnInit - no control\");\n            return;\n        }\n        if (!this.validClass) {\n            this.validClass = \"is-valid\";\n        }\n        if (!this.invalidClass) {\n            this.invalidClass = \"is-invalid\";\n        }\n        if (Utils.isUndefined(this.childSelector)) {\n            this.childSelector = \".form-control\";\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        this.active = true;\n        this.error = undefined;\n    }\n\n    private getFirstError(): string | undefined {\n        if (this.control.errors) {\n            return Object.keys(this.control.errors)[0];\n        }\n        return undefined;\n    }\n\n    private getErrorText(error?: string): string {\n        if (error && this.errorMessages && !!this.errorMessages[error]) {\n            return this.errorMessages[error];\n        }\n        return this.validationService.getErrorText(error);\n    }\n\n    private getErrorInfo(error?: string): any {\n        if (error && this.control.errors) {\n            return this.control.errors[error];\n        }\n        return undefined;\n    }\n\n    private setValidityClasses() {\n        const add = this.control.valid ? this.validClass : this.invalidClass;\n        const remove = this.control.valid ? this.invalidClass : this.validClass;\n        if (remove) {\n            this.element.classList.remove(remove);\n        }\n        if (add) {\n            this.element.classList.add(add);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (remove) {\n                    element.classList.remove(remove);\n                }\n                if (add) {\n                    element.classList.add(add);\n                }\n            });\n        }\n    }\n\n    private removeValidityClasses() {\n        if (this.validClass) {\n            this.element.classList.remove(this.validClass);\n        }\n        if (this.invalidClass) {\n            this.element.classList.remove(this.invalidClass);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (this.validClass) {\n                    element.classList.remove(this.validClass);\n                }\n                if (this.invalidClass) {\n                    element.classList.remove(this.invalidClass);\n                }\n            });\n        }\n    }\n\n    /**\n     * Update the validity classes on the element depending on the validity state of the\n     * associated `FormControl`. If the control is invalid then the validation message component\n     * is loaded to display an error message.\n     */\n    ngDoCheck() {\n        if (!this.active) {\n            return;\n        }\n        if (this.valid === this.control.valid && this.dirty === this.control.dirty) {\n            const firstError = this.getFirstError();\n            const errorInfo = this.getErrorInfo(firstError);\n            if (firstError === this.error && errorInfo === this.errorInfo) {\n                return;\n            }\n            this.error = firstError;\n            this.errorInfo = errorInfo;\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        if (this.control.dirty) {\n            this.setValidityClasses();\n            if (this.control.valid) {\n                if (this.validationMessage) {\n                    this.validationMessage.componentRef.instance.text = \"\";\n                }\n            }\n            else {\n                if (!this.validationMessage) {\n                    this.validationMessage =\n                        this.loadComponentService.loadComponent({component: this.validationMessageComponent}, this.viewContainerRef);\n                }\n                const error = this.getFirstError();\n                this.validationMessage.componentRef.instance.text = this.getErrorText(error);\n                this.validationMessage.componentRef.instance.info = this.getErrorInfo(error);\n            }\n        }\n        else {\n            this.removeValidityClasses();\n            if (this.validationMessage) {\n                this.validationMessage.componentRef.instance.text = \"\";\n            }\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {LoadComponentModule} from \"@sinequa/core/load-component\";\n\nimport {ValidationDirective, VALIDATION_MESSAGE_COMPONENT} from \"./validation.directive\";\nimport {ValidationErrorPipe} from \"./validation-error.pipe\";\nimport {ValidationMessageComponent} from \"./validation-message.component\";\n\nimport {VALIDATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module contains facilities for working with Angular's form validation. It provides a\n * {@link ValidationService} that works with {@link IntlService} and {@link FormatService} to\n * support locale-sensitive validators.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule,\n        AppUtilsModule,\n        IntlModule,\n        LoadComponentModule\n    ],\n    declarations: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    exports: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    providers: [\n        {provide: VALIDATION_MESSAGE_COMPONENT, useValue: ValidationMessageComponent},\n\n        ...VALIDATION_MODULE_PROVIDERS\n    ]\n})\nexport class ValidationModule {\n}\n","const LOGIN_MODULE_PROVIDERS = [];\n\nexport {LOGIN_MODULE_PROVIDERS};\n","import {Component, Inject} from \"@angular/core\";\nimport {MODAL_MODEL, ConfirmOptions, ModalButton} from \"./modal.service\";\nimport {ModalRef} from \"./modal-ref\";\n\n@Component({\n    selector: \"sq-core-confirm\",\n    template: `\n        <div style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <hr>\n            <ng-container *ngFor=\"let button of model.buttons\">\n                <button *ngIf=\"button.visible\" type=\"{{button.primary ? 'submit' : 'button'}}\"\n                    (click)=\"buttonClick(button)\">{{button.getText() | sqMessage}}</button>\n            </ng-container>\n        </div>\n    `\n})\nexport class Confirm {\n    constructor(\n        @Inject(MODAL_MODEL) public model: ConfirmOptions,\n        protected modalRef: ModalRef) {\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.confirm.title\";\n    }\n\n    buttonClick(button: ModalButton) {\n        button.click(this.modalRef);\n    }\n}\n","import {Injectable, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Notification types.\n */\nexport const enum NotificationType {\n    Success,\n    Info,\n    Warning,\n    Error,\n    Last = Error\n}\n\n/**\n * Notification visibility states.\n */\nexport const enum NotificationState {\n    Initial,\n    Showing,\n    Hidden\n}\n\n/**\n * Describes a notification object.\n */\nexport interface Notification {\n    /**\n     * The notification title.\n     */\n    title?: string;\n    /**\n     * The notification text.\n     */\n    text?: string;\n    /**\n     * Message parameters for the notification `text`.\n     */\n    params?: MapOf<any>;\n    /**\n     * Determines whether the notification should close automatically after a period.\n     * The duration is determined by a particular UI implementation.\n     */\n    autoClose?: boolean;\n    /**\n     * The notification type.\n     */\n    type?: NotificationType;\n    /**\n     * The nofification state.\n     */\n    state?: NotificationState;\n}\n\n/**\n * Describes a base notification event.\n */\nexport interface NotificationEvent {\n    /**\n     * The possible notification event types.\n     */\n    type: \"updated\" | \"data-updated\";\n}\n\n/**\n * Describes a notification \"updated\" event. This event is emitted\n * when one or more notifications are added, shown, hidden or deleted.\n */\nexport interface UpdatedEvent extends NotificationEvent {\n    type: \"updated\";\n}\n\n/**\n * Describes a data updated event. This event is emitted by the\n * [NotificationsService.set]{NotificationsService#set} method\n * is called.\n */\nexport interface DataUpdatedEvent extends NotificationEvent {\n    type: \"data-updated\";\n}\n\n/**\n * This service provides methods for managing notifications. No user interface\n * is imposed. It also manages a key-value data store. Events are emitted\n * when the notifications and data store are updated.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsService implements OnDestroy {\n    protected data: MapOf<any>;\n    /**\n     * The current notifications.\n     */\n    notifications: Notification[];\n    protected _events = new Subject<UpdatedEvent | DataUpdatedEvent>();\n    protected _notificationsStream = new Subject<Notification>();\n\n    constructor() {\n        this.data = {};\n        this.notifications = [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * Get the obervable stream of notification events.\n     */\n    get events(): Observable<UpdatedEvent | DataUpdatedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the observable stream of notifications. This will\n     * emit each time a notification is added. It will also emit\n     * `null` when notifications are deleted.\n     */\n    get notificationsStream(): Observable<Notification> {\n        return this._notificationsStream;\n    }\n\n    /**\n     * Set a value in the data store. The `data-updated` event\n     * is emitted.\n     *\n     * @param key The value's key.\n     * @param value The value.\n     */\n    set(key: string, value: any) {\n        this.data[key] = value;\n        this._events.next({type: \"data-updated\"});\n    }\n\n    /**\n     * Get a value from the data store.\n     *\n     * @param key The value's key.\n     */\n    get(key: string): any {\n        return this.data[key];\n    }\n\n    /**\n     * Increment a counter in the data store identified by the passed `key`.\n     * The intial value is 0.\n     *\n     * @param key The key for the counter.\n     */\n    enter(key: string) {\n        let value = this.data[key];\n        if (!value) {\n            value = 0;\n        }\n        value++;\n        this.set(key, value);\n    }\n\n    /**\n     * Decrement a counter in the data store identified by the passed `key`.\n     * Calls to `leave` should match calls to `enter`. If the counter becomes negative\n     * an \"underflow\" warning is emitted to the console and the counter set to 0.\n     *\n     * @param key The key for the counter.\n     */\n    leave(key: string) {\n        let value = this.data[key];\n        value--;\n        if (value < 0) {\n            console.warn(\"NotificationsService.leave underflow for:\", key);\n        }\n        if (!value || value < 0) {\n            value = 0;\n        }\n        this.set(key, value);\n    }\n\n    /**\n     * `true` if there are current notifications.\n     */\n    get haveNotifications(): boolean {\n        return this.notifications.length > 0;\n    }\n\n    /**\n     * `true` if the all current notifications are in the `Showing` state.\n     */\n    get allNotificationsShowing(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Showing) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * `true` if all current notifications are in the `Hidden` state.\n     */\n    get allNotificationsHidden(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Hidden) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the last added notification.\n     */\n    get lastNotification(): Notification | undefined {\n        if (this.notifications.length > 0) {\n            return this.notifications[this.notifications.length - 1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Add a notification. The `updated` event is emitted and the added notification\n     * is emitted on the notifications stream.\n     *\n     * @param type The notification type.\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     * @param autoClose A flag determining whether the notification should auto-close.\n     */\n    notify(type: NotificationType, text: string, params?: MapOf<any>, title?: string, autoClose?: boolean): Notification {\n        const notification: Notification = {\n            type,\n            text,\n            params,\n            title,\n            autoClose\n        };\n        // Replace the last notification if it is the same as the new one\n        const lastNotification = this.lastNotification;\n        if (lastNotification) {\n            notification.state = lastNotification.state;\n            if (Utils.equals(notification, lastNotification)) {\n                this.notifications.splice(this.notifications.length - 1, 1);\n            }\n        }\n        notification.state = NotificationState.Initial;\n        this.notifications.push(notification);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(notification);\n        return notification;\n    }\n\n    /**\n     * Add a `Success` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    success(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Success, text, params, title, true);\n    }\n\n    /**\n     * Add an `Info` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    info(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Info, text, params, title, true);\n    }\n\n    /**\n     * Add a `Warning` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    warning(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Warning, text, params, title, false);\n    }\n\n    /**\n     * Add an `Error` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    error(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Error, text, params, title, false);\n    }\n\n    /**\n     * Set the state of all notifications to `Showing`. The `updated` event is\n     * emitted.\n     */\n    showNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Showing;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Set the state of all notifications to `Hidden`. The `updated` event is\n     * emitted.\n     */\n    hideNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Hidden;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Delete all notifications. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream.\n     */\n    deleteAllNotifications() {\n        this.notifications.splice(0);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(undefined);\n    }\n\n    /**\n     * Delete the passed `notification`. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream if no notifications\n     * remain.\n     *\n     * @param notification The notification to delete.\n     */\n    deleteNotification(notification: Notification) {\n        for (let i = 0, ic = this.notifications.length; i < ic; i++) {\n            if (this.notifications[i] === notification) {\n                this.notifications.splice(i, 1);\n                this._events.next({type: \"updated\"});\n                if (this.notifications.length === 0) {\n                    this._notificationsStream.next(undefined);\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the passed `notification`. If the notification is in the\n     * `Initial` state then its state is set to `Hidden` otherwise the\n     * notification is deleted. The `updated` event is emitted.\n     *\n     * @param notification The notification to close.\n     */\n    closeNotification(notification: Notification) {\n        if (notification.state === NotificationState.Initial) {\n            notification.state = NotificationState.Hidden;\n            this._events.next({type: \"updated\"});\n        }\n        else {\n            this.deleteNotification(notification);\n        }\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {CCApp} from \"./config/ccapp\";\n\n/**\n * Defines the object returned by a call to [AppWebService.refresh]{@link AppWebService#refresh}. If the upToDate\n * member is false then the app member contains the latest version of the app configuration\n */\nexport interface CCAppRefresh {\n    upToDate: boolean;\n    app?: CCApp;\n}\n\n/**\n * This service provides methods to retrieve and refresh the configuration of an app\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppWebService extends HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig Provides the app name\n     * @param httpClient The HTTP client\n     */\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    /**\n     * Gets the app configuration for the app name\n     *\n     * @returns An observable of the app configuration\n     */\n    get(): Observable<CCApp> {\n        const observable = this.httpClient.get<CCApp>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\"\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                //console.log(\"appWebService.get success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.get failure - reason: \", error);\n                });\n        return observable;\n    }\n\n    /**\n     * Refreshes the app configuration based on a version identifier\n     *\n     * @param appVersionId The current app version id [CCApp.versionId]{@link CCApp#versionId}\n     * @param auditEvents Audit events to be recorded for this call\n     *\n     * @returns An observable of an object containing a flag indicating whether the configuration was up to date. If false\n     * then the app member of the object will be set to the new version of the configuration.\n     */\n    refresh(appVersionId: string, auditEvents?: AuditEvents): Observable<CCAppRefresh> {\n        const observable = this.httpClient.get<{upToDate: boolean, app: CCApp}>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\",\n                versionId: appVersionId,\n                $auditRecord: auditEvents\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                    //console.log(\"appWebService.refresh success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.refresh failure - reason: \", error);\n                });\n        return observable;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpHeaders, HttpParams, HttpResponse, HttpErrorResponse} from \"@angular/common/http\";\nimport {Observable, timer, of, throwError} from \"rxjs\";\nimport {share, flatMap, map, catchError} from \"rxjs/operators\";\nimport {AuthService} from \"ng2-ui-auth\";\nimport {HttpService, START_CONFIG, StartConfig, AuditWebService} from \"@sinequa/core/web-services\";\nimport {Utils, IRef, MapOf} from \"@sinequa/core/base\";\nimport {SqHttpClient} from \"@sinequa/core/web-services\";\nimport {TokenService} from \"./token.service\";\nimport {JWTService} from \"./jwt.service\";\n\ninterface Authentication {\n    csrfToken: string;\n    headers?: MapOf<string>;    // set in http headers\n    params?: MapOf<string>;     // added to query string\n}\n\n/**\n * Describes the credentials that a user would enter manually to authenticate\n */\nexport interface Credentials {\n    userName?: string;\n    password?: string;\n}\n\nconst LEGACY_PROCESSED_CREDENTIALS_KIND = 0;\n\n/**\n * Describes the object created after successful authentication. The form of this object\n * is designed to maintain compatibility with previous SBA libraries\n */\nexport interface ProcessedCredentials {\n    /**\n     * An unused \"kind\" value - always set to 0\n     */\n    kind: number;\n    /**\n     * The user name of the authenticated user\n     */\n    userName?: string;\n    /**\n     * Additional data containing the associated CSRF token that is sent with\n     * authenticated web service requests and the provider for informational\n     * purposes only. The provider will be `Sinequa` for form-based authentication\n     * and the name of the auto-login provider in the Sinequa configuration for\n     * OAuth and SAML authentication\n     */\n    data: {\n        csrfToken: string, // the web token itself is stored in the sinequa-web-token cookie\n        provider: string\n    };\n}\n\n/**\n * Describes the object used by an administrator to authenticate as another user\n */\nexport interface UserOverride {\n    /**\n     * The user name of the user to authenticate as\n     */\n    userName: string;\n    /**\n     * The Sinequa domain name containing the user\n     */\n    domain: string;\n}\n\n/**\n * Describes a JWT object\n */\nexport interface JsonWebToken {\n    header: {\n        typ: string,\n        alg: string\n    };\n    payload: {\n        iss: string,\n        iat: string,\n        exp: string,\n        sub: string,\n        hash: string\n    };\n    signature: string;\n}\n\n/**\n * A service to authenticate a user with a Sinequa server. Authentication can be automatic (OAuth/SAML), if configured in the\n * Sinequa administration, or manual where the user name and password are entered in a modal dialog box and transmitted in\n * clear text. There is also support for the ng2-ui-auth library where the authentication process occurs in a browser popup window.\n * Successful authentication results in a JWT stored in cookie along with a CSRF token which is stored in storage so it can\n * be picked up in other browser tabs.\n *\n * The service also holds information on the status of the \"override user\" administrator function\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationService extends HttpService {\n    private authentication: Authentication | undefined;\n    private storage: Storage;\n    /**\n     * A flag indicating whether an attempt to \"override user\" has failed. This is normally\n     * only set by the {@link HttpInterceptor} and tested and reset in {@link LoginService}\n     */\n    userOverrideFailed: boolean;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private tokenService: TokenService,\n        private auditService: AuditWebService,\n        private jWTService: JWTService,\n        private authService: AuthService) {\n        super(startConfig);\n        this.init();\n    }\n\n    private _userOverride: UserOverride | undefined;\n    /**\n     * Get the currrent user override, if any\n     */\n    get userOverride(): UserOverride | undefined {\n        return this._userOverride;\n    }\n\n    /**\n     * Set/unset the user override. The {@link #userOverrideActive} flag\n     * is set accordingly\n     */\n    set userOverride(value: UserOverride | undefined) {\n        this._userOverride = value;\n        if (this._userOverride) {\n            this._userOverrideActive = !!this._userOverride.userName && !!this._userOverride.domain;\n        }\n        else {\n            this._userOverrideActive = false;\n        }\n    }\n\n    private _userOverrideActive: boolean;\n\n    /**\n     * A flag indicating whether the current user override is active\n     */\n    get userOverrideActive(): boolean {\n        return this._userOverrideActive;\n    }\n\n    private _processedCredentials: ProcessedCredentials | undefined;\n    private _processedCredentialsStr: string | undefined;\n\n    /**\n     * Get the current processed credentials\n     */\n    get processedCredentials(): ProcessedCredentials | undefined {\n        return this._processedCredentials;\n    }\n\n    /**\n     * Set the current processed credentials. A stringified version\n     * is stored in either local or session storage\n     */\n    set processedCredentials(value: ProcessedCredentials | undefined) {\n        this._processedCredentials = value;\n        if (value) {\n            const newProcessedCredentialsStr = Utils.toJson(this._processedCredentials);\n            if (this._processedCredentialsStr !== newProcessedCredentialsStr) {\n                this._processedCredentialsStr = newProcessedCredentialsStr;\n                this.storage.setItem(\"sinequa-credentials\", this._processedCredentialsStr);\n            }\n        }\n        else {\n            if (this._processedCredentialsStr) {\n                this._processedCredentialsStr = undefined;\n                this.storage.removeItem(\"sinequa-credentials\");\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if an OAuth or SAML auto provider is configured\n     */\n    get autoLoginActive(): boolean {\n        return !!this.startConfig.autoOAuthProvider || !!this.startConfig.autoSAMLProvider;\n    }\n\n    /**\n     * Deactivate the current user override\n     */\n    deactivateUserOverride() {\n        this._userOverrideActive = false;\n    }\n\n    private loadCredentials() {\n        const sinequaCredentials = this.storage.getItem(\"sinequa-credentials\");\n        this._processedCredentialsStr = sinequaCredentials ? sinequaCredentials : undefined;\n        this._processedCredentials = this._processedCredentialsStr ? Utils.fromJson(this._processedCredentialsStr) : null;\n    }\n\n    private saveCredentials(value: ProcessedCredentials) {\n        this.processedCredentials = value;\n    }\n\n    private init() {\n        if (this.startConfig.authenticationStorage === \"local\") {\n            this.storage = window.localStorage;\n        }\n        else {\n            this.storage = window.sessionStorage;\n        }\n        this.loadCredentials();\n        window.addEventListener('storage', (event: StorageEvent) => {\n            if (event.storageArea === this.storage) {\n                if (!event.key) { // clear\n                    this.processedCredentials = undefined;\n                }\n                else if (event.key === \"sinequa-credentials\") {\n                    if (event.newValue !== this._processedCredentialsStr) {\n                        this.loadCredentials();\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Return `true` if `processedCredentials` exists\n     */\n    get haveCredentials(): boolean {\n        return !!this.processedCredentials;\n    }\n\n    /**\n     * Add the current authentication information to the passed `HttpHeaders` and `HttpParams`.\n     * Currently, this adds the `sinequa-csrf-token` value to the HTTP headers. Called from\n     * {@link HttpInterceptor}\n     *\n     * @param config HttpHeaders and HttpParams to be updated\n     *\n     * @returns new configuration\n     */\n    addAuthentication(config: {headers: HttpHeaders, params: HttpParams}): {headers: HttpHeaders, params: HttpParams} {\n        this.doAuthentication();\n        if (this.authentication) {\n            if (this.authentication.headers) {\n                for (const header in this.authentication.headers) {\n                    if (this.authentication.headers.hasOwnProperty(header)) {\n                        config.headers = config.headers.set(header, this.authentication.headers[header]);\n                    }\n                }\n            }\n            if (this.authentication.params) {\n                for (const param in this.authentication.params) {\n                    if (this.authentication.params.hasOwnProperty(param)) {\n                        config.params = config.params.set(param, this.authentication.params[param]);\n                    }\n                }\n            }\n        }\n        return config;\n    }\n\n    /**\n     * Update the current authentication information with information in the passed `response`.\n     * This processes the `sinequa-jwt-refresh` header which will contain an updated CSRF token\n     * to correspond to the new JWT cookie. Called from {@link HttpInterceptor}\n     *\n     * @param response An `HttpResponse`\n     */\n    updateAuthentication(response: HttpResponse<any>) {\n        const csrfToken = response.headers.get(\"sinequa-jwt-refresh\");\n        if (csrfToken) {\n            if (this.processedCredentials) {\n                if (this.processedCredentials.data.csrfToken !== csrfToken) {\n                    this.processedCredentials.data.csrfToken = csrfToken;\n                    this.saveCredentials(this.processedCredentials);\n                }\n            }\n            else {\n                this.setCsrfToken(csrfToken);\n            }\n        }\n    }\n\n    private refreshAuthentication() {\n        if (this.processedCredentials) {\n            if (!this.authentication) {\n                this.authentication = {\n                    csrfToken: this.processedCredentials.data.csrfToken\n                };\n            }\n            else {\n                this.authentication.csrfToken = this.processedCredentials.data.csrfToken;\n            }\n        }\n        else {\n            this.authentication = undefined;\n        }\n    }\n\n    private doAuthentication() {\n        this.refreshAuthentication();\n        if (this.authentication && this.authentication.csrfToken) {\n            this.authentication.headers = {\n                \"sinequa-csrf-token\": this.authentication.csrfToken\n            };\n        }\n    }\n\n    private getAuthenticateHeader(regex: RegExp, authenticationHeaders: string[], header: IRef<string>): boolean {\n        if (authenticationHeaders) {\n            for (let i = 0, ic = authenticationHeaders.length; i < ic; i++) {\n                const authenticationHeader = authenticationHeaders[i];\n                const matches = regex.exec(authenticationHeader);\n                if (matches && matches.length > 0) {\n                    const prefix = matches[0];\n                    header.value = authenticationHeader.slice(prefix.length);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Authenticate with the Sinequa server using the passed credentials. The credentials are sent\n     * in clear text. Prior to the authentication the passed `response` is checked for a\n     * `WWW-Authenticate: Bearer` header.\n     *\n     * @param credentials The credentials to authenticate with\n     * @param response The error response the reception of which initiated the call to this method\n     */\n    authenticate(\n        credentials: Credentials,\n        response: HttpErrorResponse): Promise<ProcessedCredentials | undefined> {\n        const wwwAuthenticate = response.headers.get(\"WWW-Authenticate\");\n        if (!wwwAuthenticate) {\n            console.error(\"Missing WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        const authenticateHeaders = wwwAuthenticate.split(\", \");\n        const header: IRef<string> = {value: \"\"};\n        if (!this.getAuthenticateHeader(/^Bearer ?/, authenticateHeaders, header)) {\n            console.error(\"Unexpected WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        return this.jWTService.getToken(credentials).toPromise()\n            .then((value) => {\n                return {\n                    kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                    userName: credentials.userName,\n                    data: {\n                        csrfToken: value,\n                        provider: \"Sinequa\"\n                    }\n                };\n            });\n    }\n\n    /**\n     * Remove all current authentication data. The JWT cookie\n     * is removed\n     */\n    logout() {\n        this.auditService.notifyLogout().subscribe(\n            _ => {\n                this.tokenService.deleteWebTokenCookie().subscribe()\n                this.authentication = undefined;\n                this.processedCredentials = undefined;\n            }\n        );\n    }\n\n    /**\n     * Add the current user override information to the passed headers.\n     *\n     * @param config An object containing the `HttpHeaders` to update\n     */\n    addUserOverride(config: {headers: HttpHeaders}): HttpHeaders {\n        if (this.userOverride && this.userOverrideActive) {\n            config.headers = config.headers.set(\"sinequa-override-user\", this.userOverride.userName);\n            config.headers = config.headers.set(\"sinequa-override-domain\", this.userOverride.domain);\n        }\n\n        return config.headers;\n    }\n\n    /**\n     * Initiate authentication using the ng2-ui-auth library. The authentication process will be performed\n     * in a browser popup window\n     *\n     * @param provider The name of the provider to use. This is the name configured in the Sinequa administration\n     * console\n     */\n    authenticateWithProvider(provider: string): Observable<any> {\n        // AuthService.authenticate opens a popup. On some platforms (Firefox) this is asynchronous\n        // so we add a delay (timer(0)) so the caller can create a promise from the returned observable\n        // without yielding\n        const observable = timer(0).pipe(flatMap((value) => {\n            const observable1 = this.authService.authenticate(provider, true).pipe(share());\n            Utils.subscribe(observable1,\n                (response) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    if (response) {\n                        this.processedCredentials = {\n                            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                            data: {\n                                csrfToken: response.csrfToken,\n                                provider\n                            }\n                        };\n                    }\n                });\n            return observable1;\n        }));\n        return observable;\n    }\n\n    private setCsrfToken(csrfToken: string, provider = \"Sinequa\"): boolean {\n        if (!csrfToken) {\n            return false;\n        }\n        this.processedCredentials = {\n            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n            data: {\n                csrfToken,\n                provider\n            }\n        };\n        return true;\n    }\n\n    private initiateAutoAuthentication(): boolean {\n        if (!this.startConfig.usePopupForLogin && this.autoLoginActive) {\n            let observable: Observable<{redirectUrl: string}>;\n            if (this.startConfig.autoOAuthProvider) {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.oauth\"),\n                    {\n                        action: \"getcode\",\n                        provider: this.startConfig.autoOAuthProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            else {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.saml\"),\n                    {\n                        action: \"getresponse\",\n                        provider: this.startConfig.autoSAMLProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href,\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            observable.subscribe(\n                (response) => {\n                    window.location.replace(response.redirectUrl);\n                }\n            );\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Initiate the auto-authentication process if an automatic OAuth or SAML provider is configured.\n     * The {@LoginService} calls this method at startup. First, an attempt is made to retrieve a CSRF token.\n     * If that works, then the token is set and authentication is complete. Otherwise, the initial OAuth or SAML\n     * call is made to the Sinequa server. The `redirectUrl` in the response to this call is then used to redirect\n     * the browser to continue the normal OAuth/SAML autentication flow. A successful authentiction will culminate\n     * in the SBA being loaded a second time, this method being called again and the attempt to retrieve a CSRF\n     * token succeeding because a valid JWT cookie will now be present.\n     *\n     * A CSRF token is always requested to allow automatic login if a valid web token cookie has previously been\n     * written via, for example, a login to the admin console.\n     *\n     * @returns An Observable of a boolean value which if `true` indicates that auto-authentication has been initiated.\n     */\n    autoAuthenticate(): Observable<boolean> {\n        return this.tokenService.getCsrfToken().pipe(\n            map((csrfToken) => {\n                // Token can be empty as getCsrfToken suppresses application errors (no cookie or cookie invalid)\n                // (We do this to avoid having errors in the console for normal situations.)\n                if (csrfToken) {\n                    this.setCsrfToken(csrfToken);\n                    return false;\n                }\n                else {\n                    this.initiateAutoAuthentication();\n                    return true;\n                }\n            }),\n            catchError((error) => {\n                // We should rarely have an error now as getCsrfToken\n                // suppresses the application-level ones\n                if (this.initiateAutoAuthentication()) {\n                    return throwError(error);\n                }\n                // Swallow the error and continue with non-auto login process\n                return of(false);\n            }));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\nimport {Results, Record} from \"./query.web.service\";\nimport {LinkResult} from \"./sponsored-links.web.service\";\n\n/**\n * Describes a single audit event\n */\nexport interface AuditEvent {\n    type: AuditEventType | string; // allow custom event types\n    detail?: JsonObject;\n    rfmDetail?: JsonObject;\n}\n\n/**\n * Contains an array of {@link AuditEvent} objects and an array of ML audit event records\n */\nexport interface AuditRecord {\n    auditEvents?: AuditEvent[];\n    mlAuditEvents?: any[];\n}\n\n/**\n * A composite type describing a set of AuditEvents\n */\nexport type AuditEvents = AuditEvent | AuditEvent[] | AuditRecord;\n\n/**\n * The standard audit event types\n */\nexport const enum AuditEventType {\n    // Should be in par with AuditEventType enum from AuditManager.cs\n    None = \"None\",\n\n    // WebApp event types\n    Search_FirstPage = \"Search_FirstPage\",\n    Search_Text = \"Search_Text\",\n    Search_Refine = \"Search_Refine\",\n    Search_Select_Item = \"Search_Select_Item\",\n    Search_Select_Custom = \"Search_Select_Custom\",\n    Search_Select_Concept = \"Search_Select_Concept\",\n    Search_Select_Correction = \"Search_Select_Correction\",\n    Search_GotoPage = \"Search_GotoPage\",\n    Search_GotoTab = \"Search_GotoTab\",\n    Search_DisplayResult = \"Search_DisplayResult\",\n    Search_RemoveResult = \"Search_RemoveResult\",\n    Search_RemoveAdvanced = \"Search_RemoveAdvanced\",\n    Search_SavedQuery = \"Search_SavedQuery\",\n    Search_WebService = \"Search_WebService\",\n    Search_DidYouMean_Original = \"Search_DidYouMean_Original\",\n    Search_DidYouMean_Correction = \"Search_DidYouMean_Correction\",\n    Search_ExportCSV = \"Search_ExportCSV\",\n    Search_SavedQuery_ExportCSV = \"Search_SavedQuery_ExportCSV\",\n    Search_Selection_ExportCSV = \"Search_Selection_ExportCSV\",\n    Search_AlertQuery = \"Search_AlertQuery\",\n    Search_Select_AnalyticsItem = \"Search_Select_AnalyticsItem\",\n    Search_Sort = \"Search_Sort\",\n    Search_Exit_Logout = \"Search_Exit_Logout\",\n    Search_Timeline_Usage = \"Search_Timeline_Usage\",\n    Search_AutoComplete = \"Search_Autocomplete\",\n\n    SavedQuery_Add = \"SavedQuery_Add\",\n    SavedQuery_Delete = \"SavedQuery_Delete\",\n    SavedQuery_DeleteAll = \"SavedQuery_DeleteAll\",\n    SavedQuery_Rename = \"SavedQuery_Rename\",\n\n    Alert_Edit = \"Alert_Edit\",\n    Alert_Delete = \"Alert_Delete\",\n    Alert_DeleteAll = \"Alert_DeleteAll\",\n\n    Link_Display = \"Link_Display\",\n    Link_Click = \"Link_Click\",\n\n    Basket_Add = \"Basket_Add\",\n    Basket_Delete = \"Basket_Delete\",\n    Basket_DeleteAll = \"Basket_DeleteAll\",\n    Basket_Rename = \"Basket_Rename\",\n    Basket_AddDoc = \"Basket_AddDoc\",\n    Basket_RemoveDoc = \"Basket_RemoveDoc\",\n    Basket_Open = \"Basket_Open\",\n    Basket_ExportCSV = \"Basket_ExportCSV\",\n\n    Label_Add = \"Label_Add\",\n    Label_Delete = \"Label_Delete\",\n    Label_Rename = \"Label_Rename\",\n    Label_Open = \"Label_Open\",\n    Label_AddDoc = \"Label_AddDoc\",\n    Label_RemoveDoc = \"Label_RemoveDoc\",\n    Label_ExportCSV = \"Label_ExportCSV\",\n    Label_Menu_ExportCSV = \"Label_Menu_ExportCSV\",\n\n    Rating_Set = \"Rating_Set\",\n    Rating_Delete = \"Rating_Delete\",\n\n    Doc_Preview = \"Doc_Preview\",\n    Doc_CacheHtml = \"Doc_CacheHtml\",\n    Doc_CachePdf = \"Doc_CachePdf\",\n    Doc_CacheOriginal = \"Doc_CacheOriginal\",\n    Doc_Url1 = \"Doc_Url1\",\n    Doc_Url2 = \"Doc_Url2\",\n\n    Click_ResultLink = \"Click_ResultLink\",\n    Click_ResultLink1 = \"Click_ResultLink1\",\n    Click_ResultLink2 = \"Click_ResultLink2\",\n    Click_ResultLink3 = \"Click_ResultLink3\",\n    Click_ResultLink4 = \"Click_ResultLink4\",\n    Click_ResultLink5 = \"Click_ResultLink5\",\n    Click_ResultLink6 = \"Click_ResultLink6\",\n    Click_ResultLink7 = \"Click_ResultLink7\",\n    Click_ResultLink8 = \"Click_ResultLink8\",\n    Click_ResultLink9 = \"Click_ResultLink9\",\n    Click_ResultLink10 = \"Click_ResultLink10\",\n    Click_PreviewLink1 = \"Click_PreviewLink1\",\n    Click_PreviewLink2 = \"Click_PreviewLink2\",\n    Click_PreviewLink3 = \"Click_PreviewLink3\",\n    Click_PreviewLink4 = \"Click_PreviewLink4\",\n    Click_PreviewLink5 = \"Click_PreviewLink5\",\n    Click_PreviewLink6 = \"Click_PreviewLink6\",\n    Click_PreviewLink7 = \"Click_PreviewLink7\",\n    Click_PreviewLink8 = \"Click_PreviewLink8\",\n    Click_PreviewLink9 = \"Click_PreviewLink9\",\n    Click_PreviewLink10 = \"Click_PreviewLink10\",\n\n    RFM_ClickSet = \"RFM_ClickSet\",\n    RFM_ClickReset = \"RFM_ClickReset\",\n    RFM_Like = \"RFM_Like\",\n    RFM_LikeReset = \"RFM_LikeReset\",\n    RFM_Dislike = \"RFM_Dislike\",\n    RFM_Important = \"RFM_Important\",\n    RFM_ImportantReset = \"RFM_ImportantReset\",\n    RFM_Ban = \"RFM_Ban\"\n}\n\n/**\n * A service to notify the audit manager on the Sinequa server of client-side events\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditWebService extends HttpService {\n    private static readonly endpoint = \"audit.notify\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        protected httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Notify the Sinequa server of a sponsored link event\n     *\n     * @param evt The audit event type\n     * @param sl The sponsored link\n     * @param resultId The id of the results that showed the sponsored link\n     * @param parameters Additional information\n     */\n    notifySponsoredLink(\n        evt: AuditEventType, sl: LinkResult, resultId: string,\n        parameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const detail: JsonObject = {\n            \"link-id\": sl.id,\n            rank: sl.rank || 0,\n            title: sl.title,\n            url: sl.url,\n            \"result-id\": resultId\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param doc The document (record) in question\n     * @param resultsOrId The results or resultid that contain the document\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocument(\n        evt: AuditEventType, doc: Record, resultsOrId: Results | string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        let resultId: string | null;\n        let results: Results | undefined;\n        if (Utils.isString(resultsOrId)) {\n            resultId = resultsOrId;\n        }\n        else {\n            results = resultsOrId;\n            resultId = results ? results.id : null;\n        }\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": doc.id,\n            rank: doc.rank,\n            title: doc.title,\n            source: Utils.treeFirstNode(doc.collection[0]),\n            collection: doc.collection[0],\n            \"result-id\": resultId,\n            filename: doc.filename,\n            fileext: doc.fileext,\n            index: doc.databasealias\n        };\n        if (results) {\n            detail[\"result-count\"] = results.totalRowCount;\n        }\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param id The id of the document (record) in question\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocumentById(\n        evt: AuditEventType, id: string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const collection = id.substr(0, id.indexOf(\"|\"));\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": id,\n            rank: -1,\n            source: Utils.treeFirstNode(collection),\n            collection\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify logout\n     */\n    notifyLogout() : Observable<void> {\n        const detail: JsonObject = {\n            app: this.appName,\n        };\n\n        const data: AuditEvent = {\n            type: AuditEventType.Search_Exit_Logout,\n            detail\n        };\n\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a set of audit events\n     *\n     * @param auditEvents The audit events\n     */\n    notify(auditEvents: AuditEvents): Observable<void> {\n        if (!this.startConfig.auditEnabled) {\n            return of(undefined);\n        }\n        const observable = this.httpClient.post<void>(this.makeUrl(AuditWebService.endpoint), {\n            event: AuditEventType.None,\n            app: this.appName,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"auditService.notify failure - error: \", error);\n            });\n        return observable;\n    }\n}","export * from \"./confirm.component\";\nexport * from \"./prompt.component\";\nexport * from \"./modal.module\";\nexport * from \"./modal.service\";\nexport * from \"./modal-ref\";\nexport * from \"./messages/index\";","import {Injectable, Inject} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {SqHttpClient} from \"./http-client\";\r\nimport {HttpService} from \"./http.service\";\r\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\r\nimport {IQuery} from \"./query/query\";\r\n\r\nexport interface QueryIntentResponse {\r\n    query: string;\r\n    intents: QueryIntentMatch[];\r\n}\r\n\r\nexport interface QueryIntentMatch {\r\n    /** name of the intent */\r\n    name: string;\r\n    /** global entities that match */\r\n    globalEntities?: QueryIntentEntity2[];\r\n    /** rule that match if exact match rule */\r\n    matchRule: string | null;\r\n    /** ml score or 1 if rule */\r\n    score: number;\r\n    /** ml confidence score or 1 if rule */\r\n    confidence: number;\r\n}\r\n\r\nexport interface QueryIntentEntity2 {\r\n    /** global entity name, eg. \"person\" */\r\n    name: string;\r\n    /** global entity type (entities are detected by classical NLP, slots are detected by ML) */\r\n    type: \"entity\" | \"slot\";\r\n    /** global entity resource */\r\n    resource: string;\r\n    /** text that match the global entity, eg. \"Bill gates\" */\r\n    value: string;\r\n    /** offset in the query */\r\n    offset: number;\r\n    /** length in the query */\r\n    length: number;\r\n    /** basic form if type=entity, eg. \"BILL GATES\"*/\r\n    basic: string | null;\r\n    /** normalization form if type=entity, eg. \"William H Gates\"*/\r\n    normalization: string | null;\r\n    /** score for the extraction if type=slot */\r\n    score?: number;\r\n}\r\n\r\n/**\r\n * A service for calling the queryintent web service\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class QueryIntentWebService extends HttpService {\r\n    private readonly endpoint = \"queryintent\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        private httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    getQueryIntent(query: IQuery): Observable<QueryIntentResponse> {\r\n        const data = {\r\n            query,\r\n            app: this.appName\r\n        };\r\n        return this.httpClient.post<QueryIntentResponse>(\r\n            this.makeUrl(this.endpoint), data);\r\n    }\r\n}\r\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Login\",\n            \"userName\": \"User name\",\n            \"password\": \"Password\",\n            \"singleSignOn\": \"Single sign-on\",\n            \"signInWith\": \"Sign in with...\"\n        }\n    }\n};\n","import {Injectable} from \"@angular/core\";\nimport {Validators, ValidatorFn, AbstractControl, ValidationErrors} from \"@angular/forms\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * @ignore\n */\nfunction isEmptyInputValue(value: any): boolean {\n    // we don't check for string here so it also works with arrays\n    return value === null || value === undefined || value.length === 0;\n}\n\nconst processInputValue = (value: any) => { // add support for object values of the advanced search\n  if (Utils.isArray(value)) {\n    return value.map(\n      (val) => {\n        if (Utils.isObject(val) && val.hasOwnProperty(\"value\")) {\n          return val.value;\n        }\n        return val;\n      }\n    )\n  } else {\n    if (Utils.isObject(value) && value.hasOwnProperty(\"value\")) {\n      return [value.value];\n    }\n    return [value];\n  }\n}\n\n// Email regular expression, taken from built-in Angular validators.\n/**\n * @ignore\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n\n/**\n * Enumerates the supported validator types.\n */\nexport enum ValidatorType {\n    Min = \"Min\",\n    Max = \"Max\",\n    Required = \"Required\",\n    Email = \"Email\",\n    Pattern = \"Pattern\",\n    Integer = \"Integer\",\n    Number = \"Number\",\n    Date = \"Date\",\n    Range = \"Range\",\n}\n\n/**\n * Describes a `Validator` object.\n */\nexport interface Validator {\n    /**\n     * The validator's type.\n     */\n    type: ValidatorType;\n    /**\n     * The validator's name.\n     */\n    name: string;\n    /**\n     * The validator's error message to be displayed when a value is invalid.\n     */\n    errorMessage: string;\n    /**\n     * `true` if the validator is to be applied.\n     */\n    active: boolean;\n}\n\n/**\n * Defines the default error messages for each validator.\n */\nconst errorMessagesMap = {\n    // Built-in Angular validators\n    min: \"msg#validation.min\",\n    max: \"msg#validation.max\",\n    required: \"msg#validation.required\",\n    requiredTrue: \"msg#validation.requiredTrue\",\n    email: \"msg#validation.email\",\n    minlength: \"msg#validation.minLength\",\n    maxlength: \"msg#validation.maxLength\",\n    pattern: \"msg#validation.pattern\",\n\n    // Custom\n    unique: \"msg#validation.unique\",\n    integer: \"msg#validation.integer\",\n    number: \"msg#validation.number\",\n    date: \"msg#validation.date\",\n    range: \"msg#validation.range\"\n};\n\n\n/**\n * This service provides a set of locale-sensitive validators with support for arrays.\n * The validator error messages are {@link IntlService} `msg#` messages of the form:\n * `msg#validation.<validator name>`.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ValidationService {\n    constructor(\n        protected formatService: FormatService,\n        protected intlService: IntlService) {\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.pattern` with support for value arrays.\n     *\n     * @param pattern The pattern.\n     * @returns The validation function.\n     */\n    static patternValidator(pattern: string | RegExp): ValidatorFn {\n        // #region This code region is based on Validators.pattern()\n        if (!pattern) {\n            return Validators.nullValidator;\n        }\n\n        let regex: RegExp;\n        let regexStr: string;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n\n            if (pattern.charAt(0) !== '^') {\n                regexStr += '^';\n            }\n\n            regexStr += pattern;\n\n            if (pattern.charAt(pattern.length - 1) !== '$') {\n                regexStr += '$';\n            }\n\n            regex = new RegExp(regexStr);\n        } else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        // #endregion\n\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!regex.test(value)) {\n                    return {pattern: {requiredPattern: pattern.toString(), actualValue: value}};\n                }\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.email` with support for value arrays.\n     *\n     * @param control The control to validate.\n     * @returns The result.\n     */\n    static emailValidation(control: AbstractControl): ValidationErrors | null {\n        if (isEmptyInputValue(control.value)) {\n            return null;  // don't validate empty values to allow optional controls\n        }\n\n        let values: any[] = [];\n        values = processInputValue(control.value);\n\n        for (const value of values) {\n            if (!EMAIL_REGEXP.test(value)) {\n                return {email: true};\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the name of the first validator in a map of validation errors.\n     * @param errors The validation errors\n     * @returns The name of the first validator, if any - `undefined` otherwise.\n     */\n    getFirstError(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            return Object.keys(errors)[0];\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the error message associated with the passed validator.\n     * @param name The name of a validator.\n     * @returns The error message.\n     */\n    getErrorText(name?: string): string {\n        const text = name ? errorMessagesMap[name] : undefined;\n        if (!text) {\n            return \"Unknown validator: \" + name;\n        }\n        return text;\n    }\n\n    /**\n     * Get the error message associated with first validator in a map of validation errors.\n     * @param errors The validation errors.\n     * @returns The error message.\n     */\n    getFirstErrorText(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return this.getErrorText(error);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the data held for the first error in a map of validation errors\n     * @param errors The validation errors.\n     */\n    getFirstErrorInfo(errors: ValidationErrors): any {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return errors[error];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get a validator function that validates that values are greater than or equal\n     * to the passed `min` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param min The minimum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    minValidator(min: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(min)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - min;\n                        }\n                    }\n                    else if (Utils.isString(min)) {\n                        cmp = Utils.compare(value1, min);\n                    }\n                    else if (Utils.isDate(min)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - min.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - min.getTime();\n                        }\n                    }\n                    if (cmp < 0) {\n                        return {min: {min, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are less than or equal\n     * to the passed `max` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param max The maximum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    maxValidator(max: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(max)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - max;\n                        }\n                    }\n                    else if (Utils.isString(max)) {\n                        cmp = Utils.compare(value1, max);\n                    }\n                    else if (Utils.isDate(max)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - max.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - max.getTime();\n                        }\n                    }\n                    if (cmp > 0) {\n                        return {max: {max, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are integers. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    integerValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testInteger(value1)) {\n                        return {integer: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are numeric. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    numberValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testFloat(value1)) {\n                        return {number: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are dates. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed. Dates will be parsed according\n     * to the current locale.\n     *\n     * @param parser An optional parser name.\n     */\n    dateValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    if (Utils.isString(value)) {\n                        let value1 = value;\n                        if (parser) {\n                            value1 = this.formatService.parseValue(value1, parser);\n                        }\n                        if (!this.intlService.parseDate(value1)) {\n                            return {date: {value}};\n                        }\n                    }\n                    else if (Utils.isDate(value)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                        if (isNaN(value.getTime())) {\n                            return {date: {value}};\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that, for pair of values, the second value is\n     * greater than the first. If one or both values are empty then the validation passes.\n     * The validator function supports single values and arrays of values and will optionally\n     * parse the values using the {@link FormatService} if a parser is passed. Dates will be\n     * parsed according to the current locale.\n     *\n     * @param type A value whose type indicates how the range test will be made.\n     * @param parser An optional parser name.\n     */\n    rangeValidator(type: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || !Utils.isArray(control.value) || control.value.length !== 2) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let value1 = control.value[0];\n            let value2 = control.value[1];\n            if (isEmptyInputValue(value1) || isEmptyInputValue(value2)) {\n                return null;\n            }\n            if (parser) {\n                value1 = this.formatService.parseValue(value1, parser);\n                value2 = this.formatService.parseValue(value2, parser);\n            }\n            let cmp = 0;\n            if (Utils.isString(type)) {\n                cmp = Utils.compare(value2, value1);\n            }\n            else if (Utils.isDate(type)) {\n                let date1: Date | undefined;\n                let date2: Date | undefined;\n                if (Utils.isString(value1)) {\n                    date1 = this.intlService.parseDate(value1);\n                }\n                else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date1 = value1;\n                }\n                if (Utils.isString(value2)) {\n                    date2 = this.intlService.parseDate(value2);\n                }\n                else if (Utils.isDate(value2)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date2 = value2;\n                }\n                if (date1 && date2) {\n                    cmp = date2.getTime() - date1.getTime();\n                }\n            }\n            else if (Utils.isNumber(type)) {\n                if (Utils.testFloat(value1) && Utils.testFloat(value2)) {\n                    const num1 = Utils.toNumber(value1);\n                    const num2 = Utils.toNumber(value2);\n                    if (num1 !== null && num2 !== null) {\n                        cmp = num2 - num1;\n                    }\n                }\n            }\n            return cmp < 0 ? {range: {value1, value2}} : null;\n        };\n    }\n}\n","export * from \"./validation.directive\";\nexport * from \"./validation-error.pipe\";\nexport * from \"./validation-message.component\";\nexport * from \"./validation.module\";\nexport * from \"./validation.service\";\nexport * from \"./messages/index\";\n","const WEB_SERVICES_MODULE_PROVIDERS = [];\n\nexport {WEB_SERVICES_MODULE_PROVIDERS};\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Utils } from \"@sinequa/core/base\";\n\n/**\n * A service to manage navigator downloads\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DownloadWebService {\n\n    /**\n     * Subscribes to the given observable to trigger a download action on the navigator\n     * when the observed object is ready.\n     *\n     * @param observable The observable to subscribe.\n     * @returns The observable for chaining.\n     */\n    public download(observable: Observable<HttpResponse<Blob>>): Observable<HttpResponse<Blob>> {\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                const header = response.headers.get('content-disposition');\n                const fileName = header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n\n                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                    // For IE\n                    window.navigator.msSaveOrOpenBlob(response.body, fileName);\n                } else {\n                    const link = document.createElement('a');\n                    document.body.appendChild(link);\n                    const blobUrl = window.URL.createObjectURL(response.body);\n                    link.href = blobUrl;\n                    link.download = fileName;\n                    link.click();\n                    link.remove();\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n\n                return response;\n            }\n        );\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Suggestion} from \"./suggest/suggestion\";\n\n/**\n * A service for calling the suggestquery web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestQueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields using the passed suggestquery web service\n     *\n     * @param suggestQuery The name of the suggestquery web service to use\n     * @param text The text to match\n     * @param query The name of the current query\n     * @param fields The fields for which to return suggestions\n     */\n    get(suggestQuery: string, text: string, query: string, fields?: string | string[]): Observable<Suggestion[]> {\n        if (!suggestQuery) {\n            return of([]);\n        }\n        else {\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestquery\"), {\n                app: this.appName,\n                suggestQuery: suggestQuery,\n                text: text,\n                query: query,\n                kinds: fields\n            });\n            return observable.pipe(map(value => value.suggests));\n        }\n    }\n}","import {Component, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {LoginService} from \"./login.service\";\n\n/**\n * A utility base class to assist main components in the handling of the login state of the\n * the application. It initiates the login process and sets `loginComplete` accordingly\n * whenever the login state changes\n */\n@Component({\n    template: ''\n})\nexport class ComponentWithLogin implements OnInit, OnDestroy, AfterViewInit {\n    protected loginSubscription: Subscription;\n    /**\n     * `true` if the application is currently logged in successfully\n     */\n    loginComplete: boolean;\n\n    constructor(\n        protected loginService: LoginService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    /**\n     * A method called whenever the `session-changed` event is received. This can be\n     * overridden by the subclassing component.\n     */\n    onLoginComplete() {\n    }\n\n    /**\n     * Subscribes to the [LoginService.events]{@link LoginService#events} and sets\n     * the `loginComplete` member whenever the `session-changed` event is received\n     */\n    ngOnInit() {\n        this.loginComplete = this.loginService.complete;\n        this.loginSubscription = this.loginService.events.subscribe(event => {\n            if (event.type === \"session-changed\") {\n                this.loginComplete = this.loginService.complete;\n                this.onLoginComplete();\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.loginSubscription.unsubscribe();\n    }\n\n    /**\n     * Initiates the login process by calling [LoginService.login]{@link LoginService#login}\n     */\n    ngAfterViewInit() {\n        this.loginService.login();\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A generic service for invoking JsonMethod plugins\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class JsonMethodPluginService extends HttpService{\n  constructor(\n    public httpClient: SqHttpClient,\n    @Inject(START_CONFIG) startConfig: StartConfig\n    ) {\n      super(startConfig);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  post(method: string, query: any, options?: {[key: string]: any}) : Observable<any> {\n    if (!Utils.isObject(query)) {\n      return throwError({error: \"invalid query object\"});\n    }\n    const observable = this.httpClient.post(this.makeUrl(method), query, options);\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.post success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.post failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.post complete\");\n      });\n\n    return observable;\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  call(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    return this.post(method, query, options);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP GET\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  get(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    const observable = this.httpClient.get(this.makeUrl(method), {\n      params: this.makeParams(query),\n      ...options\n    });\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.get success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.get failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.get complete\");\n      });\n\n    return observable;\n  }\n\n  makeUrl(api: string): string {\n    return super.makeUrl('plugin/' + api);\n  }\n}","export default {\n    \"validation\": {\n        \"min\": \"The value must be at least {min}\",\n        \"max\": \"The value can be no more than {max}\",\n        \"required\": \"This field is required\",\n        \"requiredTrue\": \"This field must be set\",\n        \"email\": \"A valid email address is required\",\n        \"minLength\": \"The value must have at least {requiredLength, plural, one {# character} other {# characters}}\",\n        \"maxLength\": \"The value can have no more than {requiredLength, plural, one {# character} other {# characters}}\",\n        \"pattern\": \"The value is invalid\",\n        \"unique\": \"This field must be unique\",\n        \"integer\": \"The value must be an integer\",\n        \"number\": \"The value must be a number\",\n        \"date\": \"\",\n        \"range\": \"The first value must be less than or equal to the second\"\n    }\n};\n","export * from \"./query/expr-parser\";\nexport * from \"./query/expr-builder\";\nexport * from \"./query/query\";\n\nexport * from \"./app.service\";\nexport * from \"./format.service\";\nexport * from \"./audit.interceptor\";\nexport * from \"./app-utils.module\";","import {MapOf, JsonObject, PatternMatcher} from \"@sinequa/core/base\";\n\n/**\n * Describes the fields available in all configuration objects. By convention, configuration object\n * interfaces are prefixed by `CC`.\n */\nexport interface CCConfig {\n    /**\n     * The name of the configuration object\n     */\n    name: string;\n    /**\n     * An optional description of the configuration object\n     */\n    description?: string;\n}\n\n/**\n * Describes the fields available in all web service configuration objects\n */\nexport interface CCWebService extends CCConfig {\n    webServiceType: \"Query\" | \"sponsoredlinks\" | \"queryexport\" | \"Preview\" | \"Labels\" | \"Autocomplete\" | \"DataSet\";\n}\n\n/**\n * Describes the fields available in the index configuration object\n */\nexport interface CCIndex extends CCConfig {\n    /**\n     * The type of the index\n     */\n    indexType: string;\n    /**\n     * The columns in the index\n     */\n    columns?: MapOf<CCColumn>;\n}\n\n/**\n * Describes the fields available in a list item configuration object\n */\nexport interface CCListItem {\n    /**\n     * The name is used to display an item\n     */\n    name: string;\n    /**\n     * The value holds the underlying value of the item\n     */\n    value: string;\n}\n\n/**\n * Describes a list configuration object. Lists can be created in `App Dependencies/Lists` in the admin interface.\n */\nexport interface CCList extends CCConfig {\n    /**\n     * The name of the list\n     */\n    name: string;\n    /**\n     * The items in the list\n     */\n    items: CCListItem[];\n}\n\n/**\n * Describes an RFM action configuration object\n */\nexport interface CCRFMAction {\n    name: string;\n    enabled: boolean;\n    actionEnabled: boolean;\n    noMenu: boolean;\n    displayUnrated: boolean;\n    negAvailable: boolean;\n}\n\n/**\n * Describes an RFM configuration object\n */\nexport interface CCRFM {\n    name: string;\n    click: CCRFMAction;\n    like: CCRFMAction;\n    important: CCRFMAction;\n}\n\n/**\n * Describes an aggregation configuration object\n */\nexport interface CCAggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The underlying column in the aggregation\n     */\n    column: string;\n    /**\n     * Determines whether this aggregation should be included in a regular search\n     */\n    includeInStandardSearch: boolean;\n    /**\n     * The maximum number of values to retrieve\n     */\n    count: number;\n    /**\n     * The value of the `order` clause\n     */\n    order: string;\n    /**\n     * The value of the `mask` clause\n     */\n    mask: string;\n    /**\n     * The name of an associated distribution configuration object\n     */\n    distribution: string;\n    /**\n     * Determines whether the aggregation is requested in the context of the currently selected tab or globally.\n     * The default is to respect the [CCTabSearch.loadAggregationsForSelectedTab]{@link CCTabSearch#loadAggregationsForSelectedTab} setting\n     */\n    tabBehavior: \"\" | \"Default\" | \"LoadForSelectedTab\" | \"LoadForAllTabs\";\n    /**\n     * The separator used for crossed aggregations\n     */\n    keySeparator: string;\n    /**\n     * The display separator used for crossed aggregations\n     */\n    displayKeySeparator: string;\n}\n\n/**\n * Describes the fields for a tab configuration object\n */\nexport interface CCTab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The values in the tab distribution that contribute to this tab\n     */\n    value: string;\n    /**\n     * Set if this tab is the default to be used when no tab is specified in a query\n     */\n    isDefault: boolean;\n    /**\n     * Indexes to exclude when executing a query with this tab selected\n     */\n    excludedIndices: string;\n    /**\n     * Aggregations to exclude when executing a query with this tab selected\n     */\n    excludedAggregations: string;\n    /**\n     * Results sorting options that should be available when executing a query with this tab selected\n     */\n    sortingChoices: CCSortingChoice[];\n}\n\n/**\n * Describes the fields for the tab search configuration in a query. A tab search defines a special distribution which is evaluated\n * as a part of query to group the results by a set of tab items. The distribution gives the count of documents\n * associated with each tab item. The values associated with a tab item are used to filter a query when a tab item is selected.\n */\nexport interface CCTabSearch {\n    /**\n     * Determines whether this tab search is used in a query\n     */\n    isActive: boolean;\n    /**\n     * Defines the column to be used in the tab distribution and for filtering results by a selected tab item\n     */\n    column: string;\n    /**\n     * `true` if the associated column is a tree\n     */\n    columnIsTree: boolean;\n    /**\n     * Determines whether the overall document total should be calculated from the per-tab item documents totals\n     */\n    totalIsSumOfTabTotals: boolean;\n    /**\n     * Determines whether configured aggregations should be evaluated in the context of the selected tab or not.\n     * This setting can be overridden at the tab item level using [CCTab.excludedAggregations]{@link CCTab#excludedAggregations}\n     */\n    loadAggregationsForSelectedTab: boolean;\n    /**\n     * Determines the `minlevel` value to use when evaluating the tab distribution for a tree column\n     */\n    valueLevels: number;\n    /**\n     * Determines whether `post-group-by=true` should be used in the tab distribution\n     */\n    postGroupBy: boolean;\n    /**\n     * Determines whether 'merge-groups=true` should be used in the tab distribution. This is only used if `postGroupBy` is set to `true`\n     */\n    mergeGroups: boolean;\n    /**\n     * The set of configured tab items\n     */\n    tabs: CCTab[];\n}\n\n/**\n * Describes a sorting choice which can be selected for a query\n */\nexport interface CCSortingChoice {\n    /**\n     * The name of this sorting choice\n     */\n    name: string;\n    /**\n     * The description of this sorting choice\n     */\n    description: string;\n    /**\n     * The display value to use when rendering this sorting choice\n     */\n    display: string;\n    /**\n     * The `ORDER BY` clause to use when this sorting choice is selected\n     */\n    orderByClause: string;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has no `text contains` clause\n     */\n    isDefaultNoRelevance: boolean;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has a `text contains` clause\n     */\n    isDefaultWithRelevance: boolean;\n}\n\n/**\n * Describes a scope configuration object. A scope defines a set of conditions which\n * will be added to the query `where clause` when the scope is selected\n */\nexport interface CCScope {\n    /**\n     * The name of the scope\n     */\n    name: string;\n    /**\n     * The description of the scope\n     */\n    description: string;\n    /**\n     * The display value to be used when rendering the scope\n     */\n    display: string;\n    /**\n     * Determines whether the scope is active or not\n     */\n    isActive: boolean;\n    /**\n     * Determines whether the scope should be considered the default scope\n     * when a scope is not specified in a query\n     */\n    isDefault: boolean;\n}\n\n/**\n * Defines different precision operators that can be automatically added to a `text contains` clause\n * when no precision operators are present.\n *\n * `Default` - no operators are added\n *\n * `ExactExpression` - text surrounded by `\"...\"`\n *\n * `InTheSamePhrase` - text surrounded by `[...]`\n *\n * `EveryWord` - text surrounded by `+(...)`\n */\nexport type QueryPrecision  = \"Default\" | \"ExactExpression\" | \"InTheSamePhrase\" | \"EveryWord\";\n\n/**\n * Defines strategies that can used in the query search parameters. Each strategy defines a pair of word weight (`ww`) and meaning\n * weight (`mw`) values to be used.\n *\n * `Default` - no `ww` and `mw` parameters used\n *\n * `WordsOnly` - `ww=1;mw=0`\n *\n * `WordsFirst` - `ww=0.8;mw=0.2`\n *\n * `WordsAndMeaning` - `ww=0.6;mw=0.4`\n *\n * `MeaningFirst` - `ww=0.3;mw=0.7`\n *\n * `MeaningOnly` - `ww=0;mw=1`\n */\nexport type QueryStrategy = \"Default\" | \"WordsOnly\" | \"WordsFirst\" | \"WordsAndMeaning\" | \"MeaningFirst\" | \"MeaningOnly\";\n\n/**\n * Defines modes for the spelling correction of search terms and did-you-mean functionality. Corrections\n * are based on edit and phonetic distance and exist among the searched documents\n *\n * `default | classic` - corrections are sought for terms that are not present in any documents. The original terms\n * and corrections are included in the query\n *\n * `smart` - corrections are sought for terms that are present in less than 10 documents and where the correction\n * is 20 times more frequent than the original term. Only the best corrections are kept. The original terms and corrections\n * are included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"We included\n * results for these terms...\" feedback to be displayed\n *\n * `correct` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. Only the best corrections are kept. The original terms that have corrections\n * are not included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"Your query\n * has been corrected to...\" feedback to be displayed\n *\n * `dymonly` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. The actual query is unaffected but the\n * [Results.didYouMean]{@link Results#didYouMean] member will be populated allowing for a \"Did you mean...\" feedback to be\n * displayed\n *\n * `force` - corrections are sought for all terms. All terms and corrections are included in the query\n *\n * `false` - no spelling correction processing occurs\n */\nexport type SpellingCorrectionMode = \"default\" | \"classic\" | \"smart\" | \"correct\" | \"dymonly\" | \"force\" | \"false\";\n\n/**\n * Describes the query web service configuration object\n */\nexport interface CCQuery extends CCWebService {\n    /**\n     * Defines the number of records or documents to request when executing the query\n     */\n    pageSize: number;\n    /**\n     * Defines the aggregations that should be included in the query\n     */\n    aggregations: CCAggregation[];\n    /**\n     * Defines configuration information for the columns in the indexes\n     */\n    columnsInfo: CCColumnsInfo;\n    /**\n     * Defines the sorting choices that can be used\n     */\n    sortingChoices: CCSortingChoice[];\n    /**\n     * Defines the scopes that can be used\n     */\n    scopes: CCScope[];\n    /**\n     * Defines whether scopes processing is activated for this query\n     */\n    scopesActive: boolean;\n    /**\n     * Defines the spelling correction mode for this query\n     */\n    sCMode: SpellingCorrectionMode;\n    /**\n     * Defines the distance to use for the `NEAR` operator when no value is specified\n     */\n    defaultNearValue: number;\n    /**\n     * Defines the tab search configuration for this query\n     */\n    tabSearch: CCTabSearch;\n    /**\n     * Defines the name of the [CCRFM]{@link CCRFM} configuration for this query\n     */\n    rFM: string;\n    /**\n     * Defines the default language to use when parsing the query text\n     */\n    questionLanguage: string;\n    /**\n     * Defines the default precision to use for this query\n     */\n    questionPrecision: QueryPrecision;\n    /**\n     * Defines the default strategy to use for this query\n     */\n    questionStrategy: QueryStrategy;\n    /**\n     * Defines the indexes that the query selects from\n     */\n    searchIndexes: string;\n    /**\n     * Determines whether filter-less queries are permitted\n     */\n    allowEmptySearch: boolean;\n    /**\n     * Defines the patterns to control which column fields are allowed\n     * in fielded search expressions.\n     */\n    columnFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which column fields are disallowed\n     * in fielded search expressions.\n     */\n    columnFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `columnFieldsIncluded` and `columnFieldsExcluded` values.\n     */\n    $columnFieldsPattern: PatternMatcher;\n    /**\n     * Defines the patterns to control which part name fields are allowed\n     * in fielded search expressions.\n     */\n    partnameFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which part name fields are disallowed\n     * in fielded search expressions.\n     */\n    partnameFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `partnameFieldsIncluded` and `partnameFieldsExcluded` values.\n     */\n    $partnameFieldsPattern: PatternMatcher;\n}\n\n/**\n * Defines configuration parameters for a column\n */\nexport interface CCColumnInfo {\n    /**\n     * The column name\n     */\n    name: string;\n    /**\n     * A description of the column\n     */\n    description: string;\n    /**\n     * A comma-separated list of aliases for the column\n     */\n    aliases: string;\n    /**\n     * A display label for the column\n     */\n    label: string;\n    /**\n     * A plural form display label for the column\n     */\n    labelPlural: string;\n    /**\n     * The name of a formatter function that produces a formatted string value from the column value. See {@link FormatService}\n     */\n    formatter: string;\n    /**\n     * A set of transform functions that are applied to the a formatted string value. See {@link FormatService}\n     */\n    transforms: string;\n    /**\n     * The name of a parser function that produces a column value from a formatted string value. See {@link FormatService}\n     */\n    parser: string;\n}\n\n/**\n * Describes a set of `CCColumnInfo` objects\n */\nexport interface CCColumnsInfo {\n    columns: CCColumnInfo[];\n}\n\n/**\n * Defines the range of column types for a column\n */\nexport const enum EngineType {\n    none = 0,\n    bool = 1,\n    date = 2,\n    dateTime = 3,\n    time = 4,\n    unsigned = 5,\n    integer = 6,\n    float = 7,\n    double = 8,\n    dates = 9,\n    dateTimes = 10,\n    times = 11,\n    varchar = 12,\n    binary = 13,\n    string = 14,\n    csv = 15\n}\n\n/**\n * Defines the type modifiers that can be used for a column\n */\nexport const enum EngineTypeModifier {\n    none  = 0x0000000,\n    a     = 0x0000805, // a -> lc\n    // b  = 0x0000002,\n    c     = 0x0000004,\n    d     = 0x0000008,\n    e     = 0x0000814, // e -> lc\n    // f  = 0x0000020,\n    // g  = 0x0000040,\n    // h  = 0x0000080,\n    i     = 0x0000100,\n    // j  = 0x0000200,\n    // k  = 0x0000400,\n    l     = 0x0000804, // l -> c\n    // m  = 0x0001000,\n    n     = 0x0002000,\n    // o  = 0x0004000,\n    // p  = 0x0008000,\n    // q  = 0x0010000,\n    // r  = 0x0020000,\n    // s  = 0x0040000,\n    t     = 0x0080004, // t -> c\n    // u  = 0x0100000,\n    // v  = 0x0200000,\n    // w  = 0x0400000,\n    x     = 0x0800000,\n    // y  = 0x1000000,\n    z     = 0x2000000,\n\n    f_ordinal    = 0x0002000, //             n\n    f_multidates = 0x0002000, //             n\n    f_varchar    = 0x2000000, //                   z\n    f_binary     = 0x2002000, //             n     z\n    f_string     = 0x2002108, //     d   i   n     z\n    f_csv        = 0x288291d, // a c d e i l n t x z\n\n    f_overridable= 0x2000108  //     d   i         z\n}\n\n/**\n * Defines the fields for a column configuration object defined in an index. See {@link CCIndex}\n */\nexport interface CCColumn {\n    name: string;\n    description?: string;\n    type: string;\n    typeModifier?: string;\n    eType: EngineType;\n    eTypeModifier: EngineTypeModifier;\n    aliases?: string[];\n    label?: string;\n    labelPlural?: string;\n    formatter?: string;\n    transforms?: string;\n    parser?: string;\n}\n\n/**\n * Enum representing supported export source.\n */\nexport enum ExportSourceType {\n    None = 0,\n    Result = 1,\n    Selection = 2,\n    SavedQuery = 4\n}\n\n/**\n * Enum representing supported export format.\n */\nexport enum ExportOutputFormat {\n    None = 0,\n    Csv = 1,\n    Xlsx = 2,\n    Json = 4\n}\n\n/**\n * Data model of the Export dialog.\n */\nexport interface ExportDialogModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n}\n\n/**\n * Describes the fields in the labels web service configuration object\n */\nexport interface CCLabels extends CCWebService {\n    /**\n     * The the index column to use for public labels\n     */\n    publicLabelsField: string;\n    /**\n     * A semi-colon separated list of predefined public labels\n     */\n    defaultPublicLabels: string;\n    /**\n     * Determines whether new public labels can be created by users\n     */\n    allowPublicLabelsCreation: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can create public labels\n     */\n    publicLabelsCreationPrincipalIds: string;\n    /**\n     * Determines whether existing public labels can be modified by users\n     */\n    allowPublicLabelsModification: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can modify existing public labels\n     */\n    publicLabelsModificationPrincipalIds: string;\n\n    /**\n     * The the index column to use for private labels\n     */\n    privateLabelsField: string;\n\n    /**\n     * The maximum number of labels to return when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestMaxCount: number;\n\n    /**\n     * The wildcard character to recognise when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestWildcard: string;\n}\n\n/**\n * Describes the fields in the autocomplete web service configuration object\n */\nexport interface CCAutocomplete extends CCWebService {\n    /**\n     * Defines whether this autocomplete service is enabled\n     */\n    enabled: boolean;\n    /**\n     * Contains a comma-separated list of suggest queries for this service\n     */\n    suggestQueries: string;\n    /**\n     * Defines the minimum number of characters that must be entered before presenting\n     * suggestions\n     */\n    inputLengthTrigger: number;\n    /**\n     * Defines whether suggestions should be grouped into categories when they are displayed\n     */\n    groupSuggestionsByCategory: boolean;\n    /**\n     * Defines whether fielded search should be used when processing suggestions\n     */\n    useFieldedSearch: boolean;\n    /**\n     * Defines the number of items per category to display when a category is not collapsed\n     */\n    uncollapsedItemsPerCategory: number;\n}\n\n/**\n * Describes the fields in the application configuration object\n */\nexport interface CCApp extends CCConfig {\n    /**\n     * Identifies the version of the application configuration. This field can be passed\n     * to the [AppWebService.refresh]{@link AppWebService#refresh} api to update the application\n     * configuration if the version now available on the server is different.\n     */\n    versionId: string;\n    /**\n     * Defines the queries configured on the application\n     */\n    queries: MapOf<CCQuery>;\n    /**\n     * Defines the RFM objects configured on the application\n     */\n    rfms: MapOf<CCRFM>;\n    /**\n     * Defines the indexes configured on the application\n     */\n    indexes: MapOf<CCIndex>;\n    /**\n     * Defines the lists configured on the application\n     */\n    lists: MapOf<CCList>;\n    /**\n     * Defines the web services configured on the application\n     */\n    webServices: MapOf<CCWebService>;\n    /**\n     * A comma-separated list of the names of the queries configured on the application\n     */\n    queryNames: string;\n    /**\n     * The name of the labels web service configured on the application\n     */\n    labels: string;\n    /**\n     * The name of the preview web service configured on the application\n     */\n    preview: string;\n    /**\n     * The name of the autocomplete web service configured on the application\n     */\n    autocomplete: string;\n    /**\n     * The name of the sponsored links web service configured on the application\n     */\n    sponsoredLinks: string;\n    /**\n     * The name of the query export web service configured on the application\n     */\n    queryExport: string;\n    /**\n     * Determines whether RSS feeds are available on saved queries\n     */\n    queryRssEnabled: boolean;\n    /**\n     * Custom JSON configuration (see App Customization tab in Sinequa admin)\n     */\n    data: JsonObject;\n    /**\n     * The version of the server API.\n     * This field is used to compare with [MINIMUM_COMPATIBLE_SERVER_API_VERSION]{@link MINIMUM_COMPATIBLE_SERVER_API_VERSION}\n     */\n    apiVersion: string;\n    /**\n     * The workspace associated with this app\n     */\n    workspaceApp: string;\n    /**\n     * The name of the default query\n     */\n    defaultQueryName: string;\n}\n\n/**\n * The minimum server api version that compatible with this version of SBA.\n */\nexport const MINIMUM_COMPATIBLE_SERVER_API_VERSION = '1.0';\n","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-SG\": \"zavE\",\n\t\"./en-SG.js\": \"zavE\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import \"fast-text-encoding\"; // IE 11 / Edge\n\n// NB the name of the intl polyfill (below) conflicts with @sinequa/core/intl in the module resolution.\n// Output of traceResolution: true gives the following:\n//\n// Resolving module name 'intl' relative to base url 'D:/ice/sba/ng-ws/projects/core' - 'D:/ice/sba/ng-ws/projects/core/intl'.\n// Loading module as file / folder, candidate module location 'D:/ice/sba/ng-ws/projects/core/intl', target file type 'TypeScript'.\n// ...\n// This can be worked around in a number of ways:\n// 1. Rename the @sinequa/core/intl folder and all references to it (not overly desirable)\n// 2. Install the intl polyfill using an alias: npm install my-intl-alias@npm:intl. But then references in the locale files would have\n//    to use import \"my-intl-alias/...\"\n// 3. Don't use index.ts as the entry point filename. This is a bit hacky but it works and has the least impact so that's what we've gone with\n//    _index.ts is used and referenced in package.json: { \"ngPackage\": { \"lib\": { \"entryFile\": \"index.ts\" } } }\n//    We also put an explicit Path to @sinequa/core/intl => ./intl/_index in the local tsconfig.json so that references to @sinequa/core/intl\n//    are resolved correctly in VSCode\nimport \"intl\"; // Safari\nimport \"intl/locale-data/jsonp/en-US\"; // Locale needed for formatjs initialization (new Intl.NumberFormat())\nimport \"js-polyfills/url\";\nimport \"matchmedia-polyfill\";\nimport focusWithin from \"focus-within\"; // IE 11 / Edge - https://github.com/jonathantneal/focus-within\n\nfocusWithin(document);\n\n// String.trimStart, String.trimEnd\nif (!(<any>String.prototype).trimStart) {\n  (<any>String.prototype).trimStart = function () {\n    return this.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n  };\n}\n\nif (!(<any>String.prototype).trimEnd) {\n  (<any>String.prototype).trimEnd = function () {\n    return this.replace(/[\\s\\uFEFF\\xA0]+$/g, '');\n  };\n}\n\n// See https://gist.github.com/jocki84/6ffafd003387179a988e\nif (!(<any>Element.prototype).scrollIntoViewIfNeeded) {\n    (<any>Element.prototype).scrollIntoViewIfNeeded = function (centerIfNeeded) {\n        function withinBounds(value, min, max, extent) {\n            if (false === centerIfNeeded || max <= value + extent && value <= min + extent) {\n                return Math.min(max, Math.max(min, value));\n            } else {\n                return (min + max) / 2;\n            }\n        }\n\n        function makeArea(left, top, width, height) {\n            return  { \"left\": left, \"top\": top, \"width\": width, \"height\": height\n                    , \"right\": left + width, \"bottom\": top + height\n                    , \"translate\":\n                        function (x, y) {\n                            return makeArea(x + left, y + top, width, height);\n                        }\n                    , \"relativeFromTo\":\n                        function (lhs, rhs) {\n                            let newLeft = left, newTop = top;\n                            lhs = lhs.offsetParent;\n                            rhs = rhs.offsetParent;\n                            if (lhs === rhs) {\n                                return area;\n                            }\n                            for (; lhs; lhs = lhs.offsetParent) {\n                                newLeft += lhs.offsetLeft + lhs.clientLeft;\n                                newTop += lhs.offsetTop + lhs.clientTop;\n                            }\n                            for (; rhs; rhs = rhs.offsetParent) {\n                                newLeft -= rhs.offsetLeft + rhs.clientLeft;\n                                newTop -= rhs.offsetTop + rhs.clientTop;\n                            }\n                            return makeArea(newLeft, newTop, width, height);\n                        }\n                    };\n        }\n\n        let parent, elem = this, area = makeArea(\n            this.offsetLeft, this.offsetTop,\n            this.offsetWidth, this.offsetHeight);\n        while ((parent = elem.parentNode) instanceof HTMLElement) {\n            const clientLeft = parent.offsetLeft + parent.clientLeft;\n            const clientTop = parent.offsetTop + parent.clientTop;\n\n            // Make area relative to parent's client area.\n            area = area.\n                relativeFromTo(elem, parent).\n                translate(-clientLeft, -clientTop);\n\n            parent.scrollLeft = withinBounds(\n                parent.scrollLeft,\n                area.right - parent.clientWidth, area.left,\n                parent.clientWidth);\n\n            parent.scrollTop = withinBounds(\n                parent.scrollTop,\n                area.bottom - parent.clientHeight, area.top,\n                parent.clientHeight);\n\n            // Determine actual scroll amount by reading back scroll properties.\n            area = area.translate(clientLeft - parent.scrollLeft,\n                                  clientTop - parent.scrollTop);\n            elem = parent;\n        }\n    };\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n(function () {\n\n  if ( typeof (<any>window).CustomEvent === \"function\" ) return;\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    const evt = document.createEvent( 'CustomEvent' );\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n    return evt;\n   }\n\n  CustomEvent.prototype = (<any>window).Event.prototype;\n\n  (<any>window).CustomEvent = CustomEvent;\n})();\n\n// IE\nif (!window.location.origin) { // Some browsers (mainly IE) do not have this property, so we need to build it manually...\n    try {\n        window.location[/*foo readonly*/<string>\"origin\"] = window.location.protocol + '//' + window.location.hostname + (window.location.port ? (':' + window.location.port) : '');\n    }\n    catch (e) {\n    }\n}\n\n// fake storage (eg for Safari private browsing)\nfunction fakeStorage(storageName: string) {\n    let fakeStorage = {};\n    let storage;\n    let needed = false;\n\n    if (typeof window[storageName] === \"object\") {\n        // Storage is there, does it work (eg Safari private browsing)\n        try {\n            window[storageName].setItem(\"fakeStorageTest\", \"1\");\n            window[storageName].removeItem(\"fakeStorageTest\");\n        }\n        catch (e) {\n            needed = true;\n        }\n    }\n    else {\n        needed = true;\n    }\n\n    if (!needed) {\n        return;\n    }\n\n    if (typeof window[storageName] === \"object\") {\n        // Override with fake implementation\n        storage = window[storageName];\n    }\n    else {\n        // Implement with fake\n        try {\n            storage = window[/*fool readonly*/<string>storageName] = {};\n        }\n        catch (e) {\n            console.warn(\"Unable to set fake\", storageName);\n            return;\n        }\n    }\n\n    console.warn(\"Using fake\", storageName);\n\n    const dispatchStorageEvent = function(key, newValue) {\n        const oldValue = (!key) ? null : storage.getItem(key);\n        const url = location.href.substr(location.origin.length);\n        const storageEvent = document.createEvent(\"StorageEvent\"); // For IE, http://stackoverflow.com/a/25514935/1214183\n\n        storageEvent[\"initStorageEvent\"](\"storage\", false, false, key, oldValue, newValue, url, storage);\n        window.dispatchEvent(storageEvent);\n    };\n\n    storage.key = function(i) {\n        const key = Object.keys(fakeStorage)[i];\n        return typeof key === \"string\" ? key : null;\n    };\n\n    storage.getItem = function(key) {\n        return typeof fakeStorage[key] === 'string' ? fakeStorage[key] : null;\n    };\n\n    storage.setItem = function(key, value) {\n        dispatchStorageEvent(key, value);\n        fakeStorage[key] = String(value);\n    };\n\n    storage.removeItem = function(key) {\n        dispatchStorageEvent(key, null);\n        delete fakeStorage[key];\n    };\n\n    storage.clear = function() {\n        dispatchStorageEvent(null, null);\n        fakeStorage = {};\n    };\n}\n\nfakeStorage(\"localStorage\");\nfakeStorage(\"sessionStorage\");\n\n// DOMRect polyfill\n// Credit: https://github.com/Financial-Times/polyfill-service/pull/1732\n(function(global: any) {\n    if (global.DOMRect) {\n        return;\n    }\n    function number(v) {\n        return v === undefined ? 0 : Number(v);\n    }\n    function different(u, v) {\n        return u !== v && !(isNaN(u) && isNaN(v));\n    }\n    function DOMRect(this: DOMRect, xArg, yArg, wArg, hArg) {\n        let x; let y; let width; let height; let left; let right; let top; let bottom;\n        x = number(xArg);\n        y = number(yArg);\n        width = number(wArg);\n        height = number(hArg);\n        Object.defineProperties(this, {\n            x: {\n                get: function () { return x; },\n                set: function (newX) {\n                    if (different(x, newX)) {\n                        x = newX;\n                        left = right = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            y: {\n                get: function () { return y; },\n                set: function (newY) {\n                    if (different(y, newY)) {\n                        y = newY;\n                        top = bottom = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            width: {\n                get: function () { return width; },\n                set: function (newWidth) {\n                    if (different(width, newWidth)) {\n                        width = newWidth;\n                        left = right = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            height: {\n                get: function () { return height; },\n                set: function (newHeight) {\n                    if (different(height, newHeight)) {\n                        height = newHeight;\n                        top = bottom = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            left: {\n                get: function () {\n                    if (left === undefined) {\n                        left = x + Math.min(0, width);\n                    }\n                    return left;\n                },\n                enumerable: true\n            },\n            right: {\n                get: function () {\n                    if (right === undefined) {\n                        right = x + Math.max(0, width);\n                    }\n                    return right;\n                },\n                enumerable: true\n            },\n            top: {\n                get: function () {\n                    if (top === undefined) {\n                        top = y + Math.min(0, height);\n                    }\n                    return top;\n                },\n                enumerable: true\n            },\n            bottom: {\n                get: function () {\n                    if (bottom === undefined) {\n                        bottom = y + Math.max(0, height);\n                    }\n                    return bottom;\n                },\n                enumerable: true\n            }\n        });\n    }\n    global.DOMRect = DOMRect;\n}(window));\n\n// Element.closest and Element.matches polyfills (see https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\nif (!Element.prototype.matches) {\n    Element.prototype.matches =\n        (Element.prototype as any).msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function(s) {\n        let el = this;\n        do {\n            if (el.matches(s)) {\n                return el;\n            }\n            el = el.parentElement || el.parentNode as Element;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\n\nexport {\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enLogin, frLogin, deLogin} from \"@sinequa/core/login\";\n\nconst enCore = Utils.merge({}, enLogin);\nconst frCore = Utils.merge({}, frLogin);\nconst deCore = Utils.merge({}, deLogin);\n\nexport { enCore, frCore, deCore };\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {CCColumn, SpellingCorrectionMode} from \"./config/ccapp\";\n\n/**\n * Describes the results of a call to the query web service\n */\nexport interface Results {\n    /**\n     * A unique identifier for this set of results - typically used for auditing\n     */\n    id: string;\n    /**\n     * The sql queries that were executed on the server to produce these results\n     */\n    sql: string[];\n    /**\n     * The page number of these results\n     */\n    page: number;\n    /**\n     * The page size or number of document per page\n     */\n    pageSize: number;\n    /**\n     * The number of document results for the query.\n     */\n    rowCount: number;\n    /**\n     * The number of document results for the query. If tab search is active and the `CCTabSearch.totalIsSumOfTabTotals` option is set then\n     * the total of counts of all the tabs will be returned. Otherwise this returns the same value as `rowCount`.\n     */\n    totalRowCount: number;\n    /**\n     * Returns the number of documents included in these results, as reported by the engine. It will have the same value as `records.length`.\n     */\n    cursorRowCount: number;\n    /**\n     * The number of attributes in these results\n     */\n    attributeCount: number;\n    /**\n     * The number of columns in these results\n     */\n    columnCount: number;\n    /**\n     * The name of currently selected tab. See {@link CCTab}\n     */\n    tab: string;\n    /**\n     * Information on the tabs for these results. See {@link CCTabSearch}\n     */\n    tabs: Tab[];\n    /**\n     * The name of the currently selected scope. See {@link CCScope}\n     */\n    scope: string;\n    /**\n     * The name of the currently selected sorting choice. See {@link CCSortingChoice}\n     */\n    sort: string;\n    /**\n     * Details of the \"did you mean\" state for these results\n     */\n    didYouMean: DidYouMean;\n    /**\n     * The aggregation results\n     */\n    aggregations: Aggregation[];\n    /**\n     * The attributes for these results\n     */\n    attributes: Attributes;\n    /**\n     * Any query intents associated with these results\n     */\n    queryIntents: QueryIntent[];\n    /**\n     * An analysis of the query associated with these resullts\n     */\n    queryAnalysis: QueryAnalysis;\n    /**\n     * The document records\n     */\n    records: Record[];\n    /**\n     * A hash of the associated results for use with RFM (relevance feedback model) functionality\n     */\n    rfmQueryHash: string;\n    /**\n     * The name of the {@link IQuery} that produced these results\n     */\n    queryName: string;\n    /**\n     * SQL statements executed by the query web service\n     */\n    statements: string[];\n}\n\n/**\n * Describes the results for a particular tab\n */\nexport interface Tab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The tab value\n     */\n    value: string;\n    /**\n     * The number of document records that would be returned if this tab is selected\n     */\n    count: number;\n}\n\n/**\n * Describes a single \"did you mean\" item\n */\nexport interface DidYouMeanItem {\n    /**\n     * The original search term\n     */\n    original: string;\n    /**\n     * The corrected search term\n     */\n    corrected: string;\n}\n\n/**\n * Describes the \"did you mean\" results\n */\nexport interface DidYouMean {\n    /**\n     * The spelling correction mode used for these results\n     */\n    spellingCorrectionMode: SpellingCorrectionMode;\n    /**\n     * The `DidYouMeanItem` corresponding to the main fulltext terms\n     */\n    text: DidYouMeanItem;\n    /**\n     * The `DidYouMeanItem`s corresponding to any refine fulltext term selections\n     */\n    refine: DidYouMeanItem[];\n}\n\n/**\n * Used to inform whether a query is being executed using original or corrected search terms\n */\nexport enum DidYouMeanKind {\n    Original,\n    Corrected\n}\n\n/**\n * Various attributes that are returned with a set of search results\n */\nexport interface  Attributes {\n    queryid: string;\n    searchid: string;\n    processingtime: string;\n    rowfetchtime: string;\n    cachehit: string;\n    matchingrowcount: string;\n    internalqueryanalysis: string;\n    internalquerylog: string;\n}\n\n/**\n * Describes a single query intent item\n */\nexport interface QueryIntent {\n    name: string;\n    component: string;\n    entities: QueryIntentEntity[];\n    words: QueryIntentWord[];\n    actions: QueryIntentAction[];\n    datasets: QueryIntentDatasets;\n}\n\n/**\n * Describes a query intent entity\n */\nexport interface QueryIntentEntity {\n    name: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent word\n */\nexport interface QueryIntentWord {\n    word: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent action\n */\nexport interface QueryIntentAction {\n    type: string;\n    data: string;\n}\n\n/**\n * Describes a set of query intent datasets\n */\nexport interface QueryIntentDatasets {\n    [name: string] : {\n        attributes : [any],\n        rows : [any]\n    };\n}\n\n/**\n * Describes an analysis of a query\n */\nexport interface QueryAnalysis {\n    text: string;\n    initial: boolean;\n    queryLanguage: string | undefined;\n    elements: QueryAnalysisElement[];\n}\n\n/**\n * Describes an element of query analysis\n */\nexport interface QueryAnalysisElement {\n    text: string;\n    entity: string;\n    weight: number;\n    length: number;\n    offset: number;\n    stopword: boolean;\n    root: string;\n    normalization: string;\n    lemmas: {text: string}[];\n    entities: QueryAnalysisElement[];\n    synonyms: QueryAnalysisElement[];\n    reformulations: QueryAnalysisElement[];\n    typos: QueryAnalysisElement[];\n    expression: QueryAnalysisElement[];\n    adjacency: QueryAnalysisElement[];\n    exact: QueryAnalysisElement[];\n}\n\n/**\n * Describes the match location information for a particular partname\n */\nexport interface PartnameMatchLocations {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname match locations\n */\nexport interface MatchLocationsPerPartname {\n    matchlocations: PartnameMatchLocations[];\n}\n\n/**\n * Describes the locations of relevant extracts for a partname\n */\nexport interface PartnameExtracts {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname relevant extracts locations\n */\nexport interface ExtractsPerPartname {\n    highlight: PartnameExtracts[];\n}\n\n/**\n * Describes the term presence for a particular search term\n */\nexport interface TermPresence {\n    term: string;\n    presence: \"found\" | \"missing\";\n}\n\n/**\n * Describes an aggregation item. This serves as a base interface for list aggregation items and tree aggregation nodes\n */\nexport interface AggregationItem {\n    /**\n     * The value of the item\n     */\n    value: FieldValue;\n    /**\n     * The display value of the item, if any\n     */\n    display?: string;\n    /**\n     * The number of documents that contain this item in the current results\n     */\n    count: number;\n    /**\n     * Identifies any operator with their associated results\n     */\n    operatorResults?: {\n        [key in \"min\" | \"max\" | \"sum\" | \"avg\" | \"stddev\" | \"variance\"]: number | Date\n    };\n\n    /**\n     * A client-side field that indicates whether this item is currrently selected\n     */\n    $selected?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently excluded\n     */\n    $excluded?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently filtered\n     */\n    $filtered?: boolean;\n    /**\n     * A client-side field that indicates the column that provided the value for this item.\n     * This can be useful when mixing items from different aggregations.\n     */\n    $column?: CCColumn;\n}\n\n/**\n * Describes any fields particular to a list aggregation item\n */\nexport type ListAggregationItem = AggregationItem;\n\n/**\n * Describes any fields particular to a tree aggregation node\n */\nexport interface TreeAggregationNode extends AggregationItem {\n    /**\n     * Determines whether this node has any children even if the `items` field is not currently populated\n     */\n    hasChildren: boolean;\n    /**\n     * Contains the child nodes of this node\n     */\n    items: TreeAggregationNode[];\n\n    /**\n     * A client-side field that contains the full path of the node\n     */\n    $path?: string;\n    /**\n     * A client-side field that indicates whether a parent node is currently open\n     */\n    $opened?: boolean;\n    /**\n     * The level at which this node is in the Tree aggregation\n     */\n    $level: number;\n}\n\n/**\n * Describes the results of an aggregation. This serves as a base interface for list and tree aggregations\n */\nexport interface Aggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The name of the index column used to provide aggregation items\n     */\n    column: string;\n    /**\n     * Indicates whether the aggregation items are calculated using a distrbution (see App Dependencies in the Sinequa admin interface)\n     */\n    isDistribution?: boolean;\n    /**\n     * Indicates whether the aggregation items should be handled as tree nodes. This can be set to false for a tree aggregation\n     * if the \"Load tree as csv\" option is checked in the Sinequa configuration\n     */\n    isTree?: boolean;\n    /**\n     * Indicates whether the values for the items are fielded search expressions. This is the case for aggregations using a\n     * distribution (see `isDistribution`) and crossed distributions\n     */\n    valuesAreExpressions?: boolean;\n    /**\n     * The aggregation items for this aggregation\n     */\n    items?: AggregationItem[];\n}\n\n/**\n * Describes the fields specific to a list aggregation\n */\nexport type ListAggregation = Aggregation;\n\n/**\n * Describes the fields specific to a tree aggregation\n */\nexport type TreeAggregation = Aggregation;\n\n/**\n * Describes the fields making up an entity in the context of a particular document\n */\nexport interface EntityItem {\n    /**\n     * The value\n     */\n    value: string;\n    /**\n     * The display\n     */\n    display: string;\n    /**\n     * The locations of this item in the document text in the form `row1,col1;row2,col2;...`\n     */\n    locations?: string;\n    /**\n     * The remapped locations of this item in the original document in the form `row1,col1;row2,col2;...`\n     */\n    originalLocations?: string;\n    /**\n     * Following ES-11166, the number of occurrence of this entity in the document can be included\n     */\n    count?: number;\n}\n\n/**\n * Display kinds for RFM\n */\nexport enum RFMDisplay {\n    // Must be in par with C# RFMDisplay enum (RFM.cs)\n    none          = 0,\n\n    positiveRate  = 1,\n    mainlyPosRate = 2,\n    unrate        = 4,\n    mainlyNegRate = 8,\n    negativeRate  = 16,\n\n    all          = 31,\n    positiveOnly = 7,\n    negativeOnly = 28,\n\n    personalAll = 21,\n    personalPosOnly = 5,\n    personalNegOnly = 20,\n}\n\n/**\n * Describes the fields of an RFM action\n */\nexport interface RFMActionDisplay {\n    eventCount: number;\n    average: number;\n    status: RFMDisplay;\n    image: RFMDisplay;\n    imageAction: RFMDisplay;\n    availableActions: RFMDisplay;\n}\n\n/**\n * Describes the RFM data returned with a set of results\n */\nexport interface RFMData {\n    click?: RFMActionDisplay;\n    like?: RFMActionDisplay;\n    important?: RFMActionDisplay;\n}\n\n/**\n * Describes the standard fields in a document result record\n */\nexport interface Record {\n    /**\n     * The zero-based position of this document in the results\n     */\n    rank: number;\n    /**\n     * The unique identifier of this document\n     */\n    id: string;\n    /**\n     * The name of the index that contains this document\n     */\n    databasealias: string;\n    /**\n     * The global relevance of this document in the context of the query\n     */\n    globalrelevance: number;\n    /**\n     * Partnames that contain one or more of the search terms\n     */\n    matchingpartnames: string[];\n    /**\n     * The locations of the search terms in the document\n     */\n    matchlocations: string[];\n    /**\n     * The locations of the search terms in the document grouped by partname\n     */\n    matchlocationsperpartname: MatchLocationsPerPartname;\n    /**\n     * The relevant extracts in the document grouped by partname\n     */\n    extractsperpartname: ExtractsPerPartname;\n    /**\n     * The languages in the document\n     */\n    documentlanguages: string[];\n    /**\n     * The documentweight value of the document\n     */\n    documentweight: string;\n    /**\n     * The modified date and time of the document\n     */\n    modified: string;\n    /**\n     * The time and date when the document was indexed\n     */\n    indexationtime: string;\n    /**\n     * The version of the document\n     */\n    version: string;\n    /**\n     * The title of the document\n     */\n    title: string;\n    /**\n     * The display title of the document. This can contain HTML highlighting of the search terms\n     */\n    displayTitle: string;\n    /**\n     * The size in bytes of the document\n     */\n    size: number;\n    /**\n     * The value of the treepath of the document\n     */\n    treepath: string[];\n    /**\n     * The filename of the document\n     */\n    filename: string;\n    /**\n     * The file extension of the document\n     */\n    fileext: string;\n    /**\n     * The document flags\n     */\n    flags: string[];\n    /**\n     * The collection that produced the document (only one element will exist)\n     */\n    collection: string[];\n    /**\n     * The value of the docformat column\n     */\n    docformat: string;\n    /**\n     * The value of the doctype column\n     */\n    doctype: string;\n    /**\n     * The value of the url1 column\n     */\n    url1: string;\n    /**\n     * The value of the url2 column\n     */\n    url2: string;\n    /**\n     * The relevant extracts from the document. This can contain HTML highlighting of the search terms\n     */\n    relevantExtracts: string;\n    /**\n     * The text of the document\n     */\n    text: string;\n    /**\n     * The document authors\n     */\n    authors: string[];\n    /**\n     * The document access lists\n     */\n    accesslists: DocumentAccessLists;\n    /**\n     * The URL of the document's thumbnail\n     */\n    thumbnailUrl: string;\n    /**\n     * Indicates whether RFM has been enabled for this document\n     */\n    rfmEnabled: boolean;\n    /**\n     * Any RFM data for this document\n     */\n    rfm: RFMData;\n    /**\n     * Information about the search terms and whether they exist in the document or not\n     */\n    termspresence: TermPresence[];\n    /**\n     * A client-side field that indicates whether this document is currrently selected\n     */\n    $selected: boolean;\n    /**\n     * id of the container of this document (for splitted documents, attachments, etc.)\n     */\n    containerid?: string;\n    /**\n     * Page number of this document (for splitted documents). Added by the front-end\n     */\n    $page?: number;\n}\n\n/**\n * Describes the authorized and denied access lists for a document\n */\nexport interface DocumentAccessLists {\n    accessListIndices: number[];\n    authorizedLists: AccessLists;\n    deniedLists: AccessLists;\n}\n\n/**\n * Describes the access lists\n */\nexport interface AccessLists {\n    /**\n     * An array of `AccessListPrincipal` arrays. Each item in the outer array corresponds to column value of the document\n     */\n    [index: number]: AccessListPrincipal[];\n}\n\n/**\n * Describes the fields of a principal item in an access list\n */\nexport interface AccessListPrincipal {\n    /**\n     * The Sinequa domain to which the principal belongs\n     */\n    domain: string;\n    /**\n     * The identifier of the principal\n     */\n    id: string;\n}\n\nexport interface IMulti<T> {\n    results: T[];\n}\n\n/**\n * Describes information to be sent to the server when executing a query for server-side query intent processing\n */\nexport interface QueryIntentData {\n    /**\n     * The current results view\n     */\n    resultsView?: string;\n    /**\n     * The current tab\n     */\n    tab?: string;\n    /**\n     * Query intents\n     */\n    queryIntents?: QueryIntent[];\n    /**\n     * Analysis of the current query\n     */\n    queryAnalysis?: QueryAnalysis;\n}\n\n/**\n * A service to call the query web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        public httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    protected endPoint = \"query\";\n\n    /**\n     * Get the results for the passed query\n     *\n     * @param query The query to execute\n     * @param auditEvents Any audit events to store on the server\n     * @param queryIntentData Any accompanying query intent data\n     */\n    public getResults(query: IQuery, auditEvents?: AuditEvents, queryIntentData?: QueryIntentData): Observable<Results> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n        const observable = this.httpClient.post<Results>(this.makeUrl(this.endPoint), {\n            app: this.appName,\n            query,\n            $auditRecord: auditEvents,\n            queryIntentData\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"queryService.getResults success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"queryService.getResults failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Get the results for a set of queries\n     *\n     * @param queries The queries to execute\n     * @param auditEvents Any audit events to store on the server\n     */\n    public getMultipleResults(queries: IQuery[], auditEvents?: AuditEvents): Observable<IMulti<Results>> {\n        if (!queries || queries.length === 0) {\n            return throwError({ error: \"no queries\" });\n        }\n        const data: {\n            methods: {\n                method: string,\n                app: string,\n                query: IQuery\n            }[],\n            propagateErrors: true,\n            $auditRecord?: AuditEvents\n        } = {\n            methods: [],\n            propagateErrors: true,\n            $auditRecord: auditEvents\n        };\n        for (const query of queries) {\n            data.methods.push({\n                method: this.endPoint,\n                app: this.appName,\n                query\n            });\n        }\n        return this.httpClient.post<IMulti<Results>>(this.makeUrl(\"multi\"), data);\n    }\n}\n","export * from \"./public-api\";","const MODAL_MODULE_PROVIDERS = [];\n\nexport {MODAL_MODULE_PROVIDERS};\n","import {NgModule, Injectable, Inject, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {Ng2UiAuthModule, /*IPartialConfigOptions,*/ CONFIG_OPTIONS, IProviders, StorageType, OauthService, PopupService} from \"ng2-ui-auth\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {AuthenticationOauthService} from \"./authentication-oauth.service\";\nimport {AuthenticationPopupService} from \"./authentication-popup.service\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {WebServicesModule, START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationModule} from \"@sinequa/core/notification\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\n\n// Login\nimport {MODAL_LOGIN} from \"./login.service\";\nimport {Login} from \"./login.component\";\n\nimport {LOGIN_MODULE_PROVIDERS} from \"./module.providers\";\n\nexport interface IPartialConfigOptions {} // until export restored to ng2-ui-auth@9\n\n/**\n * Configuration for the ng2-ui-auth library\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthConfig implements IPartialConfigOptions {\n    storageType: StorageType;\n    providers: IProviders;\n    constructor(@Inject(START_CONFIG) startConfig: StartConfig) {\n        this.storageType = \"memory\" as StorageType;\n        this.providers = startConfig.providers || {};\n    }\n}\n\n/**\n * This module provides support for user authentication in the {@link AuthenticationService}. This authentication can be\n * automatic (OAuth/SAML), if configured in the Sinequa administration, or manual where the user name and password are\n * entered in a modal dialog box and transmitted in clear text. There is also support for the ng2-ui-auth library where the\n * authentication process occurs in a browser popup window. Authentication is instigated by the handling of HTTP 401 errors\n * in an `HttpInterceptor` so all web service calls requiring authentication are automatically protected. This module will\n * not be used for authentication when the web server is configured for Windows authentication.\n *\n * A higher level {@link LoginService} groups the successful retrieval of the current `application configuration` ({@link AppService}),\n * `principal` ({@link PrincipalWebService}), and `user settings` ({@link UserSettingsWebService}) all of which require the user\n * to be authenticated. This can be used as a \"gatekeeper\" to protect access to the main, often routed, component(s).\n *\n * The {@link LoginInterceptor} in this module must be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        Ng2UiAuthModule.forRoot(undefined, false),\n        ModalModule.forRoot(),\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        AppUtilsModule,\n        WebServicesModule,  // Required for start-up config (START_CONFIG token)\n        IntlModule,\n        ValidationModule,\n        NotificationModule\n    ],\n    declarations: [\n        Login, // Default Login components\n    ],\n    exports: [\n    ],\n    providers: [\n        // Auth module dependencies\n        {provide: CONFIG_OPTIONS, useClass: AuthConfig},\n        {provide: OauthService, useExisting: AuthenticationOauthService},\n        {provide: PopupService, useExisting: AuthenticationPopupService},\n\n        ...LOGIN_MODULE_PROVIDERS\n    ]\n})\nexport class LoginModule {\n    static forRoot(loginModal: Type<any> = Login): ModuleWithProviders<LoginModule> {\n        return {\n            ngModule: LoginModule,\n            providers: [\n                // Login\n                {provide: MODAL_LOGIN, useValue: loginModal},\n            ]\n        };\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport \"./polyfills\";\n\n/**\n * This module contains a variety of base types and utility classes including the {@link Utils} utilility class\n */\n@NgModule({\n    imports: [\n    ],\n    declarations: [\n    ],\n    exports: [\n    ]\n})\nexport class BaseModule {\n}","const INTL_MODULE_PROVIDERS = [];\n\nexport {INTL_MODULE_PROVIDERS};\n","export * from \"./public-api\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"W95i\";","export * from \"./public-api\";\n","import {Locale, LocalesConfig} from \"@sinequa/core/intl\";\nimport {enCore} from \"./messages\";\n\nexport class DefaultLocalesConfig implements LocalesConfig {\n    defaultLocale: Locale;\n    locales?: Locale[];\n\n    constructor() {\n        this.defaultLocale = {\n            name: \"en\",\n            display: \"English\",\n            data: {\n                intl: {\n                    locale: \"en-US\"\n                },\n                messages: enCore,\n            }\n        };\n        this.locales = [this.defaultLocale];\n    }\n}\n","import {HttpParams, HttpParameterCodec} from \"@angular/common/http\";\nimport {Observable, Subscription} from \"rxjs\";\nimport moment from \"moment\";\nimport {remove as removeDiacritics} from \"diacritics\";\nimport jsSHA from \"jssha\";\nimport {MapOf} from \"./map-of\";\nimport {FieldValue} from \"./field-value\";\nimport kebabCase from \"lodash/kebabCase\";\nimport snakeCase from \"lodash/snakeCase\";\nimport camelCase from \"lodash/camelCase\";\nimport escape from \"lodash/escape\";\nimport unescape from \"lodash/unescape\";\nimport isEqual from \"lodash/isEqual\";\n\n// Because of: https://github.com/angular/angular/issues/18261\nclass SqHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n\n/**\n * Describes options for the [Utils.toJson]{@link Utils#toJson} method\n */\nexport interface ToJsonOptions {\n    /**\n     * If `true` then spacing is added to the output string\n     */\n    pretty?: boolean;\n}\n\n/**\n * Describes options for the [Utils.fromJson]{@link Utils#fromJson} method\n */\nexport interface FromJsonOptions {\n    /**\n     * If `true` then strings containing either ISO8601 or Sinequa \"system\" dates (`yyyy-mm-dd [hh:mm:ss]`) are\n     * converted to Javascript `Date` objects\n     */\n    reviveDates?: boolean;\n}\n\n/**\n * Describes options for the [Utils.throttle]{@link Utils#throttle} method\n */\nexport interface ThrottleSettings {\n    /**\n     * Set to `false` to disable the initial call to the callback function\n     */\n    leading?: boolean;\n    /**\n     * Set to `false` to disable the final call to the callback function\n     */\n    trailing?: boolean;\n}\n\nclass FrameTask {\n    constructor(\n        public callback: (...params) => any,\n        public params: any[]) {\n    }\n\n    call(): any {\n        return this.callback(...this.params);\n    }\n}\n\n/**\n * A utility class to log execution durations\n */\nexport class Timer {\n    /**\n     * Contains the timestamp of when the `Timer` object was instantiated\n     */\n    readonly start = performance.now();\n    /**\n     * Contains the current durartion in milliseconds of the `Timer` object\n     */\n    duration = 0;\n\n    constructor(private readonly name: string) {\n    }\n\n    /**\n     * Updates the `duration` of the `Timer` object\n     */\n    stop() {\n        this.duration = performance.now() - this.start;\n        console.log(`Timer: ${this.name} finished in ${Math.round(this.duration)} ms`);\n    }\n}\n\n/**\n * A generic interface for tree nodes\n */\nexport interface TreeNode {\n    /**\n     * Children elements of this tree node\n     */\n    items?: TreeNode[];\n}\n\n/**\n * A utility class containing a variety of static methods and properties\n */\n// @dynamic\nexport class Utils {\n    /**\n     * The number of milliseconds in one day\n     */\n    static readonly oneDay = 86400000;\n    /**\n     * The number of milliseconds in one hour\n     */\n    static readonly oneHour = 3600000;\n    /**\n     * The number of milliseconds in one minute\n     */\n    static readonly oneMinute = 60000;\n    /**\n     * The number of milliseconds in one second\n     */\n    static readonly oneSecond = 1000;\n\n    private static baseExtend(dst, objs, deep?: boolean, sort?: boolean | ((a: string, b: string) => number)) {\n        for (let i = 0, ii = objs.length; i < ii; ++i) {\n            const obj = objs[i];\n            if (!Utils.isObject(obj) && !Utils.isFunction(obj)) {\n                continue;\n            }\n            let keys = Object.keys(obj);\n            if (sort) {\n                if (Utils.isFunction(sort)) {\n                    keys = keys.sort(sort);\n                }\n                else {\n                    keys = keys.sort();\n                }\n            }\n            for (let j = 0, jj = keys.length; j < jj; j++) {\n                const key = keys[j];\n                const src = obj[key];\n                if (deep && Utils.isObject(src)) {\n                    if (Utils.isDate(src)) {\n                        dst[key] = new Date(src.valueOf());\n                    }\n                    else if (Utils.isRegExp(src)) {\n                        dst[key] = new RegExp(src);\n                    }\n                    else if (src.nodeName) {\n                        dst[key] = src.cloneNode(true);\n                    }\n                    else {\n                        if (!Utils.isObject(dst[key])) {\n                            dst[key] = Utils.isArray(src) ? [] : {};\n                        }\n                        Utils.baseExtend(dst[key], [src], true);\n                    }\n                }\n                else {\n                    dst[key] = src;\n                }\n            }\n        }\n        return dst;\n    }\n\n    /**\n     * Shallowly copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be copied by reference, not duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static extend(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, false);\n    }\n\n    /**\n     * Deeply copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static merge(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, true);\n    }\n\n    /**\n     * Deeply copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     * The properties of the source objects are sorted in ascending, ASCII character order\n     * before they are copied to ensure a consistent insertion order in the destination\n     * object.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static mergeAndSort(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, true, true);\n    }\n\n    private static forEach(obj, iterator, context?) {\n        let key, length;\n        if (obj) {\n            if (Utils.isFunction(obj)) {\n                for (key in obj) {\n                    // Need to check if hasOwnProperty exists,\n                    // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function\n                    if (key !== 'prototype' && key !== 'length' && key !== 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {\n                    iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else if (Utils.isArray(obj) || Utils.isArrayLike(obj)) {\n                const isPrimitive = typeof obj !== 'object';\n                for (key = 0, length = obj.length; key < length; key++) {\n                    if (isPrimitive || key in obj) {\n                        iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else if (obj.forEach && obj.forEach !== Utils.forEach) {\n                obj.forEach(iterator, context, obj);\n            } else if (Utils.isBlankObject(obj)) {\n                // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n                for (key in obj) {\n                    iterator.call(context, obj[key], key, obj);\n                }\n            } else if (typeof obj.hasOwnProperty === 'function') {\n                // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                    iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else {\n            // Slow path for objects which do not have a method `hasOwnProperty`\n            for (key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    iterator.call(context, obj[key], key, obj);\n                }\n            }\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Makes a deep copy of the passed object or array and returns it.\n     * Copies of source objects of the following types: `TypedArray`, `Date`, `RegExp` `Node` are\n     * made using the appropriate constructor. Arrays are created using `[]`. Other objects are created\n     * using `Object.create` passing the source object's protptype, if any.\n     *\n     * @param source The source item to copy (`Object`, `Array`, `TypedArray`, `Date`, `RegExp`, `Node`)\n     * @param destination An optional item to use as the destination. If passed, the item is cleared\n     * before the source is copied to it. The destination cannot be a `TypedArray` and cannot be the same\n     * as the source\n     * @return The copied item\n     */\n    static copy<T extends object>(source: T, destination?: T): T {\n        const stackSource: object[] = [];\n        const stackDest: object[] = [];\n\n        if (destination) {\n            if (Utils.isTypedArray(destination)) {\n                throw new Error(\"Can't copy! TypedArray destination cannot be mutated.\");\n            }\n            if (source === destination) {\n                throw new Error(\"Can't copy! Source and destination are identical.\");\n            }\n\n            // Empty the destination object\n            if (Utils.isArray(destination)) {\n                (destination as Array<any>).length = 0;\n            }\n            else {\n                Utils.forEach(destination, (value, key) => {\n                    if (!source.hasOwnProperty(key)) {\n                        delete destination[key];\n                    }\n                });\n            }\n\n            stackSource.push(source);\n            stackDest.push(destination);\n            return copyRecurse(source, destination);\n        }\n\n        return copyElement(source);\n\n        function copyRecurse(source, destination) {\n            let key;\n            if (Utils.isArray(source)) {\n                for (let i = 0, ii = source.length; i < ii; i++) {\n                    destination.push(copyElement(source[i]));\n                }\n            } else if (Utils.isBlankObject(source)) {\n                // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n                for (key in source) {\n                    destination[key] = copyElement(source[key]);\n                }\n            } else if (source && typeof source.hasOwnProperty === 'function') {\n                // Slow path, which must rely on hasOwnProperty\n                for (key in source) {\n                    if (source.hasOwnProperty(key)) {\n                        destination[key] = copyElement(source[key]);\n                    }\n                }\n            } else {\n                // Slowest path --- hasOwnProperty can't be called as a method\n                for (key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        destination[key] = copyElement(source[key]);\n                    }\n                }\n            }\n            return destination;\n        }\n\n        function copyElement(source) {\n            // Simple values\n            if (!Utils.isObject(source)) {\n                return source;\n            }\n\n            // Already copied values\n            const index = stackSource.indexOf(source);\n            if (index !== -1) {\n                return stackDest[index];\n            }\n\n            if (Utils.isWindow(source)) {\n                throw new Error(\"Can't copy! Making copies of Window instances is not supported.\");\n            }\n\n            let needsRecurse = false;\n            let destination;\n\n            if (Utils.isArray(source)) {\n                destination = [];\n                needsRecurse = true;\n            } else if (Utils.isTypedArray(source)) {\n                destination = new source.constructor(source);\n            } else if (Utils.isDate(source)) {\n                destination = new Date(source.getTime());\n            } else if (Utils.isRegExp(source)) {\n                const matches = source.toString().match(/[^\\/]*$/);\n                destination = new RegExp(source.source, matches ? matches[0] : \"\");\n                destination.lastIndex = source.lastIndex;\n            } else if (Utils.isFunction(source.cloneNode)) {\n                destination = source.cloneNode(true);\n            } else {\n                destination = Object.create(Object.getPrototypeOf(source));\n                needsRecurse = true;\n            }\n\n            stackSource.push(source);\n            stackDest.push(destination);\n\n            return needsRecurse ? copyRecurse(source, destination) : destination;\n        }\n    }\n\n    // Not currently used\n    private static copyWithoutNullOrEmpty(dst: MapOf<any>, src: MapOf<any>): MapOf<any> {\n        const keys = Object.keys(src);\n        for (let j = 0, jj = keys.length; j < jj; j++) {\n            const key = keys[j];\n            const value = src[key];\n            if (value === null || Utils.isEmpty(null)) {\n                continue;\n            }\n            else if (Utils.isObject(value)) {\n                if (Utils.isDate(value)) {\n                    dst[key] = new Date(value.valueOf());\n                }\n                else if (Utils.isRegExp(value)) {\n                    dst[key] = new RegExp(value);\n                }\n                else {\n                    if (!Utils.isObject(dst[key])) {\n                        dst[key] = Utils.isArray(value) ? [] : {};\n                    }\n                    dst[key] = Utils.copyWithoutNullOrEmpty(dst[key], value);\n                }\n            }\n            else {\n                dst[key] = value;\n            }\n        }\n        return dst;\n    }\n\n    /**\n     * Makes a shallow copy of the passed object. Empty string values are removed from the copied object.\n     * A string value containing `\"\"` is copied as an empty string.\n     *\n     * @param defaults The object to copy\n     * @return The copied object\n     */\n    static copyDefaults(defaults: {}): {} {\n        const _defaults = Utils.copy(defaults);\n        if (_defaults) {\n            Object.keys(_defaults).forEach(key => {\n                // Unset parameters will come through as empty strings (regardless of type)\n                // Filter these out (to not hide defaults on the server) and accept \"\" as a way of explicitly\n                // setting a parameter to be an empty string\n                const value = _defaults[key];\n                if (value === \"\") {\n                    delete _defaults[key];\n                }\n                if (value === \"\\\"\\\"\") {\n                    _defaults[key] = \"\";\n                }\n            });\n        }\n        return _defaults;\n    }\n\n    /**\n     * Performs an optimized deep comparison between two objects to determine if they should be considered equal\n     * @param o1 The first object to be compared\n     * @param o2 The second object to be compared\n     */\n    static equals(o1: any, o2:any): boolean {\n        return isEqual(o1, o2);\n    }\n\n    /**\n     * Converts a string to an integer value using `parseInt` with radix = 10.\n     * If the string cannot be converted or contains additional characters then the\n     * passed default value is returned\n     * @param str The string to convert\n     * @param _default The default value to use if the string cannot be converted\n     */\n    static toInt(str: string, _default: number = 0): number {\n        let value = parseInt(str, 10);\n        if (isNaN(value) || (value + \"\" !== str)) {\n            value = _default;\n        }\n        return value;\n    }\n\n    /**\n     * Converts a string to a floating point value using `parseFloat`.\n     * If the string cannot be converted then the passed default value is returned\n     * @param str The string to convert\n     * @param _default The default value to use if the string cannot be converted\n     */\n    static toNumber(str: string, _default: number = 0): number {\n        let value = parseFloat(str);\n        if (isNaN(value)) {\n            value = _default;\n        }\n        return value;\n    }\n\n    /**\n     * Converts a string to a `Date` using `Date.parse`.\n     * The date is returned in UTC. If the string cannot be converted then `undefined` is returned\n     * @param str The string to convert\n     * @return The converted `Date` in UTC or `undefined`\n     */\n    static toDate(str: string): Date | undefined {\n        const ms = Date.parse(str);\n        if (!ms && ms !== 0) {\n            return undefined;\n        }\n        return new Date(ms + new Date(ms).getTimezoneOffset() * 60000); // get date in UTC\n    }\n\n    /**\n     * Get the time component of a `Date` in milliseconds\n     *\n     * @param date The date\n     * @return The time in milliseconds\n     */\n    static getTime(date: Date): number {\n        if (!date) {\n            return 0;\n        }\n        return (date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds()) * 1000 + date.getMilliseconds();\n    }\n\n    /**\n     * Return the current date and time\n     */\n    static get now(): Date {\n        return new Date();\n    }\n\n    /**\n     * Converts a `Date` to a Sinequa system date string (`dd-mm-yyyy[ hh:mm:ss]`)\n     * If the time component of the date is 0 then only the date portion of the string is included\n     *\n     * @param date The `Date` to convert\n     */\n    static toSysDateStr(date: Date): string {\n        if (!date)  {\n            return \"\";\n        }\n        const m = moment(date);\n        if (Utils.getTime(date) === 0) {\n            return m.format(\"YYYY-MM-DD\");\n        }\n        else {\n            return m.format(\"YYYY-MM-DD HH:mm:ss\");\n        }\n    }\n\n    /**\n     * Converts a Sinequa system date string (`dd-mm-yyyy[ hh:mm:ss]`) to a `Date`\n     * If the string cannot be converted then `undefined` is returned\n     *\n     * @param date The Sinequa system date string to convert\n     */\n    static fromSysDateStr(value: string): Date | undefined {\n        const m = moment(value, \"YYYY-MM-DD HH:mm:ss\");\n        if (m.isValid()) {\n            return m.toDate();\n        }\n        return undefined;\n    }\n\n    private static rxSysDateTime = /^\\d{4}-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])(?: (?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d)?$/;\n    // private static rxISO8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n    // ISO8601 combined date and time\n    private static rxISO8601DateTime = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\n\n    private static isSysDateTime(str: string): boolean {\n        return Utils.rxSysDateTime.test(str);\n    }\n\n    private static isISO8601DateTime(str: string): boolean {\n        return Utils.rxISO8601DateTime.test(str);\n    }\n\n    /**\n     * Converts a Javascript value to a JSON string using `JSON.stringify`.\n     * Date objects are converted to Sinequa system strings\n     *\n     * @param value The value to convert\n     * @param options Options for the conversion. The default is `{pretty: false}`\n     */\n    static toJson(value: any, options: ToJsonOptions = {pretty: false}): string {\n        return JSON.stringify(value,\n            function(key: string, value: any): any  {\n                if (key && Utils.isDate(this[key])) {\n                    const str = Utils.toSysDateStr(this[key]);\n                    return str;\n                }\n                return value;\n            }, options.pretty ? 2 : 0);\n    }\n\n    /**\n     * Converts a string to an object using `JSON.parse`.\n     * Strings that are either in Sinequa system date or ISO8601 format are converted to\n     * `Date` objects if the `reviveDates` option is specified.\n     *\n     * @param str The string to convert\n     * @param options Options for the conversion. The default is `{reviveDates: false}`\n     */\n    static fromJson(str: string, options: FromJsonOptions = {reviveDates: false}): any {\n        if (!str || typeof str !== \"string\") {\n            return {};\n        }\n        try {\n            return JSON.parse(str, options.reviveDates ?\n                (key, value) => {\n                    if (options.reviveDates && typeof value === \"string\") {\n                        if (Utils.isSysDateTime(value)) {\n                            const m = moment(value, \"YYYY-MM-DD HH:mm:ss\");\n                            if (m.isValid()) {\n                                return m.toDate();\n                            }\n                        }\n                        else if (Utils.isISO8601DateTime(value)) {\n                            const m = moment(value, moment.ISO_8601);\n                            if (m.isValid()) {\n                                return m.toDate();\n                            }\n                        }\n                    }\n                    return value;\n                } : undefined);\n        }\n        catch (exception) {\n            console.log(\"Utils.fromJson exception:\", exception);\n            return null;\n        }\n    }\n\n    /**\n     * Converts a `FieldValue` value to a string compatible with Sinequa's SQL syntax.\n     * String and `Date` values are enclosed in single quotes if the quote parameter is `true`\n     *\n     * @param value The value to convert\n     * @param quote If set, the returned string will be enclosed in single quotes for string and `Date` values\n     */\n    static toSqlValue(value: FieldValue, quote?: boolean): string {\n        if (Utils.isNumber(value)) {\n            return value + \"\";\n        }\n        if (Utils.isDate(value)) {\n            if (quote) {\n                return \"'\" + Utils.toSysDateStr(value) + \"'\";\n            }\n            else {\n                return Utils.toSysDateStr(value);\n            }\n        }\n        if (Utils.isBoolean(value)) {\n            return value ? \"true\" : \"false\";\n        }\n        if (Utils.isArray(value)) {\n            const ret: string[] = [];\n            value.forEach(v => {\n                if (ret.length > 0) {\n                    ret.push(\",\");\n                }\n                if (!v) {\n                    ret.push(\"null\");\n                }\n                else if (Utils.isString(v)) {\n                    ret.push(v);\n                }\n                else {\n                    ret.push(v.display || v.value || \"\");\n                }\n            });\n            ret.splice(0, 0, \"[\");\n            ret.push(\"]\");\n            return ret.join(\"\");\n        }\n        if (quote) {\n            return \"'\" + value + \"'\";\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * Clean a string so it is compatible with values stored in a Sinequa tree type-column.\n     * The following operations are performed:\n     * * ensure that the string starts and ends with forward slashes\n     * * replace tab characters with spaces\n     * * replace semi-colons with commas\n     * * replace back slashes with forward slashes\n     *\n     * @param s The string to clean\n     */\n    static treeClean(s: string): string {\n        if (Utils.isEmpty(s)) {\n            return s;\n        }\n        return Utils.addUrl(\"/\", Utils.replace(Utils.replace(Utils.replace(s, \"\\t\", \" \"), \";\", \",\"), \"\\\\\", \"/\"), \"/\");\n    }\n\n    /**\n     * Return the first node of a Sinequa tree value enclosed in forward slashes\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeFirst(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts.length === 0 ? \"\" : `/${parts[0]}/`;\n    }\n\n    /**\n     * Return the first node of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeFirstNode(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts[0];\n    }\n\n    /**\n     * Return the last node of a Sinequa tree value enclosed in forward slashes\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeLast(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts.length === 0 ? \"\" : `/${parts[parts.length - 1]}/`;\n    }\n\n    /**\n     * Return the last node of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeLastNode(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts[parts.length - 1];\n    }\n\n    /**\n     * Return the nodes making up a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeNodes(s: string): string[] {\n        return Utils.split(s, \"/\");\n    }\n\n    /**\n     * Return a Sinequa tree value, removing enclosing forward slash characters\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeDisplay(s: string): string {\n        if (!!s) {\n            if (s[0] === \"/\") {\n                s = s.substr(1);\n            }\n            if (s[s.length - 1] === \"/\") {\n                s = s.substr(0, s.length - 1);\n            }\n        }\n        return s;\n    }\n\n    /**\n     * Return the node count of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeCount(s: string): number {\n        const count = Utils.count(s, \"/\");\n        return count > 0 ? count - 1 : 0;\n    }\n\n    /**\n     * Traverses a tree structure, executing a callback function at every node\n     * @param nodes the nodes to traverse\n     * @param callback the callback function\n     */\n    public static traverse<T extends TreeNode>(nodes: T[], callback: (lineage: T[] | undefined) => boolean): boolean {\n        if (!nodes || nodes.length === 0) {\n            return false;\n        }\n        if (!callback) {\n            return false;\n        }\n        const lineage: T[] = [];\n        const stack: (T | undefined)[] = [];\n        let _i = nodes.length;\n        while (_i--) {\n            stack.push(nodes[_i]);\n        }\n        while (stack.length) {\n            const node = stack.pop();\n            if (!node) {\n                lineage.pop();\n                callback(undefined);\n            }\n            else {\n                lineage.push(node);\n                if (callback(lineage)) {\n                    return true;\n                }\n                stack.push(undefined);\n                if (node.items && node.items.length > 0) {\n                    _i = node.items.length;\n                    while (_i--) {\n                        stack.push(node.items[_i] as T);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return a pseudo-GUID value using `Math.random`\n     *\n     * @param withHyphens If set, the returned GUID includes hyphen separators\n     */\n    static guid(withHyphens = true): string {\n        let d = Date.now();\n        const guid = (withHyphens ?\n            'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx' : 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx').replace(/[xy]/g, (c) => {\n                const r = (d + Math.random() * 16) % 16 | 0;\n                d = Math.floor(d / 16);\n                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n            });\n        return guid;\n    }\n\n    /**\n     * Return `true` if the passed value is `undefined`\n     */\n    static isUndefined(value): value is undefined {\n        return typeof value === 'undefined';\n    }\n\n    /**\n     * Return `true` if the passed value is an `object`\n     */\n    static isObject(value): value is any {\n        return value !== null && typeof value === 'object';\n    }\n\n    /**\n     * Return `true` if the passed value is a `string`\n     */\n    static isString(value): value is string {\n        return typeof value === 'string';\n    }\n\n    /**\n     * Return `true` if the passed value is a `number`\n     */\n    static isNumber(value): value is number {\n        return typeof value === 'number';\n    }\n\n    /**\n     * Return `true` if the passed value is a `boolean`\n     */\n    static isBoolean(value): value is boolean {\n        return typeof value === 'boolean';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Date`\n     */\n    static isDate(value): value is Date {\n        return Object.prototype.toString.call(value) === '[object Date]';\n    }\n\n    /**\n     * Return `true` if the passed value is a scalar (`number`, `boolean` or `Date`)\n     */\n    static isScalar(value): value is number | boolean | Date {\n        return Utils.isNumber(value) || Utils.isBoolean(value) || Utils.isDate(value);\n    }\n\n    /**\n     * Return `true` if the passed value is an `Array`\n     */\n    static isArray(value): value is Array<any> {\n        return Array.isArray(value);\n    }\n\n    /**\n     * Return `true` if the passed value is iterable\n     */\n    static isIterable(value): value is Array<any> {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return typeof value[Symbol.iterator] === \"function\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `Map`\n     */\n    static isMap(value): value is Map<any, any> {\n        return Object.prototype.toString.call(value) === '[object Map]';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Function`\n     */\n    static isFunction(value): value is Function {\n        return typeof value === 'function';\n    }\n\n    /**\n     * Return `true` if the passed value is a `RegExp`\n     */\n    static isRegExp(value): value is RegExp {\n        return Object.prototype.toString.call(value) === '[object RegExp]';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Window`\n     */\n    static isWindow(value): value is Window {\n        return value && value.window === value;\n    }\n\n    /**\n     * Return `true` if the passed value is a `File`\n     */\n    static isFile(value: any): value is File {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object File]\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `FormData`\n     */\n    static isFormData(value: any): value is FormData {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object FormData]\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `Blob`\n     */\n    static isBlob(value: any): value is Blob {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object Blob]\";\n    }\n\n    /**\n     * Return `true` if the passed value is an `ArrayBuffer`\n     */\n    static isArrayBuffer(value: any): value is ArrayBuffer {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object ArrayBuffer]\";\n    }\n\n    private static isArrayLike(obj): boolean {\n        // `null`, `undefined` and `window` are not array-like\n        if (obj == null || Utils.isWindow(obj)) return false;\n\n        // arrays, strings and jQuery/jqLite objects are array like\n        // * jqLite is either the jQuery or jqLite constructor function\n        // * we have to check the existance of jqLite first as this method is called\n        //   via the forEach method when constructing the jqLite object in the first place\n        if (Utils.isArray(obj) || Utils.isString(obj) /*|| (jqLite && obj instanceof jqLite)*/) return true;\n\n        // Support: iOS 8.2 (not reproducible in simulator)\n        // \"length\" in obj used to prevent JIT error (gh-11508)\n        const length = \"length\" in Object(obj) && obj.length;\n\n        // NodeList objects (with `item` method) and\n        // other objects with suitable length characteristics are array-like\n        return Utils.isNumber(length) &&\n            (length >= 0 && (length - 1) in obj || typeof obj.item === 'function');\n    }\n\n    /**\n     * Return `true` if the passed value is an `object` without a prototype\n     */\n    static isBlankObject(value): value is object {\n        return value !== null && typeof value === 'object' && !Object.getPrototypeOf(value);\n    }\n\n    private static TYPED_ARRAY_REGEXP = /^\\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\\]$/;\n    /**\n     * Return true if the passed value is a `TypedArray`\n     */\n    static isTypedArray(value) {\n        return value && Utils.isNumber(value.length) && Utils.TYPED_ARRAY_REGEXP.test(Object.prototype.toString.call(value));\n    }\n\n    /**\n     * Return a promise that is a resolved after a specified amount of time\n     *\n     * @param ms The time to delay in milliseconds\n     */\n    static delay(ms: number = 0): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            window.setTimeout(() => {\n                resolve();\n            }, ms);\n        });\n    }\n\n    /**\n     *\n     * @param value\n     * @param _default\n     */\n    static isTrue(\n        value,\n        _default?: boolean): boolean {\n        if (typeof (value) === 'string') {\n            value = value.toLowerCase();\n        }\n        switch (value) {\n            case true:\n            case \"true\":\n            case 1:\n            case \"1\":\n            case \"on\":\n            case \"yes\":\n                return true;\n            case \"\":\n            case undefined:\n                return !!_default;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Compares two strings using the current locale. The return value is negative\n     * if `a` comes before `b` and positive if `a` comes after `b`. If the values\n     * are equal then `0` is returned\n     *\n     * @param a The first string\n     * @param b The second string\n     * @param ignoreCase If set, do a case-insensitive comparison\n     */\n    static compare(a: string, b: string, ignoreCase: boolean = true): number {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.localeCompare(b);\n    }\n\n    /**\n     * Return `true` if two strings are equal, respecting case\n     *\n     * @param a The first string\n     * @param b The second string\n     */\n    static eq(a: string, b: string): boolean {\n        return Utils.compare(a, b, false) === 0;\n    }\n\n    /**\n     * Return `true` if two strings are equal, ignoring case\n     *\n     * @param a The first string\n     * @param b The second string\n     */\n    static eqNC(a: string, b: string): boolean {\n        return Utils.compare(a, b, true) === 0;\n    }\n\n    /**\n     * Return `true` if a number of strings are equal, ignoring case\n     *\n     * @param a The first string\n     * @param b Remaining strings\n     */\n    static eqNCN(a: string, ...b: string[]) {\n        if (!b) {\n            return false;\n        }\n        for (const s of b) {\n            if (Utils.eqNC(a, s)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the length of a string. If the string is empty (`null` or `undefined`)\n     * @param s A string\n     */\n    static len(s: string) {\n        return (s || '').length;\n    }\n\n    /**\n     * Return `true` if a string starts with another\n     *\n     * @param a The string to test\n     * @param b The prefix\n     * @param ignoreCase If `true` then ignore case\n     */\n    static startsWith(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.startsWith(b);\n    }\n\n    /**\n     * Return `true` if a string ends with another\n     *\n     * @param a The string to test\n     * @param b The postfix\n     * @param ignoreCase If `true` then ignore case\n     */\n    static endsWith(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.endsWith(b);\n    }\n\n    /**\n     * Return `true` if a string is a substring of another\n     * @param a The string to test\n     * @param b The substring\n     * @param ignoreCase If `true` then ignore case\n     */\n    static includes(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.includes(b);\n    }\n\n    /**\n     * Return the upper case value of a string using the current locale\n     */\n    static toUpperCase(s: string): string {\n        if (s) {\n            return s.toLocaleUpperCase();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string with the first character converted to upper case using the current locale\n     */\n    static toUpperFirst(s: string): string {\n        if (s) {\n            return s[0].toLocaleUpperCase() + s.substr(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Return the lower case value of a string using the current locale\n     */\n    static toLowerCase(s: string): string {\n        if (s) {\n            return s.toLocaleLowerCase();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string with the first character converted to lower case using the current locale\n     */\n    static toLowerFirst(s: string): string {\n        if (s) {\n            return s[0].toLocaleLowerCase() + s.substr(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where the first character of each space separated word is converted to upper case.\n     * However, if a word contains a full stop character the first character is left unchanged\n     */\n    static toStartCase(text: string): string {\n        if (text) {\n            const words = text.split(/[\\s]+/);\n            return words.map(value => !value.includes(\".\") ? Utils.toUpperFirst(value) : value).join(\" \");\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any leading and trailing whitespace characters are removed\n     */\n    static trim(s: string): string {\n        if (s) {\n            return s.trim();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any leading whitespace characters are removed\n     */\n    static trimStart(s: string): string {\n        if (s) {\n            return s.trimStart();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any trailing whitespace characters are removed\n     */\n    static trimEnd(s: string): string {\n        if (s) {\n            return s.trimEnd();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string truncated to a maximum length. If the length of the string is greater than `maxLength`\n     * then it is truncated to `maxLength and a `suffix` appended. Otherwise the string is returned unchanged\n     *\n     * @param s The string to truncate\n     * @param maxLength The maximum length\n     * @param suffix The value to append if the string is truncated. The default is `...`\n     */\n    static truncate(s: string, maxLength: number, suffix?: string): string {\n        if (!s) {\n            return \"\";\n        }\n        suffix = suffix || \"...\";\n        if (s.length <= maxLength) {\n            return s;\n        }\n        return s.substring(0, maxLength - suffix.length) + suffix;\n    }\n\n    private static regExEscapeRegEx = /[-\\/\\\\^$*+?.()|[\\]{}]/g;\n\n    /**\n     * Return a string where any regular expresion operators are escaped\n     */\n    static regExEscape(s: string): string {\n        if (!s) {\n            return \"\";\n        }\n        return s.replace(Utils.regExEscapeRegEx, \"\\\\$&\");\n    }\n\n    /**\n     * Replaces patterns in a string with a replacement string. The pattern can either a string\n     * or a `RegExp`.\n     *\n     * @param s The string in which to search for a pattern\n     * @param pattern The pattern\n     * @param replacement The replacement string to replace any occurrences of the pattern in the string\n     */\n    static replace(s: string, pattern: string | RegExp, replacement: string): string {\n        if (!s || !pattern) {\n            return \"\";\n        }\n        if (Utils.isRegExp(pattern)) {\n            return s.replace(pattern, replacement);\n        }\n        else {\n            return s.replace(new RegExp(Utils.regExEscape(pattern), \"g\"), replacement);\n        }\n    }\n\n    /**\n     * Split a string into an array of substrings using the passed separators\n     *\n     * @param s The string to split\n     * @param separators One or more separators\n     * @param trim If `true` trim any leading and trailing spaces from the substrings\n     * @param removeEmpty If `true` exclude any empty strings from the array of substrings\n     */\n    static split(s: string, separators: string | string[], trim = true, removeEmpty = true): string[] {\n        if (!s) {\n            return [];\n        }\n        if (!separators) {\n            return [s];\n        }\n        let split: string[];\n        if (typeof separators === \"string\") {\n            split = s.split(separators);\n            if (trim) {\n                split = split.map(value => value.trim());\n            }\n        }\n        else {\n            let rxs = separators.map((value) => Utils.regExEscape(value)).join(\"|\");\n            if (trim) {\n                rxs = \"(?:^\\\\s*)|(?:\\\\s*(?:\" + rxs + \")\\\\s*)|(?:\\\\s*$)\";\n            }\n            split = s.split(new RegExp(rxs));\n        }\n        if (removeEmpty) {\n            split = split.filter((value) => {\n                return !Utils.isEmpty(value);\n            });\n        }\n        return split;\n    }\n\n    /**\n     * Return a string in kebab case (`CatDog => cat-dog`)\n     */\n    static toKebabCase(text: string): string {\n        return kebabCase(text);\n    }\n\n    /**\n     * Return a string in snake case (`CatDog => cat_dog`)\n     */\n    static toSnakeCase(text: string): string {\n        return snakeCase(text);\n    }\n\n    /**\n     * Return a string in camel case (`CatDog => catDog`)\n     */\n    static toCamelCase(text: string): string {\n        return camelCase(text);\n    }\n\n    /**\n     * Return a string with any diacritics removed\n     */\n    static removeAccents(text: string): string {\n        if (!text) {\n            return \"\";\n        }\n        return removeDiacritics(text);\n    }\n\n    /**\n     * Return a string in normalized form which can be used to match entity values. A normalized value\n     * has any diacritics removed and is converted to upper case\n     */\n    static normalize(text: string | null | undefined): string {\n        if (!text) {\n            return \"\";\n        }\n        return Utils.removeAccents(text).toUpperCase();\n    }\n\n    /**\n     * Return `true` if a string is valid as a simple value for the Sinequa admininistration\n     */\n    static isValidSimpleName(name: string): boolean {\n        return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n    }\n\n    /**\n     * Return `true` if a string is valid as a scoped (`.` separated) simple value for the Sinequa admininistration\n     */\n    static isValidScopedSimpleName(name: string): boolean {\n        return /^[a-zA-Z_]([\\.]?[a-zA-Z0-9_]+)*$/.test(name);\n    }\n\n    /**\n     * Return `true` if a value is `null`, `undefined` or `\"\"`\n     */\n    static isEmpty(value: any): boolean {\n        if (value === \"\") {\n            return true;\n        }\n        if (value === null) {\n            return true;\n        }\n        if (Utils.isUndefined(value)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Return the number of occurrences of a substring in a string\n     *\n     * @param text The text to test\n     * @param sub The substring\n     * @param ignoreCase If `true` don't respect case when matching the substring\n     */\n    static count(text: string, sub: string, ignoreCase = true): number {\n        if (!text || !sub) {\n            return 0;\n        }\n        if (ignoreCase) {\n            text = text.toLocaleUpperCase();\n            sub = sub.toLocaleUpperCase();\n        }\n        let pos = -1;\n        let count = 0;\n        while (true) {\n            pos = text.indexOf(sub, pos + 1);\n            if (pos === -1) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n\n    /**\n     * Return a string converted to base64\n     */\n    static toBase64(value: string): string {\n        return btoa(encodeURIComponent(value).replace(/%([0-9A-F]{2})/g, (match, hex) => String.fromCharCode(parseInt(hex, 16))));\n    }\n\n    /**\n     * Return a string converted from base64\n     */\n    static fromBase64(value: string): string {\n        return decodeURIComponent(atob(value).split('').map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    }\n\n    /**\n     * Return the SHA256 hash value of string\n     */\n    static sha256(value: string): string {\n        const sha = new jsSHA(\"SHA-256\", \"TEXT\");\n        sha.update(value);\n        return sha.getHash(\"B64\");\n    }\n\n    /**\n     * Return the SHA512 hash value of string\n     */\n    static sha512(value: string): string {\n        const sha = new jsSHA(\"SHA-512\", \"TEXT\");\n        sha.update(value);\n        return sha.getHash(\"B64\");\n    }\n\n    /**\n     * Return a string where any HTML special characters are percent encoded\n     */\n    static encodeHTML(value: string): string {\n        return escape(value);\n    }\n\n    /**\n     * Return a string where any percent encoded characters are replaced by their corresponding unencoded characters\n     */\n    static decodeHTML(value: string): string {\n        return unescape(value);\n    }\n\n    /**\n     * Get a field with passed name from an object. The field name is matched insensitive of case\n     */\n    static getField<T>(obj: MapOf<T>, name: string): T | undefined {\n        if (!Utils.isObject(obj) || Utils.isEmpty(name)) {\n            return undefined;\n        }\n        const keys = Object.keys(obj).filter(key => Utils.eqNC(key, name));\n        if (keys.length === 0) {\n            return undefined;\n        }\n        return obj[keys[0]];\n    }\n\n    /**\n     * Clear fields from an object. If the `_delete` parameter is `false` then\n     * array or map fields are emptied and other fields are set to `undefined`.\n     * If the `_delete` parameter is `true` then fields are deleted\n     */\n    static clearObject(obj: {}, _delete: boolean = false): {} {\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                if (_delete) {\n                    delete obj[prop];\n                }\n                else {\n                    if (Utils.isArray(obj[prop])) {\n                        obj[prop].length = 0;\n                    }\n                    else if (Utils.isMap(obj[prop])) {\n                        obj[prop].clear();\n                    }\n                    else {\n                        obj[prop] = undefined;\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Return the non-empty fields in the `override` object that that are different to fields of the same name\n     * in the `template` object\n     * @param template The object to compare against\n     * @param override The object defining the fields and values to be compared\n     * @param ret An optional return object. If not set a new object is created\n     */\n    static deltas(template: {}, override: {}, ret?: {}): {} {\n        if (!ret) {\n            ret = {};\n        }\n        for (const name of Object.keys(override)) {\n            if (name in template) {\n                if (Utils.isObject(override[name]) && !Utils.isArray(override[name])) {\n                    const diff = Utils.deltas(template[name], override[name]);\n                    if (!Utils.equals(diff, {})) {\n                        ret[name] = diff;\n                    }\n                }\n                else if (!Utils.equals(template[name], override[name])) {\n                    if (!Utils.isEmpty(override[name])) {\n                        ret[name] = override[name];\n                    }\n                }\n            }\n            else {\n                if (!Utils.isEmpty(override[name])) {\n                    ret[name] = override[name];\n                }\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Returns an object containing the fields in a source object whose names match one of the passed keys. The keys can either be\n     * an array of strings or a callback function that is called for each field in the source object and returns `true` if a field\n     * should be \"picked\".\n     *\n     * @param obj The source object\n     * @param keys An array of keys or a callback function\n     */\n    static pick(obj: {}, keys: string[] | ((value: any, key: string, obj: object) => boolean)): {} {\n        const ret = {};\n        if (!!obj) {\n            if (Utils.isFunction(keys)) {\n                Object.keys(obj).forEach(key => {\n                    if (keys(obj[key], key, obj)) {\n                        ret[key] = obj[key];\n                    }\n                });\n            }\n            else {\n                for (const key of keys) {\n                    if (obj.hasOwnProperty(key)) {\n                        ret[key] = obj[key];\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Create a debounce function that delays invoking `func` until after `wait` millseconds have elapsed since the previous invocation.\n     *\n     * @param func The function to debounce\n     * @param wait The delay in milliseconds to wait before calling `func`\n     * @param immediate If `true` then make an initial call to `func`\n     * @param every An optional callback to call without debouncing\n     */\n    static debounce(func: (...params) => any, wait = 0, immediate = false, every?: (...params) => any): (...params) => any {\n        let timeout, args, context, timestamp, result;\n\n        const later = function() {\n            const last = Date.now() - timestamp;\n\n            if (last < wait && last >= 0) {\n                timeout = setTimeout(later, wait - last);\n            }\n            else {\n                timeout = null;\n                if (!immediate) {\n                    result = func.apply(context, args);\n                    if (!timeout) {\n                        context = args = null;\n                    }\n                }\n            }\n        };\n\n        return function(this: any) {\n            context = this;\n            args = arguments;\n            if (every) {\n                every.apply(context, args);\n            }\n            timestamp = Date.now();\n            const callNow = immediate && !timeout;\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Create a throttled function that only invokes func at most once per every `wait` milliseconds.\n     *\n     * @param func The function to throttle\n     * @param wait The number of milliseconds to throttle invocations to\n     * @param options Options to control the throttling behaviour\n     */\n    static throttle(func: (...params) => any, wait: number, options: ThrottleSettings = {}): (...pararms) => any {\n        let timeout, context, args, result;\n        let previous = 0;\n\n        const later = function() {\n            previous = options.leading === false ? 0 : Date.now();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        };\n\n        const throttled = function(this: any) {\n            const now = Date.now();\n            if (!previous && options.leading === false) previous = now;\n            const remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) context = args = null;\n            }\n            else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n\n        throttled[\"cancel\"] = function() {\n            clearTimeout(timeout);\n            previous = 0;\n            timeout = context = args = null;\n        };\n\n        return throttled;\n    }\n\n    private static frameTasks: Map<(...params) => any, FrameTask> = new Map<(...params) => any, FrameTask>();\n\n    /**\n     * Create a function that calls `callback` the next time the browser next repaints\n     */\n    static frame(callback: (...params) => any): (...params) => any {\n        return (...params) => {\n            if (Utils.frameTasks.size === 0) {\n                requestAnimationFrame((timestamp) => {\n                    Utils.frameTasks.forEach((task, key, map) => {\n                        task.call();\n                    });\n                    Utils.frameTasks.clear();\n                });\n            }\n            const task = Utils.frameTasks.get(callback);\n            if (task) {\n                // Update params\n                task.params = params;\n            }\n            else {\n                // Add new task\n                Utils.frameTasks.set(callback, new FrameTask(callback, params));\n            }\n        };\n    }\n\n    /**\n     * Create a URL object from a `url` string. If the string is a relative url then\n     * `base` specifies the base to use\n     */\n    static makeURL(url: string, base?: string): URL {\n        if (!base) {\n            base = \"http://x.y.z\"; // Firefox and IOS need this\n        }\n        return new URL(url, base);\n    }\n\n    /**\n     * Add query string parameters to a url\n     *\n     * @param url The url to which to add the parameters\n     * @param params An object whose fields should be added as parameters\n     */\n    static addSearchParams(url: string, params: MapOf<any>): string {\n        if (!url || !params) {\n            return url;\n        }\n        const urlObj = Utils.makeURL(url);\n        for (const param in params) {\n            if (params.hasOwnProperty(param)) {\n                urlObj.searchParams.set(param, params[param]);\n            }\n        }\n        const index = url.indexOf(\"?\");\n        if (index !== -1) {\n            url = url.substr(0, index);\n        }\n        url += \"?\" + urlObj.searchParams.toString();\n        return url;\n    }\n\n    private static _addUrl(url: string, path: string): string {\n        if (!path) {\n            return url;\n        }\n        if (!url) {\n            return path;\n        }\n        if (url[url.length - 1] === \"/\") {\n            if (path[0] === \"/\") {\n                return url + path.substr(1);\n            }\n            else {\n                return url + path;\n            }\n        }\n        else {\n            if (path[0] === \"/\") {\n                return url + path;\n            }\n            else {\n                return url + \"/\" + path;\n            }\n        }\n    }\n\n    /**\n     * Add paths to a url adding path separators as necessary\n     *\n     * @param url The url\n     * @param paths One or more paths to add to the url\n     */\n    static addUrl(url: string, ...paths: string[]): string {\n        let _url = url;\n        for (const path of paths) {\n            _url = Utils._addUrl(_url, path);\n        }\n        return _url;\n    }\n\n    /**\n     * Return `true` if a url is absolute\n     */\n    static isUrlAbsolute(url: string): boolean {\n        return /^(?:[a-zA-Z][a-zA-Z\\d+.-]*:|\\/\\/)/.test(url);\n    }\n\n    /**\n     * Return an `HttpParams` object containing the fields in the passed object\n     */\n    static makeHttpParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        let httpParams = new HttpParams({encoder: new SqHttpParameterCodec()});\n        if (params) {\n            for (const param in params) {\n                if (params.hasOwnProperty(param)) {\n                    const _value = params[param];\n                    let value = \"\";\n                    if (Utils.isString(_value)) {\n                        value = _value;\n                    }\n                    else if (Utils.isBoolean(_value) || Utils.isNumber(_value)) {\n                        value = _value.toString();\n                    }\n                    else if (Utils.isDate(_value)) {\n                        value = Utils.toSysDateStr(_value);\n                    }\n                    else {\n                        value = Utils.toJson(_value);\n                    }\n                    httpParams = httpParams.set(param, value);\n                }\n            }\n        }\n        return httpParams;\n    }\n\n    private static escapeDiv: HTMLElement;\n\n    /**\n     * Return a string with HTML special characters escaped\n     *\n     * @param html The string to escape\n     */\n    static escapeHtml(html: string): string {\n        if (!html) {\n            return html;\n        }\n        if (!Utils.escapeDiv) {\n            Utils.escapeDiv = document.createElement(\"div\");\n        }\n        const textNode = Utils.escapeDiv.appendChild(document.createTextNode(html));\n        const escapedHtml = Utils.escapeDiv.innerHTML;\n        Utils.escapeDiv.removeChild(textNode);\n        return escapedHtml;\n    }\n\n    /**\n     * Move an element in an array\n     *\n     * @param array The array containing the element to move\n     * @param from The index of the element to move\n     * @param to The index that the element should be moved to\n     */\n    static arrayMove(array: any[], from: number, to: number): void {\n        if (to === from ) {\n            return;\n        }\n        array.splice(to, 0, array.splice(from, 1)[0]);\n    }\n\n    /**\n     * Set the contents of a target array to the contents of a source array\n     *\n     * @param target The target array\n     * @param source The source array\n     */\n    static arraySet(target: any[], source: any[]): any[] {\n        return target.splice.apply(target, [0, target.length].concat(source));\n    }\n\n    private static genericNext(value) {\n    }\n\n    private static genericError(error: any) {\n    }\n\n    private static genericComplete() {\n    }\n\n    /**\n     * A simple wrapped around `Observable.subscribe`\n     */\n    static subscribe<T>(\n        observable: Observable<T>,\n        next: (value: T) => void, error?: (err: any) => void, complete?: () => void): Subscription {\n        if (!next) {\n            next = Utils.genericNext;\n        }\n        if (!error) {\n            error = Utils.genericError;\n        }\n        if (!complete) {\n            complete = Utils.genericComplete;\n        }\n        return observable.subscribe(next, error, complete);\n    }\n\n    /**\n     * Return a value as a `Date` converting as necessary. If the value\n     * cannot be converted then `undefined` is returned\n     */\n    static asDate(value: any): Date | undefined {\n        if (!value) {\n            return undefined;\n        }\n\n        if (Utils.isDate(value)) {\n            return value as Date;\n        }\n\n        if (Utils.isString(value)) {\n            return Utils.toDate(value as string);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Return a value as a `number` converting as necessary. If the value\n     * cannot be converted then `undefined` is returned.\n     */\n    static asNumber(value: any): number | undefined {\n        if (!value && value !== 0) {\n            return undefined;\n        }\n        if (Utils.isNumber(value)) {\n            return value;\n        }\n        if (Utils.isString(value)) {\n            if (Utils.testInteger(value)) {\n                return Utils.toInt(value);\n            }\n            if (Utils.testFloat(value)) {\n                return Utils.toNumber(value);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Return a value as a `string` converting as necessary\n     */\n    static asString(value: any): string | undefined {\n        if (!value && value !== \"\") {\n            return undefined;\n        }\n\n        if (Utils.isString(value)) {\n            return value as string;\n        }\n\n        return value.toString();\n    }\n\n    /**\n     * Return `true` if a string represents an integer\n     */\n    static testInteger(str: string): boolean {\n        return /^(\\-|\\+)?([0-9]+)$/.test(str);\n    }\n\n    /**\n     * Return `true` if a string represents a floating point number\n     */\n    static testFloat(str: string): boolean {\n        return /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/.test(str);\n    }\n\n    /**\n     * Round the passed number away from zero: 4.5 => 5, -4.5 => -5\n     */\n    static roundAway(num: number): number {\n        return num >= 0 ? Math.round(num) : Math.sign(num) * Math.round(Math.abs(num));\n    }\n\n    private static matchSuffix(str: string, factor: number, ...suffixes: string[]): {str: string, factor: number} | undefined {\n        for (const suffix of suffixes) {\n            if (Utils.endsWith(str, suffix)) {\n                return {\n                    str: Utils.trimEnd(str.substr(0, str.length - suffix.length)),\n                    factor\n                };\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Convert a size in string form to a number in bytes.\n     *\n     * The following units are supported: `b`, `kb`, `mb`, `gb`, `tb`, `pb`\n     *\n     * For example `2.5 gb` will return `2621440`.\n     */\n    static toSize(str: string, _default = 0): number {\n        str = Utils.trim(str);\n        if (!str) {\n            return _default;\n        }\n        let factor = 1;\n        let ret = Utils.matchSuffix(str, 1024 * 1024 * 1024 * 1024 * 1024, \"PB\", \"PO\");\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024 * 1024 * 1024, \"TB\", \"TO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024 * 1024, \"GB\", \"GO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024, \"MB\", \"MO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024, \"KB\", \"KO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1, \"B\", \"O\");\n        }\n        if (ret !== undefined) {\n            str = ret.str;\n            factor = ret.factor;\n        }\n        if (!Utils.testFloat(str)) {\n            return _default;\n        }\n        const value = Utils.toNumber(str, _default) * factor;\n        return Math.round(value);\n    }\n\n    private static calculateDuration(current: number, unit: string): number {\n        switch (Utils.toLowerCase(unit)) {\n            case \"d\":    case \"j\":\n            case \"days\": case \"jours\":\n            case \"day\":  case \"jour\":\n                return current * Utils.oneDay;\n            case \"h\":\n            case \"hours\": case \"heures\":\n            case \"hour\":  case \"heure\":\n                return current * Utils.oneHour;\n            case \"m\":\n            case \"minutes\": case \"minute\":\n            case \"mins\":    case \"min\":\n                return current * Utils.oneMinute;\n            case \"s\":\n            case \"seconds\":  case \"secondes\":\n            case \"second\":   case \"seconde\":\n            case \"secs\": case \"sec\":\n                return current * Utils.oneSecond;\n                break;\n            case \"ms\":\n            case \"milliseconds\": case \"miliseconds\":  case \"millisecondes\": case \"milisecondes\":\n            case \"millisecond\":  case \"milliseconde\": case \"milisecond\":    case \"miliseconde\":\n                return current;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * Convert a duration in string form to a number in milliseconds.\n     *\n     * These units are supported: `days`, `hours`, `minutes`, `seconds`, `milliseconds` (abbreviations are also supported)\n     *\n     * For example `3 h 2mins 4s => 10924000`\n     *\n     * @param defaultUnit The unit to use if no units are in the string. The default value is `ms`\n     */\n    static toDuration(str: string, defaultUnit = \"ms\"): number {\n        let total = 0;\n        if (str) {\n            let current = 0;\n            const tokens = str.match(/[0-9\\.,]+|[a-zA-Z]+/g) || [];\n            for (const token of tokens) {\n                if (/[a-zA-Z]/.test(token)) {\n                    total += Utils.calculateDuration(current, token);\n                    current = 0;\n                }\n                else {\n                    if (current) {\n                        total += Utils.calculateDuration(current, defaultUnit);\n                    }\n                    current = Utils.toNumber(token);\n                }\n            }\n            if (current) {\n                total += Utils.calculateDuration(current, defaultUnit);\n            }\n        }\n        return total;\n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Utils, MapOf, PatternMatcher} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"./format.service\";\nimport {AppWebService, AuditEvents, START_CONFIG, StartConfig,\n    CCApp, CCQuery, CCLabels, CCAutocomplete, CCColumn, CCIndex, CCWebService, CCConfig, CCList, CCAggregation,\n    EngineType, EngineTypeModifier, MINIMUM_COMPATIBLE_SERVER_API_VERSION} from \"@sinequa/core/web-services\";\nimport {ExprParser, ExprParserOptions, Expr} from \"./query/expr-parser\";\nimport {AppServiceHelpers} from \"./app-service-helpers\";\n\n/**\n * A base event from which all events that can be issued by the {@link AppService} are derived\n */\nexport interface AppEvent {\n    type: \"query-changed\";\n}\n\n/**\n * This event is fired each time the [ccquery]{@link AppService#ccquery} member is modified.\n */\nexport interface QueryChangedEvent extends AppEvent {\n    type: \"query-changed\";\n    current?: CCQuery;\n    previous?: CCQuery;\n}\n\n/**\n * A union of the different events that the {@link AppService} can generate\n */\nexport type AppEvents = QueryChangedEvent;\n\n/**\n * A service to manage the Sinequa SBA configuration\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppService implements OnDestroy {\n    // Should match AdditionalQueryableColumns in Engine.cs\n    private static extraColumns: MapOf<CCColumn> = {\n        id: AppService.makeColumn(\"id\", \"string\"),\n        text: AppService.makeColumn(\"text\", \"varchar\"),\n        documentlanguages: AppService.makeColumn(\"documentlanguages\", \"csv\", \"ci\"),\n        databasealias: AppService.makeColumn(\"databasealias\", \"varchar\"),\n        globalrelevance: AppService.makeColumn(\"globalrelevance\", \"double\"),\n        matchingpartnames: AppService.makeColumn(\"matchingpartnames\", \"csv\"),\n        matchlocations: AppService.makeColumn(\"matchlocations\", \"csv\"),\n        matchlocationsperpartname: AppService.makeColumn(\"matchlocationsperpartname\", \"varchar\"), // json\n        extracts: AppService.makeColumn(\"extracts\", \"csv\"),\n        extractsperpartname: AppService.makeColumn(\"extractsperpartname\", \"varchar\"), // json\n        extractslocations: AppService.makeColumn(\"extractslocations\", \"csv\"),\n        documentweight: AppService.makeColumn(\"documentweight\", \"varchar\"),\n        groupcount: AppService.makeColumn(\"groupcount\", \"integer\"),\n        accesslists: AppService.makeColumn(\"accesslists\", \"varchar\", undefined, [\"accessLists\"]) // json\n    };\n\n    /**\n     * The app configuration\n     */\n    app?: CCApp;\n    /**\n     * The labels configuration\n     */\n    cclabels?: CCLabels;\n    /**\n     * The autocomplete configuration\n     */\n    ccautocomplete?: CCAutocomplete;\n    /**\n     * The suggest queries configured on the application\n     */\n    suggestQueries: string[];\n    private columnsByQuery: MapOf<MapOf<CCColumn>>;\n    private columnsByIndex: MapOf<MapOf<CCColumn>>;\n    private fieldsByQuery: MapOf<string[]>;\n    private _defaultCCQuery?: CCQuery;\n    private _ccquery?: CCQuery;\n\n    protected _events = new Subject<AppEvents>();\n\n    private static toEngineType(type: string): EngineType {\n        if (!type) {\n            return EngineType.none;\n        }\n        switch (Utils.toLowerCase(type)) {\n            case \"bool\"     :\n            case \"boolean\"  : return EngineType.bool;\n            case \"date\"     : return EngineType.date;\n            case \"datetime\" : return EngineType.dateTime;\n            case \"time\"     : return EngineType.time;\n            case \"unsigned\" : return EngineType.unsigned;\n            case \"integer\"  : return EngineType.integer;\n            case \"float\"    : return EngineType.float;\n            case \"double\"   : return EngineType.double;\n            case \"dates\"    : return EngineType.dates;\n            case \"datetimes\": return EngineType.dateTimes;\n            case \"times\"    : return EngineType.times;\n            case \"varchar\"  : return EngineType.varchar;\n            case \"binary\"   : return EngineType.binary;\n            case \"string\"   : return EngineType.string;\n            case \"csv\"      : return EngineType.csv;\n            default         : return EngineType.none;\n        }\n    }\n\n    private static toEngineTypeModifierSimple(c: string): EngineTypeModifier {\n        switch (c) {\n            case 'a': return EngineTypeModifier.a;\n            case 'c': return EngineTypeModifier.c;\n            case 'd': return EngineTypeModifier.d;\n            case 'e': return EngineTypeModifier.e;\n            case 'i': return EngineTypeModifier.i;\n            case 'l': return EngineTypeModifier.l;\n            case 'n': return EngineTypeModifier.n;\n            case 't': return EngineTypeModifier.t;\n            case 'x': return EngineTypeModifier.x;\n            case 'z': return EngineTypeModifier.z;\n            default : return EngineTypeModifier.none;\n        }\n    }\n\n    private static toEngineTypeModifier(eType: EngineType, typeModifier: string): EngineTypeModifier {\n        let etm = EngineTypeModifier.none;\n        if (typeModifier) {\n            for (const c of typeModifier) {\n                etm |= AppService.toEngineTypeModifierSimple(c);\n            }\n        }\n        return etm;\n    }\n\n    private static makeColumn(name: string, type: string, typeModifier?: string, aliases?: string[]) {\n        const eType = AppService.toEngineType(type);\n        const eTypeModifier = AppService.toEngineTypeModifier(eType, typeModifier || \"\");\n        return {\n            name,\n            type,\n            typeModifier,\n            eType,\n            eTypeModifier,\n            aliases\n        };\n    }\n\n    /**\n     * Return `true` if a `column` is a string\n     */\n    static isString(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isString(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a csv\n     */\n    static isCsv(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isCsv(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a tree\n     */\n    static isTree(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isTree(column);\n    }\n\n    /**\n     * Return `true` if a `column` is an entity\n     */\n    static isEntity(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isEntity(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a boolean\n     */\n    static isBoolean(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isBoolean(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a date\n     */\n    static isDate(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isDate(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a double\n     */\n    static isDouble(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isDouble(column);\n    }\n\n    /**\n     * Return `true` if a `column` is an integer\n     */\n    static isInteger(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isInteger(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a number (integer or double)\n     */\n    static isNumber(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isNumber(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a scalar\n     */\n    static isScalar(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isScalar(column);\n    }\n\n    /**\n     * Return `true` if a `column` is sortable\n     */\n    static isSortable(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isSortable(column);\n    }\n\n    constructor(\n        @Inject(START_CONFIG) public startConfig: StartConfig,\n        public appWebService: AppWebService,\n        public intlService: IntlService,\n        public formatService: FormatService) {\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * Return an `Observable` stream of the events that the `AppService` can generate\n     */\n    get events(): Observable<AppEvents> {\n        return this._events;\n    }\n\n    /**\n     * Return the name of the SBA\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Return the origin of the Sinequa server\n     */\n    get origin(): string {\n        return this.startConfig.origin!;\n    }\n\n    private initDefaultQuery() {\n        if (!this.app) {\n            console.warn(\"No app configured\");\n            return;\n        }\n        // If not set explicitly, the default query is the first in the list\n        const defaultQueryName = this.app.defaultQueryName || Utils.split(this.app.queryNames, \",\")[0];\n        this._defaultCCQuery = Utils.getField<CCQuery>(this.app.queries, defaultQueryName);\n        if (!this._defaultCCQuery) {\n            console.warn(`Query not configured for app: ${this.appName}`);\n        }\n        this.ccquery = this._defaultCCQuery;\n    }\n\n    private setApp(app: CCApp) {\n        this.app = app;\n        this.verifyServerApiVersionCompatibility(app);\n        this.cclabels = this.getWebService<CCLabels>(this.app.labels);\n        this.ccautocomplete = this.getWebService<CCAutocomplete>(this.app.autocomplete);\n        this.initDefaultQuery();\n        this.makeMaps();\n        this.suggestQueries = Utils.split(this.ccautocomplete ? this.ccautocomplete.suggestQueries : \"\", \",\");\n    }\n\n    private verifyServerApiVersionCompatibility(app: CCApp): void {\n        if (!app) {\n            console.warn('Unexpected empty app configuration.');\n            return;\n        }\n        if (!app.apiVersion) {\n            console.error(`The App config '${app.name}' is not of 'Angular Workspace application' type.`);\n        } else if (app.apiVersion !== MINIMUM_COMPATIBLE_SERVER_API_VERSION) {\n            console.warn(`This SBA is not compatible with the REST API of Sinequa Server.\\n` +\n                `The SBA expects the server API version to be at least '${MINIMUM_COMPATIBLE_SERVER_API_VERSION}',` +\n                ` whereas the server API version is '${app.apiVersion}'.`);\n        }\n    }\n\n    /**\n     * Initialize this service by retrieving the current application\n     * configuration from the Sinequa server and using it to set up the data structures\n     * on which the service relies\n     */\n    init(): Observable<CCApp> {\n        return this.appWebService.get().pipe(\n            map(app => {\n                this.setApp(app);\n                return app;\n            }\n        ));\n    }\n\n    /**\n     * Initialize this service from an application configuration object. This is typically\n     * used for supporting mutiple concurrent queries within the same application by providing\n     * component level instances of this service.\n     */\n    initFromApp(app: CCApp) {\n        if (app) {\n            this.setApp(app);\n        }\n    }\n\n    /**\n     * Refresh the application configuration, reinitializing the service if it has changed\n     *\n     * @param auditEvents Any associated audit events that should be stored\n     */\n    refresh(auditEvents?: AuditEvents): Observable<CCApp | undefined> {\n        const observable = this.appWebService.refresh(this.app ? this.app.versionId : \"\", auditEvents);\n        observable.subscribe(\n            response => {\n                if (!response.upToDate && response.app) {\n                    this.setApp(response.app);\n                }\n                return response;\n            }\n        );\n        return observable.pipe(map((value) => {\n            return this.app;\n        }));\n    }\n\n    /**\n     * Clear the data associated with the service. Typically used when processing a user logout\n     */\n    clear() {\n        this.app = undefined;\n        this.cclabels = undefined;\n        this._defaultCCQuery = undefined;\n        this.ccquery = undefined;\n        this.clearMaps();\n    }\n\n    private indexIsNormal(ccindex: CCIndex): boolean {\n        return !!ccindex && (!ccindex.indexType || Utils.startsWith(ccindex.indexType, \"normal\"));\n    }\n\n    private getIndexForQuery(ccquery: CCQuery): CCIndex | undefined {\n        if (!ccquery) {\n            return undefined;\n        }\n        const indexes = Utils.split(ccquery.searchIndexes, [\",\"]);\n        if (indexes.length === 0) {\n            return this.app ? this.app.indexes._ : undefined;\n        }\n        else {\n            const ccindex = this.getIndex(indexes[0]);\n            if (ccindex && this.indexIsNormal(ccindex)) {\n                return this.app ? this.app.indexes._ : undefined;\n            }\n            return ccindex;\n        }\n    }\n\n    private _makeColumnMapForIndex(columnMap: MapOf<CCColumn>, ccindex: CCIndex) {\n        if (!ccindex || !ccindex.columns) {\n            return;\n        }\n        for (const columnName of Object.keys(ccindex.columns)) {\n            const column = ccindex.columns[columnName];\n            columnMap[Utils.toLowerCase(column.name)] = column;\n            if (column.aliases) {\n                for (const alias of column.aliases) {\n                    columnMap[Utils.toLowerCase(alias)] = column;\n                }\n            }\n        }\n    }\n\n    private _makeColumnMapForQuery(columnMap: MapOf<CCColumn>, ccquery: CCQuery) {\n        if (!ccquery || !ccquery.columnsInfo || !ccquery.columnsInfo.columns) {\n            return;\n        }\n        const ccindex = this.getIndexForQuery(ccquery);\n        if (!ccindex || !ccindex.columns) {\n            return;\n        }\n        for (const columnInfo of ccquery.columnsInfo.columns) {\n            if (columnInfo.name) {\n                const columnName = Utils.toLowerCase(columnInfo.name);\n                let column = ccindex.columns[columnName];\n                if (!column) {\n                    column = AppService.extraColumns[columnName];\n                }\n                if (column) {\n                    // Copy column so we can add the query specific aliases and labels\n                    column = Utils.copy(column);\n                    columnMap[columnName] = column;\n                    if (columnInfo.aliases) {\n                        column.aliases = Utils.split(columnInfo.aliases, [\",\", \";\"]);\n                        for (const alias of column.aliases) {\n                            columnMap[Utils.toLowerCase(alias)] = column;\n                        }\n                    }\n                    // Overwrite labels if defined on the query\n                    if (columnInfo.label) {\n                        column.label = columnInfo.label;\n                    }\n                    if (columnInfo.labelPlural) {\n                        column.labelPlural = columnInfo.labelPlural;\n                    }\n                    if (columnInfo.formatter) {\n                        column.formatter = columnInfo.formatter;\n                    }\n                    if (columnInfo.transforms) {\n                        column.transforms = columnInfo.transforms;\n                    }\n                    if (columnInfo.parser) {\n                        column.parser = columnInfo.parser;\n                    }\n                    if (columnInfo.description) {\n                        column.description = columnInfo.description;\n                    }\n                }\n            }\n        }\n    }\n\n    protected makeMaps() {\n        this.columnsByQuery = {};\n        this.columnsByIndex = {};\n        this.fieldsByQuery = {};\n        if (!this.app) {\n            return;\n        }\n        let columnMap: MapOf<CCColumn>;\n\n        // Queries\n        if (this.app.queries) {\n            for (const queryName of Object.keys(this.app.queries)) {\n                const ccquery = this.app.queries[queryName];\n                if (ccquery) {\n                    ccquery.$columnFieldsPattern = new PatternMatcher(\"included column fields\", \"excluded column fields\");\n                    ccquery.$columnFieldsPattern.includedPattern.setText(ccquery.columnFieldsIncluded);\n                    ccquery.$columnFieldsPattern.excludedPattern.setText(ccquery.columnFieldsExcluded);\n                    ccquery.$partnameFieldsPattern = new PatternMatcher(\"included part name fields\", \"excluded part name fields\");\n                    ccquery.$partnameFieldsPattern.includedPattern.setText(ccquery.partnameFieldsIncluded);\n                    ccquery.$partnameFieldsPattern.excludedPattern.setText(ccquery.partnameFieldsExcluded);\n                    if (ccquery.columnsInfo) {\n                        columnMap = {};\n                        this.columnsByQuery[Utils.toLowerCase(ccquery.name)] = columnMap;\n                        this._makeColumnMapForQuery(columnMap, ccquery);\n                    }\n                }\n            }\n        }\n\n        // Indexes\n        if (this.app.indexes) {\n            // Special normal index\n            const ccindex = this.app.indexes._;\n            if (ccindex) {\n                columnMap = {};\n                this.columnsByIndex._ = columnMap;\n                this._makeColumnMapForIndex(columnMap, ccindex);\n\n            }\n            for (const indexName of Object.keys(this.app.indexes)) {\n                const ccindex1 = this.app.indexes[Utils.toLowerCase(indexName)];\n                if (ccindex1) {\n                    if (this.indexIsNormal(ccindex1)) {\n                        if (ccindex1.name !== \"_\") {\n                            this.columnsByIndex[Utils.toLowerCase(ccindex1.name)] = this.columnsByIndex._;\n                        }\n                    }\n                    else {\n                        columnMap = {};\n                        this.columnsByIndex[Utils.toLowerCase(ccindex1.name)] = columnMap;\n                        this._makeColumnMapForIndex(columnMap, ccindex1);\n                    }\n                }\n            }\n        }\n\n        // Fields per query (contains aliases for default query and globally defined aliases)\n        const globalFields = new Map<string, string>();\n        const columns = this.columnsByIndex._;\n        if (columns) {\n            for (const key of Object.keys(columns)) {\n                const column = columns[key];\n                if (column.aliases && column.aliases.length > 0) {\n                    const alias = column.aliases[0];\n                    if (alias) {\n                        globalFields.set(alias, alias);\n                    }\n                }\n            }\n        }\n        for (const queryName of Object.keys(this.columnsByQuery)) {\n            const queryFields = new Map<string, string>(globalFields);\n            const columns1 = this.columnsByQuery[Utils.toLowerCase(this.defaultCCQuery ? this.defaultCCQuery.name : \"\")];\n            if (columns1) {\n                for (const key of Object.keys(columns1)) {\n                    const column = columns1[key];\n                    if (column.aliases && column.aliases.length > 0) {\n                        const alias = column.aliases[0];\n                        if (alias) {\n                            queryFields.set(alias, alias);\n                        }\n                    }\n                }\n                this.fieldsByQuery[queryName] = Array.from(queryFields.keys());\n            }\n        }\n    }\n\n    protected clearMaps() {\n        this.columnsByQuery = {};\n        this.columnsByIndex = {};\n        this.fieldsByQuery = {};\n    }\n\n    /**\n     * Get the configuration of the web service with the passed name\n     */\n    getWebService<T extends CCWebService>(name: string): T | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return Utils.getField<CCConfig>(this.app.webServices, name) as T;\n    }\n\n    /**\n     * Get the list configuration with the passed name\n     */\n    getList(name: string): CCList | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return this.app.lists[name];\n    }\n\n    /**\n     * Return the default {@link CCQuery}\n     */\n    get defaultCCQuery(): CCQuery | undefined {\n        return this._defaultCCQuery;\n    }\n\n    /**\n     * Return the current {@link CCQuery}\n     */\n    get ccquery(): CCQuery | undefined {\n        if (!!this._ccquery) {\n            return this._ccquery;\n        }\n        return this._defaultCCQuery;\n    }\n\n    /**\n     * Set the current {@link CCQuery}\n     */\n    set ccquery(value: CCQuery | undefined) {\n        if (value !== this._ccquery) {\n            const previous = this._ccquery;\n            this._ccquery = value;\n            this._events.next({type: \"query-changed\", current: this._ccquery, previous: previous});\n        }\n    }\n\n    /**\n     * Get the {@link CCQuery} with the passed name\n     */\n    getCCQuery(name: string): CCQuery | undefined {\n        return this.app ? this.app.queries[Utils.toLowerCase(name)] : undefined;\n    }\n\n    /**\n     * Set the current {@link CCQuery} to that with the passed name\n     */\n    setCCQuery(name?: string): boolean {\n        const ccquery = !name ? this.defaultCCQuery : this.getCCQuery(name);\n        if (ccquery) {\n            this.ccquery = ccquery;\n            return true;\n        }\n        else {\n            console.warn(`AppService.setCCQuery - query '${name}' does not exist`);\n            return false;\n        }\n    }\n\n    /**\n     * Return the fields defined on the current {@link CCQuery}\n     */\n    get fields(): string[] {\n        if (!this.ccquery) {\n            return [];\n        }\n        return this.fieldsByQuery[Utils.toLowerCase(this.ccquery.name)] || [];\n    }\n\n    /**\n     * Get the {@link CCAggregation} with the passed name\n     */\n    getCCAggregation(name: string): CCAggregation | undefined {\n        if (!this.ccquery || !this.ccquery.aggregations) {\n            return undefined;\n        }\n        return this.ccquery.aggregations.find((value) => Utils.eqNC(name, value.name));\n    }\n\n    /**\n     * Get the {@link CCIndex} with the passed name\n     */\n    getIndex(name: string): CCIndex | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return Utils.getField<CCIndex>(this.app.indexes, name);\n    }\n\n    /**\n     * Get the {@link CCColumn} with the passed name. Aliases are resolved\n     */\n    getColumn(name: string | null | undefined): CCColumn | undefined {\n        if (!name) {\n            return undefined;\n        }\n        if (!this.ccquery) {\n            return undefined;\n        }\n        // First, CCQuery specific aliases\n        let column: CCColumn;\n        let columnAliases = this.columnsByQuery[Utils.toLowerCase(this.ccquery.name)];\n        if (columnAliases) {\n            column = columnAliases[Utils.toLowerCase(name)];\n            if (column) {\n                return column;\n            }\n        }\n        // Second, aliases by index\n        const indexes = Utils.split(this.ccquery.searchIndexes, [\",\"]);\n        const firstIndex = indexes.length === 0 ? undefined : this.getIndex(indexes[0]);\n        if (indexes.length === 0 || (!!firstIndex && this.indexIsNormal(firstIndex))) {\n            columnAliases = this.columnsByIndex._;\n            if (columnAliases) {\n                column = columnAliases[Utils.toLowerCase(name)];\n                if (column) {\n                    return column;\n                }\n            }\n        }\n        else {\n            for (const index of indexes) {\n                columnAliases = this.columnsByIndex[Utils.toLowerCase(index)];\n                if (columnAliases) {\n                    column = columnAliases[Utils.toLowerCase(name)];\n                    if (column) {\n                        return column;\n                    }\n                }\n            }\n        }\n        // Third, extra columns\n        column = AppService.extraColumns[Utils.toLowerCase(name)];\n        if (column) {\n            return column;\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the default alias a column\n     *\n     * @param column The column\n     * @return The default alias or `null` if no alias is defined\n     */\n    getColumnDefaultAlias(column?: CCColumn): string {\n        if (column) {\n            if (column.aliases && column.aliases.length > 0) {\n                return column.aliases[0];\n            }\n        }\n        return \"\";\n    }\n\n    /**\n     * Get the name of a column\n     *\n     * @param column The column\n     * @param _default A default name to return if `column` is empty\n     */\n    private getColumnName(column?: CCColumn, _default = \"\"): string {\n        if (column) {\n            return column.name;\n        }\n        return _default;\n    }\n\n    /**\n     * Get the default alias for a column\n     *\n     * @param column The column\n     * @param _default A default alias name to return if the `column` is empty or no alias is defined\n     */\n    getColumnAlias(column?: CCColumn, _default = \"\"): string {\n        if (column) {\n            const alias = this.getColumnDefaultAlias(column);\n            if (alias) {\n                return alias;\n            }\n        }\n        return _default;\n    }\n\n    /**\n     * Return a column name from a name which can be an alias\n     */\n    resolveColumnName(name: string | null | undefined): string {\n        const column = this.getColumn(name);\n        return this.getColumnName(column, name || \"\");\n    }\n\n    /**\n     * Return a column alias from a name which can be an alias\n     */\n    resolveColumnAlias(name: string | null | undefined): string {\n        const column = this.getColumn(name);\n        return this.getColumnAlias(column, name || \"\");\n    }\n\n    /**\n     * Parse a fielded search expression\n     *\n     * @param text The expression\n     * @param options Options for the parsing\n     * @return The parsed {@link Expr} or an error message\n     */\n    parseExpr(text: string, options?: ExprParserOptions): Expr | string {\n        return ExprParser.parse(text, {appService: this, formatService: this.formatService, intlService: this.intlService}, options);\n    }\n\n    /**\n     * Escape a value for fielded search if necessary. `Date` objects are converted to\n     * Sinequa system date strings and non-scalars fields are escaped\n     * @param field The value's field\n     * @param value The value\n     */\n    escapeFieldValue(field: string, value: string | number | Date | boolean | undefined): string {\n        if (Utils.isDate(value)) {\n            return Utils.toSysDateStr(value);\n        }\n        value = value + \"\";\n        const column = this.getColumn(field);\n        if (column && !AppService.isScalar(column)) {\n            // escaoe columns that might contain search operators in them (treating negative numbers as an ignorable edge case)\n            return ExprParser.escape(value);\n        }\n        return value;\n    }\n\n    /**\n     * Get the label of a column. The plural label is returned for csv-type columns.\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column) {\n            const label = AppService.isCsv(column) ? column.labelPlural : column.label;\n            if (label) {\n                return label;\n            }\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Get the singular label of a column\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getSingularLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column && column.label) {\n            return column.label;\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Get the plural label of a column\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getPluralLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column && column.labelPlural) {\n            return column.labelPlural;\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a string\n     */\n    isString(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isString(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a csv\n     */\n    isCsv(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isCsv(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a tree\n     */\n    isTree(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isTree(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is an entity\n     */\n    isEntity(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isEntity(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a boolean\n     */\n    isBoolean(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isBoolean(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a date\n     */\n    isDate(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isDate(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a double\n     */\n    isDouble(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isDouble(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is an integer\n     */\n    isInteger(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isInteger(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a number (integer or double)\n     */\n    isNumber(name: string): boolean {\n        return this.isInteger(name) || this.isDouble(name);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a scalar\n     */\n    isScalar(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isScalar(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is sortable\n     */\n    isSortable(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isSortable(column);\n    }\n\n    /**\n     * If the passed url is relative and CORS is active then\n     * prepend it with the Sinequa server origin\n     */\n    updateUrlForCors(url: string): string {\n        if (this.startConfig.corsActive && !!url && !Utils.isUrlAbsolute(url)) {\n            url = Utils.addUrl(this.origin, url);\n        }\n        return url;\n    }\n\n    /**\n     * Return the url to the Sinequa administration console\n     */\n    get adminUrl(): string {\n        return this.updateUrlForCors(Utils.addUrl(this.startConfig.applicationPath!, \"admin\"));\n    }\n}","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {wahr} other {falsch}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Serverfehler\",\n        \"loginCancelled\": \"Anmeldung abgebrochen (login cancelled)\",\n        \"processedCredentialsError\": \"Verarbeitete Anmeldeinformationen konnten nicht ermittelt werden (unable to get processed credentials)\",\n        \"autoLoginError\": \"Anmeldung fehlgeschlagen (login failed)\",\n        \"principalSwitched\": \"Der angemeldete Benutzer hat sich geändert (the logged in user has changed)\",\n        \"userOverrideFailure\": \"Benutzerwechsel fehlgeschlagen (unable to override user)\",\n        \"responseLoadFailure\": \"Antwort konnte nicht geladen werden (failed to load response)\",\n        \"unknownError\": \"Unbekannter Fehler\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabisch\",\n        \"da\": \"Dänisch\",\n        \"de\": \"Deutsch\",\n        \"el\": \"Griechisch\",\n        \"en\": \"Englisch\",\n        \"es\": \"Spanisch\",\n        \"fi\": \"Finnisch\",\n        \"fr\": \"Französisch\",\n        \"it\": \"Italienisch\",\n        \"ja\": \"Japanisch\",\n        \"ko\": \"Koreanisch\",\n        \"nl\": \"Niederländisch\",\n        \"no\": \"Norwegisch\",\n        \"pl\": \"Polnisch\",\n        \"pt\": \"Portugiesisch\",\n        \"ro\": \"Rumänisch\",\n        \"ru\": \"Russisch\",\n        \"sv\": \"Schwedisch\",\n        \"th\": \"Thailändisch\",\n        \"zh\": \"Traditionelles Chinesisch\",\n        \"zs\": \"Vereinfachtes Chinesisch\",\n        \"zz\": \"Unbekannt\"\n    },\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport {enModal, frModal, deModal} from \"@sinequa/core/modal\";\nimport {enValidation, frValidation, deValidation} from \"@sinequa/core/validation\";\nimport _enLogin from \"./en\";\nimport _frLogin from \"./fr\";\nimport _deLogin from \"./de\";\n\nconst enLogin = Utils.merge({}, _enLogin, enIntl, enModal, enValidation);\nconst frLogin = Utils.merge({}, _frLogin, frIntl, frModal, frValidation);\nconst deLogin = Utils.merge({}, _deLogin, deIntl, deModal, deValidation);\n\nexport { enLogin, frLogin, deLogin };\n","import {Injectable, Optional, Inject, OnDestroy, InjectionToken} from \"@angular/core\";\nimport {Subject, Observable, concat, of, throwError} from \"rxjs\";\nimport {map, last} from \"rxjs/operators\";\nimport IntlMessageFormat from \"intl-messageformat\";\nimport memoizeFormatConstructor from \"intl-format-cache\";\n// TODO - check loading of locale data per locale - the ponyfill doesn't seem to work\nimport \"@formatjs/intl-relativetimeformat/polyfill\";\nimport \"intl-pluralrules\";\nimport get from \"lodash/get\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\n// We support loading d3 bundled and unbundled as it is typically easier\n// for others to integrate bundled examples but some 3rd party libs (eg swimlane/charts)\n// load d3 unbundled.\nimport {FormatLocaleDefinition, formatDefaultLocale} from \"d3-format\";\nimport {TimeLocaleDefinition, timeFormatDefaultLocale} from \"d3-time-format\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\n\n/**\n * @ignore\n */\nconst formatters = {\n    getMessageFormat: memoizeFormatConstructor(IntlMessageFormat),\n    getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat),\n    getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat),\n    getRelativeTimeFormat: memoizeFormatConstructor(Intl.RelativeTimeFormat),\n    getPluralRules: memoizeFormatConstructor(Intl.PluralRules)\n};\n\n/**\n * @ignore\n */\nconst DATE_TIME_FORMAT_OPTIONS = [\n    \"dateStyle\",\n    \"timeStyle\",\n    \"localeMatcher\",\n    \"timeZone\",\n    \"hour12\",\n    \"hourCycle\",\n    \"formatMatcher\",\n    \"weekday\",\n    \"era\",\n    \"year\",\n    \"month\",\n    \"day\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"timeZoneName\",\n];\n\n/**\n * @ignore\n */\nconst NUMBER_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"style\",\n    \"currency\",\n    \"currencyDisplay\",\n    \"useGrouping\",\n    \"minimumIntegerDigits\",\n    \"minimumFractionDigits\",\n    \"maximumFractionDigits\",\n    \"minimumSignificantDigits\",\n    \"maximumSignificantDigits\",\n];\n\n/**\n * @ignore\n */\nconst RELATIVE_TIME_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"numeric\",\n    \"style\"\n];\n\n/**\n * Describes event emitted by {@link IntlService} when the current locale changes\n */\nexport interface LocaleChangeEvent {\n    /**\n     * The name of the newly selected locale\n     */\n    locale: string;\n}\n\n/**\n * Describes the data that can be set in a Sinequa locale. Instances are normally\n * defined in application locale modules which can be included statically or loaded\n * dynamically\n */\nexport interface LocaleData {\n    /**\n     * Options pertaining to the `Intl` API\n     */\n    intl: {\n        locale: string\n    };\n    /**\n     * Options pertaining to the `Moment.js` library\n     */\n    moment?: { // default to built-in en-us, data is auto set by moment.defineLocale when the locale module is loaded\n        locale: string\n    };\n    /**\n     * Options pertaining to the `D3.js` library\n     */\n    d3?: {\n        locale: string,\n        format: FormatLocaleDefinition,\n        time: TimeLocaleDefinition\n    };\n    /**\n     * The messages (ICU Message syntax) for this locale\n     */\n    messages: JsonObject;\n}\n\n/**\n * Describes a Sinequa locale\n */\nexport interface Locale {\n    /**\n     * The name identifying the locale\n     */\n    name: string;\n    /**\n     * A display name for the locale\n     */\n    display: string;\n    /**\n     * The directionality of text in this locale (left-to-right or right-to-left)\n     */\n    direction?: \"ltr\" | \"rtl\";\n    /**\n     * The locale data for the locale\n     */\n    data?: LocaleData;\n}\n\n/**\n * @ignore\n */\ninterface NextLang {\n    start: number;\n    end: number;\n    lang1: number;\n    lang2: number;\n}\n\n\n// moment needs to be set globally to load moment locales successfully when the locales are bundled in the main rollup bundle\n// see: https://github.com/rollup/rollup/issues/641\nimport \"./import-moment\";\n\n/**\n * Describes the locales configuration object defined by an application and used by the {@link IntlService}\n */\nexport interface LocalesConfig {\n    /**\n     * The default locale\n     */\n    defaultLocale: Locale;\n    /**\n     * The set of locales supported by the application\n     */\n    locales?: Locale[];\n    /**\n     * An optional loader for the dynamic loading of locale data\n     * for locales that do not define the data statically\n     */\n    loadLocale?(locale: string): Observable<LocaleData>;\n}\n\n/**\n * An injection token used to initialize the [locales configuration]{@link LocalesConfig} of {@link IntlModule}\n */\nexport const LOCALES_CONFIG = new InjectionToken<LocalesConfig>('LOCALES_CONFIG');\n\n/**\n * Describes the object to specify custom ICU Message formats\n */\nexport interface IntlFormats {\n    /**\n     * Format options for dates\n     */\n    date?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for times\n     */\n    time?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for numbers\n     */\n    number?: MapOf<Intl.NumberFormatOptions>;\n    /**\n     * Format options for relative times\n     */\n    relativeTime?: MapOf<Intl.RelativeTimeFormatOptions>;\n}\n\n/**\n * Describes a general configuration object for the {@link IntlModule}\n */\nexport interface IntlConfig {\n    /**\n     * Custom formats for ICU Message processing\n     */\n    formats?: IntlFormats;\n}\n\n/**\n * An injection token used to initialize the [general configuration]{@link IntlConfig} of {@link IntlModule}\n */\nexport const INTL_CONFIG = new InjectionToken<IntlConfig>('INTL_CONFIG');\n\n/**\n * Default custom ICU Message formats\n */\nconst DEFAULT_FORMATS: IntlFormats = {\n    date: {\n        sqDateTime: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n        },\n        sqDate: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\"\n        },\n        sqYear: {\n            year: \"numeric\"\n        },\n        sqMonthYear: {\n            month: \"short\",\n            year: \"numeric\"\n        }\n    },\n    time: {\n    },\n    number: {\n        sqWeek: {\n            minimumIntegerDigits: 2,\n            useGrouping: false\n        },\n        sqYear: {\n            useGrouping: false\n        },\n        sqNoGrouping: {\n            useGrouping: false\n        },\n        sqZeroDecimalPlaces: {\n            maximumFractionDigits: 0\n        },\n        sqOneDecimalPlace: {\n            maximumFractionDigits: 1\n        },\n        sqTwoDecimalPlaces: {\n            maximumFractionDigits: 2\n        },\n        sqThreeDecimalPlaces: {\n            maximumFractionDigits: 3\n        },\n        sqFourDecimalPlaces: {\n            maximumFractionDigits: 4\n        },\n        sqFiveDecimalPlaces: {\n            maximumFractionDigits: 5\n        }\n    }\n};\n\n/* eslint-disable jsdoc/check-alignment,jsdoc/check-indentation,jsdoc/newline-after-description */\n/**\n * This service provides methods for managing locales and for formatting dates, numbers and strings using\n * [ICU Message syntax]{@link https://formatjs.io/guides/message-syntax/}. [Messages]{@link LocaleData#messages} stored\n * in a locale's data are referenced using a key in the following form: `msg#<JSONPath>`. Given the following messages:\n``` json\n{\n    \"myComponent\": {\n        \"title\": \"Component: {name}\",\n        \"footer\": \"Created on {created, date, medium} by {author}\"\n    }\n}\n```\n * this key: `msg#myComponent.footer` references myComponent's footer message. The message itself uses\n * ICU Message syntax.\n *\n * This service registers a number of [default custom ICU formats]{@link DEFAULT_FORMATS}. These can be overridden or\n * extended by providing the [INTL_CONFIG]{@link INTL_CONFIG} injection token.\n */\n/* eslint-enable jsdoc/check-alignment, jsdoc/check-indentation, jsdoc/newline-after-description */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class IntlService implements OnDestroy {\n    /**\n     * The prefix for ICU messages to be retrieved from [LocaleData.messages]{@link LocaleData#messages}\n     * by {@link formatMessage}\n     */\n    readonly messagePrefix = \"msg#\";\n    /**\n     * An alternative prefix for inline ICU messages processed by {@link formatMessage}\n     */\n    readonly textPrefix = \"txt#\";\n    /**\n     * The available locales\n     */\n    locales: Locale[];\n    /** The current locale */\n    currentLocale: Locale;\n    protected intlLocale: string;\n    /** The current direction */\n    direction: \"ltr\" | \"rtl\";\n    protected _events: Subject<LocaleChangeEvent>;\n    protected formats: IntlFormats;\n\n    constructor(\n        @Optional() @Inject(INTL_CONFIG) protected intlConfig: IntlConfig,\n        @Optional() @Inject(LOCALES_CONFIG) protected localesConfig: LocalesConfig\n    ) {\n        if (!this.intlConfig) {\n            this.intlConfig = {};\n        }\n        if (!localesConfig) {\n            if (!localesConfig) {\n                console.error(\"LOCALES_CONFIG has not been provided by the calling app. \" +\n                    \"Please import IntlModule using the forRoot method to which you should pass a LocalesConfig object\");\n            }\n        }\n        this._events = new Subject<LocaleChangeEvent>();\n        this.locales = localesConfig.locales || [localesConfig.defaultLocale];\n    }\n\n    private static getLanguage(name: string) {\n        const sepPos = name.indexOf(\"-\");\n        if (sepPos === -1) {\n            return name;\n        }\n        return name.substring(0, sepPos);\n    }\n\n    private static getBrowserLanguages(): string[] {\n        if ((navigator as any).languages) {\n            return (navigator as any).languages;\n        }\n        const language = navigator.language || (navigator as any).userLanguage ||\n            (navigator as any).browserLanguage || (navigator as any).systemLanguage;\n        return !!language ? [language] : [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<LocaleChangeEvent> {\n        return this._events;\n    }\n\n    private getInitialLocale(): Locale {\n        const language = window.localStorage.getItem(\"sinequa-locale\");\n        const languages = !!language ? [language] : IntlService.getBrowserLanguages();\n        let locale = this.getLocale(languages);\n        if (locale) {\n            return locale;\n        }\n        locale = this.getLocale(languages, true);\n        if (locale) {\n            return locale;\n        }\n        return this.localesConfig.defaultLocale;\n    }\n\n    /**\n     * Initialize the service. The current locale is initialized to either the `sinequa-locale` local\n     * storage value, the browser language or the default locale.\n     *\n     * This method is called automatically by the {@link IntlModule} at application startup.\n     *\n     * @return An observable of the current locale\n     */\n    init(): Observable<string> {\n        // Set up formats\n        this.formats = Utils.merge(DEFAULT_FORMATS, this.intlConfig.formats);\n        // Load default locale\n        let observable = this.use(this.localesConfig.defaultLocale.name, false);\n        const initialLocale = this.getInitialLocale();\n        if (initialLocale !== this.localesConfig.defaultLocale) {\n            // Load initial locale if different to default\n            console.log(\"Setting initial locale: \", initialLocale.name);\n            observable = concat<string>(observable, this.use(initialLocale.name, false)).pipe(last<string>());\n        }\n        Utils.subscribe(observable,\n            (value) => {\n                console.log(\"Initial locale set: \", value);\n            });\n        return observable;\n    }\n\n    private loadData(locale: string): Observable<LocaleData> {\n        if (!this.localesConfig.loadLocale) {\n            return throwError(\"Dynamic locale loading has not been implemented in the calling app - \"  +\n                \"please add a loadLocale handler to your LocalesConfig\");\n        }\n        return this.localesConfig.loadLocale(locale);\n    }\n\n    private getLocale(names: string | string[], approximate = false): Locale | undefined {\n        if (typeof names === \"string\") {\n            names = [names];\n        }\n        for (const name of names) {\n            const locale = this.locales.find((locale1) => {\n                if (locale1.name === name) {\n                    return true;\n                }\n                if (approximate && IntlService.getLanguage(locale1.name) === IntlService.getLanguage(name)) {\n                    return true;\n                }\n                return false;\n            });\n            if (locale) {\n                return locale;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Change the current locale. The change is made asynchronously as the locale may need to be\n     * downloaded. The current locale is optionally stored in local storage (`sinequa-locale`)\n     * to be picked up the next time the service is initialized\n     *\n     * @param locale The name of the locale to use\n     * @param store If `true` the current locale is stored in local storage\n     */\n    use(locale: string, store = true): Observable<string> {\n        const newLocale = this.getLocale(locale);\n        if (!newLocale) {\n            return throwError({error: \"unsupported locale\"});\n        }\n\n        const observable = !!newLocale.data ? of(newLocale.data) : this.loadData(locale);\n        Utils.subscribe<LocaleData>(observable,\n            (data) => {\n                this.currentLocale = newLocale;\n\n                if (store) {\n                    window.localStorage.setItem(\"sinequa-locale\", this.currentLocale.name);\n                }\n\n                this.direction = this.currentLocale.direction || \"ltr\";\n\n                if (!this.currentLocale.data) {\n                    this.currentLocale.data = data;\n                }\n\n                // Set moment locale\n                if (this.currentLocale.data.moment) {\n                    // Set (and define if necessary) moment locale (it auto-defines when we are not bundled)\n                    if (moment.locale(this.currentLocale.data.moment.locale) !== this.currentLocale.data.moment.locale) {\n                        console.log(`moment locale not defined: ${this.currentLocale.data.moment.locale} - defaulting to en`);\n                        moment.locale(\"en\");\n                    }\n                }\n                else {\n                    moment.locale(\"en\");\n                }\n\n                // Set d3 locale\n                if (this.currentLocale.data.d3) {\n                    formatDefaultLocale(this.currentLocale.data.d3.format);\n                    timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                    d3.formatDefaultLocale(this.currentLocale.data.d3.format);\n                    d3.timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                }\n\n                if (this.currentLocale.data.intl && this.currentLocale.data.intl.locale) {\n                    this.intlLocale = this.currentLocale.data.intl.locale;\n                }\n                else {\n                    this.intlLocale = this.localesConfig.defaultLocale.data ? this.localesConfig.defaultLocale.data.intl.locale : \"en\";\n                }\n                return of(this.intlLocale);\n            });\n\n        const observable2 = observable.pipe(map((value) => {\n            return this.currentLocale.name;\n        }));\n\n        Utils.subscribe(observable2,\n            (name) => {\n                this._events.next({locale: name});\n            });\n\n        return observable2;\n    }\n\n    private getDefaultMessages(): any {\n        const _default = this.locales.find((value) => !!value.data && !!value.data.messages);\n        if (_default) {\n            return _default.data && _default.data.messages;\n        }\n        return {};\n    }\n\n    private getMessages(): any {\n        let messages;\n        if (this.currentLocale && this.currentLocale.data) {\n            messages = this.currentLocale.data.messages;\n        }\n        if (!messages) {\n            messages = this.getDefaultMessages();\n        }\n        return messages;\n    }\n\n    /**\n     * Get the message from the current locale that corresponds to the passed `key`.\n     * If the is not prefixed by {@link messagePrefix} then `null` is returned\n     *\n     * @param key The message key\n     */\n    getMessage(key: string): string | undefined {\n        if (!Utils.startsWith(key, this.messagePrefix)) {\n            return undefined;\n        }\n        key = key.substr(this.messagePrefix.length);\n        const messages = this.getMessages();\n        let message = get(messages, key);\n        if (!message) {\n            const defaultMessages = this.getDefaultMessages();\n            if (messages !== defaultMessages) {\n                message = get(defaultMessages, key);\n            }\n        }\n        return message;\n    }\n\n    // Returned start and end are for the text BEFORE the language specifier and so refer to the previous\n    // language not the one returned by the same call to this method\n    private nextLang(text: string, start: number, allowNone: boolean): NextLang | undefined {\n        for (let i = start, ic = text.length - 3; i < ic; i++) {\n            if (text[i] === \"[\" && text[i + 3] === \"]\") {\n                return {\n                    start,\n                    end: i,\n                    lang1: text.charCodeAt(i + 1),\n                    lang2: text.charCodeAt(i + 2)\n                };\n            }\n        }\n        if (allowNone) {\n            return {\n                start,\n                end: text.length,\n                lang1: -1,\n                lang2: -1\n            };\n        }\n        return undefined;\n    }\n\n    // ([nnn])<default>[fr]<french>[de]<german>...\n    private sysLang(text: string): string {\n        if (!text) {\n            return text;\n        }\n        let iStart = 0;\n        const len = text.length;\n        // Skip order\n        let i = 0;\n        if (text[i] === \"[\") {\n            while (i < len && text[i] >= \"0\" && text[i] <= \"9\") {\n                i++;\n            }\n            if (text[i] === \"]\") {\n                iStart = i + 1;\n            }\n        }\n        // Pick out default value\n        const defaultLang = this.nextLang(text, iStart, false);\n        if (!defaultLang) {\n            return text; // Not a sys lang formatted text\n        }\n        // Look for a matching language\n        const lang1 = this.currentLocale.name.charCodeAt(0);\n        const lang2 = this.currentLocale.name.charCodeAt(1);\n        let curLang: NextLang | undefined = defaultLang;\n        while (curLang) {\n            if (lang1 === curLang.lang1 && lang2 === curLang.lang2) {\n                // We have a matching language, get its text\n                const nextLang = this.nextLang(text, curLang.end + 4, true);\n                return text.substring(nextLang!.start, nextLang!.end);\n            }\n            else {\n                curLang = this.nextLang(text, curLang.end + 4, false);\n            }\n        }\n        // return default language text\n        return text.substring(defaultLang.start, defaultLang.end);\n    }\n\n    private processFormatMessage(message: string, values = {}): string {\n        const hasValues = Object.keys(values).length > 0;\n        if (!hasValues) {\n            return message;\n        }\n        if (message) {\n            try {\n                const formatter = formatters.getMessageFormat(message, this.intlLocale, this.formats, {formatters});\n                const formattedMessage = formatter.format(values);\n                return formattedMessage;\n            }\n            catch (e) {\n                console.log(\"IntlService.processFormatMessage error:\", e);\n                return message;\n            }\n        }\n        else {\n            return message;\n        }\n    }\n\n    /**\n     * Format a message identified by a `key`. Any values referenced\n     * by the message are taken from an optional `values` map. The key can be\n     * in a variety of forms:\n     * * a Sinequa \"syslang\" string: `apple[fr]pomme[de]Apfel`\n     * * a message key resolved in the [messages]{@link LocaleData#messages} of the current\n     * locale:  `msg#path1.path2.path3`\n     * * an ICU message using the `txt#` prefix: `txt#Hello {name}`\n     *\n     * @param key The message identifier\n     * @param values Values referenced by an ICU message\n     * @return The formatted message. If the key is not resolved then it is returned unprocessed\n     */\n    formatMessage(key: string, values?: MapOf<any>): string {\n        key = Utils.trim(key);\n        const sysLangStr = this.sysLang(key);\n        if (sysLangStr !== key) {\n            return sysLangStr;\n        }\n        const _values = {};\n        if (values) {\n            for (const valueName of Object.keys(values)) {\n                const value = values[valueName];\n                if (value && Utils.isString(value)) {\n                    _values[valueName] = this.formatMessage(value);\n                }\n                else {\n                    _values[valueName] = value;\n                }\n            }\n        }\n        if (Utils.startsWith(key, this.messagePrefix)) {\n            if (Utils.eq(key, this.messagePrefix)) {\n                return key;\n            }\n            let message = this.getMessage(key);\n            if (!Utils.isString(message)) {\n                message = key;\n            }\n            const formattedMessage = this.processFormatMessage(message, _values);\n            return formattedMessage;\n        }\n        else if (Utils.startsWith(key, this.textPrefix)) {\n            if (Utils.eq(key, this.textPrefix)) {\n                return key;\n            }\n            key = key.substr(this.textPrefix.length);\n            const formattedMessage = this.processFormatMessage(key, _values);\n            return formattedMessage;\n        }\n        else {\n            return key;\n        }\n    }\n\n    /**\n     * Format an ICU Message string\n     *\n     * @param text An ICU Message to format\n     * @param values Values referenced by an ICU message\n     */\n    formatText(text: string, values?: {}): string {\n        const formattedMessage = this.processFormatMessage(text, values);\n        return formattedMessage;\n    }\n\n    /**\n     * Parse a date string in the current locale - eg `04/09/1986`\n     *\n     * @param value A date string\n     * @returns The parse `Date` or `undefined` if the date cannot be parsed\n     */\n    parseDate(value: string): Date | undefined {\n        const m = moment(value, \"L\");\n        if (m.isValid()) {\n            return m.toDate();\n        }\n        return undefined;\n    }\n\n    private getNamedFormat(type: string, name: string): Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | undefined {\n        const format = this.formats && this.formats[type] && this.formats[type][name];\n        if (format) {\n            return format;\n        }\n        console.warn(`IntlService.getNamedFormat - not found - type: ${type}, name: ${name}`);\n        return undefined;\n    }\n\n    private filterProps(props: {[k: string]: any}, whitelist: string[], defaults: {[k: string]: any} = {}): any {\n        return whitelist.reduce<{[k: string]: string}>((filtered, name) => {\n            if (props.hasOwnProperty(name)) {\n                filtered[name] = props[name];\n            }\n            else if (defaults.hasOwnProperty(name)) {\n                filtered[name] = defaults[name];\n            }\n            return filtered;\n        }, {});\n    }\n\n    /**\n     * Format a date in the current locale according to the passed options. If the passed `value` is not a `Date`\n     * then one is constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatDate(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"date\", format)) || {};\n        const filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatDate:\", e);\n        }\n        return String(date);\n    }\n\n    /**\n     * Format a time in the current locale according to the passed options. If the passed `value` is not a `Date` then one is\n     * constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatTime(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"time\", format)) || {};\n        let filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {\n            // Add default formatting options if hour, minute, or second isn't defined.\n            filteredOptions = Object.assign({},\n                filteredOptions,\n                {\n                    hour: 'numeric',\n                    minute: 'numeric'\n                });\n        }\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatTime:\", e);\n        }\n        return String(date);\n    }\n\n    private makeRelativeTimeParams(value: Date): { value: number, unit: Intl.RelativeTimeUnit } {\n        const diff = value.getTime() - Utils.now.getTime();\n        const absDiff = Math.abs(diff);\n        if (absDiff < Utils.oneSecond) {\n            return { value: 0, unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneMinute) {\n            return { value: Utils.roundAway(diff / Utils.oneSecond), unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneHour) {\n            return { value: Utils.roundAway(diff / Utils.oneMinute), unit: \"minutes\" };\n        }\n        else if (absDiff < Utils.oneDay) {\n            return { value: Utils.roundAway(diff / Utils.oneHour), unit: \"hours\" };\n        }\n        else if (absDiff < (Utils.oneDay * 30)) {\n            return { value: Utils.roundAway(diff / Utils.oneDay), unit: \"days\" };\n        }\n        else if (absDiff < (Utils.oneDay * 365)) {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 30)), unit: \"months\" };\n        }\n        else {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 365)), unit: \"years\" };\n        }\n    }\n\n    /**\n     * Format a relative time in the current locale according to the passed options\n     *\n     * @param value The relative time to format. Negative number values represent times in the past.\n     * If a Date value is passed then a number value and unit are deduced automatically based on\n     * the current date and time.\n     * @param unit The relative time unit (eg years, days or seconds). Must be passed if value\n     * is a number.\n     * @param options The options can include a custom format\n     */\n    formatRelativeTime(\n        value: string | number | Date | undefined, unit?: Intl.RelativeTimeUnit,\n        options: Intl.RelativeTimeFormatOptions & { format?: string } = {}\n    ): string {\n        if (value === undefined) {\n            return \"\";\n        }\n        if (Utils.isString(value)) {\n            value = new Date(value);\n        }\n        if (Utils.isDate(value)) {\n            const params =  this.makeRelativeTimeParams(value);\n            value = params.value;\n            unit = params.unit;\n        }\n        const { format } = options;\n        const defaults = (format && this.getNamedFormat(\"relativeTime\", format)) || {};\n        const filteredOptions = this.filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.numeric) {\n            filteredOptions.numeric = \"auto\"; // default is always - we prefer auto\n        }\n        try {\n            return formatters.getRelativeTimeFormat(this.intlLocale, filteredOptions).format(value, unit);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatRelativeTime:\", e);\n        }\n        return String(value);\n    }\n\n    /**\n     * Format a number in the current locale\n     *\n     * @param value The number to format\n     * @param options The options can include a custom format\n     */\n    formatNumber(value: any, options: Intl.NumberFormatOptions & { format?: any } = {}): string {\n        const {format} = options;\n        const defaults = format && this.getNamedFormat(\"number\", format);\n        const filteredOptions = this.filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n        try {\n          return formatters.getNumberFormat(this.intlLocale, filteredOptions).format(value);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatNumber:\", e);\n        }\n        return String(value);\n    }\n}\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enModal from \"./en\";\nimport _frModal from \"./fr\";\nimport _deModal from \"./de\";\n\nconst enModal = Utils.merge({}, _enModal, enIntl);\nconst frModal = Utils.merge({}, _frModal, frIntl);\nconst deModal = Utils.merge({}, _deModal, deIntl);\n\nexport { enModal, frModal, deModal };\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\n\nexport class RecentQueriesList {\n    constructor(name: string) {\n        this.name = name;\n        this.queries = [];\t// Make sure to have at least a valid \"queries\" member, to simplify tests in GUI code.\n    }\n    name: string;\t\t// App name or user name the queries are related to.\n    queries: IQuery[];\n}\n\nexport class RecentQueries {\n    app?: RecentQueriesList;\n    user?: RecentQueriesList;\n}\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RecentQueriesWebService extends HttpService {\n    recentQueries: RecentQueries;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    load(): Observable<RecentQueries> {\n        const observable = this.httpClient.get<RecentQueries>(this.makeUrl(\"recentqueries\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.recentQueries = response;\n                if (!this.recentQueries)\n                    this.recentQueries = new RecentQueries();\n                if (this.recentQueries) {\n                    if (!this.recentQueries.app)\n                        this.recentQueries.app = new RecentQueriesList(this.appName);\n                    if (!this.recentQueries.user)\n                        this.recentQueries.user = new RecentQueriesList(\"currentuser\");\n                }\n                console.log(\"recentQueriesService.load success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"recentQueriesService.load failure - error: \", error);\n            });\n        return observable;\n    }\n    // No save/patch action for the recent queries: MRU lists are generated server side when the query is executed.\n\n    appRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries;\n        else {\n            return [];\n        }\n    }\n\n    appRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries.length;\n        else\n            return 0;\n    }\n\n    userRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries;\n        else {\n            return [];\n        }\n    }\n\n    userRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries.length;\n        else\n            return 0;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Credentials} from \"./authentication.service\";\n\n/**\n * A service to retrieve a JWT (JSON Web Token) from the Sinequa server.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class JWTService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get a JWT from the Sinequa server using the passed credentials. The JWT is received in a cookie\n     * and the associated CSRF token in the response payload.\n     *\n     * @param credentials The credentials to be used for the JWT. These are sent in clear text\n     */\n    getToken(credentials: Credentials): Observable<string> {\n        const observable = this.httpClient.post<{csrfToken: string}>(this.makeUrl(\"webToken\"),\n            {\n                action: \"get\",\n                user: credentials.userName,\n                password: credentials.password,\n                tokenInCookie: true,\n            },\n            {\n                params: this.makeParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            });\n        return observable.pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n}\n","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalResult, ModalRef} from \"@sinequa/core/modal\";\nimport {Credentials} from \"./authentication.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A basic login component that request a user name and password. It is designed to work with\n * [LoginService.getCredentials]{@link LoginService#getCredentials} and can be set using the\n * {@link MODAL_LOGIN} injection token\n */\n@Component({\n    selector: \"sq-core-login\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\"\n            cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{'msg#modal.login.title' | sqMessage}}</h3>\n            <input placeholder=\"{{'msg#modal.login.userName' | sqMessage}}\" formControlName=\"userName\">\n            <ng-container *ngIf=\"showError(userNameControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"userName\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <div style=\"margin-bottom: 8px;\"></div>\n            <input type=\"password\" placeholder=\"{{'msg#modal.login.password' | sqMessage}}\" formControlName=\"password\">\n            <ng-container *ngIf=\"showError(passwordControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"password\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Login implements OnInit, OnDestroy {\n    userNameControl: FormControl;\n    passwordControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) protected model: Credentials,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.userNameControl = new FormControl(this.model.userName, Validators.required);\n        this.passwordControl = new FormControl(this.model.password, Validators.required);\n        this.form = this.formBuilder.group({\n            userName: this.userNameControl,\n            password: this.passwordControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.userName = this.userNameControl.value;\n                this.model.password = this.passwordControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {AbstractIntlPipe} from \"./abstract-intl.pipe\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the parameters that can be passed to the [sqMessage]{@link MessagePipe} pipe\n */\nexport interface MessageParams {\n    /**\n     * Values that can be referenced from ICU messages\n     */\n    values?: MapOf<any>;\n}\n\n/**\n * A pipe to display messages in the current locale. Inputs are processed by\n * [IntlService.formatMessage]{@link IntlService#formatMessage}\n */\n@Pipe({name: \"sqMessage\", pure: false})\nexport class MessagePipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef) {\n        super(intlService, changeDetectorRef);\n    }\n\n    protected updateValue(value: any, params: MessageParams): void {\n        if (!Utils.isEmpty(value)) {\n            // coerce to string (eg sys date strings get converted to dates so if this happens to a title we will break otherwise)\n            value = value + \"\";\n        }\n        super.updateValue(value, params);\n        if (!value) {\n            this.value = value;\n            return;\n        }\n        let values: MapOf<any> | undefined;\n        if (params) {\n            values = params.values ? params.values : params;\n        }\n        this.value = this.intlService.formatMessage(value, values);\n    }\n}\n","export * from \"./load-component.module\";\nexport * from \"./load-component.service\";\nexport * from \"./load-component.directive\";\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes a rating configuration object\n */\nexport interface CCRating {\n    ratingsColumn: string;\n    averageColumn: string;\n\n    updateDocWeight: boolean;\n\n    ratingsDistribution: string[];\n}\n\n/**\n * Describes a user rating response object\n */\nexport interface UserRatingResponse {\n    rating: number;\n    averagerating: number;\n}\n\n/**\n * A service for calling the ratings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserRatingsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets the current user rating for a document\n     *\n     * @param docid The id of a document for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRating(docid: string, config: CCRating): Observable<UserRatingResponse> {\n        return this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"get\",\n            docid,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution\n        }).pipe(tap(\n            r => {},\n            error => console.log(\"ratingsService.getRating failure - error: \", error)\n        ));\n    }\n\n    /**\n     * Sets the current user rating for a document\n     *\n     * @param record The document for which to set the rating\n     * @param rating A rating value\n     * @param config The ratings configuration\n     */\n    setRating(record: Record, rating: number, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"set\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            rating,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Set,\n                        detail: {\n                            \"doc-id\": record.id,\n                            ratingnum: rating,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.setRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Delete a rating for a document\n     *\n     * @param record The document for which to delete the rating\n     * @param config The ratings configuration\n     */\n    deleteRating(record: Record, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"delete\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Delete,\n                        detail: {\n                            \"doc-id\": record.id,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.deleteRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Gets user rating information from the given record\n     *\n     * @param record The record for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRecordRating(record: Record, config: CCRating): UserRatingResponse {\n        return {\n            rating: this.parseUserRating(record[config.ratingsColumn], config),\n            averagerating: this.parseAverageRating(record[config.averageColumn], config)\n        };\n    }\n\n    private parseAverageRating(columnEntries: string[], config: CCRating): number {\n        if (config.ratingsDistribution && columnEntries) {\n            return config.ratingsDistribution.indexOf(columnEntries[0]);\n        }\n        else {\n            return -1;\n        }\n    }\n\n    private parseUserRating(ratingValues: string[], config: CCRating): number {\n        if(ratingValues) {\n            if (config.ratingsDistribution) {\n                return config.ratingsDistribution.indexOf(ratingValues[0]);\n            }\n        }\n        return -1;\n    }\n}\n","import {Utils, MapOf, IRef, FieldValue} from \"@sinequa/core/base\";\nimport {AppService} from \"../app.service\";\nimport {AppServiceHelpers} from \"../app-service-helpers\";\nimport {CCColumn, EngineType} from \"@sinequa/core/web-services\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"../format.service\";\n\n/**\n * Describes a context for processing expressions\n */\nexport interface ExprContext {\n    appService: AppService;\n    formatService: FormatService;\n    intlService: IntlService;\n    disallowFulltext?: boolean;\n}\n\n/**\n * The operators accepted in fielded search expressions\n */\nexport const enum ExprOperator {\n    none,\n    eq,\n    gt,\n    gte,\n    lt,\n    lte,\n    neq,\n    regex,\n    like,\n    contains,\n    in,\n    between\n}\n\n/**\n * The range operators accepted in fielded search expressions\n */\nexport const enum ExprRange {\n    none,\n    gteLte,\n    gteLt,\n    gtLte,\n    gtLt\n}\n\n/**\n * An object containing the data necessary to format an `Expr` using\n * [IntlService.formatMessage]{@link IntlService#formatMessage}\n */\nexport interface ExprMessage {\n    /**\n     * The `IntlService` compatible message string\n     */\n    message: string;\n    /**\n     * Any values referenced by `message`\n     */\n    values?: {\n        [key: string]: FieldValue\n    };\n}\n\n/**\n * Options to be used with `Expr.toMessage`\n */\nexport interface ExprMessageOptions {\n    /**\n     * If `true`, field names are included in the message\n     */\n    withFields?: boolean;\n    /**\n     * If `true`, use any display value set in the expression\n     */\n    useDisplay?: boolean;\n    /**\n     * Include HTML formatting in the message\n     */\n    asHTML?: boolean;\n    /**\n     * If `true`, don't include any outer `NOT` operator in the message\n     */\n    hideOuterNot?: boolean;\n}\n\n/**\n * @ignore\n */\ninterface ExprMessageCtxt {\n    inner: boolean;\n    message: string[];\n    values: {\n        [key: string]: FieldValue\n    };\n    valueIndex: number;\n}\n\n/**\n * Describes a location in a fielded search expression\n */\nexport interface ExprLocation {\n    start: number;\n    length: number;\n}\n\n/**\n * Describes a location and value in a fielded search expression\n */\nexport interface ExprValueLocation extends ExprLocation {\n    value: string;\n}\n\n/**\n * Describes a location, value and field in a fielded search expression\n */\nexport interface ExprValueInfo extends ExprValueLocation {\n    field: string;\n}\n\n/**\n * Describes the data used in [Expr.evaluate]{@link Expr#evaluate}\n */\nexport interface ExprEvaluationContext {\n    [key: string]: any;\n}\n\n/**\n * Describes an initialization object used in the construction of an {@link Expr} from a value\n */\nexport interface ExprValueInitializer {\n    /**\n     * The expression context\n     */\n    exprContext: ExprContext;\n    /**\n     * A single value\n     */\n    value?: string;\n    /**\n     * An array of values\n     */\n    values?: string[];\n    /**\n     * Locations of the values used in range expressions\n     */\n    locations?: ExprLocation[];\n    /**\n     * The operator used in the expression\n     */\n    operator?: ExprOperator;\n    /**\n     * The field name\n     */\n    field?: string;\n    /**\n     * The display value\n     */\n    display?: string;\n}\n\n/**\n * Describes an initialization object used in the construction of a boolean {@link Expr} with a pair of operands\n */\nexport interface ExprOperandsInitializer {\n    /**\n     * The expression context\n     */\n    exprContext: ExprContext;\n    /**\n     * The first operand\n     */\n    op1: Expr;\n    /**\n     * If `true` this `Expr` represents an `AND` expression, otherwise it represents an `OR` expression\n     */\n    and: boolean;\n    /**\n     * The second operand\n     */\n    op2: Expr;\n    /**\n     * The field name\n     */\n    field?: string;\n    /**\n     * The display value\n     */\n    display?: string;\n}\n\n/**\n * Represents a parsed fielded search expression. A tree of expression nodes is built when an expression\n * combines sub-expressions using boolean operators\n */\nexport class Expr {\n\n    private _field: string | undefined = undefined;\n\n    /**\n     * Return the field name of this expression. Return the first ancestor's non-empty field\n     * if the field on this node is empty\n     */\n    public get field(): string | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (!Utils.isEmpty(expr._field)) {\n                return expr._field;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * Set the field name of this expression\n     */\n    public set field(value: string | undefined) {\n        this._field = value;\n    }\n\n    private _display: string | undefined = undefined;\n    private _displayObj: {label?: string, display?: string} | undefined = undefined;\n\n    /**\n     * Return the display value of this expression. Return the first ancestor's non-empty display value\n     * if the display value on this node is empty\n     */\n    public get display(): string | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (!Utils.isEmpty(expr._display)) {\n                return expr._display;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * Set the display value of this expression. If the display value is a valid stringified JSON object\n     * then set `displayObj` to the parsed object\n     */\n    public set display(value: string | undefined) {\n        this._display = value;\n        if (!this._display) {\n            this._displayObj = undefined;\n        }\n        else {\n            if (this._display[0] === \"{\" && this._display[this._display.length - 1] === \"}\") {\n                try {\n                    this._displayObj = Utils.fromJson(this._display);\n                }\n                catch (e) {\n                    this._displayObj = undefined;\n                }\n            }\n            else {\n                this._displayObj = undefined;\n            }\n        }\n    }\n\n    /**\n     * Return the display object of this expression. Return the first ancestor's non-empty display object\n     * if the display object on this node is empty\n     */\n    public get displayObj(): {label?: string, display?: string} | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (expr._displayObj) {\n                return expr._displayObj;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * The values of this expression\n     */\n    public values: string[] | undefined = undefined;\n    /**\n     * The locations of the values of this expression\n     */\n    public locations: ExprLocation[] | undefined;\n\n    /**\n     * Return the value of this expression. Note that range expressions may have multiple values\n     */\n    public get value(): string | undefined {\n        if (!this.values || this.values.length === 0) {\n            return undefined;\n        }\n        return this.values[0];\n    }\n\n    /**\n     * Set the value of this expression\n     */\n    public set value(value: string | undefined) {\n        if (value === undefined) {\n            this.values = undefined;\n        }\n        else {\n            if (!this.values) {\n                this.values = [];\n            }\n            this.values[0] = value;\n            this.values.length = 1;\n        }\n    }\n\n    /**\n     * The operator of this expression\n     */\n    public operator: ExprOperator;\n    /**\n     * If `true` then this expression included the `NOT` boolean operator\n     */\n    public not: boolean;\n    /**\n     * If `true` then the operands of this expression are combined with the `AND` operator.\n     * Otherwise the operands are combined with the `OR` operator\n     */\n    public and: boolean;\n    /**\n     * The operands of this expression, if any\n     */\n    public operands: Expr[];\n    /**\n     * The parent expression, if any\n     */\n    public parent: Expr;\n    /**\n     * The expression context\n     */\n    public exprContext: ExprContext;\n    /**\n     * The distance specified in a `NEAR` expression\n     */\n    public near: number;\n    /**\n     * The position of this expression's value in the original text\n     */\n    public start: number;\n    /**\n     * The length of this expression's value in the original text\n     */\n    public length: number;\n    private mergedStructured: boolean;\n\n    // for evaluate\n    private _evaluationRegExps: MapOf<RegExp | undefined>;\n    private get evaluationRegExps(): MapOf<RegExp | undefined> {\n        if (!this._evaluationRegExps) {\n            this._evaluationRegExps = {};\n        }\n        return this._evaluationRegExps;\n    }\n\n    constructor(init: ExprValueInitializer | ExprOperandsInitializer) {\n        if (!(<ExprOperandsInitializer>init).op1) {\n            const valueInit: ExprValueInitializer = <ExprValueInitializer>init;\n            this.exprContext = valueInit.exprContext;\n            if (!Utils.isUndefined(valueInit.value)) {\n                this.value = ExprParser.unescape(valueInit.value);\n            }\n            else if (!Utils.isUndefined(valueInit.values)) {\n                this.values = ExprParser.unescapeList(valueInit.values);\n            }\n            this.locations = valueInit.locations;\n            this.field = valueInit.field;\n            this.display = valueInit.display;\n            this.operator = !Utils.isUndefined(valueInit.operator) ? valueInit.operator : ExprOperator.none;\n            this.near = -1;\n            this.start = -1;\n            this.length = 0;\n        }\n        else {\n            const opsInit: ExprOperandsInitializer = init as ExprOperandsInitializer;\n            this.exprContext = opsInit.exprContext;\n            this.field = opsInit.field;\n            this.display = opsInit.display;\n            this.addOperand(opsInit.op1);\n            this.addOperand(opsInit.op2);\n            this.and = opsInit.and;\n            this.near = -1;\n            this.start = -1;\n            this.length = 0;\n        }\n    }\n\n    /**\n     * Add an operand to this expression\n     *\n     * @param operand The operand to add\n     * @param contextField The parser's field context, if any\n     * @param prepend If `true` the operand is prepended to the operands\n     */\n    public addOperand(operand: Expr, contextField?: string, prepend = false) {\n        if (Utils.isUndefined(contextField)) {\n            contextField = this.field;\n        }\n        if (!this.operands) {\n            this.operands = [];\n        }\n        if (!Utils.isEmpty(this.field) && Utils.isEmpty(operand.field) && !operand.isStructured) {\n            if (Utils.isEmpty(contextField)) {\n                // Prefer setting the fields explicitly on the target operands rather the Field to \"text\" on the source operand\n                // operand.field = ExprParser.fieldPartnamePrefix + \"text\";\n                for (const expr of this.operands) {\n                    if (Utils.isEmpty(expr._field)) {\n                        expr._field = this.field;\n                    }\n                }\n                this.field = undefined;\n            }\n        }\n        if (!Utils.eqNC(this.field || \"\", operand.field || \"\")) {\n            operand._field = operand.field;\n        }\n        else {\n            operand._field = undefined;\n        }\n        if (!Utils.isEmpty(this.display)) {\n            operand._display = undefined;\n        }\n        if (prepend) {\n            this.operands.unshift(operand);\n        }\n        else {\n            this.operands.push(operand);\n        }\n        operand.parent = this;\n    }\n\n    /**\n     * Return `true` if this expression is a leaf node (does have a value)\n     */\n    public get isLeaf(): boolean {\n        // if (this.value === null && !this.operands) throw \"Expr.isLeaf - bad expression\";\n        return !!this.value;\n    }\n\n    /**\n     * Make an expression object\n     *\n     * @param exprContext The expression context\n     * @param text The value of the expression\n     * @param field The parser's field context\n     * @param display The display value\n     * @param allowEmptyValue Determines how empty values will be processed when making the expression\n     */\n    public static makeExpr(exprContext: ExprContext, text: string, field: string, display: string, allowEmptyValue: boolean): Expr | undefined {\n        if (!Expr.getIsStructuredField(exprContext, Expr.resolveField(exprContext, field))) {\n            return new Expr({\n                exprContext: exprContext,\n                value: text,\n                field: field,\n                display: display\n            });\n        }\n\n        const values: IRef<string[] | undefined> = {value: undefined};\n        const locations: IRef<ExprLocation[] | undefined> = {value: undefined};\n        const operator: IRef<ExprOperator> = {value: ExprOperator.none};\n        const range: IRef<ExprRange> = {value: ExprRange.none};\n        Expr.parseValue(exprContext, text, field, allowEmptyValue, values, locations, operator, range);\n        if (range.value !== ExprRange.none && values.value && locations.value) {\n            const value1 = values.value[0];\n            const value2 = values.value[1];\n            const location1 = locations.value[0];\n            const location2 = locations.value[1];\n            if (range.value === ExprRange.gteLte && !Utils.eqNC(value1, \"*\") && !Utils.eqNC(value2, \"*\")) {\n                return new Expr({\n                    exprContext: exprContext,\n                    values: values.value,\n                    locations: locations.value,\n                    field: field,\n                    display: display,\n                    operator: ExprOperator.between\n                });\n            }\n            const expr1 = !Utils.eqNC(value1, \"*\") ? new Expr({\n                exprContext: exprContext,\n                value: value1,\n                locations: [location1],\n                field: field,\n                display: display,\n                operator: range.value === ExprRange.gteLt || range.value === ExprRange.gteLte ? ExprOperator.gte : ExprOperator.gt\n            }) : null;\n            const expr2 = !Utils.eqNC(value2, \"*\") ? new Expr({\n                exprContext: exprContext,\n                value: value2,\n                locations: [location2],\n                field: field,\n                display: display,\n                operator: range.value === ExprRange.gteLte || range.value === ExprRange.gtLte ? ExprOperator.lte : ExprOperator.lt\n            }) : undefined;\n            if (!expr1 && !expr2) {\n                return undefined;\n            }\n            if (!(!!expr1 && !!expr2)) return !!expr1 ? expr1 : expr2;\n            return new Expr({\n                exprContext: exprContext,\n                op1: expr1,\n                and: true,\n                op2: expr2,\n                display: display\n            });\n        }\n        return new Expr({\n            exprContext: exprContext,\n            values: values.value,\n            locations: locations.value,\n            field: field,\n            display: display,\n            operator: operator.value\n        });\n    }\n\n    private static resolveField(exprContext: ExprContext, field: string | null | undefined): string {\n        if (Utils.isString(field)) {\n            return exprContext.appService.resolveColumnName(field);\n        }\n        return \"\";\n    }\n\n    private static getColumn(exprContext: ExprContext, field: string | undefined): CCColumn | undefined {\n        return exprContext.appService.getColumn(field);\n    }\n\n    /**\n     * Return the {@link CCColumn} corresponding to this expression\n     */\n    get column(): CCColumn | undefined {\n        return Expr.getColumn(this.exprContext, this.field);\n    }\n\n    private static getIsStructuredField(exprContext: ExprContext, field: string | undefined): boolean {\n        if (!field) {\n            return false;\n        }\n        if (exprContext.disallowFulltext) {\n            return true;\n        }\n        else {\n            if (field[0] === \":\") {\n                return false; // :: => take partname over column\n            }\n            if (Utils.eqNCN(field, \"exists\", \"missing\")) {\n                return true;\n            }\n            return !!Expr.getColumn(exprContext, field);\n        }\n    }\n\n    /**\n     * Return `true` if the expression has a non-fulltext field. In this case the expression will be a leaf node\n     */\n    get isStructuredField(): boolean {\n        if (!this.isLeaf) {\n            return false;\n        }\n        return Expr.getIsStructuredField(this.exprContext, this.field);\n    }\n\n    /**\n     * Return `true` if the expression only contains non-fulltext fields\n     */\n    public get isStructured(): boolean {\n        if (this.mergedStructured) {\n            return true;\n        }\n        if (this.isLeaf) {\n            return this.isStructuredField;\n        }\n        if (!this.operands) {\n            return false;\n        }\n        for (const operand of this.operands) {\n            if (!operand.isStructured) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the expression and its ancestors do not have `not` set to `true`\n     */\n    public get isPositive(): boolean {\n        let positive = true;\n        let current: Expr = this;\n        while (current != null) {\n            positive = positive && !current.not;\n            current = current.parent;\n        }\n        return positive;\n    }\n\n    /**\n     * Return an `ExprValueLocation` object for the passed text. Leading and trailing\n     * whitespace is excluded\n     */\n    static getValueAndLocation(text: string): ExprValueLocation {\n        let start = 0;\n        let length = text.length;\n        const value1 = Utils.trimStart(text);\n        start += length - value1.length;\n        length -= length - value1.length;\n        const value2 = Utils.trimEnd(value1);\n        length -= length - value2.length;\n        return {\n            value: value2,\n            start: start,\n            length: length\n        };\n    }\n\n    private static parseValue(exprContext: ExprContext, text: string, field: string, allowEmptyValue: boolean, values: IRef<string[] | undefined>, locations: IRef<ExprLocation[] | undefined>, operator: IRef<ExprOperator>, range: IRef<ExprRange>) {\n        if (Utils.isEmpty(text) && !allowEmptyValue) {\n            return;\n        }\n        const first = text[0];\n        const last = text[text.length - 1];\n        let vl: ExprValueLocation;\n        if (\"[{\".includes(first) && \"]}\".includes(last)) {\n            text = text.substr(1, text.length - 2);\n            let sepLen = 4;\n            let sep = text.indexOf(\" TO \");\n            if (sep === -1) {\n                sepLen = 2;\n                sep = text.indexOf(\"..\");\n            }\n            if (sep === -1) {\n                const vls = ExprParser.valuesAndLocationsFromText(text, ',');\n                values.value = [];\n                locations.value = [];\n                vls.forEach(vl1 => {\n                    values.value!.push(vl1.value);\n                    locations.value!.push({start: 1 + vl1.start, length: vl1.length});\n                });\n                operator.value = ExprOperator.in;\n                return;\n            }\n            vl = Expr.getValueAndLocation(text.substr(0, sep));\n            values.value = [vl.value];\n            locations.value = [{start: 1 + vl.start, length: vl.length}];\n            vl = Expr.getValueAndLocation(text.substr(sep + sepLen));\n            values.value.push(vl.value);\n            locations.value.push({start: 1 + sep + sepLen + vl.start, length: vl.length});\n            if (first === \"[\") {\n                range.value = last === \"]\" ? ExprRange.gteLte : ExprRange.gteLt;\n            }\n            else { // '{'\n                range.value = last === \"}\" ? ExprRange.gtLt : ExprRange.gtLte;\n            }\n            return;\n        }\n        vl = {\n            value: text,\n            start: 0,\n            length: text.length\n        };\n        if (text.startsWith(\"=\")) {\n            operator.value = ExprOperator.eq;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\">=\")) {\n            operator.value = ExprOperator.gte;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\">\")) {\n            operator.value = ExprOperator.gt;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\"<=\")) {\n            operator.value = ExprOperator.lte;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\"<>\")) {\n            operator.value = ExprOperator.neq;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\"<\")) {\n            operator.value = ExprOperator.lt;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\"~\")) {\n            operator.value = ExprOperator.regex;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.length > 1 && text.startsWith(\"/\") && text.endsWith(\"/\")) {\n            operator.value = ExprOperator.regex;\n            vl.value = text.substr(1, text.length - 2);\n            vl.start = 1;\n            vl.length = vl.value.length;\n        }\n        if (text.startsWith(\"\\\"\") && text.endsWith(\"\\\"\")) {\n            vl.value = text.substr(1, text.length - 2);\n            vl.start = 1;\n            vl.length = vl.value.length;\n        }\n        values.value = [vl.value];\n        locations.value = [{start: vl.start, length: vl.length}];\n    }\n\n    private static getOperatorText(operator: ExprOperator): string {\n        switch (operator) {\n            case ExprOperator.eq: return \"=\";\n            case ExprOperator.gt: return \">\";\n            case ExprOperator.gte: return \">=\";\n            case ExprOperator.lt: return \"<\";\n            case ExprOperator.lte: return \"<=\";\n            case ExprOperator.neq: return \"<>\";\n            case ExprOperator.regex: return \"REGEXP\";\n            case ExprOperator.like: return \"LIKE\";\n            case ExprOperator.contains: return \"CONTAINS\";\n            case ExprOperator.in: return \"IN\";\n            case ExprOperator.between: return \"BETWEEN\";\n            default: return \"=\";\n        }\n    }\n\n    /**\n     * Find the first `ExprValueInfo` object from a starting position in this expression\n     *\n     * @param start The position at which to start the search\n     */\n    findValue(start: number): ExprValueInfo | undefined {\n        if (this.isLeaf) {\n            if (start >= this.start && start <= this.start + this.length) {\n                if (!this.isStructured) {\n                    return {\n                        /* eslint-disable-next-line */\n                        value: this.value!,\n                        /* eslint-disable-next-line */\n                        field: this.field!,\n                        start: this.start,\n                        length: this.length\n                    };\n                }\n                else if (!!this.locations && this.values && this.values.length === this.locations.length) {\n                    for (let i = 0, ic = this.values.length; i < ic; i++) {\n                        const value = this.values[i];\n                        const location = this.locations[i];\n                        if (start >= this.start + location.start && start <= this.start + location.start + location.length) {\n                            return {\n                                value,\n                                /* eslint-disable-next-line */\n                                field: this.field!,\n                                start: this.start + location.start,\n                                length: location.length\n                            };\n                        }\n                    }\n                }\n            }\n        }\n        else if (!!this.operands) {\n            for (const expr of this.operands) {\n                const value = expr.findValue(start);\n                if (value) {\n                    return value;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Combine two expressions into a single expression. The second expression will be added to\n     * the first expression and the first expression returned if the first expression is non-leaf\n     * and is an `AND` expression and not negated. Otherwise, a new `AND` expression will be created\n     * to which both expressions are added as operands.\n     */\n    static combine(expr1: Expr, expr2: Expr): Expr {\n        if (!expr1) {\n            return expr2;\n        }\n        if (!expr2) {\n            return expr1;\n        }\n        if (!expr1.isLeaf && expr1.and && !expr1.not) {\n            if (expr1.isLeaf || !expr2.and || expr2.not) {\n                expr1.addOperand(expr2);\n            }\n            else {\n                for (const expr3 of expr2.operands) {\n                    expr1.addOperand(expr3);\n                }\n            }\n            return expr1;\n        }\n        return new Expr({\n            exprContext: expr1.exprContext,\n            op1: expr1,\n            and: true,\n            op2: expr2\n        });\n    }\n\n    private normalizeField(field: string | undefined): string | undefined {\n        if (field && field[0] === ExprParser.fieldPartnamePrefix) {\n            return field.substr(1);\n        }\n        return field;\n    }\n\n    private shouldDisplayField(): boolean {\n        if (!this.field && !this.parent) { // top level full text\n            return true;\n        }\n        return !!this.field && (!this.parent || !Utils.eqNC(this.field, this.parent.field || \"\"));\n    }\n\n    private getOperatorString(): string {\n        if (this.operator === ExprOperator.none || this.operator === ExprOperator.eq) {\n            return \"\";\n        }\n        return Expr.getOperatorText(this.operator);\n    }\n\n    private escapeValue(value: string | null | undefined): string {\n        if (!!value && !!this.column && (AppServiceHelpers.isString(this.column) || AppServiceHelpers.isCsv(this.column))) {\n            return ExprParser.escape(value);\n        }\n        return value || \"\";\n    }\n\n    private getValueString(): string {\n        if (this.operator === ExprOperator.between && this.values && this.values.length === 2) {\n            return `[${this.escapeValue(this.values[0])}..${this.escapeValue(this.values[1])}]`;\n        }\n        if (this.values && this.values.length > 1) {\n            const sb: string[] = [];\n            for (const value of this.values) {\n                if (sb.length > 0) {\n                    sb.push(\", \");\n                }\n                sb.push(this.escapeValue(value));\n            }\n            sb.unshift(\"[\");\n            sb.push(\"]\");\n            return sb.join(\"\");\n        }\n        return this.escapeValue(this.value);\n    }\n\n    private addFieldToString(sb: string[]): boolean {\n        let added = false;\n        if (this.shouldDisplayField()) {\n            sb.push(this.normalizeField(this.field) || \"text\");\n            added = true;\n        }\n        if (this.display) {\n            sb.push(ExprParser.escape(this.display));\n            added = true;\n        }\n        if (added) {\n            sb.push(\":\");\n        }\n        return added;\n    }\n\n    private _toString(withFields: boolean, inner: boolean): string {\n        const sb: string[] = [];\n        if (this.isLeaf) {\n            if (this.not) {\n                sb.push(\"NOT \");\n            }\n            if (withFields) {\n                this.addFieldToString(sb);\n            }\n            sb.push(this.getOperatorString());\n            sb.push(this.getValueString());\n        }\n        else {\n            if (!this.operands) {\n                return \"\";\n            }\n            if (this.not) {\n                sb.push(\"NOT \");\n            }\n            let bracketed = inner;\n            if (this.addFieldToString(sb)) {\n                bracketed = true;\n            }\n            if (bracketed) {\n                sb.push(\"(\");\n            }\n            let first = true;\n            for (const operand of this.operands) {\n                if (!first) {\n                    if (this.and) {\n                        sb.push(\" AND \");\n                    }\n                    else {\n                        sb.push(\" OR \");\n                    }\n                }\n                first = false;\n                sb.push(operand._toString(withFields, true));\n            }\n            if (bracketed) {\n                sb.push(\")\");\n            }\n        }\n        return sb.join(\"\");\n    }\n\n    /**\n     * Return a string representation of this expression\n     *\n     * @param withFields If `true`, include field names\n     */\n    toString(withFields = true): string {\n        return this._toString(withFields, false);\n    }\n\n    private addDisplay(options: ExprMessageOptions, ctxt: ExprMessageCtxt, display: string) {\n        this._addValue(options, ctxt, this.value || \"\", display);\n    }\n\n    private encodeHTML(text: string, options: ExprMessageOptions): string {\n        if (options && options.asHTML) {\n            return Utils.encodeHTML(text);\n        }\n        else {\n            return text;\n        }\n    }\n\n    private _addValue(options: ExprMessageOptions, ctxt: ExprMessageCtxt, value: string, display?: string) {\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-value\">`);\n        }\n        const column = this.exprContext.appService.getColumn(this.field);\n        const valueId = `value${ctxt.valueIndex++}`;\n        let _value: FieldValue = value;\n        let _display: string | undefined;\n        if (display) {\n            _display = this.encodeHTML(ExprParser.unescape(display), options);\n        }\n        if (column && AppServiceHelpers.isNumber(column) && Utils.testFloat(value)) {\n            _value = +value;\n        }\n        else if (column && AppServiceHelpers.isDate(column)) {\n            _value = Utils.fromSysDateStr(value) || value;\n        }\n        else if (column && AppServiceHelpers.isBoolean(column)) {\n            _value = Utils.isTrue(value);\n        }\n        else if (Utils.isString(_value)) {\n            _value = this.encodeHTML(_value, options);\n        }\n        ctxt.message.push(`{${valueId}}`);\n        ctxt.values[valueId] = column\n            ? this.exprContext.formatService.formatFieldValue({value: _value, display: _display}, column)\n            : _display || _value;\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private addValue(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (this.values) {\n            if (this.operator === ExprOperator.between && this.values.length === 2) {\n                this._addValue(options, ctxt, this.values[0]);\n                ctxt.message.push(\" \");\n                this.addOperator(\"AND\", options, ctxt);\n                ctxt.message.push(\" \");\n                this._addValue(options, ctxt, this.values[1]);\n            }\n            else if (this.values.length > 1) {\n                let first = true;\n                for (const value of this.values) {\n                    ctxt.message.push(first ? \"[\" : \", \");\n                    first = false;\n                    this._addValue(options, ctxt, value);\n                }\n                ctxt.message.push(\"]\");\n            }\n            else {\n                this._addValue(options, ctxt, this.values[0]);\n            }\n        }\n    }\n\n    private addText(options: ExprMessageOptions, ctxt: ExprMessageCtxt, text: string) {\n        const valueId = `value${ctxt.valueIndex++}`;\n        const message = `{${valueId}}`;\n        ctxt.message.push(message);\n        ctxt.values[valueId] = this.encodeHTML(text, options);\n    }\n\n    private addFieldLabel(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        const displayObj = this.displayObj;\n        if (displayObj && displayObj.label) {\n            this.addText(options, ctxt, displayObj.label);\n        }\n        else if (this.field) {\n            const label = this.exprContext.appService.getLabel(this.normalizeField(this.field) || \"\");\n            this.addText(options, ctxt, label);\n        }\n        else {\n            if (!this.isStructured) {\n                const label = this.exprContext.appService.getLabel(\"text\");\n                this.addText(options, ctxt, label);\n            }\n            else {\n                const fields = this.getFields();\n                fields.forEach((field, index) => {\n                    if (index !== 0) {\n                        this.addText(options, ctxt, \"/\");\n                    }\n                    const label = this.exprContext.appService.getLabel(field);\n                    this.addText(options, ctxt, label);\n                });\n            }\n        }\n    }\n\n    private addField(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-field\">`);\n        }\n        this.addFieldLabel(options, ctxt);\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n            ctxt.message.push(`<span class=\"sq-separator\">`);\n        }\n        this.addText(options, ctxt, \"msg#system.fieldSeparator\");\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private addOperator(operator: string, options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (!operator) {\n            return;\n        }\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-operator\">`);\n        }\n        ctxt.message.push(this.encodeHTML(operator, options));\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private _toMessage(ctxt: ExprMessageCtxt, options?: ExprMessageOptions): ExprMessage {\n        const inner = ctxt.inner;\n        ctxt.inner = true;\n        if (!options) {\n            options = {};\n        }\n        if (Utils.isUndefined(options.useDisplay)) {\n            options.useDisplay = true;\n        }\n\n        const displayObj = this.displayObj;\n        const display = (displayObj ? displayObj.display : undefined) || this.display;\n        const showNot = this.not && (inner || !options.hideOuterNot);\n        const showField = (options.withFields || inner) && this.shouldDisplayField();\n        if (options.useDisplay && !!display) {\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            if (showField) {\n                this.addField(options, ctxt);\n            }\n            this.addDisplay(options, ctxt, display);\n        }\n        else if (this.isLeaf) {\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            if (showField) {\n                this.addField(options, ctxt);\n            }\n            const operator = this.getOperatorString();\n            if (operator) {\n                this.addOperator(operator, options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            this.addValue(options, ctxt);\n        }\n        else {\n            if (!this.operands) {\n                return {message: \"\"};\n            }\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            let bracketed = inner;\n            if (showField) {\n                this.addField(options, ctxt);\n                bracketed = true;\n            }\n            if (bracketed) {\n                ctxt.message.push(\"(\");\n            }\n            let first = true;\n            for (const operand of this.operands) {\n                if (!first) {\n                    if (this.and) {\n                        ctxt.message.push(\" \");\n                        this.addOperator(\"AND\", options, ctxt);\n                        ctxt.message.push(\" \");\n                    }\n                    else {\n                        ctxt.message.push(\" \");\n                        this.addOperator(\"OR\", options, ctxt);\n                        ctxt.message.push(\" \");\n                    }\n                }\n                first = false;\n                operand._toMessage(ctxt, options);\n            }\n            if (bracketed) {\n                ctxt.message.push(\")\");\n            }\n        }\n        if (inner) {\n            return {message: \"\"};\n        }\n        return {\n            message: ctxt.message.join(\"\"),\n            values: ctxt.values\n        };\n    }\n\n    /**\n     * Return an `ExprMessage` for the expression which can be used with [IntlService.formatMessage]{@link IntlService#formatMessage}\n     * for display purposes\n     */\n    toMessage(options?: ExprMessageOptions): ExprMessage {\n        return this._toMessage({\n            inner: false,\n            message: [\"txt#\"],\n            values: {},\n            valueIndex: 0\n        }, options);\n    }\n\n    private static matchNode(context: ExprContext, expr1: Expr, expr2: Expr): boolean {\n        if (expr1.isLeaf !== expr2.isLeaf) {\n            return false;\n        }\n        if (expr1.isLeaf) {\n            if (expr1.isStructured !== expr2.isStructured) {\n                return false;\n            }\n            if (expr1.not !== expr2.not) {\n                return false;\n            }\n            const field1 = context.appService.resolveColumnAlias(expr1.field);\n            const field2 = context.appService.resolveColumnAlias(expr2.field);\n            if (field1 !== field2) {\n                return false;\n            }\n            const operator1 = expr1.operator === ExprOperator.none ? ExprOperator.eq : expr1.operator;\n            const operator2 = expr2.operator === ExprOperator.none ? ExprOperator.eq : expr2.operator;\n            if (operator1 !== operator2) {\n                return false;\n            }\n        }\n        if (!expr1.isLeaf) {\n            if (expr1.and !== expr2.and) {\n                return false;\n            }\n            // All of the structured and non-structured operands in expr2 must be in expr1 so check that there are at least enough\n            // operands available. (The actual matching of the contents of the operand nodes is done in the recursive calls to MatchNode)\n            if (!expr1.operands !== !expr2.operands) {\n                return false;\n            }\n            let expr1StructuredCount = 0, expr1UnstructuredCount = 0, expr2StructuredCount = 0, expr2UnstructuredCount = 0;\n            expr1.operands.forEach((operand) => { if (operand.isStructured) { expr1StructuredCount++; } else { expr1UnstructuredCount++; }});\n            expr2.operands.forEach((operand) => { if (operand.isStructured) { expr2StructuredCount++; } else { expr2UnstructuredCount++; }});\n            if ((expr2StructuredCount > expr1StructuredCount) || (expr2UnstructuredCount > expr1UnstructuredCount)) {\n                return false;\n            }\n        }\n        const values1Length = expr1.values ? expr1.values.length : 0;\n        const values2Length = expr2.values ? expr2.values.length : 0;\n        if (values1Length !== values2Length) {\n            return false;\n        }\n        if (values1Length && expr1.values && expr2.values) {\n            for (const value1 of expr1.values) {\n                let found = false;\n                for (const value2 of expr2.values) {\n                    if (Utils.eqNC(value1, value2)) {\n                        found = true;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if this expression matches the passed one\n     */\n    matchNode(expr: Expr): boolean {\n        return Expr.matchNode(this.exprContext, this, expr);\n    }\n\n    /**\n     * Returns the matching expression or sub-expression in this expression with the passed one.\n     *\n     * @param expr The expression to match\n     * @param filter An option filter function called on first level candidate sub-expressions\n     * before matching within them\n     */\n    find(expr: Expr, filter?: (expr: Expr) => boolean): Expr | null {\n        if (this.matchNode(expr)) {\n            if (!this.isLeaf && this.operands) {\n                for (const child1 of expr.operands) {\n                    let found = false;\n                    for (const child2 of this.operands) {\n                        if (filter && filter(child2)) {\n                            continue;\n                        }\n                        if (child2.find(child1)) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        return null;\n                    }\n                }\n            }\n            return this;\n        }\n        else {\n            if (!this.isLeaf && this.operands) {\n                for (const child of this.operands) {\n                    if (filter && filter(child)) {\n                        continue;\n                    }\n                    if (child.find(expr)) {\n                        return child;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Perform the passed `action` on this expression and any descendant operands\n     *\n     * @param action The action to perform\n     */\n    forEach(action: (expr: Expr) => void) {\n        action(this);\n        if (this.operands) {\n            for (const operand of this.operands) {\n                operand.forEach(action);\n            }\n        }\n    }\n\n    /**\n     * Execute the callback function on this node and any descendants until the callback returns a truthy value\n     * in which case immediately return `true`. Otherwise return `false`.\n     */\n    some(callback: (expr: Expr) => boolean): boolean {\n        if (callback(this)) {\n            return true;\n        }\n        if (this.operands) {\n            for (const operand of this.operands) {\n                if (operand.some(callback)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Execute the callback function on this node and any descendants until the callback returns a falsy value\n     * in which case, immediately return `false`. Otherwise return `true`.\n     */\n    every(callback: (expr: Expr) => boolean): boolean {\n        if (!callback(this)) {\n            return false;\n        }\n        if (this.operands) {\n            for (const operand of this.operands) {\n                if (!operand.every(callback)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the exoression has at least one fulltext operand.\n     * The test on `isPositive` filters expressions that only contain\n     * negative fulltext terms which will be ignored on the server. Fulltext\n     * expressions must have at least one positive term.\n     */\n    get hasRelevance(): boolean {\n        return this.some(expr => expr.isLeaf && !expr.isStructured && expr.isPositive);\n    }\n\n    /**\n     * Return an array of all fields used in this expression\n     */\n    getFields(): string[] {\n        const fields: string[] = [];\n        this.forEach((expr) => {\n            const field = this.exprContext.appService.resolveColumnAlias(expr.field);\n            if (field) {\n                if (!fields.find((field1) => Utils.eqNC(field, field1))) {\n                    fields.push(field);\n                }\n            }\n        });\n        return fields;\n    }\n\n    /**\n     * Return an array of all values used in this expression that pertain to the passed field and where the associated `isPositive`\n     * field matches the passed `positive` parameter\n     *\n     * @param field The field for which values are to be returned\n     * @param positive The value to test against `isPositive`\n     */\n    getValues(field: string, positive = true): string[] {\n        const values: string[] = [];\n        const column = this.exprContext.appService.resolveColumnName(field);\n        this.forEach((expr) => {\n            if (column) {\n                const column1 = this.exprContext.appService.resolveColumnName(expr.field);\n                if (!Utils.eqNC(column, column1)) {\n                    return;\n                }\n            }\n            if (expr.isLeaf && expr.isPositive === positive && expr.values) {\n                values.push(...expr.values);\n            }\n        });\n        return values;\n    }\n\n    private getDataValue(data: ExprEvaluationContext, field?: string, defaultScope?: string): any {\n        if (!data) {\n            return undefined;\n        }\n        const fields = Utils.split(field || \"\", \".\");\n        if (fields.length >= 1 && Utils.isUndefined(data[fields[0]]) && !!defaultScope) {\n            // By default, look on the \"defaultScope\" sub-object\n            fields.unshift(...Utils.split(defaultScope, \".\"));\n        }\n        let value: any = data;\n        for (const _field of fields) {\n            if (!value) {\n                break;\n            }\n            value = value[_field];\n        }\n        return value;\n    }\n\n    private getWildcardRegExp(value: string): RegExp | undefined {\n        if (value) {\n            let regExp = this.evaluationRegExps[value];\n            if (!Utils.isUndefined(regExp)) {\n                return regExp;\n            }\n            let haveWildcards = false;\n            let escaping = false;\n            const sb: string[] = [];\n            for (const ch of value) {\n                switch (ch) {\n                    // Handle wildcards and wildcard escaping\n                    case \"\\\\\":\n                        if (escaping) {\n                            sb.push(\"\\\\\\\\\");\n                            escaping = false;\n                        }\n                        else {\n                            escaping = true;\n                        }\n                        break;\n                    case \"*\":\n                        if (escaping) {\n                            sb.push(\"\\\\\");\n                            sb.push(ch);\n                            escaping = false;\n                        }\n                        else {\n                            haveWildcards = true;\n                            sb.push(\".*?\");\n                        }\n                        break;\n                    case \"?\":\n                        if (escaping) {\n                            sb.push(\"\\\\\");\n                            sb.push(ch);\n                            escaping = false;\n                        }\n                        else {\n                            haveWildcards = true;\n                            sb.push(\".\");\n                        }\n                        break;\n                    // Escape other regexp special characters\n                    case \"-\":\n                    case \"/\":\n                    case \"^\":\n                    case \"$\":\n                    case \"+\":\n                    case \".\":\n                    case \"(\":\n                    case \")\":\n                    case \"|\":\n                    case \"[\":\n                    case \"]\":\n                    case \"{\":\n                    case \"}\":\n                        sb.push(\"\\\\\");\n                        sb.push(ch);\n                        escaping = false;\n                        break;\n                    // All other characters just emit\n                    default:\n                        sb.push(ch);\n                        escaping = false;\n                        break;\n                }\n            }\n            if (haveWildcards) {\n                regExp = new RegExp(\"^\" + sb.join(\"\") + \"$\", \"i\");\n                this.evaluationRegExps[value] = regExp;\n                return regExp;\n            }\n            else {\n                this.evaluationRegExps[value] = undefined;\n            }\n        }\n        return undefined;\n    }\n\n    // NB comparisons with NaN always return false\n    private compare(value: string | string[] | undefined, dataValue: any, equality?: boolean): number {\n        if (Utils.isArray(dataValue) && dataValue.length === 0) {\n            return NaN;\n        }\n        const column = Expr.getColumn(this.exprContext, this.field || \"\");\n        if (Utils.isArray(dataValue) || Utils.isArray(value)) {\n            // \"in\" / \"contains\"\n            if (!Utils.isArray(dataValue)) {\n                dataValue = [dataValue];\n            }\n            if (Utils.isArray(value)) {\n                if (value.length === 0) {\n                    return NaN;\n                }\n            }\n            else {\n                value = [value + \"\"];\n            }\n            // At least one value in the value array must match a value in the dataValue array\n            for (const value1 of value) {\n                for (const dataValue1 of dataValue) {\n                    if (this.compare(value1, dataValue1, true) === 0) {\n                        return 0;\n                    }\n                }\n            }\n            return NaN;\n        }\n        if (!Utils.isArray(value)) {\n            value = ExprParser.unescape(value || \"\");\n            if (column && column.parser) {\n                value = this.exprContext.formatService.parseValue(value, column.parser);\n            }\n            if (AppServiceHelpers.isNumber(column)) {\n                if (!Utils.isNumber(dataValue)) {\n                    dataValue = 0;\n                }\n                const _value = Utils.toNumber(value);\n                return dataValue - _value;\n            }\n            if (AppServiceHelpers.isDate(column)) {\n                if (Utils.isString(dataValue)){\n                    dataValue = Utils.toDate(dataValue);\n                }\n                if (Utils.isDate(dataValue)) {\n                    const _value = this.exprContext.intlService.parseDate(value);\n                    if (_value) {\n                        return dataValue.getTime() - _value.getTime();\n                    }\n                }\n                return NaN;\n            }\n            if (AppServiceHelpers.isBoolean(column)) {\n                const _value = Utils.isTrue(value) ? 1 : 0;\n                return (dataValue ? 1 : 0) - _value;\n            }\n            dataValue = dataValue || \"\";\n            if (Utils.isString(dataValue)) {\n                dataValue = ExprParser.unescape(dataValue);\n                if (equality) {\n                    const regExp = this.getWildcardRegExp(value);\n                    if (regExp) {\n                        return regExp.test(dataValue) ? 0 : -1;\n                    }\n                }\n                return Utils.compare(dataValue, value);\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Evaluate this expression using `data` to provide field values. Field values\n     * can contain scopes (full stop separated components) to reference sub-objects\n     * in the data\n     *\n     * @param data The field values to be used in the evaluation\n     * @param defaultScope If a field value cannot be resolved then try to retrieve a value with this scope prepended to the field name\n     * @return The boolean result of the expression evaluation\n     */\n    evaluate(data: ExprEvaluationContext, defaultScope?: string): boolean {\n        let ret: boolean;\n        if (this.isLeaf) {\n            if (!this.isStructured) {\n                ret = false;\n            }\n            else {\n                if (Utils.eqNC(this.field || \"\", \"exists\")) {\n                    const dataValue = this.getDataValue(data, this.value, defaultScope);\n                    ret = !Utils.isUndefined(dataValue);\n                }\n                else if (Utils.eqNC(this.field || \"\", \"missing\")) {\n                    const dataValue = this.getDataValue(data, this.value, defaultScope);\n                    ret = Utils.isUndefined(dataValue);\n                }\n                else {\n                    const dataValue = this.getDataValue(data, this.field, defaultScope);\n                    switch (this.operator) {\n                        case ExprOperator.none:\n                        case ExprOperator.eq:\n                            ret = this.compare(this.value, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.gt:\n                            ret = this.compare(this.value, dataValue) > 0;\n                            break;\n                        case ExprOperator.gte:\n                            ret = this.compare(this.value, dataValue) >= 0;\n                            break;\n                        case ExprOperator.lt:\n                            ret = this.compare(this.value, dataValue) < 0;\n                            break;\n                        case ExprOperator.lte:\n                            ret = this.compare(this.value, dataValue) <= 0;\n                            break;\n                        case ExprOperator.neq:\n                            ret = this.compare(this.value, dataValue, true) !== 0;\n                            break;\n                        case ExprOperator.regex: {\n                            const regExp = new RegExp(this.value || \"\");\n                            ret = regExp.test(dataValue + \"\");\n                            break;\n                        }\n                        case ExprOperator.like: // not currently generated in parse\n                            ret = this.compare(this.value + \"*\", dataValue, true) === 0;\n                            break;\n                        case ExprOperator.in:\n                            ret = this.compare(this.values, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.contains: // not currently generated in parse\n                            ret = this.compare(this.value, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.between:\n                            ret = !!this.values &&\n                                this.compare(this.values[0], dataValue) >= 0 && this.compare(this.values[1], dataValue) <= 0;\n                            break;\n                    }\n                }\n            }\n        }\n        else {\n            ret = !!this.and;\n            for (const operand of this.operands) {\n                const ret1 = operand.evaluate(data, defaultScope);\n                if (this.and) {\n                    ret = ret && ret1;\n                    if (!ret) {\n                        break;\n                    }\n                }\n                else {\n                    ret = ret || ret1;\n                }\n            }\n        }\n        if (this.not) {\n            ret = !ret;\n        }\n        return ret;\n    }\n}\n\n/**\n * @ignore\n */\nexport const enum Token {\n    invalid=-1,\n    or=0,\n    and=1,\n    not=2,\n    near=3,\n    infixNear=4,\n    lPar=5,\n    rPar=6,\n    eof=7,\n    value=8\n}\n\n/**\n * @ignore\n */\nconst enum Act {\n    s,  // shift\n    r,  // reduce\n    a,  // accept\n    e1, // error : missing right parenthesis\n    e2, // error : missing operator\n    e3, // error : unbalanced right parenthesis\n    e4  // error : invalid function argument\n}\n\n/**\n * Parsing options\n */\nexport interface ExprParserOptions {\n    /**\n     * If `true` then a fielded search expression with no value will not generate an error. This would be used\n     * when providing feedback during text entry\n     */\n    allowEmptyValues?: boolean;\n    /**\n     * If `true`, fields can contain the scoping character (`.`). This is typically used with `Expr.evaluate`\n     */\n    allowScopedFields?: boolean;\n    /**\n     * If `true` then arbitrary field names are permitted. This is typically used with `Expr.evaluate`\n     */\n    disallowFulltext?: boolean;\n}\n\n/**\n * @ignore\n */\nexport class ExprParserOperator {\n    public static invalid: ExprParserOperator = new ExprParserOperator(Token.invalid);\n    public static or: ExprParserOperator = new ExprParserOperator(Token.or);\n    public static and: ExprParserOperator = new ExprParserOperator(Token.and);\n    public static not: ExprParserOperator = new ExprParserOperator(Token.not);\n    public static lPar: ExprParserOperator = new ExprParserOperator(Token.lPar);\n    public static rPar: ExprParserOperator = new ExprParserOperator(Token.rPar);\n    public static eof: ExprParserOperator = new ExprParserOperator(Token.eof);\n\n    public tok: Token;\n    public tokValue: string;\n    public tokValuePos: number;\n    public tokValueLen: number;\n\n    constructor(tok: Token, value: string = \"\", valuePos: number = -1, valueLen: number = -1) {\n        this.tok = tok;\n        this.tokValue = value;\n        this.tokValuePos = valuePos;\n        this.tokValueLen = valueLen;\n    }\n}\n\n/**\n * A parser for Sinequa fielded search expressions. Such expressions allow filters to be specified in fulltext and\n * can be combined with boolean operators to build complex queries.\n *\n * A single fielded search clause has this form:\n * ``<fieldname>[`display value`]:[:][<operator>]<value>``\n *\n * A field name is either a column name or alias or a partname. In the case of a partname and column name clashing then\n * the field is treated as a column. Two colons can be specified as the separator to denote that the field is a partname.\n * An optional display value can follow the fieldname enclosed in backquote characters\n *\n * Operators are: `=` (default), `>=`, `>`, `<=`, `<`, `~` (regexp)\n * In addition, a regular expression can be specified by enclosing the value in `/` characters\n *\n * An inclusive range of values can be specified using a square bracket syntax: `[value1..value2]`\n * An exclusive range of values can be specified using a curly bracket syntax: `{value1..value2}`\n * The brackets can be mixed. For example: `age:{5..13]` expresses `13 >= age > 5`.\n *\n * For multi-value csv fields an `IN` condition can be expressed using a comma-separated list of values enclosed in square brackets.\n * For example: `authors:[Proust, Orwell, Dickens]`\n *\n * If a value contains reserved characters then it can be enclosed in backquote characters to prevent the parser interpreting them\n * incorrectly. For example: ``code: `a:b:c` ``\n *\n * The parser also supports a NEAR operator to allow searching for terms close to each other. There are two forms suppported:\n * * infix - `term1 NEAR[/n] term2` where `n` is the maximum number of words between the two terms for them to match\n * * function - `NEAR[/n](term1, term2, term3, ...)` where `n` is \"window\" size within which all the terms must be present for them\n * to match. The minimum useful value for n is thus equal to the number of terms passed to the operator.\n *\n * Fielded search expresions can be combined with the boolean operators `AND`, `OR` and `NOT` and brackets used for grouping.\n * For example: `football (age:>=7 AND (name:smith OR name:jones))`\n */\nexport class ExprParser {\n\n    public static fieldPartnamePrefix = \"@\";\n    private static parsetbl: Act[][] = [\n    /* stk  ------------- input ------------*/\n    /*\t\t                                 INFIX                  */\n    /*\t\t         OR\t   AND\t NOT   NEAR  NEAR  (\t  )\t     $  */\n    /*OR */         [Act.r, Act.s, Act.s, Act.s, Act.s, Act.s, Act.r, Act.r],\n    /*AND*/         [Act.r, Act.r, Act.s, Act.s, Act.s, Act.s, Act.r, Act.r],\n    /*NOT*/         [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*NEAR*/        [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*INFIXNEAR*/   [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*(*/           [Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.e1],\n    /*)*/           [Act.r, Act.r, Act.r, Act.r, Act.r, Act.e2, Act.r, Act.r],\n    /*$*/           [Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.e3, Act.a]\n    ];\n\n    private exprContext: ExprContext;\n    private options: ExprParserOptions;\n    private expressions: Expr[];\n    private operators: ExprParserOperator[];\n    private fields: string[]; // pushed on '(', popped on ')'\n    private displays: string[]; // pushed on '(', popped on ')'\n    private op: ExprParserOperator;\n    private prevOp: ExprParserOperator;\n    private saveOp: ExprParserOperator; // for default conjunction operator\n    private field: string;\n    private display: string;\n    private text: string;\n    private current: number;\n    private length: number;\n\n    private constructor(exprContext: ExprContext, options?: ExprParserOptions) {\n        this.exprContext = exprContext;\n        this.options = options || {};\n        this.exprContext.disallowFulltext = this.options.disallowFulltext;\n        this.expressions = [];\n        this.operators = [];\n        this.fields = [];\n        this.displays = [];\n        this.text = \"\";\n        this.current = 0;\n        this.length = 0;\n        this.op = this.prevOp = this.saveOp = ExprParserOperator.invalid;\n    }\n\n    /**\n     * Escape a string so that the characters in it are not processed by the fielded search expression parser.\n     * Single occurrences of the backslash character are replaced by two backslashes and backquote characters\n     * are prefixed by a backslash. Finally, the string is enclosed in backquotes.\n     *\n     * For example: `` a\\`\\b `` => `` a\\\\\\`\\\\b ``\n     */\n    // \\ => \\\\\n    // ` => \\`\n    // then surround with ``\n    public static escape(value: string | undefined): string {\n        if (!value) {\n            return \"``\";\n        }\n        value = String(value); // make sure we have a string\n        if (value.search(/[\\\\`]/) === -1) {\n            return \"`\" + value + \"`\";\n        }\n        const sb: string[] = [\"`\"];\n        for (let i = 0, ic = value.length; i < ic; i++) {\n            const ch = value[i];\n            if (ch === \"\\\\\" || ch === \"`\") {\n                sb.push(\"\\\\\");\n            }\n            sb.push(ch);\n        }\n        sb.push(\"`\");\n        return sb.join(\"\");\n    }\n\n    private static isEscaped(value: string | undefined): boolean {\n        return !!value && value.length >= 2 && value[0] === \"`\" && value[value.length - 1] === \"`\";\n    }\n\n    /**\n     * Perform the reverse operation to [ExprParser.escpae]{@link ExprParser#escape}\n     */\n    // remove surrounding ``\n    // \\\\ => \\\n    // \\` => `\n    public static unescape(value: string): string {\n        if (!ExprParser.isEscaped(value)) {\n            return value;\n        }\n        const sb: string[] = [];\n        for (let i = 1, ic = value.length - 1; i < ic; i++) {\n            let ch = value[i];\n            if (ch === \"\\\\\") {\n                if (i >= ic - 1) { // we end with a \\ => drop it\n                    continue;\n                }\n                ch = value[++i];\n            }\n            sb.push(ch);\n        }\n        return sb.join(\"\");\n    }\n\n    /**\n     * @ignore\n     */\n    public static unescapeList(values: string[]): string[] {\n        if (!values) {\n            return values;\n        }\n        const values1: string[] = [];\n        for (let _i = 0, _a = values; _i < _a.length; _i++) {\n            const value = _a[_i];\n            values1.push(ExprParser.unescape(value));\n        }\n        return values1;\n    }\n\n    /**\n     * @ignore\n     */\n    public static valuesAndLocationsFromText(text: string, separator: string): ExprValueLocation[] {\n        if (Utils.isEmpty(text)) {\n            return [];\n        }\n        if (!text.includes(separator)) {\n            return [{value: text, start: 0, length: text.length}];\n        }\n        const values: ExprValueLocation[] = [];\n        const length = text.length;\n        let current = 0;\n        let currentStart = 0;\n        const sb: string[] = [];\n        let value: ExprValueLocation;\n        while (true) {\n            if (current >= length) {\n                value = Expr.getValueAndLocation(sb.join(\"\"));\n                value.start += currentStart;\n                if (!Utils.isEmpty(value.value)) {\n                    values.push(value);\n                }\n                break;\n            }\n            const ch = text[current];\n            if (ch === \"\\\\\") {\n                sb.push(ch);\n                current++;\n                if (current < length) {\n                    const ch1 = text[current];\n                    if (ch1 === \"\\\\\" || ch1 === \"`\") {\n                        sb.push(ch1);\n                        current++;\n                    }\n                }\n            }\n            else if (ch === \"`\") {\n                const last: IRef<number> = {value: 0};\n                const s = ExprParser.matchUntil(text, length, current, current + 1, \"`\", last);\n                if (!!s) {\n                    sb.push(s);\n                    current = last.value;\n                }\n                else {\n                    sb.push(ch);\n                    current++;\n                }\n            }\n            else if (ch === separator) {\n                value = Expr.getValueAndLocation(sb.join(\"\"));\n                value.start += currentStart;\n                sb.length = 0;\n                if (!Utils.isEmpty(value.value)) {\n                    values.push(value);\n                }\n                current++;\n                currentStart = current;\n            }\n            else {\n                sb.push(ch);\n                current++;\n            }\n        }\n        return values;\n    }\n\n    private matchKeyword(keyword: string, sbCurrentValue: string[], suffixCh?: string): boolean {\n        if (sbCurrentValue.length !== 0) {\n            const currentValue = sbCurrentValue.join(\"\");\n            if (!!currentValue && !\" \\r\\n\\t\".includes(currentValue[currentValue.length - 1])) {\n                return false;\n            }\n        }\n        if (Utils.isEmpty(keyword)) {\n            return false;\n        }\n        const keywordLen = keyword.length;\n        if (this.current + keywordLen > this.length) {\n            return false;\n        }\n        for (let i = 0, ic = keywordLen; i < ic; i++) {\n            const ch = this.text[this.current + i];\n            const kh = keyword[i];\n            if (ch !== kh) {\n                return false;\n            }\n        }\n        if (this.current + keywordLen < this.length) {\n            const nch = this.text[this.current + keywordLen];\n            if (nch !== suffixCh && !\" \\r\\n\\t(\".includes(nch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private matchUntil(first: number, start: number, endChars: string, last: IRef<number>): string | undefined {\n        return ExprParser.matchUntil(this.text, this.length, first, start, endChars, last);\n    }\n\n    private static matchUntil(text: string, length: number, first: number, start: number, endChars: string, last: IRef<number>): string | undefined {\n        last.value = start;\n        let found = false;\n        const sb: string[] = [text.substr(first, start - first)];\n        while (last.value < length) {\n            let ch = text[last.value++];\n            if (ch === \"\\\\\") {\n                sb.push(ch);\n                if (last.value < length) {\n                    ch = text[last.value++];\n                    if (ch === \"\\\\\" || ch === \"`\") {\n                        sb.push(ch);\n                        continue;\n                    }\n                }\n            }\n            sb.push(ch);\n            if (endChars.includes(ch)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return undefined;\n        }\n        return sb.join(\"\");\n    }\n\n    private matchSimpleValue(start: number): string {\n        const first = this.current;\n        let last = start;\n        while (last < this.length) {\n            const ch = this.text[last];\n            if (\" \\r\\n\\t)\".includes(ch)) {\n                break;\n            }\n            last++;\n        }\n        if (last === start) {\n            return \"\";\n        }\n        return this.text.substr(first, last - first);\n    }\n\n    private getTerminators(ch: string, allowRanges: boolean): string {\n        if (ch === \"\\\"\") return \"\\\"\";\n        if (ch === \"[\") return allowRanges ? \"]}\" : \"]\";\n        if (ch === \"{\") return allowRanges ? \"}]\" : \"}\";\n        if (ch === \"/\") return \"/\";\n        if (ch === \"(\") return \")\";\n        if (ch === \"`\") return \"`\";\n        return \"\";\n    }\n\n    private canBeTokValue(value: string, canBeEmpty = true) {\n        return !Utils.isEmpty(value) || (canBeEmpty && this.options.allowEmptyValues && !Utils.isEmpty(this.field));\n    }\n\n    private _getTokValue(value: string, canBeEmpty = true): boolean {\n        // Current is pointing at the next non-whitepspace character after this value\n        if (value === null) return false;\n        let pos = this.current;\n        const len = value.length;\n        value = Utils.trimEnd(value);\n        pos -= len - value.length;\n        value = value.trim();\n        if (this.canBeTokValue(value, canBeEmpty)) {\n            this.op = new ExprParserOperator(Token.value, value, pos - value.length, value.length);\n            return true;\n        }\n        return false;\n    }\n\n    private getTokValue(sb: string[], canBeEmpty = true): boolean {\n        if (!sb) {\n            return false;\n        }\n        return this._getTokValue(sb.join(\"\"), canBeEmpty);\n    }\n\n    private ensureNearValue(value: string): string {\n        const defaultNearValue = this.exprContext.appService.ccquery ? this.exprContext.appService.ccquery.defaultNearValue : 0;\n        let near = Utils.toInt(value, defaultNearValue);\n        if (near < 0) {\n            near = defaultNearValue;\n        }\n        return near.toString();\n    }\n\n    private findDisplay(value: string): number {\n        if (!value || value.length < 3) {\n            return -1;\n        }\n        if (value[value.length - 1] !== \"`\") {\n            return -1;\n        }\n        let pos = value.length - 2;\n        while (pos !== -1) {\n            pos = value.lastIndexOf(\"`\", pos);\n            if (pos !== -1) {\n                let escapes = 0;\n                let pos1 = pos - 1;\n                while (pos1 >= 0) {\n                    if (value[pos1] !== \"\\\\\") {\n                        break;\n                    }\n                    escapes++;\n                    pos1--;\n                }\n                if (escapes % 2 === 0) {\n                    return pos;\n                }\n                pos--;\n            }\n        }\n        return -1;\n    }\n\n    private isValidFieldName(name: string): boolean {\n        return this.options.allowScopedFields ? Utils.isValidScopedSimpleName(name) : Utils.isValidSimpleName(name);\n    }\n\n    private isAllowedField(field: string, forcePartname: boolean, isPartname: IRef<boolean>): boolean {\n        isPartname.value = false;\n        if (Utils.eqNCN(field, \"exists\", \"missing\")) {\n            return true;\n        }\n        if (Utils.eqNCN(field, \"text\", \"concepts\", \"refine\", \"matchingpartnames\")) {\n            // NB @concepts, @refine and @matchingpartnames must be handled specially by the caller\n            isPartname.value = true;\n            return true;\n        }\n        const ccquery = this.exprContext.appService.ccquery;\n        if (ccquery) {\n            forcePartname = forcePartname && !this.exprContext.disallowFulltext;\n            let column = forcePartname ? undefined : this.exprContext.appService.getColumn(field);\n            if (!!column) {\n                if (column.eType === EngineType.varchar) { // only type not indexed\n                    column = undefined;\n                }\n                else if ((ccquery.$columnFieldsPattern && ccquery.$columnFieldsPattern.hasPatterns()) &&\n                    !ccquery.$columnFieldsPattern.isIncluded(field) &&\n                    !ccquery.$columnFieldsPattern.isIncluded(column.name)) {\n                    column = undefined;\n                }\n            }\n            if (!this.exprContext.disallowFulltext && !column) {\n                isPartname.value = true;\n                if ((ccquery.$partnameFieldsPattern && ccquery.$partnameFieldsPattern.hasPatterns()) &&\n                    !ccquery.$partnameFieldsPattern.isIncluded(field)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private readToken(): string | undefined {\n        if (this.saveOp !== ExprParserOperator.invalid) {\n            this.prevOp = this.op;\n            this.op = this.saveOp;\n            this.saveOp = ExprParserOperator.invalid;\n            return undefined;\n        }\n        let ch;\n        this.prevOp = this.op;\n        let nextValue: string | undefined;\n        const sbCurrentValue: string[] = [];\n        let candidateFieldPos = -1;\n        let fieldSpecified = false;\n        while (true) {\n            if (this.current >= this.length) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.eof;\n                return undefined;\n            }\n            ch = this.text[this.current];\n            if (ch === \"\\\\\") { // \\ escapes \\ and `\n                sbCurrentValue.push(ch);\n                this.current++;\n                if (this.current < this.length) {\n                    const ch1 = this.text[this.current];\n                    if (ch1 === \"\\\\\" || ch1 === \"`\") {\n                        sbCurrentValue.push(ch1);\n                        this.current++;\n                    }\n                }\n            }\n            else if (ch === \"(\") {\n                if (this.getTokValue(sbCurrentValue, false)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.lPar;\n                this.current++;\n                return undefined;\n            }\n            else if (ch === \")\") {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.rPar;\n                this.current++;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"AND\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.and;\n                this.current += 3;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"OR\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.or;\n                this.current += 2;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"NOT\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.not;\n                this.current += 3;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"NEAR\", sbCurrentValue, \"/\")) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.current += 4;\n                nextValue = undefined;\n                if (this.current < this.length && this.text[this.current] === \"/\") {\n                    const last: IRef<number> = {value: 0};\n                    nextValue = this.matchUntil(this.current + 1, this.current + 1, \" \\r\\n\\t`\\\"([/\", last);\n                    let near = -1;\n                    if (nextValue !== undefined) {\n                        nextValue = nextValue.substr(0, nextValue.length - 1);\n                        near = Utils.toInt(nextValue, -1);\n                    }\n                    if (near < 0) {\n                        return \"bad operator\";\n                    }\n                    this.current = last.value - 1;\n                }\n                nextValue = this.ensureNearValue(nextValue || \"\");\n                const infix = this.current >= this.length || this.text[this.current] !== \"(\";\n                // For infix, near value is the number of words between the two terms so add the 2 terms to\n                // the window (near/0 = adjacent terms)\n                this.op = infix ?\n                    new ExprParserOperator(Token.infixNear, (Utils.toInt(nextValue) + 2).toString()) :\n                    new ExprParserOperator(Token.near, nextValue);\n                return undefined;\n            }\n            else if (ch === \"+\" || ch === \"-\") {\n                if (this.current + 1 < this.length) {\n                    const ch1 = this.text[this.current + 1];\n                    const last: IRef<number> = {value: 0};\n                    let length: number;\n                    if (\"(\\\"[/`\".includes(ch1)) { // ( \" [ / `\n                        nextValue = this.matchUntil(this.current, this.current + 2, this.getTerminators(ch1, false), last);\n                        length = last.value - this.current;\n                    }\n                    else {\n                        nextValue = this.matchSimpleValue(this.current + 1);\n                        length = !!nextValue ? nextValue.length : 0;\n                    }\n                    if (!!nextValue) {\n                        sbCurrentValue.push(nextValue);\n                        this.current += length;\n                        continue;\n                    }\n                }\n                return \"bad operator: \" + ch;\n            }\n            else if (\"\\\"[{/`\".includes(ch)) { // \" [ { / `\n                const last: IRef<number> = {value: 0};\n                nextValue = this.matchUntil(this.current, this.current + 1, this.getTerminators(ch, true), last);\n                if (!!nextValue) {\n                    const forceRange = (fieldSpecified && \"[{\".includes(ch) && sbCurrentValue.length === 0);\n                    sbCurrentValue.push(nextValue);\n                    this.current = last.value;\n                    if (forceRange && this.getTokValue(sbCurrentValue)) {\n                        return undefined;\n                    }\n                    continue;\n                }\n                return \"bad operator: \" + ch;\n            }\n            else {\n                if (ch === \":\") { // Field\n                    // Pick out previous value and/or field name\n                    // Field specifier can be:\n                    // field:value\n                    // field`display`:value\n                    // `display`:value\n                    const currentValue = sbCurrentValue.join(\"\");\n                    if (candidateFieldPos === -1) {\n                        // Check for display\n                        candidateFieldPos = this.findDisplay(currentValue);\n                        if (candidateFieldPos === -1) {\n                            this.op = ExprParserOperator.invalid;\n                            return \"invalid token\";\n                        }\n                    }\n                    let field = currentValue.substr(candidateFieldPos).trim();\n                    let display = \"\";\n                    // Extract display\n                    const displayStart = this.findDisplay(field);\n                    if (displayStart !== -1) {\n                        display = ExprParser.unescape(field.substr(displayStart, field.length - displayStart));\n                        field = field.substr(0, displayStart);\n                    }\n                    if (this.isValidFieldName(field) || (Utils.isEmpty(field) && !Utils.isEmpty(display))) {\n                        const value = currentValue.substr(0, candidateFieldPos);\n                        if (this.canBeTokValue(value.trim())) {\n                            this.current -= (sbCurrentValue.join(\"\").length - candidateFieldPos); // back up to field\n                            this._getTokValue(value);\n                            return undefined;\n                        }\n                        if (!Utils.isEmpty(field)) {\n                            let forcePartname = false;\n                            if (this.current + 1 < this.length && this.text[this.current + 1] === \":\") {\n                                // :: => force partname over column\n                                forcePartname = true;\n                                this.current++;\n                            }\n                            const isPartname: IRef<boolean> = { value: false };\n                            if (!this.isAllowedField(field, forcePartname, isPartname)) {\n                                candidateFieldPos = -1;\n                                sbCurrentValue.push(\":\");\n                                if (forcePartname) {\n                                    sbCurrentValue.push(\":\");\n                                }\n                                this.current++;\n                                continue;\n                            }\n                            if (isPartname.value) {\n                                field = ExprParser.fieldPartnamePrefix + field;\n                            }\n                        }\n                        if (!Utils.isEmpty(field)) {\n                            this.field = field;\n                            fieldSpecified = true;\n                        }\n                        if (!Utils.isEmpty(display)) {\n                            this.display = display;\n                        }\n                        sbCurrentValue.length = 0;\n                        this.current++;\n                        continue;\n                    }\n                }\n                if (\" \\r\\n\\t)\".includes(ch)) {\n                    candidateFieldPos = -1;\n                }\n                else if (candidateFieldPos === -1) {\n                    candidateFieldPos = sbCurrentValue.join(\"\").length;\n                }\n                sbCurrentValue.push(ch);\n                this.current++;\n            }\n        }\n    }\n\n    private clear() {\n        this.text = \"\";\n        this.current = 0;\n        this.length = 0;\n        this.operators.length = 0;\n        this.expressions.length = 0;\n        this.fields.length = 0;\n        this.displays.length = 0;\n    }\n\n    /**\n     * Parse some text using the Sinequa fielded search syntax\n     *\n     * @return The parsed `Expr` or an error string\n     */\n    public static parse(text: string, context: ExprContext, options?: ExprParserOptions): Expr | string {\n        const parser = new ExprParser(context, options);\n        const error = parser.parse(text);\n        if (error) {\n            return error;\n        }\n        return parser.parseResult();\n    }\n\n    private parseResult(): Expr | string {\n        if (this.expressions.length !== 1) {\n            return \"no expression found\";\n        }\n        return this.expressions[0];\n    }\n\n    private get contextField(): string {\n        let field = this.field;\n        if (Utils.isEmpty(field)) {\n            field = this.peekField();\n        }\n        return field;\n    }\n\n    private get contextDisplay(): string {\n        let display = this.display;\n        if (Utils.isEmpty(display)) {\n            display = this.peekDisplay();\n        }\n        return display;\n    }\n\n    private parse(text: string): string {\n        this.clear();\n        if (this.options.allowEmptyValues && !Utils.len(text.trim())) {\n            const expr = Expr.makeExpr(this.exprContext, \"\", this.contextField, this.contextDisplay, this.options.allowEmptyValues);\n            if (expr) {\n                expr.start = 0;\n                expr.length = 0;\n                this.expressions.push(expr);\n            }\n            return \"\";\n        }\n        this.text = text || \"\";\n        this.length = this.text.length;\n        this.operators.push(ExprParserOperator.eof);\n        let err = this.readToken();\n        if (err) {\n            return err;\n        }\n        while (true) {\n            if ((this.op.tok === Token.value || this.op.tok === Token.lPar || this.op.tok === Token.not || this.op.tok === Token.near) &&\n                (this.prevOp.tok === Token.value || this.prevOp.tok === Token.rPar)) {\n                // Default to AND for space separated terms\n                // NOT xxx => AND NOT xxx\n                this.saveOp = this.op;\n                this.op = ExprParserOperator.and;\n            }\n\n            let a: Act;\n            if (this.op.tok === Token.value) {\n                a = Act.s;\n            }\n            else {\n                a = ExprParser.parsetbl[this.operators[this.operators.length - 1].tok][this.op.tok];\n            }\n            switch (a) {\n                case Act.r:\n                    err = this.reduce();\n                    if (err) {\n                        return err;\n                    }\n                    break;\n                case Act.s:\n                    err = this.shift();\n                    if (err) {\n                        return err;\n                    }\n                    break;\n                case Act.a:\n                    if (this.expressions.length !== 1) {\n                        return \"syntax error\";\n                    }\n                    return \"\";\n                case Act.e1:\n                    return \"missing ')'\";\n                case Act.e2:\n                    return \"missing operator (AND,OR,NOT)\";\n                case Act.e3:\n                    return \"missing '('\";\n                case Act.e4:\n                    return \"invalid argument\";\n            }\n        }\n    }\n\n    private shift(): string | undefined {\n        if (this.op.tok === Token.value) {\n            const value = this.op.tokValue.trim();\n            if (Utils.isEmpty(value) && !this.options.allowEmptyValues) {\n                return \"empty token\";\n            }\n            const expr = Expr.makeExpr(this.exprContext, value, this.contextField, this.contextDisplay, !!this.options.allowEmptyValues);\n            if (!expr) {\n                return \"invalid expression\";\n            }\n            expr.start = this.op.tokValuePos;\n            expr.length = this.op.tokValueLen;\n            if (!!expr.operands) {\n                expr.operands.forEach(operand => {\n                    operand.start = this.op.tokValuePos;\n                    operand.length = this.op.tokValueLen;\n                });\n            }\n            this.expressions.push(expr);\n            this.field = \"\";\n            this.display = \"\";\n        }\n        else {\n            this.operators.push(this.op);\n            if (this.op.tok === Token.lPar) {\n                if (Utils.isEmpty(this.field)) {\n                    this.fields.push(this.peekField());\n                }\n                else {\n                    this.fields.push(this.field);\n                }\n                this.field = \"\";\n                if (Utils.isEmpty(this.display)) {\n                    this.displays.push(this.peekDisplay());\n                }\n                else {\n                    this.displays.push(this.display);\n                }\n                this.display = \"\";\n            }\n        }\n        return this.readToken();\n    }\n\n    private peekField(): string {\n        if (this.fields.length === 0) {\n            return \"\";\n        }\n        return this.fields[this.fields.length - 1];\n    }\n\n    private peekDisplay(): string {\n        if (this.displays.length === 0) {\n            return \"\";\n        }\n        return this.displays[this.displays.length - 1];\n    }\n\n    private canBeMergeTarget(e: Expr, and: boolean): boolean {\n        if (e.isLeaf) {\n            return false;\n        }\n        if (e.near >= 0) {\n            return false;\n        }\n        if (e.and !== and) {\n            return false;\n        }\n        if (e.not) {\n            return false;\n        }\n        return true;\n    }\n\n    private mergeExpr(e1: Expr, e2: Expr, and: boolean): Expr {\n        let source: Expr, target: Expr;\n        let prepend = false;\n        if (this.canBeMergeTarget(e1, and)) {\n            target = e1;\n            source = e2;\n        }\n        else if (this.canBeMergeTarget(e2, and)) {\n            target = e2;\n            source = e1;\n            prepend = true; // to keep the same order as in the input text\n        }\n        else {\n            return new Expr({\n                exprContext: e1.exprContext,\n                op1: e1,\n                and,\n                op2: e2,\n                field: this.peekField(),\n                display: this.peekDisplay()\n            });\n        }\n        if (source.isLeaf || source.and !== and || source.not || !Utils.eq(source.display || \"\", target.display || \"\")) {\n            target.addOperand(source, this.peekField(), prepend);\n        }\n        else {\n            if (source.operands) {\n                for (const operand of source.operands) {\n                    target.addOperand(operand, this.peekField(), prepend);\n                }\n            }\n        }\n        return target;\n    }\n\n    private reduce(): string | undefined {\n        let e: Expr | undefined;\n        let e1: Expr | undefined;\n        let e2: Expr | undefined;\n        const op: ExprParserOperator = this.operators[this.operators.length - 1];\n        switch (op.tok) {\n            case Token.not:\n                // Apply E := NOT E\n                e = this.expressions.pop();\n                if (!e) {\n                    return \"syntax error\";\n                }\n                e.not = !e.not;\n                this.expressions.push(e);\n                break;\n            case Token.and:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                this.expressions.push(this.mergeExpr(e1, e2, true));\n                break;\n            case Token.or:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                this.expressions.push(this.mergeExpr(e1, e2, false));\n                break;\n            case Token.near:\n                e = this.expressions.pop();\n                if (!e) {\n                    return \"syntax error\";\n                }\n                e.near = Utils.toInt(this.ensureNearValue(op.tokValue));\n                this.expressions.push(e);\n                break;\n            case Token.infixNear:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                if (!e2.isLeaf || e2.isStructured || !e1.isLeaf || e1.isStructured || e2.not || e1.not || !Utils.eqNC(e2.field || \"\", e1.field || \"\")) {\n                    return \"syntax error\";\n                }\n                e = new Expr({\n                    exprContext: e1.exprContext,\n                    op1: e1,\n                    and: false,\n                    op2: e2,\n                    field: this.peekField(),\n                    display: this.peekDisplay()\n                });\n                e.near = Utils.toInt(this.ensureNearValue(op.tokValue));\n                this.expressions.push(e);\n                break;\n            case Token.rPar:\n                this.operators.pop();\n                if (this.fields.length === 0) {\n                    return \"missing field\";\n                }\n                if (this.expressions.length === 0) {\n                    return \"syntax error\";\n                }\n                const field = this.fields.pop();\n                const display = this.displays.pop();\n                // Set Field for single term bracketed expressions\n                e = this.expressions[this.expressions.length - 1];\n                if (e.isLeaf) {\n                    if (Utils.isEmpty(e.field)) {\n                        e.field = field;\n                    }\n                    if (Utils.isEmpty(e.display)) {\n                        e.display = display;\n                    }\n                }\n                break;\n        }\n        this.operators.pop();\n        return undefined;\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport {Utils} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport { ExportOutputFormat, ExportSourceType } from './config/ccapp';\nimport { IQuery } from './query/query';\nimport { Results } from \"./query.web.service\";\nimport { AuditEventType } from './audit.web.service';\n\n/**\n * A service to export the result of a query.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryExportWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    private logErrorToConsole(methodName: string, errorMessage: string): void {\n        console.log(`queryExportService.${methodName} ${errorMessage}.`);\n    }\n\n    private preliminaryCheck(\n        methodName: string,\n        webService: string,\n        format: ExportOutputFormat): Observable<HttpResponse<Blob>> | undefined {\n\n        if (!this.appName) {\n            const errorMessage = 'No app';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!webService) {\n            const errorMessage = 'No web service';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!format || format as ExportOutputFormat === ExportOutputFormat.None) {\n            const errorMessage = 'No output format';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Exports the current result.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query The query to export.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportResult(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportResult';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            type: ExportSourceType[ExportSourceType.Result],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the current selected records.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query\n     * @param selection\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSelection(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        selection: string[],\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSelection';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!selection || selection.length === 0) {\n            const errorMessage = 'No selection';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            selection,\n            type: ExportSourceType[ExportSourceType.Selection],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_Selection_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the result of a saved query.\n     *\n     * @param webService The configuration for the export web service.\n     * @param queryName The query name.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSavedQuery(\n        webService: string,\n        queryName: string,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSavedQuery';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!queryName) {\n            const errorMessage = 'No saved query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            type: ExportSourceType[ExportSourceType.SavedQuery],\n            format: ExportOutputFormat[format],\n            name: queryName,\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_SavedQuery_ExportCSV,\n                detail: {\n                    query: queryName\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    private doExport(body: {}): Observable<HttpResponse<Blob>> {\n        const observable = this.httpClient.post(\n            this.makeUrl('query.export'),\n            body,\n            {\n                observe: 'response',\n                responseType: 'blob'\n            }\n        );\n\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                console.log('queryExportService.export success: ', this.readBlobFileName(response));\n                return response;\n            },\n            (error) => {\n                console.log('queryExportService.export failure - error: ', error);\n            });\n\n        return observable;\n    }\n\n    private readBlobFileName(response: HttpResponse<Blob>): string {\n        const header = response.headers.get('content-disposition');\n        return header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n    }\n}\n","const VALIDATION_MODULE_PROVIDERS = [];\n\nexport {VALIDATION_MODULE_PROVIDERS};\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes the object returned by the list action of the labels web service\n */\nexport interface Labels {\n    labels: string[];\n}\n\n/**\n * Describes the object returned by the getUserRights action of the labels web service\n */\nexport interface LabelsRights {\n    canManagePublicLabels: boolean;\n    canEditPublicLabels: boolean;\n}\n\n/**\n * A service for calling the labels web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LabelsWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Calls the list action of the labels web service\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    list(\n        prefix: string,\n        _public: boolean): Observable<Labels> {\n        const observable = this.httpClient.get<Labels>(this.makeUrl(\"labels\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"list\",\n                q: prefix,\n                public: _public,\n                locale: this.intlService.currentLocale.name,\n                localize: false\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.list failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * A wrapper around the list method. The matching labels are returned as an array of strings\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    array(\n        prefix: string,\n        _public: boolean): Observable<string[]> {\n        return this.list(prefix, _public)\n            .pipe(map((value) => {\n                return value.labels;\n            }));\n    }\n\n    /**\n     * Calls the getUserRights action of the labels web service\n     */\n\n    getUserRights(): Observable<LabelsRights> {\n        const observable = this.httpClient.get<LabelsRights>(\n            this.makeUrl('labels'),\n            {\n                params: this.makeParams({\n                    app: this.appName,\n                    action: 'getUserRights'\n                })\n            }\n        );\n        Utils.subscribe(\n            observable,\n            response => response,\n            error => console.log(\"labelsService.getUserRights failure - error: \", error)\n        );\n        return observable;\n    }\n\n    /**\n     * Add labels to a set of documents\n     *\n     * @param labels The labels to add\n     * @param ids The ids of the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    add(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"add\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_AddDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addToLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.add failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from a set of documents\n     *\n     * @param labels The labels to remove\n     * @param ids The ids of the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    remove(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"remove\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_RemoveDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeFromLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.remove failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Renames a set of labels\n     *\n     * @param labels The labels to rename\n     * @param newLabel The new name for the labels\n     * @param _public Determines whether the labels are public or private\n     */\n    rename(labels: string[],\n        newLabel: string,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"rename\",\n            labels: labels,\n            newLabel: newLabel,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Rename,\n                detail: {\n                    public: _public,\n                    oldlabel: !!labels ? labels.toString() : null,\n                    label: newLabel\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.rename failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Deletes a set of labels\n     *\n     * @param labels The labels to be deleted\n     * @param _public Determines whether the labels are public or private\n     */\n    delete(labels: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"delete\",\n            labels: labels,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.delete failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Adds labels to the documents identified by the passed query\n     *\n     * @param labels The labels to add\n     * @param query The query to produce the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkAdd(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkAdd\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Add,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkAdd failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from the documents identified by the passed query\n     *\n     * @param labels The labels to remove\n     * @param query The query to produce the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkRemove(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkRemove\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkRemove failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import enIntl from \"./en\";\nimport frIntl from \"./fr\";\nimport deIntl from \"./de\";\n\nexport { enIntl, frIntl, deIntl };\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Annuler\",\n            \"yes\": \"Oui\",\n            \"no\": \"Non\",\n            \"abort\": \"Abandonner\",\n            \"retry\": \"Réessayer\",\n            \"ignore\": \"Ignorer\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirmer\"\n        },\n        \"prompt\": {\n            \"title\": \"Saississez une valeur\"\n        }\n    }\n};\n","import {Injectable, Inject, Type, Injector, InjectionToken} from \"@angular/core\";\nimport {FormGroup, ValidatorFn} from \"@angular/forms\";\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Utils, Keys} from \"@sinequa/core/base\";\nimport {MessageParams} from \"@sinequa/core/intl\"; // Dependency to INTL !\nimport {ModalRef, IModalRef} from \"./modal-ref\";\n\n/** Describes the configuration object that can be passed when opening\n * a modal with the {@link ModalService}.\n */\nexport interface ModalConfig {\n    /**\n     * Classes that should be added to the `Overlay` pane.\n     */\n    panelClass?: string | string[];\n    /**\n     * Indicates whether a backdrop should be added when opening the modal.\n     */\n    hasBackdrop?: boolean;\n    /**\n     * Classes that should be added to the backdrop.\n     */\n    backdropClass?: string | string[];\n    /**\n     * The data model that the modal will operate on.\n     */\n    model?: any;\n    /**\n     * The CSS width of the modal.\n     */\n    width?: string;\n    /**\n     * The CSS height of the modal.\n     */\n    height?: string;\n    /**\n     * Indicates whether the modal should occupy the screen width and height. In this case\n     * `width` and `height` are set to `100%` and the `sq-modal-fullscreen` class is added\n     * to `panelClass`\n     */\n    fullscreen?: boolean;\n    /**\n     * Indicates whether a click on the backdrop should close the modal. The default value\n     * is `true`.\n     */\n    closeOnBackdropClick?: boolean;\n}\n\nconst DEFAULT_CONFIG: ModalConfig = {\n    hasBackdrop: true,\n    backdropClass: [\"cdk-overlay-dark-backdrop\", \"sq-modal-backdrop\"],\n    panelClass: \"sq-modal-pane\",\n    model: null,\n    closeOnBackdropClick: true\n};\n\n/**\n * The `MODAL_MODEL` injection token can be used to access the modal's model in\n * the the modal component. The value is `provided` from the value set in the\n * {@link ModalConfig} options when the modal is opened.\n */\nexport const MODAL_MODEL = new InjectionToken<any>('MODAL_MODEL');\n\n/**\n * The possible result values that can be set when a modal is closed. Buttons in a modal\n * have an associated `ModalResult` value. All buttons except those with a `Custom` result\n * value will close the modal when they are clicked.\n */\nexport const enum ModalResult {\n    OK = -1,\n    Cancel = -2,\n    Yes = -3,\n    No = -4,\n    Abort = -5,\n    Retry = -6,\n    Ignore = -7,\n    Custom = 0\n}\n\n/**\n * An enumeration of the types of confirm modals. The type of the confirm modal\n * can be reflected in the icon and/or colors used.\n */\nexport const enum ConfirmType {\n    Success,\n    Info,\n    Warning,\n    Error\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.confirm]{@link ModalService#confirm}\n * method.\n */\nexport interface ConfirmOptions {\n    /**\n     * The title of the confirm modal.\n     */\n    title?: string;\n    /**\n     * The message dispayed in the confirm modal.\n     */\n    message: string;\n    /**\n     * Any parameters for the `message`.\n     */\n    messageParams?: MessageParams;\n    /**\n     * The type of the confirm modal.\n     */\n    confirmType?: ConfirmType;\n    /**\n     * The buttons to display in the confirm modal.\n     */\n    buttons: ModalButton[];\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.prompt]{@link ModalService#prompt}\n * method.\n */\nexport interface PromptOptions extends ConfirmOptions {\n    /**\n     * text written by the user in the prompt input\n     */\n    output: string;\n    /**\n     * List of validators for the input form control\n     */\n    validators?: ValidatorFn[];\n    /**\n     * If omitted, a single-line input is displayed. If specified, a textarea with the\n     * given number of rows is displayed\n     */    \n    rowCount?: number;\n}\n\n/**\n * Describes the options that can be used when creating an instance of a {@link ModalButton}.\n */\nexport interface IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary?: boolean;\n    /**\n     * The button text.\n     */\n    text?: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible?: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation?: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor?: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action?: (button: ModalButton) => void;\n}\n\n/**\n * A class representing a button displayed in a modal.\n */\nexport class ModalButton implements IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary: boolean;\n    /**\n     * The button text.\n     */\n    text: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action: (button: ModalButton) => void;\n\n    constructor(options: IModalButton) {\n        Utils.extend(this, {visible: true, anchor: false}, options);\n    }\n\n    /**\n     * Get the button text. Buttons with non-custom result types\n     * have default text depending on their result type -\n     * `msg#modal.buttons.ok`, `msg#modal.buttons.cancel` etc\n     */\n    getText() {\n        if (this.text) {\n            return this.text;\n        }\n        switch (this.result) {\n            case ModalResult.OK:\n                return \"msg#modal.buttons.ok\";\n            case ModalResult.Cancel:\n                return \"msg#modal.buttons.cancel\";\n            case ModalResult.Yes:\n                return \"msg#modal.buttons.yes\";\n            case ModalResult.No:\n                return \"msg#modal.buttons.no\";\n            case ModalResult.Abort:\n                return \"msg#modal.buttons.abort\";\n            case ModalResult.Retry:\n                return \"msg#modal.buttons.retry\";\n            case ModalResult.Ignore:\n                return \"msg#modal.buttons.ignore\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Perform a click on a button. The button's explicit action is performed if set and\n     * the modal closed with the button's modal result if the `result` type is non-`Custom`.\n     * If the validation status not `valid` this method returns without performing any action.\n     *\n     * @param closer An object with a `close` method. If the result type is non-custom then\n     * the `close` method of this object is called.\n     */\n    click(closer: {close(result: any): void}) {\n        if (this.validation && !this.validation.valid) {\n            return;\n        }\n        if (this.action) {\n            this.action(this);\n        }\n        if (this.result !== ModalResult.Custom) {\n            closer.close(this.result);\n        }\n    }\n}\n\n/**\n * An injection token to set the component to use for the `confirm` modal displayed\n * by the [ModalService.confirm]{@link ModalService#confirm} method.\n */\nexport const MODAL_CONFIRM = new InjectionToken<Type<any>>('MODAL_CONFIRM');\n\n/**\n * An injection token to set the component to use for the `prompt` modal displayed\n * by the [ModalService.prompt]{@link ModalService#confirm} method.\n */\nexport const MODAL_PROMPT = new InjectionToken<Type<any>>('MODAL_PROMPT');\n\n/**\n * A service to open modal dialogs.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ModalService {\n    constructor(\n        protected injector: Injector,\n        protected overlay: Overlay,\n        @Inject(MODAL_CONFIRM) protected confirmModal: Type<any>,\n        @Inject(MODAL_PROMPT) protected promptModal: Type<any>\n    ) {\n    }\n\n    /**\n     * Open a modal dialog using the passed configuration options.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns An `IModalRef` object that can be used to close the modal.\n     */\n    openRef(component: Type<any>, config: ModalConfig = {}): IModalRef {\n        // Override default configuration\n        const modalConfig = { ...DEFAULT_CONFIG, ...config };\n        if (modalConfig.fullscreen) {\n            modalConfig.width = \"100%\";\n            modalConfig.height = \"100%\";\n            if (Utils.isString(modalConfig.panelClass)) {\n                modalConfig.panelClass = [modalConfig.panelClass, \"sq-modal-fullscreen\"];\n            }\n            else if (modalConfig.panelClass) {\n                modalConfig.panelClass.push(\"sq-modal-fullscreen\");\n            }\n            else {\n                modalConfig.panelClass = \"sq-modal-fullscreen\";\n            }\n        }\n        // Returns an OverlayRef which is a PortalHost\n        const overlayRef = this.createOverlay(modalConfig);\n        // Instantiate remote control\n        const modalRef = new ModalRef(overlayRef);\n        const overlayComponent = this.attachDialogContainer(component, overlayRef, modalConfig, modalRef);\n        modalRef.componentInstance = overlayComponent;\n        overlayRef.hostElement.classList.add(\"sq-modal-host\");\n        if (modalConfig.closeOnBackdropClick) {\n            // NB backdropClick will not fire if pointer-events are enabled on modal-host\n            overlayRef.backdropClick().subscribe(() => modalRef.close());\n            // Provide support for a scrollable sq-modal-host (overlay wrapper)\n            // The standard cdk styling disables pointer-events at this level which means that scrolling\n            // won't work. We can enable pointer-events in css but then the backdrop will not receive the\n            // click event. So, we handle the click event directly on sq-modal-host also and if the\n            // click target === sq-modal-host then we initiate modal closing here\n            overlayRef.hostElement.addEventListener(\"click\", (event) => {\n                if (event.target === overlayRef.hostElement) {\n                    modalRef.close();\n                }\n            });\n        }\n        overlayRef.keydownEvents().subscribe((event) => {\n            if (event.keyCode === Keys.esc) {\n                modalRef.close();\n            }\n        });\n        modalRef.disableSubmit();\n        return modalRef;\n    }\n\n    /**\n     * A wrapper around the {@link #openRef} method which returns a `Promise` that resolves\n     * with the `ModalResult` when the modal is closed.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns The `ModalResult` when the modal is closed.\n     */\n    open(component: Type<any>, config: ModalConfig = {}): Promise<ModalResult> {\n        const modalRef = this.openRef(component, config);\n        return modalRef.afterClosed().toPromise();\n    }\n\n    private createOverlay(config: ModalConfig): OverlayRef {\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(component: Type<any>, overlayRef: OverlayRef, config: ModalConfig, modalRef: ModalRef) {\n        // PortalInjector() is deprecated\n        const injector = Injector.create({\n            providers:[\n                {provide: ModalRef, useValue: modalRef},\n                {provide: MODAL_MODEL, useValue: config.model}\n            ], \n            parent:this.injector\n        });\n        const containerPortal = new ComponentPortal(component, null, injector);\n        const containerRef = overlayRef.attach<Type<any>>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    private getOverlayConfig(config: ModalConfig): OverlayConfig {\n        const positionStrategy = this.overlay.position()\n            .global()\n            .centerHorizontally()\n            .centerVertically();\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n\n        return overlayConfig;\n    }\n\n    /**\n     * Open a confirmation modal dialog displaying a message and a set buttons. This is similar to the Javacsript\n     * `Window.alert` method but renders a modal.\n     *\n     * @param options The options used to open the confirm modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    confirm(options: ConfirmOptions): Promise<ModalResult> {\n        return this.open(this.confirmModal, {model: options});\n    }\n\n    /**\n     * Open a prompt modal dialog displaying a message, an input and OK/Cancel buttons.\n     *\n     * @param options The options used to open the prompt modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    prompt(options: PromptOptions): Promise<ModalResult> {\n        return this.open(this.promptModal, {model: options});\n    }\n\n    /**\n     * Open a confirm modal that has an `OK` button.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     */\n    oK(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Success): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: true })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `OK` and `Cancel` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    oKCancel(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.OK): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: primaryButton === ModalResult.OK }),\n                new ModalButton({ visible: true, result: ModalResult.Cancel, primary: primaryButton === ModalResult.Cancel })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `Yes` and `No` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    yesNo(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.Yes): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.Yes, primary: primaryButton === ModalResult.Yes }),\n                new ModalButton({ visible: true, result: ModalResult.No, primary: primaryButton === ModalResult.No })\n            ]\n        });\n    }\n}\n","// moment locales need moment set globally\nimport moment from \"moment\";\n(window as any).moment = moment;\n","import {NgModule, APP_INITIALIZER} from \"@angular/core\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {RouterModule} from '@angular/router';\nimport {LocationStrategy, HashLocationStrategy} from \"@angular/common\";\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {WebServicesModule, StartConfigWebService, StartConfig} from \"@sinequa/core/web-services\";\nimport {LoginModule, LoginInterceptor} from \"@sinequa/core/login\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationsInterceptor} from \"@sinequa/core/notification\";\nimport {AuditInterceptor} from \"@sinequa/core/app-utils\";\n\nimport {DefaultLocalesConfig} from \"@sinequa/core\";\nimport {AppComponent} from \"./app.component\";\nimport {environment} from \"../environments/environment\";\n\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<StartConfig> {\n    const init = () => startConfigWebService.fetchPreLoginAppConfig().toPromise();\n    return init;\n}\n\nexport const startConfig: StartConfig = {\n    // app: \"your-app-name\",\n    production: environment.production\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        ReactiveFormsModule,\n\n        WebServicesModule.forRoot(startConfig),\n        IntlModule.forRoot(DefaultLocalesConfig),\n        LoginModule.forRoot(), // Just use default login modal\n        ModalModule.forRoot(),\n    ],\n    declarations: [\n        AppComponent,\n    ],\n    providers: [\n        // Provides an APP_INITIALIZER which will fetch application configuration information from the Sinequa\n        // server automatically at startup using the application name specified in the URL (app[-debug]/<app-name>).\n        // This allows an application to avoid hard-coding parameters in the StartConfig but requires that the application\n        // be served from the an app[-debug]/<app name> URL.\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n\n        // Provides the Angular LocationStrategy to be used for reading route state from the browser's URL. Currently\n        // only the HashLocationStrategy is supported by Sinequa.\n        {provide: LocationStrategy, useClass: HashLocationStrategy},\n\n        // Provides an HttpInterceptor to handle user login. The LoginInterceptor handles HTTP 401 responses\n        // to Sinequa web service requests and initiates the login process.\n        {provide: HTTP_INTERCEPTORS, useClass: LoginInterceptor, multi: true},\n\n        // Provides an HttpInterceptor that offers a centralized location through which all client-side\n        // audit records pass. An application can replace AuditInterceptor with a subclass that overrides\n        // the updateAuditRecord method to add custom audit information to the records.\n        {provide: HTTP_INTERCEPTORS, useClass: AuditInterceptor, multi: true},\n\n        // Provides an HttpInterceptor that automatically processes any notifications specified in the $notifications\n        // member of the response body to any Sinequa web service requests.\n        {provide: HTTP_INTERCEPTORS, useClass: NotificationsInterceptor, multi: true},\n    ],\n    bootstrap: [\n        AppComponent\n    ]\n})\nexport class AppModule {\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport jstz from \"jstz\";\n\n/**\n * Minimal built-in user settings. Can be extended in the context of\n * complex applications to store user data, preferences, objects, etc.\n */\nexport interface UserSettings {\n    language?: string;\n    skipCount?: number;\n    email?: string;\n    [key: string]: any;\n}\n\n/**\n * A base event from which all events that can be issued by the {@link UserSettingsWebService} are derived\n */\nexport interface UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [userSettings]{@link UserSettingsWebService#userSettings} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface UserSettingsChangedEvent extends UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the usersettings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserSettingsWebService extends HttpService implements OnDestroy {\n    private _userSettings: UserSettings | undefined;\n    /**\n     * The timezone for the user\n     */\n    timezone: string;\n    /**\n     * A reviver function that, if set, will be called on the user settings when they are loaded\n     */\n    reviver: (us: UserSettings) => void;\n    private _events = new Subject<UserSettingsChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n        this.timezone = jstz.determine().name(); // until momentjs gets this\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<UserSettingsChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link UserSettings}\n     */\n    get userSettings(): UserSettings | undefined {\n        return this._userSettings;\n    }\n\n    /**\n     * Sets the current {@link UserSettings} and issues the \"changed\" event\n     */\n    set userSettings(value: UserSettings | undefined) {\n        this._userSettings = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    //TODO remove\n    /**\n     * @deprecated use \"userSettings\" get property to retrieve the user settings\n     * @returns User settings object or undefined\n     */\n    public getUserSettings(): UserSettings | undefined{\n        return this.userSettings;\n    }\n\n    /**\n     * Load the user settings for the currently logged in user.\n     * Sets the userSettings member and issues the \"changed\" event\n     */\n    public load(): Observable<UserSettings> {\n        const observable = this.httpClient.get<UserSettings>(this.makeUrl(\"usersettings\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.userSettings = response;\n                if (this.userSettings) {\n                    if (this.reviver) {\n                        this.reviver(this.userSettings);\n                    }\n                }\n            },\n            (error) => {\n                console.log(\"userSettingsService.load failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Saves the current user settings on the server\n     *\n     * @param auditEvents\n     */\n    public save(auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"save\",\n            userSettings: this.userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.save failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Patches the user settings on the server using a partial user settings object. The partial\n     * object is used to update the user settings on the server according to [RFC7396]{@link https://tools.ietf.org/html/rfc7396}\n     *\n     * @param userSettings The partial user settings\n     * @param auditEvents Any associated audit events to store on the server\n     */\n    public patch(userSettings: UserSettings, auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"patch\",\n            userSettings: userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.patch failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Resets User Settings (emits a change event and audit events).\n     */\n    public reset() {\n        // Save current state\n        const currentState = this.userSettings;\n        // Reset User settings (and emit an event!)\n        this.userSettings = {};\n        const observable = this.save({\n            type: 'UserSettings_Reset'\n        });\n        observable.subscribe({\n            next: () => {},\n            error: () => this.userSettings = currentState // Restore previous state\n        })\n        return observable;\n    }\n\n    /**\n     * Reads a user setting.\n     *\n     * @param paths The path to the setting in the JSON.\n     */\n    public readUserSetting(paths: string[]): any {\n        let json: any = this.userSettings;\n        if (json) {\n            for (const path of paths) {\n                json = json[path];\n                if (!json) {\n                    // Value does not exist yet\n                    return undefined;\n                }\n            }\n        }\n        return json;\n    }\n}\n","export * from \"./messages/index\";\nexport * from \"./default-locales-config\";","import {Pipe, PipeTransform, OnDestroy, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An abstract base class for pipes that should refresh automatically\n * when the current locale on {@link IntlService} changes. Pipes should\n * be declared as `pure: false` - the current value is cached to avoid\n * unnecessary processing\n */\n@Pipe({name: \"sqAbstractIntlPipe\", pure: false})\nexport abstract class AbstractIntlPipe implements PipeTransform, OnDestroy {\n    protected value: any = \"\";\n    protected lastValue: any;\n    protected lastParams: any;\n    protected localeChange: Subscription;\n\n    constructor(\n        protected intlService: IntlService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    protected updateValue(value: any, params?: any): void {\n        this.lastValue = value;\n        this.lastParams = params;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    transform(value: any, params?: any): any {\n        // if we ask another time for the same key, return the last value\n        if (Utils.equals(value, this.lastValue) && Utils.equals(params, this.lastParams)) {\n            return this.value;\n        }\n\n        // set the value\n        this.updateValue(value, params);\n\n        // subscribe to localeChange event\n        if (!this.localeChange) {\n            this.localeChange = this.intlService.events.subscribe(\n                (event) => {\n                    if (!Utils.isEmpty(this.lastValue)) {\n                        this.lastValue = null;\n                        this.updateValue(value, params);\n                    }\n                });\n        }\n\n        return this.value;\n    }\n\n    ngOnDestroy(): void {\n        if (this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpParams} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {START_CONFIG, StartConfig, AuditRecord, AuditEvent, AuditEvents} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An `HttpInterceptor` to process audi events attached to the request body\n * in the `$auditRecord` member.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditInterceptor implements HttpInterceptor {\n    \n    // Store the session id and its datetime of creation/refresh\n    sessionid: string;\n    sessionstart: Date;\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig\n    ) {\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    // Handle legacy calls where auditEvents is either an AuditEvent or AuditEvent[]\n    private ensureAuditRecord(auditEvents: AuditEvents): AuditRecord | undefined{\n        if (!auditEvents) {\n            return undefined;\n        }\n        let auditEvents1: AuditEvent[] | undefined;\n        if (Utils.isArray(auditEvents)) {\n            auditEvents1 = auditEvents;\n        }\n        else if (Utils.isObject(auditEvents)) {\n            const auditRecord = auditEvents as AuditRecord;\n            if (auditRecord.auditEvents || auditRecord.mlAuditEvents) {\n                return auditRecord;\n            }\n            auditEvents1 = [auditEvents as AuditEvent];\n        }\n        return {\n            auditEvents: auditEvents1\n        };\n    }\n\n    /**\n     * Add a sessionid to all the audit events\n     * @param auditRecord \n     */\n    private addSessionId(auditRecord?: AuditRecord) {\n        const sessionid = this.getSessionId();\n        auditRecord?.auditEvents?.forEach(event => {\n            if(!event.detail) {\n                event.detail = {};\n            }\n            event.detail['session-id'] = sessionid;\n        });\n    }\n\n    /**\n     * Get a Session Id initialized upon login. The session is maintained for 10 minutes\n     * after the last call to this method.\n     */\n    private getSessionId(): string {\n        if(!this.sessionid || this.isSessionStale()) {\n            this.sessionid = Utils.guid();\n        }\n        this.sessionstart = new Date();\n        return this.sessionid;\n    }\n\n    /**\n     * Test whether the current session id valid or stale (need to be refreshed)\n     */\n    private isSessionStale(): boolean {\n        const lastSession = new Date().getTime() - this.sessionstart.getTime();\n        // Consider the session stale after 10 minutes\n        return lastSession > 10 * 60 * 1000;\n    }\n\n    /**\n     * Called once the `$auditRecord` member has been standardized, this method\n     * can be overidden to update fields in the audit events associated with a\n     * web service call.\n     */\n    protected updateAuditRecord(auditRecord?: AuditRecord) {\n    }\n\n    /**\n     * Intercept requests with a JSON body and standardize the format of the\n     * `$auditRecord` member.\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.shouldIntercept(request.url) && this.isJsonable(request.body)) {\n            request.body.$auditRecord = this.ensureAuditRecord(request.body.$auditRecord);\n            this.addSessionId(request.body.$auditRecord);\n            this.updateAuditRecord(request.body.$auditRecord);\n        }\n        return next.handle(request);\n    }\n}\n","import {Component, AfterViewInit} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl} from \"@angular/forms\";\nimport {QueryWebService, Results} from \"@sinequa/core/web-services\";\nimport {LoginService} from \"@sinequa/core/login\";\nimport {AppService, Query} from \"@sinequa/core/app-utils\";\nimport {NotificationsService, Notification} from \"@sinequa/core/notification\";\nimport {Observable} from 'rxjs';\n\n@Component({\n    selector: \"app\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements AfterViewInit {\n    searchControl: FormControl;\n    form: FormGroup;\n    results$: Observable<Results> | undefined;\n\n    constructor(\n        protected formBuilder: FormBuilder,\n        public loginService: LoginService,\n        public appService: AppService,\n        public queryWebService: QueryWebService,\n        public notificationsService: NotificationsService) {\n\n\n        this.searchControl = new FormControl(\"\");\n        this.form = this.formBuilder.group({\n            search: this.searchControl\n        });\n    }\n\n    ngAfterViewInit() {\n        this.login();\n    }\n\n    search() {\n        const ccquery = this.appService.ccquery;\n        const query = new Query(ccquery ? ccquery.name : \"_unknown\");\n        query.text = this.searchControl.value || \"\";\n        this.results$ = this.queryWebService.getResults(query);\n    }\n\n    clear() {\n        this.results$ = undefined;\n        this.searchControl.setValue(\"\");\n    }\n\n    login() {\n        this.loginService.login();\n    }\n\n    logout() {\n        this.clear();\n        this.loginService.logout();\n    }\n\n    deleteNotification(notification: Notification) {\n        setTimeout(() => this.notificationsService.deleteNotification(notification), 5000);\n        return true;\n    }\n}","<div class=\"search\">\n    <h1>Hello Search 🔍</h1>\n    <form novalidate [formGroup]=\"form\">\n        <input type=\"text\" placeholder=\"Enter search terms...\" formControlName=\"search\" spellcheck=\"false\" autocomplete=\"off\" [attr.disabled]=\"!loginService.complete? '' : null\">\n        <button type=\"submit\" (click)=\"search()\" [attr.disabled]=\"!loginService.complete? '' : null\">Search</button>\n        <button *ngIf=\"results$ | async\" type=\"button\" (click)=\"clear()\">Clear</button>\n    </form>\n    <div *ngIf=\"results$ | async; let results\">\n        <hr>    \n        <div *ngFor=\"let record of results.records\" class=\"record\">\n            <a href=\"{{record.url1}}\">\n                <h3 [innerHtml]=\"record.displayTitle || record.title\"></h3>\n            </a>\n            <div class=\"source\">{{record.url1}}</div>\n            <p *ngIf=\"record.relevantExtracts\" [innerHTML]=\"record.relevantExtracts\"></p>       \n        </div>\n    </div>\n    <hr>    \n    <button *ngIf=\"loginService.complete\" type=\"button\" (click)=\"logout()\">Logout</button>\n    <button *ngIf=\"!loginService.complete\" type=\"button\" (click)=\"login()\">Login</button>\n    <ng-container *ngIf=\"notificationsService.notificationsStream | async as notification\">\n        <hr>\n        <div *ngIf=\"deleteNotification(notification)\" class=\"notification\">\n            <div *ngIf=\"notification.title\" class=\"title\">\n                <span>{{notification.title | sqMessage}}</span>\n                <hr>\n            </div>\n            <div>{{notification.text | sqMessage:{values: notification.params} }}</div>\n        </div>\n    </ng-container>\n</div>","export * from \"./array-view\";\nexport * from \"./error\";\nexport * from \"./field-value\";\nexport * from \"./item-array-view\";\nexport * from \"./iterator-adaptor\";\nexport * from \"./json\";\nexport * from \"./keyboard\";\nexport * from \"./map-of\";\nexport * from \"./ref\";\nexport * from \"./pattern-matcher\";\nexport * from \"./utils\";\nexport * from \"./base.module\";\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {ValidationErrors} from \"@angular/forms\";\nimport {AbstractIntlPipe, IntlService} from \"@sinequa/core/intl\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * A pipe to display the first error in a `ValidationErrors` map.\n */\n@Pipe({name: \"sqValidationError\", pure: false})\nexport class ValidationErrorPipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef,\n        protected validationService: ValidationService) {\n        super(intlService, changeDetectorRef);\n    }\n\n    updateValue(key: ValidationErrors, params: any): void {\n        super.updateValue(key, params);\n        const text = this.validationService.getFirstErrorText(key);\n        const info = this.validationService.getFirstErrorInfo(key);\n        this.value = text ? this.intlService.formatMessage(text, {values: info}) : undefined;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {AppServiceHelpers} from \"./app-service-helpers\";\nimport {CCColumn} from \"@sinequa/core/web-services\";\nimport {format} from \"d3-format\";\n\n/**\n * Describes a value item object that includes a {@link FieldValue} and an optional display value\n * to override standard field value formatting\n */\nexport interface ValueItem {\n    value: FieldValue;\n    display?: string;\n    count?: number; // Following ES-11166, the number of occurrence for an entity can be included\n}\n\n/**\n * This service provides methods for locale-sensitive formatting and parsing of values that can be found in\n * Sinequa search results.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FormatService {\n    constructor(\n        public intlService: IntlService) {\n    }\n\n    /**\n     * Returns `true` if the passed parameter is a `ValueItem` object\n     */\n    protected isValueItem(valueItem: ValueItem | FieldValue): valueItem is ValueItem {\n        if (Utils.isObject(valueItem) && !Utils.isDate(valueItem) && !Utils.isArray(valueItem)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Extracts the value and display components from a parameter that can be either a `ValueItem`\n     * object or a simple `FieldValue`, in which case the display will be `undefined`.\n     */\n    protected getValueAndDisplay(valueItem: ValueItem | FieldValue): [FieldValue, string] {\n        let value: FieldValue;\n        let display: string;\n        if (this.isValueItem(valueItem)) {\n            value = valueItem.value;\n            display = valueItem.display || \"\";\n        }\n        else {\n            value = valueItem;\n            display = \"\";\n        }\n        return [value, display];\n    }\n\n    /**\n     * Return the display equivalent of a Sinequa language specifier (`en`, `fr`, ...).\n     * The display values are defined in the {@link IntlModule} message files\n     *\n     * @param value A value containing a Sinequa language specifier\n     */\n    formatLanguage(value: FieldValue): string {\n        return this.intlService.formatMessage(`msg#language.${Utils.toLowerCase(value + \"\")}`);\n    }\n\n    /**\n     * Return the display equivalent of a size value. The units (`kb`, `mb`, ...) are defined\n     * in the {@link IntlModule} message files\n     *\n     * @param size A memory size in bytes\n     */\n    formatMemorySize(size: number): string {\n        const kiloBytes: number = size / 1024;\n        const megaBytes: number = kiloBytes / 1024;\n        const gigaBytes: number = megaBytes / 1024;\n        const teraBytes: number = gigaBytes / 1024;\n        const petaBytes: number = teraBytes / 1024;\n\n        let messageKey = \"msg#system.memorySize.bytes\";\n        const params: any = { value: size };\n        if (Math.abs(petaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.pb\";\n            params.value = petaBytes;\n        }\n        else if (Math.abs(teraBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.tb\";\n            params.value = teraBytes;\n        }\n        else if (Math.abs(gigaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.gb\";\n            params.value = gigaBytes;\n        }\n        else if (Math.abs(megaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.mb\";\n            params.value = megaBytes;\n        }\n        else if (Math.abs(kiloBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.kb\";\n            params.value = kiloBytes;\n        }\n        return this.intlService.formatMessage(messageKey, params);\n    }\n\n    /** D3 formatter for large number: 42096 => 42K */\n    bigNumberFormatter = format(\"~s\");\n\n    /** Similar to bigNumberFormatter, but replaces \"G\" by \"B\" (as in \"$42B\") */\n    moneyFormatter = s => this.bigNumberFormatter(s).replace(/G/, \"B\");\n    \n    /**\n     * Format an amount of money (typically extracted by a Sinequa Text-mining agent)\n     * USD 42069 => USD 42K\n     * @param value \n     * @returns \n     */\n    formatMoney(value: string): string {\n        let [currency, val] = value.split(\" \");\n        return `${currency} ${this.moneyFormatter(+val)}`;\n    }\n\n    /**\n     * Format a value for display according to the passed `column`. Formatters\n     * can be defined in the column's configuration to provide domain-specific\n     * formatting. The standard formatters are `language` and `memorysize`.\n     *\n     * @param valueItem The value to format\n     * @param column The column associated with the value\n     */\n    formatValue(valueItem: ValueItem | FieldValue, column?: CCColumn): string {\n        let [value, display] = this.getValueAndDisplay(valueItem);\n        if (column && column.formatter) {\n            switch (Utils.toLowerCase(column.formatter)) {\n                case \"language\": return this.formatLanguage(value);\n                case \"memorysize\":\n                    if (Utils.isNumber(value)) {\n                        return this.formatMemorySize(value);\n                    }\n                    break;\n                case \"money\":\n                    if(Utils.isString(value)) {\n                        return this.formatMoney(value);\n                    }\n                    else if(Utils.isArray(value)) {\n                        return value.map(v => \n                            this.formatMoney(Utils.isString(v)? v : v.value)\n                        ).join(', ');\n                    }\n                    break;\n            }\n        }\n        if (display) {\n            if (Utils.isDate(display)) { // ES-7785\n                display = Utils.toSysDateStr(display);\n            }\n            return this.intlService.formatMessage(display, {value});\n        }\n        if (Utils.isNumber(value)) {\n            const message = this.intlService.getMessage(\"msg#system.number\");\n            if (message) {\n                return this.intlService.formatText(message, {value});\n            }\n            else {\n                return this.intlService.formatNumber(value);\n            }\n        }\n        if (column && AppServiceHelpers.isDate(column) && Utils.isString(value)) {\n            value = Utils.fromSysDateStr(value) || value;\n        }\n        if (Utils.isDate(value)) {\n            if (column && !AppServiceHelpers.isDate(column)) { // ES-7785\n                value = Utils.toSysDateStr(value);\n            }\n            else {\n                const message = this.intlService.getMessage(\"msg#system.date\");\n                if (message) {\n                    return this.intlService.formatText(message, {date: value, time: Utils.getTime(value)});\n                }\n                else {\n                    let s = this.intlService.formatDate(value);\n                    if (Utils.getTime(value) !== 0) {\n                        s += \", \" + this.intlService.formatTime(value);\n                    }\n                    return s;\n                }\n            }\n        }\n        if (Utils.isBoolean(value)) {\n            const message = this.intlService.getMessage(\"msg#system.boolean\");\n            if (message) {\n                return this.intlService.formatText(message, {value});\n            }\n            else {\n                return value.toString();\n            }\n        }\n        if (Utils.isArray(value)) {\n            const joinValue: string[] = [];\n            value.forEach(v => {\n                if (joinValue.length > 0) {\n                    joinValue.push(\";\");\n                }\n                let _v: string;\n                if (!v) {\n                    _v = \"<null>\";\n                }\n                else if (Utils.isDate(v)) {\n                    _v = Utils.toSysDateStr(v);\n                }\n                else if (Utils.isString(v)) {\n                    _v = v;\n                }\n                else {\n                    _v = v.display || v.value || \"<null>\";\n                }\n                joinValue.push(_v);\n            });\n            value = joinValue.join(\"\");\n        }\n        if (!value) {\n            return value;\n        }\n        return this.intlService.formatMessage(value);\n    }\n\n    /**\n     * Transform a display value. Multiple transformers can be defined on a column and their calls are chained.\n     * The standard formatters are `uppercase`, `upperfirst`, `lowercase`, `lowerfirst`, `startcase`, `kebabcase`,\n     * `snakecase` and `camelcase`.\n     *\n     * @param value The value to transform\n     * @param column The column associated with the value\n     */\n    transformValue(value: string, column?: CCColumn): string {\n        const transforms = column ? Utils.split(column.transforms || \"\", \",\") : undefined;\n        if (!transforms || transforms.length === 0) {\n            return value;\n        }\n        // transforms are composable\n        for (const transform of transforms) {\n            switch (Utils.toLowerCase(transform)) {\n                case \"uppercase\": value = Utils.toUpperCase(value); break;\n                case \"upperfirst\": value = Utils.toUpperFirst(value); break;\n                case \"lowercase\": value = Utils.toLowerCase(value); break;\n                case \"lowerfirst\": value = Utils.toLowerFirst(value); break;\n                case \"startcase\": value = Utils.toStartCase(value); break;\n                case \"kebabcase\": value = Utils.toKebabCase(value); break;\n                case \"snakecase\": value = Utils.toSnakeCase(value); break;\n                case \"camelcase\": value = Utils.toCamelCase(value); break;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Format a value item for display. This is the standard entry point for formatting a value.\n     * By default, this method calls [formatValue]{@link #formatValue} and [transformValue]{@link #transformValue}.\n     *\n     * @param valueItem The value item to format\n     * @param column The column associated with the value item\n     */\n    formatFieldValue(valueItem: ValueItem | FieldValue, column?: CCColumn): string {\n        let formattedValue = this.formatValue(valueItem, column);\n        formattedValue = this.transformValue(formattedValue, column);\n        return formattedValue;\n    }\n\n    /**\n     * Parse an input value according to the passed `parser`. The standard parser is `memorysize`. Parsers\n     * are configured in the {@link CCColumn} configuration. The parsed value is returned as a string for\n     * processing by the {@link ValidationModule}\n     *\n     * @param value The value to parse\n     * @param parser The parser to use\n     */\n    parseValue(value: any, parser: string): string {\n        if (Utils.isString(value)) {\n            if (parser) {\n                switch (Utils.toLowerCase(parser)) {\n                    case \"memorysize\": {\n                        return this.parseMemorySize(value) + \"\";\n                    }\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Parse a size string using [Utils.toSize]{@link Utils#toSize}\n     *\n     * @param str The string to parse\n     * @param _default The default value to return if the string cannot be parsed\n     * @return The parsed size in bytes\n     */\n    parseMemorySize(str: string, _default = 0): number {\n        return Utils.toSize(str, _default);\n    }\n\n    /**\n     * Display a raw value without applying any formatting\n     * (besides the native toString() method for non-string values)\n     * @param value \n     * @returns \n     */\n    formatRaw(value: ValueItem | FieldValue): string {\n        let [val] = this.getValueAndDisplay(value);\n        if(Utils.isArray(val)) {\n            return val.map(v => Utils.isString(v)? v : v.value).join(';');\n        }\n        return val?.toString();\n    }\n}\n","const NOTIFICATION_MODULE_PROVIDERS = [];\n\nexport {NOTIFICATION_MODULE_PROVIDERS};\n","import { Injectable } from '@angular/core';\nimport { Utils } from '@sinequa/core/base';\nimport { Aggregation, AggregationItem, TreeAggregationNode } from '@sinequa/core/web-services';\nimport { ValueItem } from '../format.service';\nimport { ExprParser } from './expr-parser';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ExprBuilder {\n\n    /**\n     * Make a standard selection expression\n     * (resulting in a SQL clause like \"company contains 'BOEING'\")\n     * @param field Name of the field to select (eg. \"company\")\n     * @param value Value of the field to select (eg. \"BOEING\")\n     * @param display Optional string to display that value (eg. \"Boeing\")\n     */\n    makeExpr(field: string, value: string, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: ${ExprParser.escape(value)}`; // company`Boeing`: BOEING\n    }\n\n    /**\n     * Make a boolean expression\n     * @param field Name of the field to select (eg. \"toto\")\n     * @param value Value of the field to select (eg. \"true\")\n     * @param display Optional string to display that value (eg. \"True\")\n     */\n    makeBooleanExpr(field: string, value: boolean, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: ${ExprParser.escape(Utils.toSqlValue(value))}`; // toto`True`: true\n    }\n\n\n    /**\n     * Make a numerical expression using a comparison operator (>, <, <=, >=, etc.)\n     * @param field Name of the field to select (eg. \"modified\")\n     * @param operator Comparison operator used for that selection (eg. \">\")\n     * @param value Value of the field to select (eg. \"2020-12-15\")\n     * @param display Optional string to display that value (eg. \"After Dec 15 2020\")\n     */\n    makeNumericalExpr(\n        field: string,\n        operator: '>' | '>=' | '<' | '<=' | '=' | '<>',\n        value: number | Date | string,\n        display?: string): string {\n\n        field = this.formatField(field, display);\n\n        if(Utils.isString(value)) {\n            value = ExprParser.escape(value);\n        }\n        if(Utils.isDate(value) || Utils.isNumber(value)) {\n            value = Utils.toSqlValue(value);\n        }\n\n        return `${field}:${operator} ${value}`; // modified`After Dec 15 2020`:> 2020-12-15\n    }\n\n\n    /**\n     * Make a list expression\n     * @param field Name of the field to select (eg. \"docformat\")\n     * @param values Values of the field to select (eg. ['htm','pdf'])\n     * @param display Optional string to display that value (eg. \"htm, pdf\")\n     */\n    makeListExpr(field: string, values: string[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: [${values.map(v => ExprParser.escape(v)).join(',')}]`; // docformat`htm, pdf`:[`htm`,`pdf`]\n    }\n\n\n    /**\n     * Make a range expression\n     * @param field Name of the field to select (eg. \"modified\")\n     * @param from Begining of the range (eg. 2020-12-15)\n     * @param to End of the range (eg. 2020-12-20)\n     * @param display Optional string to display that value (eg. \"[Dec 15 2020, Dec 20 2020]\")\n     */\n    makeRangeExpr(\n        field: string,\n        from: number | Date | string,\n        to: number | Date | string,\n        display?: string): string {\n\n        field = this.formatField(field, display);\n        return `${field}: [${Utils.toSqlValue(from)}..${Utils.toSqlValue(to)}]`; // modified`[Dec 15 2020, Dec 20 2020]`: [2020-12-15..2020-12-20]\n    }\n\n\n    /**\n     * Make a RegExp expression\n     * @param field Name of the field to select (eg. \"company\")\n     * @param value Value of the regular expression to match (eg. \"BOE.*\")\n     * @param display Optional string to display that value (eg. \"Boe...\")\n     */\n    makeRegexpExpr(field: string, value: string, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}:~ ${ExprParser.escape(value)}`; // company`Boe...`:~ BOE.*\n    }\n\n\n    /**\n     * Make a refine expression\n     * @param text The text to add to the query\n     */\n    makeRefineExpr(text: string): string {\n        return `refine: ${ExprParser.escape(text)}`;\n    }\n\n\n    /**\n     * Return an expression that selects multiple values for a field\n     * (All values are ANDed)\n     * @param field Name of the field to select (eg. \"company\")\n     * @param values Values of the field to select (eg. ['IBM','APPLE'])\n     * @param display Optional string to display that value (eg. \"IBM and Apple\")\n     */\n    makeAndExpr(field: string, values: (string | ValueItem)[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: (${this.concatWithOperator(values, 'AND')})`; // company: (IBM AND APPLE AND GOOGLE)\n    }\n\n\n    /**\n     * Return an expression that selects multiple values for a field\n     * (All values are ORed)\n     * This function should be equivalent to using makeListExpr\n     * @param field Name of the field to select (eg. \"company\")\n     * @param values Values of the field to select (eg. ['IBM','APPLE'])\n     * @param display Optional string to display that value (eg. \"IBM and Apple\")\n     */\n    makeOrExpr(field: string, values: (string | ValueItem)[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: (${this.concatWithOperator(values, 'OR')})`; // company: (IBM OR APPLE OR GOOGLE)\n    }\n\n    /**\n     * Combine a list of values with AND or OR operators\n     * @param values the list of values\n     * @param operator the operator\n     */\n    private concatWithOperator(values: (string | ValueItem)[], operator: 'AND' | 'OR') {\n        return values.map(v => {\n            if (Utils.isString(v)){\n                return ExprParser.escape(v);\n            }\n            if (v.display) {\n                return `${ExprParser.escape(v.display)}:${ExprParser.escape(Utils.toSqlValue(v.value))}`;\n            }\n            return ExprParser.escape(Utils.toSqlValue(v.value));\n        }).join(' '+operator+' ');\n    }\n\n    /**\n     * Returns the negative expression of the given expression\n     * eg. NOT(person:Bill GATES)\n     * @param expr\n     */\n    makeNotExpr(expr: string): string {\n        return `NOT (${expr})`;\n    }\n\n    /**\n     * Returns an expression that is the union of given expressions\n     * eg. person:Bill GATES OR company:MICROSOFT\n     * @param exprs\n     */\n    concatOrExpr(exprs: string[]): string {\n        if (exprs.length <= 1) {\n            return exprs[0] || '';\n        }\n        return `(${exprs.join(') OR (')})`;\n    }\n\n\n    /**\n     * Returns an expression that is the intersection of given expressions\n     * eg. person:Bill GATES AND company:MICROSOFT\n     * @param exprs\n     */\n    concatAndExpr(exprs: string[]): string {\n        if (exprs.length <= 1) {\n            return exprs[0] || '';\n        }\n        return `(${exprs.join(') AND (')})`;\n    }\n\n\n    /**\n     * Returns an expression to select the given item\n     * @param field Name of the field to select (eg. \"company\")\n     * @param items A single or list of ValueItem object(s) (eg. content of a record)\n     */\n    makeFieldExpr(field: string, items: ValueItem | ValueItem[], combineWithAnd?: boolean): string {\n        if(!Utils.isArray(items)) {\n            items = [items];\n        }\n        if(items.length === 0) {\n            return \"\"; // Return a falsy string instead of \"()\" or \"``\" which would be truthy\n        }\n        return combineWithAnd? this.makeAndExpr(field, items) : this.makeOrExpr(field, items);\n    }\n\n    /**\n     * Create an expression for the given aggregation item\n     * @param aggregation The aggregation containing this object\n     * @param items The AggregationItem(s) to select\n     * @param combineWithAnd If there are multiple values, combine them with AND (instead of OR)\n     */\n    makeAggregationExpr(aggregation: Aggregation, items: AggregationItem | AggregationItem[], combineWithAnd?: boolean): string {\n        if(!Utils.isArray(items)) {\n            items = [items];\n        }\n        if(aggregation.valuesAreExpressions) {\n            const exprs = items.map(i => i.value.toString()); // .toString() is to avoid typing issues. With valuesAreExpressions = true, item.value is expected to be a string\n            return combineWithAnd? this.concatAndExpr(exprs) : this.concatOrExpr(exprs);\n        }\n        else {\n            const _items = this.asValueItems(items, aggregation.isTree);\n            return this.makeFieldExpr(aggregation.column, _items, combineWithAnd);\n        }\n    }\n\n\n    /**\n     * Combines the field with the optional display value(s)\n     * @param field\n     * @param display\n     */\n    private formatField(field: string, display?: string): string {\n        if(display) {\n            field = `${field}${ExprParser.escape(display)}`;\n        }\n        return field;\n    }\n\n\n    /**\n     * Return the AggregationItem list as a ValueItem list\n     * @param items\n     * @param isTree\n     */\n    private asValueItems(items: AggregationItem[], isTree?: boolean): ValueItem[] {\n        if(isTree) {\n            return items.map(i => {\n                return {\n                    value: (i as TreeAggregationNode).$path + \"*\",\n                    display: i.display || i.value as string\n                };\n            });\n        }\n        return items; // This works because ValueItem and AggregationItem share the value and display properties\n    }\n}\n","import { ArrayView } from \"./array-view\";\nimport { IteratorAdaptor } from \"./iterator-adaptor\";\n\n/**\n * A generic interface describing a name and associated value\n */\nexport interface NameValuePair<U, V> {\n    name: U;\n    value: V;\n}\n\n/**\n * An {@link ArrayView} of {@link NameValuePair}\n */\nexport interface NameValueArrayView<U, V> extends ArrayView<NameValuePair<U, V>> {\n    getName(index: number): U;\n    getValue(index: number): V;\n    items(): IterableIterator<NameValuePair<U, V>>;\n    names(): IterableIterator<U>;\n    values(): IterableIterator<V>;\n}\n\nclass ArrayBasedView<T, U, V> implements NameValueArrayView<U, V> {\n    constructor(\n        private base: T[],\n        private nameSelector: (t: T) => U,\n        private valueSelector: (t: T) => V\n    ) { }\n\n    get length(): number {\n        return this.base.length;\n    }\n\n    get(index: number): NameValuePair<U, V> {\n        return this.toNameValuePair(this.base[index]);\n    }\n\n    getName(index: number): U {\n        return this.nameSelector(this.base[index]);\n    }\n\n    getValue(index: number): V {\n        return this.valueSelector(this.base[index]);\n    }\n\n    private toNameValuePair(obj: T): NameValuePair<U, V> {\n        return { name: this.nameSelector(obj), value: this.valueSelector(obj) };\n    }\n\n    /*\n        Iterators\n    */\n\n    [Symbol.iterator](): IterableIterator<NameValuePair<U, V>> {\n        return this.items();\n    }\n\n    items(): IterableIterator<NameValuePair<U, V>> {\n        return IteratorAdaptor.forIterable(\n            this.base,\n            (obj) => this.toNameValuePair(obj)\n        );\n    }\n\n    names(): IterableIterator<U> {\n        return IteratorAdaptor.forIterable(this.base, this.nameSelector);\n    }\n\n    values(): IterableIterator<V> {\n        return IteratorAdaptor.forIterable(this.base, this.valueSelector);\n    }\n\n    forEach(callback: (item: NameValuePair<U, V>, index?: number, items?: NameValueArrayView<U, V>) => void, thisArg?: any) {\n        for (let idx = 0; idx < this.length; idx++) {\n            const r = this.get(idx);\n            if (thisArg)\n                callback.call(thisArg, r, idx, this);\n            else\n                callback(r, idx, this);\n        }\n        return this;\n    }\n}\n\n/**\n * A helper class for creating {@link NameValueArrayView} instances\n */\n// @dynamic\nexport class NameValueArrayViewHelper {\n    /**\n     * Creates a {@link NameValueArrayView} from an array of {@link NameValuePair} items\n     *\n     * @param items An array of `NameValuePair` items\n     */\n    static fromArray<U, V>(items: NameValuePair<U, V>[]): NameValueArrayView<U, V> {\n        return new ArrayBasedView(items || [], p => p.name, p => p.value);\n    }\n\n    static fromObjects<T>(items: T[], nameKey: keyof T, valueKey: keyof T): NameValueArrayView<T[keyof T], T[keyof T]> {\n        return new ArrayBasedView(items || [], p => p[nameKey], p => p[valueKey]);\n    }\n\n    static from<T, U, V>(items: T[], nameSelector: (t: T) => U, valueSelector: (t: T) => V): NameValueArrayView<U, V> {\n        return new ArrayBasedView(items || [], nameSelector, valueSelector);\n    }\n}\n","export default {\n    \"validation\": {\n        \"min\": \"Der Mindestwert ist {min}\",\n        \"max\": \"Der Wert kann nicht größer sein als {max}\",\n        \"required\": \"Dies ist ein Mussfeld\",\n        \"requiredTrue\": \"Dieses Feld muss ausgefüllt werden\",\n        \"email\": \"Eine gültige E-Mail-Adresse ist einzutragen\",\n        \"minLength\": \"Die Mindestlänge des Wertes beträgt {requiredLength, plural, one {# Zeichen} other {# Zeichen}}\",\n        \"maxLength\": \"Der Wert darf nicht mehr als {requiredLength, plural, one {# Zeichen} other {# Zeichen}} haben\",\n        \"pattern\": \"Der Wert ist ungültig\",\n        \"unique\": \"Dieses Feld muss eindeutig sein\",\n        \"integer\": \"Der Wert muss eine ganze Zahl sein\",\n        \"number\": \"Der Wert muss eine Nummer sein\",\n        \"date\": \"\",\n        \"range\": \"Der erste Wert muss kleiner oder gleich dem zweiten Wert sein\"\n    }\n};\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { MODAL_MODEL, PromptOptions, ModalResult} from \"./modal.service\";\nimport { ModalRef } from \"./modal-ref\";\nimport { Utils } from '@sinequa/core/base';\n\n@Component({\n    selector: \"sq-core-prompt\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <input type=\"text\" formControlName=\"input\" *ngIf=\"!model.rowCount\">\n            <textarea type=\"text\" formControlName=\"input\" spellcheck=\"on\" rows=\"{{model.rowCount}}\" autofocus *ngIf=\"!!model.rowCount\">\n            </textarea>\n            <ng-container *ngIf=\"showError(inputControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"input\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Prompt implements OnInit, OnDestroy {\n    inputControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: PromptOptions,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.inputControl = new FormControl(this.model.output, this.model.validators || Validators.required);\n        this.form = this.formBuilder.group({\n            input: this.inputControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.output = this.inputControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.prompt.title\";\n    }\n\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Connexion\",\n            \"userName\": \"Identifiant\",\n            \"password\": \"Mot de passe\",\n            \"singleSignOn\": \"Authentification unique\",\n            \"signInWith\": \"S'identifier avec ...\"\n        }\n    },\n};\n","import {NgModule} from \"@angular/core\";\n\nimport {NOTIFICATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides a service for managing notifications. It is used by the\n * Sinequa runtime and can also be used for application-specific purposes.\n *\n * The {@link NotificationsInterceptor} in this module should be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        ...NOTIFICATION_MODULE_PROVIDERS\n    ]\n})\nexport class NotificationModule {\n}\n","export * from \"./authentication.service\";\nexport * from \"./token.service\";\nexport * from \"./component-with-login.component\";\nexport * from \"./jwt.service\";\nexport * from \"./login.module\";\nexport * from \"./login.service\";\nexport * from \"./login.component\";\nexport * from \"./login.interceptor\";\nexport * from \"./authentication-oauth.service\";\nexport * from \"./authentication-popup.service\";\nexport * from \"./messages/index\";\n","export default {\n    \"validation\": {\n        \"min\": \"La valeur doit être supérieure ou égale à {min}\",\n        \"max\": \"La valeur ne peut pas être supérieure à {max}\",\n        \"required\": \"Ce champ est obligatoire\",\n        \"requiredTrue\": \"Ce champ doit être positionné\",\n        \"email\": \"Une adresse e-mail valide est exigée\",\n        \"minLength\": \"La valeur doit comporter au moins {requiredLength, plural, one {# caractère} autre que {# caractère}}\",\n        \"maxLength\": \"La valeur ne peut comporter plus de {requiredLength, plural, one {# caractère} autre que {# caractères}}\",\n        \"pattern\": \"La valeur est invalide\",\n        \"unique\": \"Ce champ doit être unique\",\n        \"integer\": \"La valeur doit être un entier\",\n        \"number\": \"La valeur doit être un nombre\",\n        \"date\": \"\",\n        \"range\": \"La première valeur doit être inférieure ou égale à la seconde\"\n    }\n};\n","import {Utils} from \"./utils\";\n\n/**\n * Describes the error codes that can be set in the {@link SqError} class.\n */\nexport enum SqErrorCode {\n    loginCancelled,\n    processedCredentialsError,\n    principalSwitched,\n    autoLoginError\n}\n\n/**\n * A subclass of the built-in {@link Error} class with added `code` and\n * `data` (optional) properties.\n */\nexport class SqError extends Error {\n    // See https://github.com/Microsoft/TypeScript/issues/7639\n    // and https://github.com/Microsoft/TypeScript/issues/1168#issuecomment-107833988\n    /**\n     * The error code associated with the error.\n     */\n    code: SqErrorCode;\n    /**\n     * Arbitrary data associated with the error.\n     */\n    data: any;\n\n    constructor(code: SqErrorCode, message?: string, data?: any) {\n        super(message || SqError.message(code));\n        this.code = code;\n        this.name = \"SqError\";\n        this.message = message || SqError.message(code);\n        if (data) {\n            this.data = data;\n        }\n    }\n\n    /**\n     * Return `true` if the passed `error` is a valid `SqErrorCode` instance.\n     * If the optional `code` parameter is defined then only return true\n     * if the code on `error` matches this value.\n     */\n    static is(error: any, code?: SqErrorCode): error is SqError {\n        if (error instanceof SqError || (error instanceof Error && error.name === \"SqError\")) {\n            return Utils.isUndefined(code) || (error as SqError).code === code;\n        }\n        return false;\n    }\n\n    /**\n     * Return the message corresponding to the passed error `code`.\n     */\n    static message(code: SqErrorCode) {\n        switch (code) {\n            case SqErrorCode.loginCancelled: return \"msg#error.loginCancelled\";\n            case SqErrorCode.processedCredentialsError: return \"msg#error.processedCredentialsError\";\n            case SqErrorCode.principalSwitched: return \"msg#error.principalSwitched\";\n            case SqErrorCode.autoLoginError: return \"msg#error.autoLoginError\";\n            default: return \"msg#error.unknownError\";\n        }\n    }\n}\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enValidation from \"./en\";\nimport _frValidation from \"./fr\";\nimport _deValidation from \"./de\";\n\nconst enValidation = Utils.merge({}, _enValidation, enIntl);\nconst frValidation = Utils.merge({}, _frValidation, frIntl);\nconst deValidation = Utils.merge({}, _deValidation, deIntl);\n\nexport { enValidation, frValidation, deValidation };\n","export * from \"./abstract-intl.pipe\";\nexport * from \"./import-moment\";\nexport * from \"./intl.module\";\nexport * from \"./intl.service\";\nexport * from \"./message.pipe\";\nexport * from \"./messages/index\";\n","export * from \"./public-api\";","import {Injectable, Inject, OnDestroy, Type, InjectionToken, Optional} from \"@angular/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {BehaviorSubject, Observable, forkJoin, of, throwError} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig, CCApp, PrincipalWebService, Principal,\n    UserSettingsWebService, UserSettings} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {AuthenticationService, ProcessedCredentials, Credentials, UserOverride} from \"./authentication.service\";\n\n/**\n * Describes the different session events that are emitted by the {@link LoginService}\n * * `session-start`: emitted after successful login\n * * `session-end`: emitted after logout and also when the {@link LoginService} is destroyed\n * * `session-changed`: emitted whenever the login state changes - login, logout and user override\n */\nexport interface SessionEvent {\n    type: \"session-start\" | \"session-end\" | \"session-changed\";\n}\n\n\n/**\n * An `InjectionToken` to set the component to use for the login modal dialog which is displayed\n * by the {@link LoginService} when performing a manual login. This makes the service independent\n * of any particular UI framework. If manual login is to be used a component must be configured by\n * providing this token.\n */\nexport const MODAL_LOGIN = new InjectionToken<Type<any>>('MODAL_LOGIN');\n\n/**\n * Describes the data retrieved during the login process.\n */\nexport interface LoginData {\n    /**\n     * The application configuration.\n     */\n    app: CCApp;\n    /**\n     * The principal corresponding to the logged in user.\n     */\n    principal: Principal;\n    /**\n     * The user settings for the logged in user.\n     */\n    userSettings: UserSettings;\n}\n\n/**\n * A high-level service to manage user login\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginService implements OnDestroy {\n    /**\n     * `true` if a user is currently logged in\n     */\n    complete: boolean;\n    // getCredentials handling (concurrent calls)\n    protected loginModalPromise: Promise<ModalResult> | undefined;\n    protected processCredentialsPromise: Promise<ProcessedCredentials | undefined> | undefined;\n    protected checkPrincipalPromise: Promise<Principal> | undefined;\n    protected automaticLoginPromise: Promise<any> | undefined;\n    protected _events = new BehaviorSubject<SessionEvent>({type: \"session-changed\"});\n\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        @Inject(MODAL_LOGIN) protected loginModal: Type<any>,\n        @Optional() protected router: Router,\n        protected appService: AppService,\n        protected principalService: PrincipalWebService,\n        protected userSettingsService: UserSettingsWebService,\n        protected modalService: ModalService,\n        protected notificationsService: NotificationsService,\n        protected authenticationService: AuthenticationService) {\n        // NB unload doesn't fire reliably so we listen for beforeunload\n        window.addEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    protected beforeUnloadEventListener = (e: Event) => {\n        this._events.next({type: \"session-end\"});\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n        window.removeEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    /**\n     * Get an `Observable` stream of {@link SessionEvent} events emitted by the service\n     */\n    get events(): Observable<SessionEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the currently logged in {@link Principal}, if any. Note that a principal can exist\n     * without the login being complete. For example, in the situation where access is denied to\n     * the selected app.\n     */\n    get principal(): Principal | undefined {\n        return this.principalService.principal;\n    }\n\n    private setComplete() {\n        const complete = this.complete;\n        this.complete = !!this.appService.app && !!this.principalService.principal && !!this.userSettingsService.userSettings;\n        if (this.complete) {\n            if (!this.authenticationService.userOverrideFailed) {\n                this.notificationsService.hideNotifications();\n            }\n            this.authenticationService.userOverrideFailed = false;\n        }\n        if (!!complete !== !!this.complete) {\n            this._events.next({type: \"session-changed\"});\n        }\n    }\n\n    /**\n     * Perform a logout of the currently logged in user. [AppService.app]{@link AppService#app},\n     * [PrincipalWebService.principal]{@link PrincipalWebService#prinicpal} and\n     * [UserSettingsWebService.userSettings]{@link UserSettingsWebService#userSettings} are reset.\n     * The `session-end` event is emitted\n     */\n    logout() {\n        this._events.next({type: \"session-end\"});\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.authenticationService.deactivateUserOverride();\n        this.authenticationService.logout();\n        this.setComplete();\n    }\n\n    /**\n     * Override the current user to the user specified in `userOverride`. Only an administrator\n     * is permitted to do this. They can revert to the normal login by calling this method with\n     * `undefined`\n     *\n     * @param userOverride The user override\n     */\n    overrideUser(userOverride: UserOverride | undefined) {\n        this.authenticationService.userOverride = userOverride;\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.setComplete();\n        Utils.delay().then(() => this.login());\n    }\n\n    private switchPrincipal(principal: Principal) {\n        if (!principal.isAdministrator) {\n            this.authenticationService.deactivateUserOverride();\n        }\n        this.principalService.principal = principal;\n        this.userSettingsService.userSettings = undefined;\n        Utils.delay().then(() => this.login());\n    }\n\n    /**\n     * Initiate the user login process. The method attempts to retrieve\n     * the [application configuration]{@link CCApp}, the\n     * [logged in user]{@link Principal} and the [user settings]{@link UserSettings}.\n     * If a user is not currently authenticated then authentication is performed using\n     * the {@link AuthenticationService} - OAuth/SAML if configured on the Sinequa Server\n     * or manual using a login modal dialog provided using the {@link MODAL_LOGIN} injection\n     * token.\n     */\n    login(): Observable<LoginData> {\n        const appName = this.appService.appName;\n        if (!appName) {\n            return throwError({error: \"App not specified\"});\n        }\n        let appNeeded: boolean;\n        if (this.router) {\n            const hash = window.location.hash.replace(\"#\", \"\");\n            const href = hash.split(\"?\")[0];\n            const params = new URLSearchParams(hash.split(\"?\")[1]);\n            const queryParams = {}\n            params.forEach((v, k) => queryParams[k] = v);\n\n            // Pick up any user override from the query string\n            const overrideUser = queryParams[\"overrideUser\"];\n            const overrideDomain = queryParams[\"overrideDomain\"];\n            if (overrideUser) {\n                this.authenticationService.userOverride = {\n                    userName: overrideUser,\n                    domain: overrideDomain\n                };\n                delete queryParams[\"overrideUser\"];\n                delete queryParams[\"overrideDomain\"];\n                const url = Utils.makeURL(href);\n                this.router.navigate([url.pathname], {queryParams});\n            }\n        }\n\n        interface ObservableLoginData {\n            app: Observable<CCApp> | undefined;\n            principal: Observable<Principal> | undefined;\n            userSettings: Observable<UserSettings> | undefined;\n        }\n\n        const makeObservables = (): ObservableLoginData => {\n            const observables: ObservableLoginData = {\n                app: undefined,\n                principal: undefined,\n                userSettings: undefined\n            };\n            if (!this.appService.app || (appName && this.appService.app.name !== appName)) {\n                appNeeded = true;\n                observables.app = this.appService.init();\n            }\n            else {\n                observables.app = of(this.appService.app);\n            }\n            let loadUserSettings = false;\n            if (!this.principalService.principal) {\n                loadUserSettings = true;\n                observables.principal = this.principalService.load();\n            }\n            else {\n                observables.principal = of(this.principalService.principal);\n            }\n            if (!this.userSettingsService.userSettings || loadUserSettings) {\n                observables.userSettings = this.userSettingsService.load();\n            }\n            else {\n                observables.userSettings = of(this.userSettingsService.userSettings);\n            }\n            return observables;\n        };\n\n        const observable = this.authenticationService.autoAuthenticate()\n            .pipe(flatMap((success) => {\n                const observables = makeObservables();\n                return forkJoin<ObservableLoginData, keyof ObservableLoginData>(observables);\n            }));\n        Utils.subscribe(observable,\n            (result) => {\n                console.log(\"loginService.login ok: \", result);\n                this.setComplete();\n                if (appNeeded) {\n                    this._events.next({type: \"session-start\"});\n                }\n            },\n            (error) => {\n                console.log(\"loginService.login failed: \", error);\n                // proceed to logout to clean process\n                this.logout();\n                return throwError(error);\n            });\n        return observable;\n    }\n\n    private getAutomaticProvider(): string | undefined {\n        if (this.startConfig.providers) {\n            return Object.keys(this.startConfig.providers).find((value) => {\n                const provider = this.startConfig.providers && this.startConfig.providers[value];\n                return !!provider && (provider as any).automatic;\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Called by the {@link HttpInterceptor} on reception of an `HTTP 401` response.\n     * This will either initiate an auto login process (OAuth/SAML) if configured on\n     * the Sinequa server or display the login modal dialog to request user credentials\n     *\n     * @param response An `HTTP 401` response\n     * @param acceptCurrent If `true` and the `AuthenticationService` currently has\n     * processed credentials then use them instead of starting a new login\n     * @returns A promise that is resolved when credentials have been obtained. Note that\n     * when auto-authentication is configured the promise will be rejected and the browser\n     * redirected to the OAuth/SAML redirect url\n     */\n    getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        if (acceptCurrent && this.authenticationService.processedCredentials) {\n            return Promise.resolve(); // initiate retry\n        }\n        if (!this.startConfig.usePopupForLogin && this.authenticationService.autoLoginActive) {\n            return this.authenticationService.autoAuthenticate().toPromise()\n                .then(result => {\n                    if (result/*auto-authentication initiated*/) {\n                        return Promise.reject(\"performing auto login\");\n                    }\n                    else {\n                        return undefined;\n                    }\n                });\n        }\n        let firstCaller = false;\n        const automaticProvider = this.getAutomaticProvider();\n        if (automaticProvider) {\n            if (!this.automaticLoginPromise) {\n                this.automaticLoginPromise = this.authenticationService.authenticateWithProvider(automaticProvider).toPromise();\n                firstCaller = true;\n            }\n            return this.automaticLoginPromise\n                .then((result) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    this.automaticLoginPromise = undefined;\n                    return result ? Promise.resolve() : Promise.reject(\"popup failed?\");\n                })\n                .catch((reason) => {\n                    this.automaticLoginPromise = undefined;\n                    const error = new SqError(SqErrorCode.autoLoginError);\n                    if (firstCaller) {\n                        this.notificationsService.error(error.message);\n                    }\n                    throw error;\n                });\n        }\n        const credentials: Credentials = {};\n        if (this.authenticationService.processedCredentials) {\n            credentials.userName = this.authenticationService.processedCredentials.userName;\n        }\n        if (!this.loginModalPromise) {\n            this.loginModalPromise = this.modalService.open(this.loginModal, {model: credentials});\n            firstCaller = true;\n        }\n        return this.loginModalPromise\n            .then((result) => {\n                this.loginModalPromise = undefined;\n                // result === ModalResult.Yes is a special return from Login when using AuthenticationService.authenticateWithProvider\n                if (result === ModalResult.OK || result === ModalResult.Yes) {\n                    if (!this.processCredentialsPromise) {\n                        this.processCredentialsPromise = result === ModalResult.Yes ?\n                            Promise.resolve<ProcessedCredentials | undefined>(undefined) :\n                            this.authenticationService.authenticate(credentials, response);\n                    }\n                    return this.processCredentialsPromise\n                        .then((value) => {\n                            this.processCredentialsPromise = undefined;\n                            if (result !== ModalResult.Yes) {\n                                this.authenticationService.processedCredentials = value;\n                            }\n                            if (!this.checkPrincipalPromise) {\n                                this.checkPrincipalPromise = this.principalService.get(false).toPromise();\n                            }\n                            return this.checkPrincipalPromise\n                                .then((principal) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    if (!this.principalService.principal || this.principalService.principal.id === principal.id) {\n                                        // no current principal OR prinicpal unchanged - initiate retry\n                                        return Promise.resolve();\n                                    }\n                                    const error = new SqError(SqErrorCode.principalSwitched);\n                                    if (firstCaller) {\n                                        this.switchPrincipal(principal);\n                                        this.notificationsService.info(error.message);\n                                    }\n                                    throw error;\n                                })\n                                .catch((reason) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    throw reason;\n                                });\n                        })\n                        .catch((reason) => {\n                            this.processCredentialsPromise = undefined;\n                            if (SqError.is(reason, SqErrorCode.principalSwitched)) {\n                                throw reason;\n                            }\n                            throw new SqError(SqErrorCode.processedCredentialsError);\n                        });\n                }\n                else {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                    const error = new SqError(SqErrorCode.loginCancelled);\n                    if (firstCaller) {\n                        this.notificationsService.info(error.message);\n                    }\n                    throw error;\n                }\n            })\n            .catch((reason) => {\n                if (!SqError.is(reason, SqErrorCode.principalSwitched)) {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                }\n                this.loginModalPromise = undefined;\n                throw reason;\n            });\n    }\n}\n","import {Injectable, InjectionToken, Optional, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport atomic from \"atomicjs\";\nimport {IProviders} from \"ng2-ui-auth\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An {@link InjectionToken} to access the app's {@link StartConfig} instance\n */\nexport const START_CONFIG = new InjectionToken<StartConfig>(\"START_CONFIG\");\n\n/**\n * Defines members whose values are automatically deduced from direct {@link StartConfig} members\n */\nexport interface DeducedStartConfig {\n    /**\n     * The origin of the url used to make Sinequa API calls\n     */\n    origin?: string;\n    /**\n     * The application path of the url used to make Sinequa API calls\n     */\n    applicationPath?: string;\n    /**\n     * The url in the browser (origin + pathname)\n     */\n    browserUrl?: string;\n    /**\n     * The path used to make Sinequa API calls, including any virtual directories.\n     * If CORS is active then it will be prefixed by the Sinequa server origin\n     */\n    apiPath?: string;\n    /**\n     * A flag indicating whether the app is running in a CORS context.\n     */\n    corsActive?: boolean;\n}\n\n/**\n * Defines members whose values are retrieved from the Sinequa app configuration and that are available prior to user login\n */\nexport interface PreloginAppConfig {\n    /**\n     * Specifies which storage should be used to hold the CSRF token used to protect Sinequa API calls against\n     * CSRF attacks\n     */\n    authenticationStorage?: 'session' | 'local';\n    /**\n     * Contains the available login providers (only used for popup-based login)\n     */\n    providers?: IProviders;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoOAuthProvider?: string;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoSAMLProvider?: string;\n    /**\n     * A boolean value indicating whether popup-based login should be used\n     */\n    usePopupForLogin?: boolean;\n    /**\n     * The URL to be used to display online help\n     */\n    helpUrl?: string;\n    /**\n     * A boolean value indicating whether auditing is enabled\n     */\n    auditEnabled?: boolean;\n    /**\n     * A boolean value indicating whether ML auditing is enabled\n     */\n    mlAuditEnabled?: boolean;\n    /**\n     * The version of Sinequa running on the server\n     */\n    version?: string;\n    /**\n     * The date of the version of Sinequa running on the server\n     */\n    versionDate?: Date;\n}\n\n/**\n * Contains start-up configuration for the application. An instance of this object\n * must be provided when registering the {@link WebServicesModule} either by providing the START_CONFIG\n * injection token or by using the [forRoot]{@link WebServicesModule#forRoot} static method.\n *\n * Typically only the members declared directly (url, app, production) should be specified.\n * The other values are either deduced from these members or are retrieved from the Sinequa configuration\n */\nexport interface StartConfig extends DeducedStartConfig, PreloginAppConfig {\n    /**\n     * The url of the sinequa server including any virtual directories - defaults to the browser url\n     */\n    url?: string;\n    /**\n     * The app name (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    app?: string;\n    /**\n     * A flag indicating whether the app is running in production mode or not\n     * (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    production?: boolean;\n}\n\n/**\n * Defines Sinequa server configuration that can be held on a web server and retrieved using\n * [StartConfigWebService.fetchServerConfig]{@link StartConfigWebService#fetchServerConfig}\n */\nexport interface ServerConfig {\n    /**\n     * The URL of the Sinequa server including any virtual directories\n     */\n    url?: string;\n    /**\n     * The name of the application\n     */\n    app?: string;\n}\n\n/**\n * A service to manage the initialization of the app's {@link StartConfig} instance. The service\n * is automatically instantiated by an {@link APP_INITIALIZER} in {@link WebServicesModule} and the\n * initialization is performed in the constructor.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class StartConfigWebService {\n    private static API_PATH = \"/api/v1\";\n\n    /**\n     * Initializes the injected {@link StartConfig} instance. Outputs an error to the\n     * console if no instance is injected.\n     *\n     * @param startConfig The start configuration instance\n     */\n    constructor(@Optional() @Inject(START_CONFIG) private startConfig: StartConfig) {\n        if (!startConfig) {\n            console.error(\"START_CONFIG must be provided in your app module\");\n            return;\n        }\n        this.initStartConfig();\n    }\n\n    private getDefaultStartConfig(): StartConfig {\n        const startConfig: StartConfig = {};\n        const browserUrl = Utils.makeURL(window.location.href);\n        let parts = Utils.split(browserUrl.pathname, \"/\");\n        const appSpecifierIndex = parts.findIndex(value => Utils.eqNCN(value, \"app\", \"app-debug\"));\n        if (appSpecifierIndex !== -1 && appSpecifierIndex < parts.length - 1) {\n            const appSpecifier = parts[appSpecifierIndex];\n            startConfig.app = parts[appSpecifierIndex + 1];\n            startConfig.production = appSpecifier === \"app\" ? true : false;\n            parts = parts.slice(0, appSpecifierIndex);\n        }\n        startConfig.url = Utils.addUrl(browserUrl.origin, ...parts);\n        return startConfig;\n    }\n\n    private initStartConfig() {\n        const defaultStartConfig = this.getDefaultStartConfig();\n        const initialStartConfig = Utils.copy(this.startConfig);\n        Utils.extend(this.startConfig, defaultStartConfig, initialStartConfig);\n        const browserUrl = Utils.makeURL(window.location.href);\n        const url = Utils.makeURL(this.startConfig.url!);\n        let apiPath = Utils.addUrl(url.pathname, StartConfigWebService.API_PATH);\n        let applicationPath = url.pathname;\n        const corsActive = url.origin !== browserUrl.origin;\n        if (corsActive) {\n            apiPath = Utils.addUrl(url.origin, apiPath);\n            applicationPath = Utils.addUrl(url.origin, applicationPath);\n        }\n        this.startConfig.origin = url.origin;\n        this.startConfig.applicationPath = applicationPath;\n        this.startConfig.apiPath = apiPath;\n        this.startConfig.corsActive = corsActive;\n        this.startConfig.browserUrl = Utils.addUrl(browserUrl.origin, browserUrl.pathname);\n    }\n\n    /**\n     * Fetches pre-login app configuration from the Sinequa server and merges it\n     * into the start config instance\n     *\n     * @returns An observable of the start config after being merged with the pre-login app configuration\n     */\n    fetchPreLoginAppConfig(): Observable<StartConfig> {\n        return Observable.create(observer => {\n            let _url = Utils.addUrl(this.startConfig.apiPath!, \"app\");\n            _url = Utils.addSearchParams(_url, {\n                app: this.startConfig.app,\n                preLogin: true\n            });\n            atomic(_url, {\n                headers: {\n                    \"sinequa-force-camel-case\": true\n                }\n            })\n                .then(response => {\n                    const initialStartConfig = Utils.copy(this.startConfig);\n                    Utils.extend(this.startConfig, response.data, initialStartConfig);\n                    const versionDate = this.startConfig.versionDate;\n                    if (Utils.isString(versionDate)) { // it will be\n                        this.startConfig.versionDate = Utils.fromSysDateStr(versionDate);\n                    }\n                    observer.next(this.startConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.error(\"Error retrieving app config\");\n                    observer.error(error);\n                });\n        });\n    }\n\n    /**\n     * Retrieves Sinequa server configuration from a web server hosting the app\n     *\n     * @param url A URL to a JSON file containing the Sinequa server configuration\n     *\n     * @returns An observable of the Sinequa server configuration\n     */\n    fetchServerConfig(url?: string): Observable<ServerConfig> {\n        return Observable.create(observer => {\n            if (!url) {\n                const _url = Utils.makeURL(window.location.href);\n                url = Utils.addUrl(_url.pathname, \"sinequa-config.json\");\n            }\n            atomic(url)\n                .then(response => {\n                    // If the config file is empty or not valid json we'll most likely get a string for data\n                    let serverConfig = response.data;\n                    if (!Utils.isObject(serverConfig)) {\n                        console.warn(\"invalid sinequa-config.json file\");\n                        serverConfig = {};\n                    }\n                    observer.next(serverConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.log(\"sinequa-config.json not found\");\n                    observer.next({});\n                    observer.complete();\n                });\n        });\n    }\n}\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {true} other {false}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Server error\",\n        \"loginCancelled\": \"login cancelled\",\n        \"processedCredentialsError\": \"unable to get processed credentials\",\n        \"autoLoginError\": \"login failed\",\n        \"principalSwitched\": \"the logged in user has changed\",\n        \"userOverrideFailure\": \"unable to override user\",\n        \"responseLoadFailure\": \"failed to load response\",\n        \"unknownError\": \"unknown error\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabic\",\n        \"da\": \"Danish\",\n        \"de\": \"German\",\n        \"el\": \"Greek\",\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fi\": \"Finnish\",\n        \"fr\": \"French\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"nl\": \"Dutch\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ro\": \"Romanian\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"th\": \"Thai\",\n        \"zh\": \"Traditional Chinese\",\n        \"zs\": \"Simplified Chinese\",\n        \"zz\": \"Unknown\"\n    }\n};\n","import {Utils, MapOf} from \"@sinequa/core/base\";\nimport {IQuery, Select, Open, SpellingCorrectionMode, AggregationOptions} from \"@sinequa/core/web-services\";\n\n\nexport const advancedFacetPrefix = \"advanced_\";\n\n/**\n * Represents a query for retrieving search results from a Sinequa search engine.\n *\n * The properties are described in the {@link IQuery} interface\n */\nexport class Query implements IQuery {\n    text?: string;\n    action: \"\" | \"search\" | \"open\" | \"aggregate\";\n    select?: Select[];\n    open?: Open[];\n    page?: number;\n    pageSize?: number;\n    tab?: string;\n    scope?: string;\n    sort?: string;\n    basket?: string;\n    isFirstPage?: boolean;\n    strictRefine?: boolean;\n    globalRelevance?: number;\n    questionLanguage?: string;\n    questionDefaultLanguage?: string;\n    spellingCorrectionMode?: SpellingCorrectionMode;\n    spellingCorrectionFilter?: string;\n    documentWeight?: string;\n    textPartWeights?: string;\n    relevanceTransforms?: string;\n    removeDuplicates?: boolean;\n    queryId?: string;\n    aggregations: MapOf<AggregationOptions> | string[];\n    orderBy?: string;\n    groupBy?: string;\n\n    /**\n     * Return a copy of the passed query\n     */\n    static copy(query: Query): Query {\n        if (!query) {\n            return query;\n        }\n        return query.copy();\n    }\n\n    constructor(\n        public name: string) {\n    }\n\n    /**\n     * Return `true` if the query has fulltext search elements\n     */\n    get hasRelevance(): boolean {\n        if (!Utils.isEmpty(this.text)) {\n            return true;\n        }\n        if (this.findSelect(\"refine\")) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Add a select filter to the query\n     *\n     * @param expr The fielded search expression to filter the results\n     * @param facet The name of the associated facet\n     */\n    addSelect(expr: string, facet?: string): number {\n        return this.pushSelect({\n            expression: expr,\n            facet: facet || \"\"\n        });\n    }\n\n    /**\n     * Adds a new `Select` object to the end of the query's `selects`\n     */\n    pushSelect(select: Select): number {\n        if (!this.select) {\n            this.select = [];\n        }\n        return this.select.push(select);\n    }\n\n    /**\n     * Remove the last `Select` object from the `selects` and return it\n     */\n    popSelect(): Select | undefined {\n        if (!this.select) {\n            return undefined;\n        }\n        return this.select.pop();\n    }\n\n    /**\n     * Remove the `Select` object identified by `indexOrFacet`\n     *\n     * @param indexOrFacet either an index in the `selects` array or a facet name\n     * @param all If `true` and `indexOrFacet` is a facet name then all `Select` objects with a matching facet name will be removed\n     */\n    removeSelect(indexOrFacet: number | string, all = false): void {\n        if (!this.select) {\n            return;\n        }\n        if (Utils.isString(indexOrFacet)) {\n            // indexOrFacet is a facet name\n            for (let i = this.select.length - 1; i >= 0; i--) {\n                const _select = this.select[i];\n                if (Utils.eqNC(_select.facet, indexOrFacet)) {\n                    this.select.splice(i, 1);\n                    if (this.select.length === 0) {\n                        delete this.select; // Clean the query if no more select\n                        return;\n                    }\n                    if (!all) {\n                        return;\n                    }\n                }\n            }\n        }\n        else {\n            if (indexOrFacet < 0 || indexOrFacet >= this.select.length) {\n                return;\n            }\n            this.select.splice(indexOrFacet, 1);\n            if (this.select.length === 0) {\n                delete this.select;\n            }\n        }\n    }\n\n    /**\n     * Replace a `Select` with another\n     *\n     * @param index The index in the `selects` array of the `Select to replace\n     * @param select The `Select` to use as a replacement\n     */\n    replaceSelect(index: number, select: Select) {\n        if (!this.select) {\n            return;\n        }\n        this.select.splice(index, 1, select);\n    }\n\n    /**\n     * Find the index of the nth `Select` object matching the passed facet name\n     *\n     * @param facet A facet name\n     * @param ordinal Specifies which `Select` object to retrieve among selects with the same facet name\n     */\n    findSelectIndex(facet: string, ordinal = 0): number {\n        if (!this.select) {\n            return -1;\n        }\n        let index = 0;\n        let facetOrdinal = 0;\n        let facetIndex = -1;\n        for (const select of this.select) {\n            if (Utils.eqNC(facet, select.facet)) {\n                facetIndex = index;\n                if (facetOrdinal === ordinal) {\n                    break;\n                }\n                facetOrdinal++;\n            }\n            index++;\n        }\n        return facetIndex;\n    }\n\n    /**\n     * Find the first `Select` matching the passed facet name\n     *\n     * @param facet A facet name\n     * @param fromEnd If `true` start searching backwards from the last `Select`\n     */\n    findSelect(facet: string, fromEnd = true): Select | undefined {\n        const facetSelectIndex = this.findSelectIndex(facet, fromEnd ? -1 : 0);\n        return facetSelectIndex >= 0 ? this.select && this.select[facetSelectIndex] : undefined;\n    }\n\n    /**\n     * Return the last `Select` object\n     */\n    lastSelect(): Select | undefined {\n        if (!this.select) {\n            return undefined;\n        }\n        return this.select[this.select.length - 1];\n    }\n\n    /**\n     * Return the number of `Select` objects\n     */\n    get selectLength(): number {\n        if (!this.select) {\n            return 0;\n        }\n        return this.select.length;\n    }\n\n    /**\n     * Add an `Open` filter to the query. This is typically used to load children of tree nodes\n     *\n     * @param expr The fielded search expression specifying the node to expand\n     * @param aggregation The associated aggregation\n     */\n    addOpen(expr: string, aggregation: string) {\n        if (!this.open || !Utils.isArray(this.open)) {\n            this.open = [];\n        }\n        return this.open.push({\n            expression: expr,\n            aggregation\n        });\n    }\n\n    /**\n     * Clear all fields in the query except the name\n     */\n    clear(): void {\n        const name = this.name;\n        Utils.clearObject(this);\n        this.name = name;\n    }\n\n    /**\n     * Remove advanced search select(s) from the query\n     */\n    toStandard(): Query {\n        const advancedSelect = this.select?.filter(\n          (select: Select) => select.facet && select.facet.startsWith(advancedFacetPrefix)\n        )\n        advancedSelect?.forEach(\n          (select) => this.removeSelect(select.facet, true)\n        )\n        return this;\n    }\n\n    /**\n     * Return a copy of this query\n     */\n    copy(): Query {\n        const query = new Query(this.name);\n        Utils.copy(this, query);\n        return query;\n    }\n\n    /**\n     * Return a copy of this query but without any advanced select\n     */\n    copyStandard(): Query {\n        const query = this.copy();\n        return query.toStandard();\n    }\n\n    /**\n     * Remove all properties from the query except advanced search select(s) and optionally `text`\n     *\n     * @param withText If `true` do not remove the `text` field\n     */\n    toAdvanced(withText: boolean = false): Query {\n        for (const property in this) {\n            if (this.hasOwnProperty(property) && !Utils.eqNC(property, \"select\") && (!withText || !Utils.eqNC(property, \"text\"))) {\n                delete this[property];\n            }\n        }\n        const notAdvancedSelect = this.select?.filter(\n          (select: Select) => select.facet && !select.facet.startsWith(advancedFacetPrefix)\n        )\n        notAdvancedSelect?.forEach(\n          (select) => this.removeSelect(select.facet)\n        )\n        return this;\n    }\n\n    /**\n     * Return a copy of this query including just the advanced fields and optionally `text`\n     *\n     * @param withText If `true` include the `text` field\n     */\n    copyAdvanced(withText: boolean = false): Query {\n        const query = this.copy();\n        return query.toAdvanced(withText);\n    }\n\n    /**\n     * Tests whether this query has advanced search selections\n     */\n    hasAdvanced(): boolean {\n        return !!this.select?.find(s => s.facet && s.facet.startsWith(advancedFacetPrefix));\n    }\n\n    /**\n     * Initialize this query from the passed JSON string\n     *\n     * @param jquery JSON in string form\n     */\n    fromJson(jquery: string): Query {\n        this.clear();\n        const query = Utils.fromJson(jquery);\n        // convert select and open\n        const select = query.select;\n        if (Utils.isArray(select)) {\n            query.select = select.map<Select>((value: Select | string[]) => {\n                if (Utils.isArray(value)) {\n                    return {\n                        expression: value[0],\n                        facet: value[1]\n                    };\n                }\n                else {\n                    return value;\n                }\n            });\n        }\n        const open = query.open;\n        if (Utils.isArray(open)) {\n            query.open = open.map<Open>((value: Open | string[]) => {\n                if (Utils.isArray(value)) {\n                    return {\n                        expression: value[0],\n                        aggregation: value[1]\n                    };\n                }\n                else {\n                    return value;\n                }\n            });\n        }\n        Utils.extend(this, query);\n        return this;\n    }\n\n    /**\n     * Returns a JSON representation of this query where `Select` and `Open` objects are expressed as tuple arrays for conciseness\n     */\n    toJsonForQueryString(): string {\n        const o: any = {};\n        Utils.merge(o, this);\n        if (this.select) {\n            o.select = this.select.map<string[]>((value) => {\n                const a = [value.expression];\n                if (value.facet) {\n                    a.push(value.facet);\n                }\n                return a;\n            });\n        }\n        if (this.open) {\n            o.open = this.open.map<string[]>((value) => [value.expression, value.aggregation]);\n        }\n        return Utils.toJson(o);\n    }\n\n    /**\n     * Return a hash value of this query that excludes any pagination parameters\n     */\n    hash(): string {\n        const obj: any = {};\n        Utils.mergeAndSort(obj, this);\n        // remove pagination\n        delete obj.page;\n        delete obj.pageSize;\n        const str = Utils.toJson(obj);\n        return Utils.sha512(str);\n    }\n}\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SqHttpClient } from \"./http-client\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Results } from \"./query.web.service\";\r\nimport { StartConfig, START_CONFIG } from \"./start-config.web.service\";\r\n\r\nexport type Dataset = {[key: string]: Results|DatasetError};\r\n\r\nexport interface DatasetError {\r\n    errorCode: number;\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface DatasetDescription {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\n/**\r\n * A service to notify the audit manager on the Sinequa server of client-side events\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DatasetWebService extends HttpService {\r\n    private static readonly endpoint = \"search.dataset\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        protected httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    /**\r\n     * Return the list of queries configured in the given\r\n     * dataset web service.\r\n     * @param webServiceName name of the web service\r\n     */\r\n    list(webServiceName: string): Observable<DatasetDescription[]> {\r\n        return this.httpClient.get<DatasetDescription[]>(\r\n            `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param query name of the query\r\n     * @param params parameters of the queries\r\n     */\r\n    get(webServiceName: string, query: string, parameters = {}): Observable<Results|DatasetError> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}/${query}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets[query]));\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param params parameters of the queries\r\n     */\r\n    getAll(webServiceName: string, parameters = {}): Observable<Dataset> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets));\r\n    }\r\n\r\n}","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {IQuery} from \"./query/query\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {catchError, distinctUntilChanged, shareReplay} from \"rxjs/operators\";\n\n/**\n * Describes highlight data for a set of categories\n */\nexport interface HighlightDataPerCategory {\n    [key: string] : CategoryHighlightData;\n}\n\n/**\n * Describes highlight data for a category\n */\nexport interface CategoryHighlightData {\n    categoryDisplayLabel: string;\n    categoryDisplayLabelPlural: string;\n    categoryFilterAllLabel: string;\n    categoryFilterNoneLabel: string;\n    values: HighlightValue[];\n}\n\n/**\n * Describes a highlight value\n */\nexport interface HighlightValue {\n    value: string;\n    displayValue: string;\n    locations: Location[];\n}\n\n/**\n * Describes a single highlight location\n */\nexport interface Location {\n    start: number;\n    enclosingLength: number;\n}\n\n/**\n * Describes highlight data for a set of locations\n */\nexport interface HighlightDataPerLocation {\n    [index: number]: {\n        start: number,\n        length: number,\n        values: string[],\n        displayValue: string,\n        positionInCategories: { [category: string]: number }\n    };\n\n    size(): number;\n}\n\n/**\n * Describes the data returned by [PreviewWebService.get]{@link PreviewWebService#get}\n */\nexport interface PreviewData {\n    record: Record;\n    resultId: string;\n    cacheId: string;\n    highlightsPerCategory: HighlightDataPerCategory;\n    highlightsPerLocation: HighlightDataPerLocation;\n    documentCachedContentUrl: string;\n}\n\n/**\n * A service for calling the preview web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PreviewWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets {@link PreviewData} for a document in the context of a {@link IQuery}\n     *\n     * @param id The document id\n     * @param query The query context\n     * @param auditEvents Audit events to store on the server\n     */\n    public get(id: string, query: IQuery, auditEvents?: AuditEvents): Observable<PreviewData> {\n        return this.httpClient.post<PreviewData>(this.makeUrl(\"preview\"), {\n            app: this.appName,\n            action: \"get\",\n            id,\n            query,\n            browserUrl: this.startConfig.browserUrl,\n            $auditRecord: auditEvents\n        }).pipe(shareReplay(1));\n    }\n    \n    /**\n     * Gets document's preview HTML content\n     * \n     * @param url The document preview URL\n     * @returns \n     */\n    public getHtmlPreview(url: string): Observable<any> {\n        return this.httpClient.get(url, {responseType: \"text\"}).pipe(\n            catchError(err => throwError(err)),\n            distinctUntilChanged(),\n            shareReplay(1)\n        );                \n    }\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Anmeldung\",\n            \"userName\": \"Benutzername\",\n            \"password\": \"Passwort\",\n            \"singleSignOn\": \"Einmalanmeldung (Single sign-on)\",\n            \"signInWith\": \"Anmelden mit...\"\n        }\n    }\n};\n","import {Utils} from \"./utils\";\n\n/**\n * Defines the different pattern types\n * `Empty`: no pattern\n * `RegExp`: a regular expression pattern\n * `Value`: a literal value\n */\nexport enum PatternType {\n    Empty = 0,\n    RegExp = 1,\n    // WildCard = 2,\n    Value = 3\n}\n\n/**\n * A class that represents a single pattern. The pattern type is deduced automatically from the input pattern text.\n *\n * `<empty string>` => `Empty`\n * `<pattern with wildcards ?*>` => `RegExp` (wildcards are converted to regular expressions)\n * `<pattern starting with ~>` => `RegExp` (the text following the ~ character is treated as a regular expression)\n * `<any other value>` => `Value` (a literal value that is matched as-is)\n */\nexport class Pattern {\n    private _type: PatternType;\n    public get type(): PatternType {\n        return this._type;\n    }\n    private reg?: RegExp;\n    private preparedPattern1?: string;\n    // private preparedPattern2: string;\n    private _text?: string;\n    public get text(): string | undefined {\n        return this._text;\n    }\n\n    public static getPatternType(pattern: string): PatternType {\n        if (!pattern) {\n            return PatternType.Empty;\n        }\n        if (pattern[0] === \"~\" || pattern.includes(\"*\") || pattern.includes(\"?\")) {\n            return PatternType.RegExp;\n        }\n        return PatternType.Value;\n    }\n\n    public static isPattern(pattern: string): boolean {\n        if (!pattern) {\n            return false;\n        }\n        if (pattern[0] === \"~\" || pattern.includes(\"*\") || pattern.includes(\"?\")) {\n            return true;\n        }\n        return false;\n    }\n\n    public static doMatch(pattern: string, text: string): boolean {\n        const _pattern = new Pattern();\n        _pattern.load(pattern);\n        return _pattern.isMatch(text);\n    }\n\n    public static wildcardToRegex(pattern: string): string {\n        if (!pattern) {\n            return pattern;\n        }\n        return \"^\" + Utils.regExEscape(pattern).replace(\"\\\\*\", \".*\").replace(\"\\\\?\", \".\") + \"$\";\n    }\n\n    public constructor(pattern?: string) {\n        if (!pattern) {\n            this.clear();\n        }\n        else {\n            this.load(pattern);\n        }\n    }\n\n    private static cleanPattern(s: string): string {\n        if (!s) {\n            return s;\n        }\n        const sb: string[] = [];\n        let lastIsStar = false;\n        for (const ch of s) {\n            if (ch === \"*\") {\n                if (!lastIsStar) {\n                    lastIsStar = true;\n                    sb.push(ch);\n                }\n            }\n            else {\n                lastIsStar = false;\n                sb.push(ch);\n            }\n        }\n        return sb.join(\"\");\n    }\n\n    public clear():void {\n        this.reg= undefined;\n        this._text = undefined;\n        this.preparedPattern1 = undefined;\n        // this.preparedPattern2 = undefined;\n        this._type = PatternType.Empty;\n    }\n\n    public isEmpty(): boolean {\n        return this._type === PatternType.Empty;\n    }\n\n    public load(pattern: string): boolean {\n        this.clear();\n        try {\n            let s = pattern;\n            this._text = pattern;\n            this._type = Pattern.getPatternType(s);\n            if (this._type === PatternType.Empty) {\n                return true;\n            }\n            if (this._type === PatternType.Value) {\n                this.preparedPattern1= s ;\n                return true;\n            }\n            if (this._type === PatternType.RegExp) {\n                if (s[0] === \"~\") {\n                    s = s.substring(1);\n                }\n                else {\n                    s = Pattern.wildcardToRegex(Pattern.cleanPattern(s));\n                }\n                this.preparedPattern1 = s;\n                this.reg = new RegExp(s, \"i\");\n                return true;\n            }\n            return false;\n        }\n        catch (e) {\n            console.log(`Pattern.Load '${pattern}' error:`, e);\n            this.clear();\n            return false;\n        }\n    }\n\n    public getTypeValueText(): string | undefined {\n        if (this.type === PatternType.Value) {\n            return this.preparedPattern1;\n        }\n        return undefined;\n    }\n\n    public getTypeRegexPattern(): string | undefined {\n        if (this.type === PatternType.RegExp) {\n            return this.preparedPattern1;\n        }\n        return undefined;\n    }\n\n    public isTypeValue(): boolean {\n        return this.type === PatternType.Value;\n    }\n\n    public isMatch(text: string): boolean {\n        text = text || \"\";\n        switch (this._type) {\n            default:\n            case PatternType.Empty:\n                return true;\n            case PatternType.Value:\n                return Utils.eqNC(text, this.preparedPattern1 || \"\");\n            case PatternType.RegExp:\n                return this.reg?.test(text) || false;\n        }\n    }\n}\n\nexport class Patterns {\n    private _text?: string;\n    private _preparedPatterns?: Pattern[];\n    private _values?: { [key: string]: true };\n    private _isEmpty: boolean;\n\n    constructor(text?: string) {\n        this.text = text;\n    }\n\n    public clear(): void {\n        this._preparedPatterns = undefined;\n        this._values = undefined;\n        this._isEmpty = true;\n    }\n\n    public get text(): string | undefined {\n        return this._text;\n    }\n\n    public set text(value: string | undefined) {\n        if (value === this._text) {\n            return;\n        }\n        this._text = value;\n        const l = Utils.split(this._text || \"\", \";\");\n        this.innerSetList(l);\n\n    }\n\n    public getTypeCount(type: PatternType): number {\n        if (!this._preparedPatterns) {\n            return 0;\n        }\n        if (type === PatternType.Value) {\n            return !!this._values ? Object.keys(this._values).length : 0;\n        }\n        let count = 0;\n        for (const pattern of this._preparedPatterns) {\n            if (pattern.type === type) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private innerSetList(l: string[] | undefined): void {\n        this._preparedPatterns = undefined;\n        this._values = undefined;\n        this._isEmpty = true;\n\n        if (!!l) {\n            for (const s of l) {\n                if (!s) {\n                    continue;\n                }\n                const pattern = new Pattern();\n                if (pattern.load(s)) {\n                    if (!this._preparedPatterns) {\n                        this._preparedPatterns = [];\n                    }\n                    this._preparedPatterns.push(pattern);\n                }\n            }\n        }\n        if (this._preparedPatterns) {\n            const c = this._preparedPatterns.length;\n            if (c > 0) {\n                this._isEmpty = false;\n            }\n            for (let i = c - 1; i >= 0; i--) {\n                const pattern = this._preparedPatterns[i];\n                //do values\n                if (pattern.isTypeValue()) {\n                    if (!this._values) {\n                        this._values = {};\n                    }\n                    const val = pattern.getTypeValueText() || \"\";\n                    this._values[val] = true;\n                    this._preparedPatterns.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    public get list(): string[] {\n        return Utils.split(this.text || \"\", \";\");\n    }\n\n    public set list(value: string[]) {\n        this.text = !!value ? value.join(\";\") : undefined;\n        this.innerSetList(value);\n    }\n\n    public setText(list: string[]): void {\n        this.list = list;\n    }\n\n    public isEmpty(): boolean {\n        return this._isEmpty;\n    }\n\n    public hasPatterns(): boolean {\n        return !this.isEmpty();\n    }\n\n    public isMatch(name: string, logdisplay?: string) {\n        if (this.isEmpty()) {\n            return true;\n        }\n\n        if (!!this._values) {\n            if (this._values[name]) {\n                if (!!logdisplay) {\n                    console.log(logdisplay, ` : the pattern '${name}' matches the value '${name}'`);\n                }\n                return true;\n            }\n        }\n\n        if (!!this._preparedPatterns) {\n            for (const pattern of this._preparedPatterns) {\n                if (!pattern) {\n                    continue;\n                }\n                if (pattern.isTypeValue()) {\n                    continue;\n                }\n                if (pattern.isMatch(name)) {\n                    if (!!logdisplay) {\n                        console.log(logdisplay, ` : the pattern '${pattern.text}' matches the value '${name}'`);\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * This class is used to process \"included\" and \"excluded\" patterns typically specified in the Sinequa configuration.\n */\nexport class PatternMatcher {\n    public includedPattern: Patterns;\n    public excludedPattern: Patterns;\n\n    public get included(): string | undefined {\n        return this.includedPattern.text;\n    }\n\n    public set included(value: string | undefined) {\n        this.includedPattern.text = value;\n    }\n\n    public get excluded(): string | undefined {\n        return this.excludedPattern.text;\n    }\n\n    public set excluded(value: string | undefined) {\n        this.excludedPattern.text = value;\n    }\n\n    public set includedList(value: string[]) {\n        this.includedPattern.list = value;\n    }\n\n    public set excludedList(value: string[]) {\n        this.excludedPattern.list = value;\n    }\n\n    public includedLogDisplay?: string;\n    public excludedLogDisplay?: string;\n\n    constructor(includedLogDisplay?: string, excludedLogDisplay?: string) {\n        this.includedPattern = new Patterns();\n        this.excludedPattern = new Patterns();\n        this.includedLogDisplay = includedLogDisplay;\n        this.excludedLogDisplay = excludedLogDisplay;\n    }\n\n    public hasPatterns(): boolean {\n        return this.includedPattern.hasPatterns() || this.excludedPattern.hasPatterns();\n    }\n\n    public isExcluded(name: string): boolean {\n        return !this.isIncluded(name);\n    }\n\n    public isIncluded(name: string): boolean {\n        if (!name) {\n            return true;\n        }\n        if (this.includedPattern.hasPatterns()) {\n            if (this.excludedPattern.hasPatterns()) {\n                if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {\n                    return false;\n                }\n            }\n            if (!this.includedPattern.isMatch(name, this.includedLogDisplay)) {\n                return false;\n            }\n            return true;\n        }\n        else if (this.excludedPattern.hasPatterns()) {\n            if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    }\n\n    public isExplicitlyIncluded(name: string): boolean {\n        return this.includedPattern.hasPatterns() && this.includedPattern.isMatch(name, this.includedLogDisplay);\n    }\n\n    public isExplicitlyExcluded(name: string): boolean {\n        return this.excludedPattern.hasPatterns() && this.excludedPattern.isMatch(name, this.excludedLogDisplay);\n    }\n}\n","import {Directive, Input, Output, OnChanges, OnDestroy, ViewContainerRef, ComponentRef, EventEmitter, Type} from \"@angular/core\";\nimport {LoadComponentService, LoadComponentOptions, LoadedComponent} from \"./load-component.service\";\n\n/**\n * A directive that uses the {@link LoadComponentService} to dynamically load a component.\n * The loaded component's lifecycle is automatically managed with changes to the directive's\n * `options` reflected to the component by rebinding it using {@link LoadComponentService}\n */\n@Directive({\n    selector: \"[sqLoadComponent]\"\n})\nexport class LoadComponentDirective implements OnChanges, OnDestroy {\n    /**\n     * Options for the loading of a component\n     */\n    @Input(\"sqLoadComponent\") options: LoadComponentOptions;\n    /**\n     * Used to emit events when the component is created and destroyed\n     */\n    @Output(\"sqLoadComponent\") eventEmitter = new EventEmitter<{componentRef: ComponentRef<Type<any>> | undefined}>();\n    private loadedComponent: LoadedComponent;\n    private currentComponent: Type<any>;\n\n    constructor(\n        private loadComponentService: LoadComponentService,\n        private viewContainerRef: ViewContainerRef) {\n    }\n\n    /**\n     * Handles any changes to the input `options`. On the first call the component is loaded\n     * and bound. Subsequent changes to the `options` are handled by rebinding the component unless\n     * the component type to load changes in which case the current component is unloaded before\n     * loading the new component.\n     *\n     * The component is loaded using the `ViewContainerRef` associated with the directive\n     */\n    ngOnChanges() {\n        if (this.loadedComponent) {\n            if (this.currentComponent === this.options.component) {\n                this.loadComponentService.bindComponent(this.options, this.loadedComponent);\n                return;\n            }\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.loadedComponent.componentRef.destroy();\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n        this.loadedComponent = this.loadComponentService.loadComponent(this.options, this.viewContainerRef);\n        this.currentComponent = this.options.component;\n        this.eventEmitter.emit({componentRef: !!this.loadedComponent ? this.loadedComponent.componentRef : undefined});\n    }\n\n    /**\n     * Unbinds the loaded component. It is not destroyed here as angular will automatically destroy\n     * the component at the same time as this directive is destroyed as they share the same `ViewContainerRef`\n     */\n    ngOnDestroy() {\n        if (this.loadedComponent) {\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n    }\n}\n","import {HttpParams} from \"@angular/common/http\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {StartConfig} from \"./start-config.web.service\";\n\n/**\n * A base helper class for web services. It holds the {@link StartConfig} for the app\n */\nexport abstract class HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig The start configuration\n     */\n    constructor(\n        protected startConfig: StartConfig) {\n    }\n\n    /**\n     * The name of the application\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Makes an API url by appending the api name to the api path\n     * held on the {@link StartConfig}\n     *\n     * @param api An API name\n     */\n    makeUrl(api: string): string {\n        return Utils.addUrl(this.startConfig.apiPath!, api);\n    }\n\n    /**\n     * Makes an Angular {@link HttpParams} object from a basic Javascript object\n     *\n     * @param params A map of parameter values\n     */\n    makeParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        return Utils.makeHttpParams(params);\n    }\n}"],"sourceRoot":"webpack:///"}