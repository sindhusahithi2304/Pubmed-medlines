{"version":3,"sources":["webpack:///projects/core/login/authentication-oauth.service.ts","webpack:///projects/core/app-utils/index.ts","webpack:///projects/core/app-utils/app-service-helpers.ts","webpack:///projects/core/base/index.ts","webpack:///projects/core/login/token.service.ts","webpack:///locale-data/complete.js (ignored)","webpack:///projects/core/load-component/module.providers.ts","webpack:///projects/core/web-services/principal.web.service.ts","webpack:///projects/core/validation/index.ts","webpack:///projects/core/web-services/suggest-field.web.service.ts","webpack:///projects/core/validation/validation-message.component.ts","webpack:///projects/core/base/keyboard.ts","webpack:///projects/core/web-services/http-client.ts","webpack:///projects/core/modal/messages/de.ts","webpack:///projects/hello-search/src/environments/environment.ts","webpack:///projects/core/load-component/load-component.module.ts","webpack:///projects/core/app-utils/module.providers.ts","webpack:///projects/core/modal/modal.module.ts","webpack:///projects/core/intl/intl.module.ts","webpack:///projects/core/login/authentication-popup.service.ts","webpack:///projects/core/web-services/similar-documents.web.service.ts","webpack:///projects/core/notification/notifications.interceptor.ts","webpack:///projects/core/modal/modal-ref.ts","webpack:///projects/core/notification/public-api.ts","webpack:///projects/core/login/login.interceptor.ts","webpack:///projects/core/modal/messages/en.ts","webpack:///projects/core/intl/index.ts","webpack:///projects/core/web-services/sponsored-links.web.service.ts","webpack:///projects/core/load-component/load-component.service.ts","webpack:///projects/core/intl/messages/fr.ts","webpack:///projects/core/base/iterator-adaptor.ts","webpack:///projects/core/web-services/web-services.module.ts","webpack:///projects/core/web-services/public-api.ts","webpack:///projects/core/app-utils/app-utils.module.ts","webpack:///projects/hello-search/src/main.ts","webpack:///projects/core/web-services/rfm.web.service.ts","webpack:///projects/core/validation/validation.directive.ts","webpack:///projects/core/validation/validation.module.ts","webpack:///projects/core/login/module.providers.ts","webpack:///projects/core/modal/confirm.component.ts","webpack:///projects/core/notification/notifications.service.ts","webpack:///projects/core/web-services/app.web.service.ts","webpack:///projects/core/login/authentication.service.ts","webpack:///projects/core/web-services/audit.web.service.ts","webpack:///projects/core/modal/public-api.ts","webpack:///projects/core/web-services/queryintent.service.ts","webpack:///projects/core/login/messages/en.ts","webpack:///projects/core/validation/validation.service.ts","webpack:///projects/core/validation/public-api.ts","webpack:///projects/core/web-services/module.providers.ts","webpack:///projects/core/web-services/download.web.service.ts","webpack:///projects/core/web-services/suggest-query.web.service.ts","webpack:///projects/core/login/component-with-login.component.ts","webpack:///projects/core/web-services/json-method-plugin.web.service.ts","webpack:///projects/core/validation/messages/en.ts","webpack:///projects/core/app-utils/public-api.ts","webpack:///projects/core/web-services/config/ccapp.ts","webpack:///node_modules/moment/locale sync ^\\.\\/.*$","webpack:///projects/core/base/polyfills.ts","webpack:///projects/core/messages/index.ts","webpack:///projects/core/web-services/query.web.service.ts","webpack:///projects/core/load-component/index.ts","webpack:///projects/core/modal/module.providers.ts","webpack:///projects/core/login/login.module.ts","webpack:///projects/core/base/base.module.ts","webpack:///projects/core/intl/module.providers.ts","webpack:///projects/core/web-services/index.ts","webpack:///projects/hello-search/$_lazy_route_resource lazy namespace object","webpack:///projects/core/login/index.ts","webpack:///projects/core/default-locales-config.ts","webpack:///projects/core/base/utils.ts","webpack:///projects/core/app-utils/app.service.ts","webpack:///projects/core/intl/messages/de.ts","webpack:///projects/core/login/messages/index.ts","webpack:///projects/core/intl/intl.service.ts","webpack:///projects/core/modal/messages/index.ts","webpack:///projects/core/web-services/recent-queries.web.service.ts","webpack:///projects/core/login/jwt.service.ts","webpack:///projects/core/login/login.component.ts","webpack:///projects/core/intl/message.pipe.ts","webpack:///projects/core/load-component/public-api.ts","webpack:///projects/core/web-services/user-ratings.web.service.ts","webpack:///projects/core/app-utils/query/expr-parser.ts","webpack:///projects/core/web-services/query-export.web.service.ts","webpack:///projects/core/validation/module.providers.ts","webpack:///projects/core/web-services/labels.web.service.ts","webpack:///projects/core/intl/messages/index.ts","webpack:///projects/core/modal/messages/fr.ts","webpack:///projects/core/modal/modal.service.ts","webpack:///projects/core/intl/import-moment.ts","webpack:///projects/hello-search/src/app/app.module.ts","webpack:///projects/core/web-services/user-settings.web.service.ts","webpack:///projects/core/public-api.ts","webpack:///projects/core/intl/abstract-intl.pipe.ts","webpack:///projects/core/app-utils/audit.interceptor.ts","webpack:///projects/hello-search/src/app/app.component.ts","webpack:///projects/hello-search/src/app/app.component.html","webpack:///projects/core/base/public-api.ts","webpack:///projects/core/validation/validation-error.pipe.ts","webpack:///projects/core/app-utils/format.service.ts","webpack:///projects/core/notification/module.providers.ts","webpack:///projects/core/app-utils/query/expr-builder.ts","webpack:///projects/core/base/item-array-view.ts","webpack:///projects/core/validation/messages/de.ts","webpack:///projects/core/modal/prompt.component.ts","webpack:///projects/core/login/messages/fr.ts","webpack:///projects/core/notification/notification.module.ts","webpack:///projects/core/login/public-api.ts","webpack:///projects/core/validation/messages/fr.ts","webpack:///projects/core/base/error.ts","webpack:///projects/core/validation/messages/index.ts","webpack:///projects/core/intl/public-api.ts","webpack:///projects/core/modal/index.ts","webpack:///projects/core/login/login.service.ts","webpack:///projects/core/web-services/start-config.web.service.ts","webpack:///projects/core/intl/messages/en.ts","webpack:///projects/core/app-utils/query/query.ts","webpack:///projects/core/web-services/dataset.web.service.ts","webpack:///projects/core/notification/index.ts","webpack:///projects/core/web-services/preview.web.service.ts","webpack:///projects/core/login/messages/de.ts","webpack:///projects/core/base/pattern-matcher.ts","webpack:///projects/core/load-component/load-component.directive.ts","webpack:///projects/core/web-services/http.service.ts"],"names":["AuthenticationOauthService","startConfig","httpClient","sharedService","popupService","configService","name","userData","options","providers","sqInitState","get","addUrl","apiPath","params","makeHttpParams","action","provider","tokenInCookie","loginInPopup","noUserOverride","noAutoAuthentication","pipe","ret","state","providedIn","AppServiceHelpers","column","eType","eTypeModifier","isInteger","isDouble","isNumber","isDate","isBoolean","isString","isScalar","isCsv","TokenService","notify","makeUrl","makeParams","suppressErrors","noNotify","value","csrfToken","LOAD_COMPONENT_MODULE_PROVIDERS","PrincipalWebService","_events","complete","userId","post","autoAuthenticate","observable","subscribe","response","principal","error","console","log","_principal","next","type","SuggestFieldWebService","text","fields","query","isArray","app","appName","suggests","forEach","display","toSqlValue","ValidationMessageComponent","selector","template","info","Keys","SqHttpClient","httpHandler","responseCache","Map","first","url","strRequest","JSON","stringify","key","isObject","isIterable","Object","keys","sort","reduce","s","k","sha256","requestHash","getRequestHash","set","environment","production","LoadComponentModule","imports","declarations","exports","APP_UTILS_MODULE_PROVIDERS","ModalModule","confirmModal","promptModal","ngModule","provide","useValue","IntlInitializer","intlService","init","toPromise","IntlModule","localeConfig","useClass","useFactory","deps","multi","AuthenticationPopupService","cordova","startsWith","redirectUrl","SimilarDocumentsWebService","sourceDocumentId","queryName","data","NotificationsInterceptor","notificationsService","notifications","notification","isUndefined","title","autoClose","request","shouldIntercept","handle","event","responseType","body","processNotifications","$notifications","ModalRef","overlayRef","_checkClose","_beforeClosed","_afterClosed","submitListener","submitted","preventDefault","asObservable","result","delay","then","checkCloseEvent","cancelled","removeSubmitListener","detachBackdrop","dispose","componentInstance","undefined","formElement","overlayElement","querySelector","addEventListener","removeEventListener","HTTP_REQUEST_INITIALIZERS","LoginInterceptor","requestInitializers","loginService","authService","requestInitializer","obj","isArrayBuffer","isBlob","message","parse","exception","errorMessage","errorCodeText","errorCode","status","statusText","is","acceptCurrent","getCredentials","processedCredentialsError","has","config","headers","isTrue","hadCredentials","haveCredentials","userOverrideActive","addAuthentication","addUserOverride","isJsonable","processRequestInitializers","enter","_request","clone","withCredentials","caught","leave","handle401Error","notifyError","updateAuthentication","err","req","deactivateUserOverride","userOverrideFailed","SponsoredLinksWebService","webService","webservice","locale","currentLocale","LoadComponentService","componentFactoryResolver","applicationRef","factories","loadedComponent","initialLoad","unbindComponent","ngOnChanges","componentRef","instance","simpleChanges","makeSimpleChanges","isFunction","inputs","previousValue","currentValue","outputs","eventEmitter","subscription","subscriptions","add","call","_bindComponent","unsubscribe","viewContainerRef","injector","factory","component","resolveComponentFactory","appElement","components","location","nativeElement","injector1","create","attachView","hostView","parentElement","insertBefore","nextSibling","index","isEmpty","createComponent","changeDetectorRef","detectChanges","destroy","IteratorAdaptor","base","adaptor","v","translate","e","done","Symbol","iterator","iterable","StartConfigInitializer","startConfigWebService","Promise","resolve","WebServicesModule","AppUtilsModule","bootstrapModule","preserveWhitespaces","RfmWebService","rfm","results","ids","records","record","flags","indexOf","push","id","length","queryHash","rfmQueryHash","endpoint","VALIDATION_MESSAGE_COMPONENT","ValidationDirective","validationMessageComponent","loadComponentService","validationService","element","controlName","form","validClass","invalidClass","childSelector","errorMessages","controls","control","formControlName","getAttribute","valid","dirty","active","errors","getErrorText","remove","classList","children","Array","from","querySelectorAll","firstError","getFirstError","errorInfo","getErrorInfo","setValidityClasses","validationMessage","loadComponent","removeValidityClasses","ValidationModule","LOGIN_MODULE_PROVIDERS","Confirm","model","modalRef","button","click","NotificationsService","_notificationsStream","warn","lastNotification","equals","splice","i","ic","deleteNotification","AppWebService","appVersionId","auditEvents","versionId","$auditRecord","LEGACY_PROCESSED_CREDENTIALS_KIND","AuthenticationService","tokenService","auditService","jWTService","_userOverrideActive","sinequaCredentials","storage","getItem","_processedCredentialsStr","_processedCredentials","fromJson","processedCredentials","authenticationStorage","window","localStorage","sessionStorage","loadCredentials","storageArea","newValue","doAuthentication","authentication","header","hasOwnProperty","param","saveCredentials","setCsrfToken","refreshAuthentication","regex","authenticationHeaders","authenticationHeader","matches","exec","prefix","slice","credentials","wwwAuthenticate","authenticateHeaders","split","getAuthenticateHeader","getToken","kind","userName","notifyLogout","_","deleteWebTokenCookie","userOverride","domain","observable1","authenticate","usePopupForLogin","autoLoginActive","autoOAuthProvider","originalUrl","href","autoSAMLProvider","replace","getCsrfToken","initiateAutoAuthentication","_userOverride","newProcessedCredentialsStr","toJson","setItem","removeItem","AuditWebService","evt","sl","resultId","parameters","detail","rank","doc","resultsOrId","rfmParameters","source","treeFirstNode","collection","filename","fileext","databasealias","totalRowCount","rfmDetail","substr","auditEnabled","QueryIntentWebService","isEmptyInputValue","processInputValue","map","val","EMAIL_REGEXP","ValidatorType","errorMessagesMap","min","max","required","requiredTrue","email","minlength","maxlength","pattern","unique","integer","number","date","range","ValidationService","formatService","parser","values","value1","parseValue","cmp","testFloat","toNumber","compare","parseDate","getTime","actual","testInteger","isNaN","value2","date1","date2","num1","num2","nullValidator","regexStr","charAt","RegExp","toString","test","requiredPattern","actualValue","WEB_SERVICES_MODULE_PROVIDERS","DownloadWebService","fileName","navigator","msSaveOrOpenBlob","link","document","createElement","appendChild","blobUrl","URL","createObjectURL","download","revokeObjectURL","SuggestQueryWebService","suggestQuery","kinds","ComponentWithLogin","loginComplete","loginSubscription","events","onLoginComplete","markForCheck","login","JsonMethodPluginService","method","api","ExportSourceType","ExportOutputFormat","MINIMUM_COMPATIBLE_SERVER_API_VERSION","webpackContext","webpackContextResolve","__webpack_require__","o","Error","code","webpackContextKeys","module","String","prototype","trimStart","trimEnd","Element","scrollIntoViewIfNeeded","centerIfNeeded","withinBounds","extent","Math","makeArea","left","top","width","height","x","y","lhs","rhs","newLeft","newTop","offsetParent","area","offsetLeft","clientLeft","offsetTop","clientTop","parent","elem","offsetWidth","offsetHeight","parentNode","HTMLElement","relativeFromTo","scrollLeft","right","clientWidth","scrollTop","bottom","clientHeight","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","Event","origin","protocol","hostname","port","fakeStorage","storageName","needed","dispatchStorageEvent","oldValue","storageEvent","dispatchEvent","clear","global","DOMRect","Number","different","u","xArg","yArg","wArg","hArg","defineProperties","newX","enumerable","newY","newWidth","newHeight","msMatchesSelector","webkitMatchesSelector","closest","el","nodeType","enCore","merge","frCore","deCore","DidYouMeanKind","RFMDisplay","QueryWebService","endPoint","queryIntentData","queries","methods","propagateErrors","MODAL_MODULE_PROVIDERS","AuthConfig","storageType","LoginModule","loginModal","useExisting","forRoot","BaseModule","INTL_MODULE_PROVIDERS","webpackEmptyAsyncContext","DefaultLocalesConfig","defaultLocale","intl","messages","locales","SqHttpParameterCodec","encodeURIComponent","decodeURIComponent","FrameTask","callback","Timer","start","performance","now","duration","round","Utils","dst","objs","deep","ii","j","jj","src","Date","valueOf","isRegExp","nodeName","cloneNode","baseExtend","destination","sources","context","isArrayLike","isPrimitive","isBlankObject","stackSource","stackDest","isTypedArray","copyRecurse","copyElement","isWindow","needsRecurse","constructor","match","lastIndex","getPrototypeOf","copyWithoutNullOrEmpty","defaults","_defaults","copy","o1","o2","str","_default","parseInt","parseFloat","ms","getTimezoneOffset","getHours","getMinutes","getSeconds","getMilliseconds","m","format","isValid","toDate","rxSysDateTime","rxISO8601DateTime","pretty","toSysDateStr","reviveDates","isSysDateTime","isISO8601DateTime","ISO_8601","quote","join","parts","count","nodes","lineage","stack","_i","node","pop","items","withHyphens","d","guid","c","r","random","floor","item","TYPED_ARRAY_REGEXP","reject","setTimeout","toLowerCase","a","b","ignoreCase","toLocaleUpperCase","localeCompare","eqNC","endsWith","includes","toLocaleLowerCase","words","toUpperFirst","trim","maxLength","suffix","substring","regExEscapeRegEx","replacement","regExEscape","separators","removeEmpty","rxs","filter","removeAccents","toUpperCase","sub","pos","btoa","hex","fromCharCode","atob","charCodeAt","sha","update","getHash","_delete","prop","isMap","override","diff","deltas","func","wait","immediate","every","timeout","args","timestamp","later","last","apply","arguments","callNow","previous","leading","throttled","remaining","clearTimeout","trailing","frameTasks","size","requestAnimationFrame","task","urlObj","makeURL","searchParams","path","_url","paths","_addUrl","httpParams","encoder","_value","html","escapeDiv","textNode","createTextNode","escapedHtml","innerHTML","removeChild","array","to","target","concat","genericNext","genericError","genericComplete","toInt","num","sign","abs","factor","suffixes","matchSuffix","current","unit","oneDay","oneHour","oneMinute","oneSecond","defaultUnit","total","tokens","token","calculateDuration","AppService","appWebService","defaultQueryName","queryNames","_defaultCCQuery","getField","ccquery","verifyServerApiVersionCompatibility","cclabels","getWebService","labels","ccautocomplete","autocomplete","initDefaultQuery","makeMaps","suggestQueries","apiVersion","setApp","refresh","upToDate","clearMaps","ccindex","indexType","indexes","searchIndexes","getIndex","indexIsNormal","columnMap","columns","columnName","aliases","alias","columnsInfo","getIndexForQuery","columnInfo","extraColumns","label","labelPlural","formatter","transforms","description","columnsByQuery","columnsByIndex","fieldsByQuery","$columnFieldsPattern","includedPattern","setText","columnFieldsIncluded","excludedPattern","columnFieldsExcluded","$partnameFieldsPattern","partnameFieldsIncluded","partnameFieldsExcluded","_makeColumnMapForQuery","_makeColumnMapForIndex","indexName","ccindex1","globalFields","queryFields","columns1","defaultCCQuery","webServices","lists","getCCQuery","aggregations","find","columnAliases","firstIndex","getColumnDefaultAlias","getColumn","getColumnName","getColumnAlias","appService","field","escape","isTree","isEntity","isSortable","corsActive","isUrlAbsolute","_ccquery","updateUrlForCors","applicationPath","typeModifier","etm","toEngineTypeModifierSimple","toEngineType","toEngineTypeModifier","makeColumn","documentlanguages","globalrelevance","matchingpartnames","matchlocations","matchlocationsperpartname","extracts","extractsperpartname","extractslocations","documentweight","groupcount","accesslists","enLogin","frLogin","deLogin","formatters","getMessageFormat","getNumberFormat","Intl","NumberFormat","getDateTimeFormat","DateTimeFormat","getRelativeTimeFormat","RelativeTimeFormat","getPluralRules","PluralRules","DATE_TIME_FORMAT_OPTIONS","NUMBER_FORMAT_OPTIONS","RELATIVE_TIME_FORMAT_OPTIONS","LOCALES_CONFIG","INTL_CONFIG","DEFAULT_FORMATS","sqDateTime","day","month","year","hour","minute","second","sqDate","sqYear","sqMonthYear","time","sqWeek","minimumIntegerDigits","useGrouping","sqNoGrouping","sqZeroDecimalPlaces","maximumFractionDigits","sqOneDecimalPlace","sqTwoDecimalPlaces","sqThreeDecimalPlaces","sqFourDecimalPlaces","sqFiveDecimalPlaces","IntlService","intlConfig","localesConfig","messagePrefix","textPrefix","language","languages","getBrowserLanguages","getLocale","formats","use","initialLocale","getInitialLocale","loadLocale","names","approximate","locale1","getLanguage","store","newLocale","loadData","direction","moment","d3","intlLocale","observable2","getDefaultMessages","getMessages","defaultMessages","allowNone","end","lang1","lang2","iStart","len","defaultLang","nextLang","curLang","hasValues","formattedMessage","sysLangStr","sysLang","_values","valueName","formatMessage","eq","getMessage","processFormatMessage","props","whitelist","filtered","getNamedFormat","filteredOptions","filterProps","assign","absDiff","roundAway","makeRelativeTimeParams","numeric","sepPos","userLanguage","browserLanguage","systemLanguage","enModal","frModal","deModal","RecentQueriesList","RecentQueries","RecentQueriesWebService","recentQueries","user","JWTService","password","Login","formBuilder","userNameControl","passwordControl","group","formChanges","valueChanges","invalid","close","ok","cancel","MessagePipe","pure","UserRatingsWebService","docid","ratingscolumn","ratingsColumn","averagecolumn","averageColumn","ratingsdistribution","ratingsDistribution","rating","ratingResponse","getRecordRating","updatedocweight","updateDocWeight","ratingnum","average","averagerating","mlAuditEvents","actionType","documentIds","parseUserRating","parseAverageRating","columnEntries","ratingValues","Expr","_field","_display","_displayObj","op1","valueInit","exprContext","ExprParser","unescape","unescapeList","locations","operator","near","opsInit","addOperand","op2","and","operand","contextField","prepend","operands","isStructured","expr","unshift","isLeaf","findValue","fieldPartnamePrefix","getOperatorText","escapeValue","sb","added","shouldDisplayField","normalizeField","withFields","inner","not","addFieldToString","getOperatorString","getValueString","bracketed","_toString","ctxt","_addValue","asHTML","encodeHTML","valueId","valueIndex","fromSysDateStr","formatFieldValue","addOperator","displayObj","addText","getLabel","getFields","addFieldLabel","useDisplay","showNot","hideOuterNot","showField","addField","addDisplay","addValue","_toMessage","matchNode","child1","found","child2","child","some","resolveColumnAlias","field1","positive","resolveColumnName","column1","isPositive","defaultScope","regExp","evaluationRegExps","haveWildcards","escaping","ch","dataValue","equality","NaN","dataValue1","getWildcardRegExp","getDataValue","ret1","evaluate","_evaluationRegExps","getIsStructuredField","mergedStructured","isStructuredField","allowEmptyValue","resolveField","location1","location2","expr1","expr2","disallowFulltext","eqNCN","vl","sepLen","sep","vls","valuesAndLocationsFromText","vl1","getValueAndLocation","expr3","field2","operator1","operator2","expr1StructuredCount","expr1UnstructuredCount","expr2StructuredCount","expr2UnstructuredCount","values1Length","values2Length","ExprParserOperator","tok","valuePos","valueLen","tokValue","tokValuePos","tokValueLen","or","lPar","rPar","eof","expressions","operators","displays","op","prevOp","saveOp","keyword","sbCurrentValue","suffixCh","keywordLen","kh","nch","endChars","matchUntil","allowRanges","canBeEmpty","allowEmptyValues","canBeTokValue","_getTokValue","defaultNearValue","lastIndexOf","escapes","pos1","allowScopedFields","isValidScopedSimpleName","isValidSimpleName","forcePartname","isPartname","hasPatterns","isIncluded","nextValue","candidateFieldPos","fieldSpecified","getTokValue","ch1","matchKeyword","ensureNearValue","infix","getTerminators","matchSimpleValue","forceRange","findDisplay","displayStart","isValidFieldName","isAllowedField","makeExpr","contextDisplay","readToken","parsetbl","shift","peekField","peekDisplay","e1","e2","canBeMergeTarget","mergeExpr","search","isEscaped","values1","_a","separator","currentStart","parseResult","QueryExportWebService","methodName","logErrorToConsole","None","maxCount","exportedColumns","preliminaryCheckResult","preliminaryCheck","postData","Result","doExport","selection","Selection","SavedQuery","observe","readBlobFileName","VALIDATION_MODULE_PROVIDERS","LabelsWebService","_public","q","localize","list","doccount","newLabel","oldlabel","DEFAULT_CONFIG","hasBackdrop","backdropClass","panelClass","closeOnBackdropClick","MODAL_MODEL","ModalButton","extend","visible","anchor","closer","validation","MODAL_CONFIRM","MODAL_PROMPT","ModalService","overlay","modalConfig","fullscreen","createOverlay","overlayComponent","attachDialogContainer","hostElement","backdropClick","keydownEvents","keyCode","esc","disableSubmit","openRef","afterClosed","overlayConfig","getOverlayConfig","containerPortal","containerRef","attach","positionStrategy","position","centerHorizontally","centerVertically","scrollStrategy","scrollStrategies","block","open","messageParams","confirmType","confirm","buttons","primary","primaryButton","fetchPreLoginAppConfig","AppModule","bootstrap","UserSettingsWebService","timezone","determine","userSettings","reviver","currentState","save","json","_userSettings","AbstractIntlPipe","lastValue","lastParams","updateValue","localeChange","AuditInterceptor","auditEvents1","auditRecord","sessionid","getSessionId","isSessionStale","sessionstart","lastSession","ensureAuditRecord","addSessionId","updateAuditRecord","AppComponent","queryWebService","searchControl","results$","getResults","setValue","logout","templateUrl","styleUrls","ValidationErrorPipe","getFirstErrorText","getFirstErrorInfo","FormatService","bigNumberFormatter","moneyFormatter","valueItem","isValueItem","kiloBytes","megaBytes","gigaBytes","teraBytes","petaBytes","messageKey","currency","getValueAndDisplay","formatLanguage","formatMemorySize","formatMoney","formatText","formatNumber","formatDate","formatTime","joinValue","_v","transform","toLowerFirst","toStartCase","toKebabCase","toSnakeCase","toCamelCase","formattedValue","formatValue","transformValue","parseMemorySize","toSize","NOTIFICATION_MODULE_PROVIDERS","ExprBuilder","formatField","concatWithOperator","exprs","combineWithAnd","makeAndExpr","makeOrExpr","aggregation","valuesAreExpressions","concatAndExpr","concatOrExpr","_items","asValueItems","makeFieldExpr","$path","ArrayBasedView","nameSelector","valueSelector","toNameValuePair","forIterable","thisArg","idx","NameValueArrayViewHelper","p","nameKey","valueKey","Prompt","inputControl","output","validators","input","NotificationModule","SqErrorCode","SqError","loginCancelled","principalSwitched","autoLoginError","enValidation","frValidation","deValidation","MODAL_LOGIN","LoginService","router","principalService","userSettingsService","modalService","authenticationService","beforeUnloadEventListener","hideNotifications","setComplete","isAdministrator","appNeeded","hash","URLSearchParams","queryParams","overrideUser","overrideDomain","navigate","pathname","makeObservables","observables","loadUserSettings","load","success","automatic","firstCaller","automaticProvider","getAutomaticProvider","automaticLoginPromise","authenticateWithProvider","reason","loginModalPromise","processCredentialsPromise","checkPrincipalPromise","switchPrincipal","START_CONFIG","StartConfigWebService","initStartConfig","browserUrl","appSpecifierIndex","findIndex","appSpecifier","defaultStartConfig","getDefaultStartConfig","initialStartConfig","API_PATH","observer","addSearchParams","preLogin","versionDate","serverConfig","advancedFacetPrefix","Query","facet","pushSelect","expression","select","indexOrFacet","all","_select","ordinal","facetOrdinal","facetIndex","fromEnd","facetSelectIndex","findSelectIndex","clearObject","advancedSelect","removeSelect","toStandard","withText","property","notAdvancedSelect","toAdvanced","jquery","mergeAndSort","page","pageSize","sha512","findSelect","DatasetWebService","webServiceName","datasets","PreviewWebService","PatternType","Pattern","reg","_text","preparedPattern1","_type","Empty","getPatternType","Value","wildcardToRegex","cleanPattern","_pattern","isMatch","lastIsStar","Patterns","_preparedPatterns","_isEmpty","l","isTypeValue","getTypeValueText","logdisplay","innerSetList","PatternMatcher","includedLogDisplay","excludedLogDisplay","LoadComponentDirective","currentComponent","bindComponent","emit","HttpService"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {OauthService, SharedService, PopupService, ConfigService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's state handling to retrieve a state from the Sinequa server\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationOauthService extends OauthService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient,\n        protected sharedService: SharedService,\n        protected popupService: PopupService,\n        protected configService: ConfigService) {\n        super(httpClient, sharedService, configService, popupService);\n    }\n\n    authenticate<T extends object | string>(name: string, userData: any): Observable<T> {\n        const options = this.configService.options.providers[name];\n        if (options.sqInitState) {\n            return this.httpClient.get<{state: string}>(Utils.addUrl(this.startConfig.apiPath!, \"oauth\"), {\n                params: Utils.makeHttpParams({\n                    action: \"initstate\",\n                    provider: options.name,\n                    tokenInCookie: true,\n                    loginInPopup: true,\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            }).pipe<T>(flatMap<{state: string}, Observable<T>>((ret) => {\n                options.state = ret.state;\n                return super.authenticate(name, userData);\n            }));\n        }\n        return super.authenticate(name, userData);\n    }\n}\n","export * from \"./public-api\";","import {CCColumn, EngineType, EngineTypeModifier} from \"@sinequa/core/web-services\";\n\n/**\n * @ignore\n *\n * Used internally to avoid circular references between ExprParser, AppService and FormatService.\n * Do not export from the app-utils module.\n */\nexport class AppServiceHelpers {\n    static isString(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.string) {\n            return true;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.x) === EngineTypeModifier.x) {\n            return true;\n        }\n        return false;\n    }\n\n    static isCsv(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.x) !== EngineTypeModifier.x) {\n            return true;\n        }\n        return false;\n    }\n\n    static isTree(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & EngineTypeModifier.t) === EngineTypeModifier.t) {\n            return true;\n        }\n        return false;\n    }\n\n    static isEntity(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.csv && (column.eTypeModifier & (EngineTypeModifier.e | EngineTypeModifier.l)) === (EngineTypeModifier.e | EngineTypeModifier.l)) {\n            return true;\n        }\n        return false;\n    }\n\n    static isBoolean(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.bool) {\n            return true;\n        }\n        return false;\n    }\n\n    static isDate(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.date || column.eType === EngineType.dateTime || column.eType === EngineType.time) {\n            return true;\n        }\n        return false;\n    }\n\n    static isDouble(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.double || column.eType === EngineType.float) {\n            return true;\n        }\n        return false;\n    }\n\n    static isInteger(column: CCColumn | undefined): boolean {\n        if (!column) {\n            return false;\n        }\n        if (column.eType === EngineType.integer || column.eType === EngineType.unsigned) {\n            return true;\n        }\n        return false;\n    }\n\n    static isNumber(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isInteger(column) || AppServiceHelpers.isDouble(column);\n    }\n\n    static isScalar(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isNumber(column) || AppServiceHelpers.isDate(column) || AppServiceHelpers.isBoolean(column);\n    }\n\n    static isSortable(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isString(column) || AppServiceHelpers.isScalar(column) ||\n            (AppServiceHelpers.isCsv(column) && !!column && ((column.eTypeModifier & EngineTypeModifier.l) === EngineTypeModifier.l));\n    }\n}\n","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n/**\n * A service to manage JWT and CSRF tokens. The methods of this service\n * can be called before the authentication process has completed\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class TokenService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Retrieve the CSRF token corresponding to the current JWT cookie\n     * which should accompany the request. This method is called by\n     * [AuthenticationService.autoAuthenticate]{@link AuthenticationService#autoAuthenticate}\n     *\n     * @param notify `true` if any errors should be notified using the {@NotificationService}\n     */\n    getCsrfToken(notify = false): Observable<string> {\n        return this.httpClient.get<{csrfToken: string}>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"getCsrfToken\",\n                suppressErrors: !notify,\n                noUserOverride: true,\n                noAutoAuthentication: true,\n                noNotify: !notify\n            })\n        }).pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n\n    /**\n     * Delete the current JWT cookie.\n     * This method is called by [AuthenticationService.logout]{@link AuthenticationService#logout}\n     */\n    deleteWebTokenCookie(): Observable<void> {\n        return this.httpClient.get<void>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"deleteWebTokenCookie\",\n                noUserOverride: true,\n                noAutoAuthentication: true\n            })\n        });\n    }\n}\n","/* (ignored) */","const LOAD_COMPONENT_MODULE_PROVIDERS = [];\n\nexport {LOAD_COMPONENT_MODULE_PROVIDERS};\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {pluck} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Describes a Sinequa princpal\n */\nexport interface Principal {\n    id: string;\n    id2: string;\n    id3: string;\n    id4: string;\n    id5: string;\n    name: string;\n    email: string;\n    description: string;\n    longName: string;\n    userId: string;\n    fullName: string;\n    isAdministrator: boolean;\n    isDelegatedAdmin: boolean;\n    param1: string;\n    param2: string;\n    param3: string;\n    param4: string;\n    param5: string;\n    param6: string;\n    param7: string;\n    param8: string;\n    param9: string;\n    param10: string;\n}\n\nexport interface PrincipalUserInfo {\n    id: string;\n    userId: string;\n    name: string;\n    fullName: string;\n    longName: string;\n    email: string;\n    isUser: string;\n    isGroup: string;\n}\n\nexport interface PrincipalParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    isUser?: boolean;   // true\n    isGroup?: boolean;  // true\n    search?: string;    // search by name, fullname or email\n\n}\n\nexport interface PrincipalUserIdsParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    userIds: string[];\n}\n\n/**\n * A base event from which all events that can be issued by the {@link PrincipalWebService} are derived\n */\nexport interface PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [principal]{@link PrincipalWebService#principal} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface PrincipalChangedEvent extends PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the principal web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PrincipalWebService extends HttpService implements OnDestroy {\n    private _principal: Principal | undefined;\n    private _events = new Subject<PrincipalChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<PrincipalChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link Principal}\n     */\n    get principal(): Principal | undefined {\n        return this._principal;\n    }\n\n    /**\n     * Sets the current {@link Principal} and issues the \"changed\" event\n     */\n    set principal(value: Principal | undefined) {\n        this._principal = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    /**\n     * Gets the list of user info (user or group)\n     *\n     * @param params query params to specify the search\n     * @returns list of user info\n     */\n    list(params?: PrincipalParams): Observable<(PrincipalUserInfo | undefined)[]> {\n        return this.httpClient.get<(PrincipalUserInfo | undefined)[]>(this.makeUrl(\"principal/list\"), {\n            params: this.makeParams({...params})\n        });\n    }\n\n    userId(userId: string): Observable<Partial<PrincipalUserInfo>> {\n        return this.httpClient.get<Partial<PrincipalUserInfo>>(this.makeUrl(`principal/userId/${userId}`));\n    }\n\n    userIds(params?: PrincipalUserIdsParams): Observable<Partial<PrincipalUserInfo[]>> {\n        return this.httpClient.post<Partial<PrincipalUserInfo>>(this.makeUrl(\"principal/userids\"), params).pipe(\n            pluck(\"principals\")\n        );\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials\n     *\n     * @param autoAuthenticate Determines whether the {@link HttpInterceptor} should perform HTTP 401 handling\n     * for this request\n     */\n    get(autoAuthenticate = true): Observable<Principal> {\n        return this.httpClient.get<Principal>(this.makeUrl(\"principal\"), {\n            params: this.makeParams({\n                action: \"get\",\n                noAutoAuthentication: !autoAuthenticate\n            })\n        });\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials and sets the\n     * principal member\n     */\n    load(): Observable<Principal> {\n        const observable = this.get();\n        Utils.subscribe(observable,\n            (response) => {\n                this.principal = response;\n                return response;\n            },\n            (error) => {\n                console.log(\"principalService.get failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Suggestion} from \"./suggest/suggestion\";\nimport {IQuery} from \"./query/query\";\n\n/**\n * A service for calling the suggestfield web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestFieldWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields and in the context of the passed query\n     *\n     * @param text The text to match\n     * @param fields The fields for which to return suggestions\n     * @param query The query context\n     */\n    get(text: string, fields: string | string[], query?: IQuery): Observable<Suggestion[]> {\n        if (!fields) {\n            return of([]);\n        }\n        else {\n            if (!Utils.isArray(fields)) {\n                fields = [fields];\n            }\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestfield\"), {\n                app: this.appName,\n                text: text,\n                fields: fields,\n                query: query\n            }).pipe(map((value) => {\n                value.suggests.forEach(value => value.display = Utils.toSqlValue(value.display)); // because dates get automatically converted by the interceptor\n                return value.suggests;\n            }));\n            return observable;\n        }\n    }\n}","import {Component, Input} from \"@angular/core\";\n\n/**\n * A default component to be used by the {@link ValidationDirective} directive to display\n * a validation error message using {@link MessagePipe}.\n */\n@Component({\n    selector: \"sq-validation-message\",\n    template: `\n        <div class=\"sq-validation-message\">{{text | sqMessage:{values: info} }}</div>\n    `\n})\nexport class ValidationMessageComponent {\n    /**\n     * The error message text passed to the `sqMessage` pipe.\n     */\n    @Input() text: string;\n    /**\n     * The entry for the validator in a `ValidationErrors` object. This is passed\n     * as the values to the `sqMessage` pipe.\n     */\n    @Input() info: any;\n}\n","/**\n * An enumeration of keyboard code values\n */\nexport enum Keys {\n    up = 38,\n    down = 40,\n    left = 37,\n    right = 39,\n    del = 46,\n    tab = 9,\n    enter = 13,\n    esc = 27,\n    comma = 188,\n    space = 32,\n    pageUp = 33,\n    pageDown = 34,\n    home = 36,\n    end = 35,\n    backspace = 8\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpRequest, HttpHandler} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {share, tap} from \"rxjs/operators\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A helper service that overrides the standard Angular [HttpClient]{@link https://angular.io/api/common/http/HttpClient}\n * to prevent multiple subscribers from causing multiple requests to be issued and to mitigate against request flooding\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SqHttpClient extends HttpClient {\n\n    private responseCache = new Map<string, Observable<any>>();\n\n    constructor(\n        httpHandler: HttpHandler) {\n        super(httpHandler);\n    }\n\n    private getRequestHash(first: string | HttpRequest<any>, url?: string, options = {}): string {\n        // The replacer ensures that object keys are always serialized in the same order\n        const strRequest = JSON.stringify([first, url, options],\n            (key: string, value: any) => {\n                if (Utils.isObject(value) && !Utils.isIterable(value)) {\n                    return Object.keys(value).sort().reduce(\n                        (s, k) => {\n                            s[k] = value[k];\n                            return s;\n                        }, {});\n                }\n                else {\n                    return value;\n                }\n            });\n        return Utils.sha256(strRequest);\n    }\n\n    /**\n     * Overrides the standard `HttpClient.request` method to change its behavior as follows:\n     * * pipes the observable to the share operator so that only a single request is issued even if there are multiple subscribers\n     * * to mitigate request flooding, a cache of pending response observables keyed by the request thumbprint is maintained.\n     * An observable from the cache is returned if the incoming request is identical to one in the cache\n     */\n    request(first: string | HttpRequest<any>, url?: string, options = {}): Observable<any> {\n        const requestHash = this.getRequestHash(first, url, options);\n        let observable = this.responseCache.get(requestHash);\n        if (!observable) {\n            observable = super.request(first as string, url as string, options)\n                .pipe(share())\n                .pipe(tap(() => this.responseCache.delete(requestHash)));\n            this.responseCache.set(requestHash, observable);\n        }\n        return observable;\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Abbrechen\",\n            \"yes\": \"Ja\",\n            \"no\": \"Nein\",\n            \"abort\": \"Abbrechen\",\n            \"retry\": \"Wiederholen\",\n            \"ignore\": \"Ignorieren\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Bestätigen\"\n        },\n        \"prompt\": {\n            \"title\": \"Geben Sie einen Wert ein\"\n        }\n    }\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n  };\n\n  /*\n   * For easier debugging in development mode, you can import the following file\n   * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n   *\n   * This import should be commented out in production mode because it will have a negative impact\n   * on performance if an error is thrown.\n   */\n  // import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {LoadComponentDirective} from \"./load-component.directive\";\nimport {LOAD_COMPONENT_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides functionality for the dynamic loading of components based on the\n * techniques described in the [angular documentation]{@link https://angular.io/guide/dynamic-component-loader}\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        LoadComponentDirective\n    ],\n    exports: [\n        LoadComponentDirective\n    ],\n    providers: [\n        ...LOAD_COMPONENT_MODULE_PROVIDERS\n    ]\n})\nexport class LoadComponentModule {\n}\n","const APP_UTILS_MODULE_PROVIDERS = [];\n\nexport {APP_UTILS_MODULE_PROVIDERS};\n","import {NgModule, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {MODAL_CONFIRM} from \"./modal.service\";\nimport {MODAL_PROMPT} from \"./modal.service\";\n\nimport {MODAL_MODULE_PROVIDERS} from \"./module.providers\";\n\nimport {Confirm} from \"./confirm.component\";\nimport {Prompt} from './prompt.component';\n\n/**\n * This module contains an implementation of a [modal dialog service]{@link ModalService} which can be extended\n * to support UI frameworks such as Bootstrap and Material Design. It uses the `Overlay` and `Portal` funcionality\n * provided by the [Angular CDK]{@link https://material.angular.io/cdk/categories} library.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        IntlModule,\n        ValidationModule,\n    ],\n    declarations: [\n        Confirm,    // Default confirm\n        Prompt\n    ],\n    exports: [\n    ],\n    providers: [\n        ...MODAL_MODULE_PROVIDERS\n    ]\n})\nexport class ModalModule {\n    static forRoot(confirmModal: Type<any> = Confirm, promptModal: Type<any> = Prompt): ModuleWithProviders<ModalModule> {\n        return {\n            ngModule: ModalModule,\n            providers: [\n                {provide: MODAL_CONFIRM, useValue: confirmModal},\n                {provide: MODAL_PROMPT, useValue: promptModal},\n            ]\n        };\n    }\n}\n","import {NgModule, APP_INITIALIZER, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {IntlService, LOCALES_CONFIG, LocalesConfig} from \"./intl.service\";\nimport {MessagePipe} from \"./message.pipe\";\nimport {INTL_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * An APP_INITIALIZER factory function for initialising the {@link IntlService} before any UI is displayed\n */\nexport function IntlInitializer(intlService: IntlService): () => Promise<string> {\n    const init = () => intlService.init().toPromise();\n    return init;\n}\n\n/**\n * This module contains core internationalization functionality for the formatting of numbers, dates and strings.\n * It is based on the industry standard\n * [Intl]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl} API\n * and an implementation of the ICU Message syntax provided by [FormatJS]{@link https://formatjs.io/}.\n *\n * The module provides mechanisms for the definition and loading of locales which can be extended with library specific\n * locale information. By default, locales contain support for `Moment.js` and `D3.js`.\n *\n * The module can be initialized by importing it using the `forRoot` static method or otherwise providing the\n * {@link LOCALES_CONFIG} injection token\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        MessagePipe\n    ],\n    exports: [\n        MessagePipe\n    ],\n    providers: [\n        {provide: APP_INITIALIZER, useFactory: IntlInitializer, deps: [IntlService], multi: true},\n        ...INTL_MODULE_PROVIDERS\n    ]\n})\nexport class IntlModule {\n    static forRoot(localeConfig: Type<LocalesConfig>): ModuleWithProviders<IntlModule> {\n        return {\n            ngModule: IntlModule,\n            providers: [\n                {provide: LOCALES_CONFIG, useClass: localeConfig},\n            ]\n        };\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {PopupService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's popup handling as it doesn't work with SAML + IE11 because\n * of a double redirection.\n * The initial request is to Sinequa which redirects to the authentication provider.\n * On successful authentication, the authentication provider redirects back\n * to Sinequa to perform the login.\n * In IE the initial redirection causes the popup window to be reported as \"closed\"\n * which breaks the process.\n * So, override ng2-ui-auth's PopupService and do the inital request to get the\n * redirect url outside of the popup\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationPopupService extends PopupService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient) {\n        super();\n    }\n\n    open(url: string, options: any/*IOauth2Options | IOauth1Options*/, cordova: boolean | undefined): Observable<Window> {\n        if (Utils.startsWith(url, this.startConfig.apiPath!)) {\n            return this.httpClient.get<{redirectUrl: string}>(url, {\n                params: Utils.makeHttpParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true,\n                    tokenInCookie: true,\n                    loginInPopup: true\n                })\n            }).pipe(flatMap((ret) => {\n                return super.open(ret.redirectUrl, options, cordova);\n            }));\n        }\n        return super.open(url, options, cordova);\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from \"./http.service\";\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { Record } from \"./query.web.service\";\n\n/**\n * A service for calling the similardocuments web service\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class SimilarDocumentsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets an array of documents (records) similar to the passed document\n     *\n     * @param sourceDocumentId The id of the document for which to retrieve similar documents\n     * @param queryName The name of the query\n     */\n    public get(sourceDocumentId: string, queryName: string): Observable<Record[]> {\n      return this.httpClient.post<{data: Record[]}>(this.makeUrl(\"similardocuments\"),\n        {\n          app: this.appName,\n          sourceDocumentId,\n          query: {\n            name: queryName\n          }\n        }).pipe(map((response) => response.data));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {NotificationsService, Notification, NotificationType} from \"./notifications.service\";\n\n/**\n * An `HttpInterceptor` to process notifications attached to the response body\n * in the `$notifications` member.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsInterceptor implements HttpInterceptor {\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        private notificationsService: NotificationsService) {\n    }\n\n    protected shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    protected processNotifications(notifications: Notification[] | undefined) {\n        if (Utils.isArray(notifications)) {\n            for (const notification of notifications) {\n                let  type = notification.type;\n                if (Utils.isUndefined(type)) {\n                    type = NotificationType.Info;\n                }\n                const text = notification.text;\n                if (text) {\n                    const params = notification.params;\n                    const title = notification.title;\n                    let autoClose = notification.autoClose;\n                    if (Utils.isUndefined(autoClose)) {\n                        autoClose = (type === NotificationType.Success) || (type === NotificationType.Info);\n                    }\n                    this.notificationsService.notify(type, text, params, title, autoClose);\n                }\n            }\n        }\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url)) {\n            return next.handle(request);\n        }\n        return next.handle(request).pipe(\n            tap(event => {\n                if (event instanceof HttpResponse) {\n                    if (request.responseType === \"json\" && Utils.isObject(event.body)) {\n                        this.processNotifications(event.body.$notifications);\n                    }\n                }\n            }));\n   }\n}\n","import {Type} from \"@angular/core\";\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subject, Observable, of} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ModalResult} from \"./modal.service\";\n\n/**\n * Describes the event raised by an {@link IModalRef} instance before a modal dialog is closed.\n */\nexport interface CheckCloseEvent {\n    /**\n     * The result passed to the [IModalRef.close]{@link IModalRef#close} method.\n     */\n    result: ModalResult;\n    /**\n     * A flag that can be set by the event receiver to indicate that the closing of the modal dialog\n     * should be cancelled.\n     */\n    cancelled?: Observable<boolean>;\n}\n\n/**\n * Describes the object returned by the [ModalService.openRef]{@link ModalService.openRef} method\n * to maintain a reference to the opened modal.\n */\nexport interface IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent>;\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult>;\n    /**\n     * A stream that emits after the referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult>;\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result: ModalResult);\n}\n\n/**\n * An implementation of the {@link IModalRef} interface.\n */\nexport class ModalRef implements IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A flag indicating whether the referenced modal has been submitted.\n     */\n    submitted: boolean;\n    private _checkClose = new Subject<CheckCloseEvent>();\n    private _beforeClosed = new Subject<ModalResult>();\n    private _afterClosed = new Subject<ModalResult>();\n    private formElement: HTMLFormElement | undefined;\n\n    constructor(private overlayRef: OverlayRef) {\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent> {\n        return this._checkClose.asObservable();\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * A stream that emits aftervthe referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result = ModalResult.Cancel) {\n        // Delay to allow submit handling\n        Utils.delay().then(() => {\n            const checkCloseEvent: CheckCloseEvent = { result };\n            this._checkClose.next(checkCloseEvent);\n            (checkCloseEvent.cancelled || of(false)).subscribe(\n                (cancelled) => {\n                    if (!cancelled) {\n                        this._checkClose.complete();\n                        this._beforeClosed.next(result);\n                        this._beforeClosed.complete();\n                        this.removeSubmitListener();\n                        this.overlayRef.detachBackdrop();\n                        this.overlayRef.dispose();\n                        this.componentInstance = undefined;\n                        this._afterClosed.next(result);\n                        this._afterClosed.complete();\n                    }\n                }\n            );\n        });\n    }\n\n    private submitListener = (event) => {\n        this.submitted = true;\n        event.preventDefault();\n        return false;\n    }\n\n    /**\n     * Disable the standard browser submit handling on any HTML form in the modal component.\n     */\n    disableSubmit() {\n        if (!this.formElement) {\n            const formElement = this.overlayRef.overlayElement.querySelector(\"form\");\n            if (formElement) {\n                this.formElement = formElement;\n                this.formElement.addEventListener(\"submit\", this.submitListener);\n            }\n        }\n    }\n\n    private removeSubmitListener() {\n        if (this.formElement) {\n            this.formElement.removeEventListener(\"submit\", this.submitListener);\n            this.formElement = undefined;\n        }\n    }\n}\n","export * from \"./notifications.service\";\nexport * from \"./notifications.interceptor\";\nexport * from \"./notification.module\";\n","import {Injectable, Inject, InjectionToken, Optional} from \"@angular/core\";\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpEvent, HttpErrorResponse, HttpParams, HttpResponse\n} from \"@angular/common/http\";\nimport {from, Observable, throwError} from \"rxjs\";\nimport {catchError, map, switchMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {LoginService} from \"./login.service\";\nimport {AuthenticationService} from \"./authentication.service\";\n\nexport type HttpRequestInitializer = (request: HttpRequest<any>) => boolean;\nexport const HTTP_REQUEST_INITIALIZERS = new InjectionToken<HttpRequestInitializer[]>(\"HTTP_REQUEST_INITIALIZERS\");\n\ntype Options = {noAutoAuthentication: boolean, noUserOverride: boolean, hadCredentials: boolean, userOverrideActive: boolean};\n\n/**\n * An `HttpInterceptor` to handle `HTTP 401 unauthorized` error responses by calling\n * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles\n * the `sinequa-jwt-refresh` header set when auto refreshing of JWT is configured in\n * the Sinequa administration console.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginInterceptor implements HttpInterceptor {\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        @Optional() @Inject(HTTP_REQUEST_INITIALIZERS) private requestInitializers: HttpRequestInitializer[],\n        private notificationsService: NotificationsService,\n        private loginService: LoginService,\n        private authService: AuthenticationService) {}\n\n    private processRequestInitializers(request: HttpRequest<any>) {\n        if (this.requestInitializers) {\n            for (const requestInitializer of this.requestInitializers) {\n                if (!requestInitializer(request)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private notifyError(error: any) {\n        let message;\n        const title = \"msg#error.serverError\";\n        if (error instanceof HttpErrorResponse) {\n            const response = error;\n            try {\n                let data = response.error;\n                if (Utils.isString(data)) {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (exception) {\n                    }\n                }\n                if (data && data.errorMessage) {\n                    message = data.errorMessage;\n                    if (data.errorCodeText) {\n                        message = `${message} (${data.errorCodeText})`;\n                    }\n                    else if (data.errorCode) {\n                        message = `${message} (${data.errorCode})`;\n                    }\n                }\n            }\n            catch (exception) {\n            }\n            if (!message) {\n                if (response.status === 200) {\n                    message = \"msg#error.responseLoadFailure\";\n                }\n                else if (response.statusText) {\n                    message = `${response.statusText} (${response.status})`;\n                }\n                else {\n                    message = `HTTP error: ${response.status}`;\n                }\n            }\n        }\n        else if (SqError.is(error)) {\n            message = error.message;\n        }\n        else {\n            message = (error + \"\") || \"msg#error.unknownError\";\n        }\n        this.notificationsService.error(message, undefined, title);\n    }\n\n    private getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        return this.loginService.getCredentials(response, acceptCurrent)\n            .catch((error) => {\n                if (SqError.is(error, SqErrorCode.processedCredentialsError)) {\n                    return this.getCredentials(response, acceptCurrent);\n                }\n                throw error;\n            });\n    }\n\n    /**\n     * Handles `HTTP 401 unauthorized errors responses by calling\n     * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles auto\n     * refreshing of JWT by processing the `sinequa-jwt-refresh` header. The JWT cookie itself\n     * is updated by a `Set-Cookie` header in the response. There are a number of flags that\n     * can be set in the request parameters which will be removed before the request is actually\n     * sent:\n     * * `noAutoAuthentication` - set to bypass the `HTTP 401` handling\n     * * `noUserOverride` - set to not add the current user override to the request\n     * * `noNotify` - set to not notify errors using the {@link NotificationService}\n     *\n     * @param request The intercepted request\n     * @param next The next interceptor in the chain\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url) || request.params.has(\"noIntercept\")) {\n            return next.handle(request);\n        }\n\n        let config = {headers: request.headers, params: request.params};\n\n        const options: Options = {\n            noAutoAuthentication: Utils.isTrue(config.params.get(\"noAutoAuthentication\")) || false,\n            noUserOverride: Utils.isTrue(config.params.get(\"noUserOverride\")) || false,\n            hadCredentials: this.authService.haveCredentials,\n            userOverrideActive: false\n        }\n\n        const noNotify = Utils.isTrue(config.params.get(\"noNotify\")) || false;\n\n        config.params = config.params.delete(\"noAutoAuthentication\");\n        config.params = config.params.delete(\"noUserOverride\");\n        config.params = config.params.delete(\"noNotify\");\n\n        config = this.authService.addAuthentication(config);\n\n        if (this.authService.userOverrideActive && !options.noUserOverride) {\n            options.userOverrideActive = true;\n            config.headers = this.authService.addUserOverride(config);\n        }\n\n        config.headers = config.headers.set(\"sinequa-force-camel-case\", \"true\");\n\n        if (this.isJsonable(request.body)) {\n            this.processRequestInitializers(request);\n        }\n\n        this.notificationsService.enter(\"network\");\n        \n        const _request = request.clone({\n            headers: config.headers,\n            params: config.params,\n            body: request.body,\n            withCredentials: true\n        });\n\n        return next.handle(_request).pipe(\n            catchError((error, caught) => {\n                this.notificationsService.leave(\"network\");\n                if (error instanceof HttpErrorResponse) {\n                    switch (error.status) {\n                        case 401: {\n                            return this.handle401Error(error, _request, next, options, caught);\n                        }\n                    }\n                }\n                if (!noNotify) {\n                    this.notifyError(error);\n                }\n                return throwError(error);\n            }),\n            map((event) => {\n                if (event instanceof HttpResponse) {\n                    this.notificationsService.leave(\"network\");\n                    this.authService.updateAuthentication(event);\n                }\n                return event;\n            })\n        );\n    }\n\n    private handle401Error(err: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler, options: Options, caught: Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\n        if (!options.noAutoAuthentication) {\n            if (options.userOverrideActive) {\n                if (this.authService.userOverrideActive) {\n                    this.authService.deactivateUserOverride();\n                    this.authService.userOverrideFailed = true;\n                    this.notificationsService.error(\"msg#error.userOverrideFailure\");\n                }\n                return throwError(err);\n            }\n\n            return from(this.getCredentials(err, !options.hadCredentials))\n                .pipe(\n                    switchMap(value => {\n                        const {headers} = this.authService.addAuthentication(req);\n                        return next.handle(req.clone({headers}));\n                    }),\n                    catchError(err => \n                        // in case of an Http error, 'caught' must be returned to be catched by the interceptor\n                        err instanceof HttpErrorResponse ? caught : throwError(err)\n                    ));\n        }\n\n        return throwError(err);\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Cancel\",\n            \"yes\": \"Yes\",\n            \"no\": \"No\",\n            \"abort\": \"Abort\",\n            \"retry\": \"Retry\",\n            \"ignore\": \"Ignore\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirm\"\n        },\n\n        \"prompt\": {\n            \"title\": \"Enter a value\"\n        }\n    }\n};\n","export * from \"./public-api\";\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport { IntlService } from \"@sinequa/core/intl\";\nimport {Utils} from \"@sinequa/core/base\";\n\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { IQuery } from './query/query';\n\n/**\n * Describes a single sponsored link\n */\nexport interface LinkResult {\n    id: string;\n    title: string;\n    url: string;\n    icon: string;\n    thumbnail: string;\n    tooltip: string;\n    summary: string;\n    rank: number;\n    relevance: number;\n}\n\n/**\n * Describes a set of sponsored links\n */\nexport interface LinksResults {\n    sql: string[];\n    links: LinkResult[];\n}\n\n/**\n * A service for calling the query.links web service.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SponsoredLinksWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Queries the server for sponsored links.\n     *\n     * @param query The query information.\n     * @param webService The web service configuration.\n     */\n    getLinks(query: IQuery, webService: string): Observable<LinksResults> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n\n        const url = this.makeUrl(\"query.links\");\n        const observable = this.httpClient.post<LinksResults>(url, {\n            app: this.appName,\n            webservice: webService,\n            query,\n            locale: this.intlService.currentLocale.name\n        });\n\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"SponsoredLinksService.getLinks success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"SponsoredLinksService.getLinks failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, ViewContainerRef, ComponentRef, Type, ComponentFactory, ComponentFactoryResolver, ApplicationRef,\n    Injector, SimpleChanges, SimpleChange, EventEmitter} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the options that can be passed to [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadComponentOptions {\n    /**\n     * The type of the component to load\n     */\n    component: Type<any>;\n    /**\n     * The initial values for the component's `@Input` decorated properties\n     */\n    inputs?: MapOf<any>;\n    /**\n     * The handlers for the component's `@Output` decorated events\n     */\n    outputs?: MapOf<any>;\n    /**\n     * The index at which to insert the loaded component's host view into the container.\n     * If not specified, appends the new view as the last entry.\n     * See [ViewContainerRef.createComponent]{@link https://angular.io/api/core/ViewContainerRef#createComponent}\n     */\n    index?: number;\n}\n\n/**\n * Describes the object returned by [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadedComponent {\n    /**\n     * The loaded component instance\n     */\n    componentRef: ComponentRef<any>;\n    /**\n     * The subscriptions made to the component's output events\n     */\n    subscriptions?: Subscription;\n}\n\n/**\n * This service provides methods to dynamically load and unload an angular component from its type.\n * The component's initial inputs and outputs are respected and the first call to the component's\n * `ngOnChanges` method is made.\n * Changes to the inputs and outputs can be made by calling {@link #bindComponent} which will call\n * the component's `ngOnChanges` method again\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoadComponentService {\n\n    // A cache of resolved component factories\n    private factories = new Map<Type<any>, ComponentFactory<any>>();\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private applicationRef: ApplicationRef) {\n    }\n\n    private _bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent, initialLoad: boolean) {\n        if (!initialLoad) {\n            this.unbindComponent(loadedComponent);\n        }\n        const ngOnChanges: (changes: SimpleChanges) => void = loadedComponent.componentRef.instance.ngOnChanges;\n        let simpleChanges: SimpleChanges | undefined;\n        const makeSimpleChanges = Utils.isFunction(ngOnChanges) && !!options.inputs;\n        if (!!options.inputs) {\n            // Assign inputs and generate SimpleChanges if required\n            Object.keys(options.inputs).forEach(name => {\n                if (makeSimpleChanges) {\n                    const previousValue = initialLoad ? undefined : loadedComponent.componentRef.instance[name];\n                    const currentValue = options.inputs![name];\n                    if (initialLoad || currentValue !== previousValue) {\n                        if (!simpleChanges) {\n                            simpleChanges = {};\n                        }\n                        simpleChanges[name] = new SimpleChange(previousValue, currentValue, initialLoad);\n                    }\n                }\n                loadedComponent.componentRef.instance[name] = options.inputs![name];\n            });\n        }\n        if (!!options.outputs) {\n            Object.keys(options.outputs).forEach(name => {\n                const eventEmitter: EventEmitter<any> = loadedComponent.componentRef.instance[name];\n                if (eventEmitter) {\n                    const subscription = eventEmitter.subscribe(options.outputs![name]);\n                    if (!loadedComponent.subscriptions) {\n                        loadedComponent.subscriptions = subscription;\n                    }\n                    else {\n                        loadedComponent.subscriptions.add(subscription);\n                    }\n                }\n            });\n        }\n        if (simpleChanges) {\n            ngOnChanges.call(loadedComponent.componentRef.instance, simpleChanges);\n        }\n    }\n\n    /**\n     * Bind a component's input and output properties according to the passed options. Generate a\n     * call to the component's `ngOnChanges` method if the inputs have changed since the last call.\n     * If the component has been previously bound it is first unbound by calling {@link #unbindComponent}\n     * which will unsubscribe the component's outputs\n     *\n     * @param options Specify the inputs and outputs for the component\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    public bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent) {\n        return this._bindComponent(options, loadedComponent, false);\n    }\n\n    /**\n     * Unbind a previously bound dynamically loaded component. Subscriptions to the component's\n     * outputs are unsubscribed\n     *\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    unbindComponent(loadedComponent: LoadedComponent) {\n        if (!!loadedComponent.subscriptions) {\n            loadedComponent.subscriptions.unsubscribe();\n            loadedComponent.subscriptions = undefined;\n        }\n    }\n\n    /**\n     * Dynamically load a component from its type. The component's inputs and outputs will be initialized\n     * by calling {@link #bindComponent}.\n     *\n     * @param options The options containing the component to load and its inputs and outputs\n     * @param viewContainerRef Specifies where the loaded component should be attached. If not specified then the\n     * loaded component is inserted before the application component\n     * @param injector Overrides the injector to use as the parent for the component. By default this will be\n     * the injector held on the `viewContainerRef`\n     */\n    loadComponent<T>(options: LoadComponentOptions, viewContainerRef?: ViewContainerRef, injector?: Injector): LoadedComponent {\n        let componentRef: ComponentRef<T>;\n        let factory = this.factories.get(options.component);\n        if (!factory) {\n            factory = this.componentFactoryResolver.resolveComponentFactory(options.component);\n        }\n        if (!viewContainerRef) {\n            const appElement: Element = this.applicationRef.components[0].location.nativeElement;\n            const injector1 = this.applicationRef.components[0].injector;\n            componentRef = factory.create(injector1, [[appElement]]);\n            this.applicationRef.attachView(componentRef.hostView);\n            if (appElement.parentElement) {\n                appElement.parentElement.insertBefore(componentRef.location.nativeElement, appElement.nextSibling);\n            }\n        }\n        else {\n            if (!injector) {\n                injector = viewContainerRef.injector;\n            }\n            const index = !Utils.isEmpty(options.index) ? options.index : undefined;\n            componentRef = viewContainerRef.createComponent(factory, index, injector, []);\n        }\n        const loadedComponent: LoadedComponent = {\n            componentRef\n        };\n        this._bindComponent(options, loadedComponent, true);\n        loadedComponent.componentRef.changeDetectorRef.detectChanges();\n        return loadedComponent;\n    }\n\n    /**\n     * Unload a dynamically loaded component. It is unbound prior to being destroyed\n     *\n     * @param component A loaded component\n     */\n    unloadComponent(component: LoadedComponent) {\n        if (!!component) {\n            this.unbindComponent(component);\n            component.componentRef.destroy();\n        }\n    }\n}\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date} à {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {vrai} other {faux}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \" : \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} o\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} Ko\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} Mo\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} Go\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} To\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} Po\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Erreur de serveur\",\n        \"loginCancelled\": \"Connexion annulée\",\n        \"processedCredentialsError\": \"Impossible d'obtenir les informations d'identification\",\n        \"autoLoginError\": \"Echec de la connexion\",\n        \"principalSwitched\": \"L'utilisateur connecté a été modifié\",\n        \"userOverrideFailure\": \"Echec de surchargement de l'utilisateur\",\n        \"responseLoadFailure\": \"Echec de chargement de la réponse\",\n        \"unknownError\": \"Erreur inconnue\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabe\",\n        \"da\": \"Danois\",\n        \"de\": \"Allemand\",\n        \"el\": \"Grec\",\n        \"en\": \"Anglais\",\n        \"es\": \"Espagnol\",\n        \"fi\": \"Finlandais\",\n        \"fr\": \"Français\",\n        \"it\": \"Italien\",\n        \"ja\": \"Japonais\",\n        \"ko\": \"Coréen\",\n        \"nl\": \"Néerlandais\",\n        \"no\": \"Norvégien\",\n        \"pl\": \"Polonais\",\n        \"pt\": \"Portugais\",\n        \"ro\": \"Roumain\",\n        \"ru\": \"Russe\",\n        \"sv\": \"Suédois\",\n        \"th\": \"Thaïlandais\",\n        \"zh\": \"Chinois traditionnel\",\n        \"zs\": \"Chinois simplifié\",\n        \"zz\": \"Inconnu\"\n    },\n};\n","export class IteratorAdaptor<T,B> implements IterableIterator<T> {\n    readonly return?: (value?: any) => IteratorResult<T>;\n    readonly throw?: (error?: any) => IteratorResult<T>;\n\n    constructor(private base: Iterator<B>, private adaptor: (b: B) => T) {\n        this.return = (base.return) ? (v) => this.translate(this.base.return!(v)) : undefined;\n        this.throw  = (base.throw)  ? (e) => this.translate(this.base.throw!(e))  : undefined;\n    }\n\n    static forIterable<B, T>(iterable: Iterable<B>, adaptor: (b: B) => T): IterableIterator<T> {\n        /*if (iterable === undefined) {\n            return undefined;\n        }*/\n\n        return new IteratorAdaptor<T,B>(\n            iterable[Symbol.iterator](),\n            adaptor\n        );\n    }\n\n    private translate(result: IteratorResult<B>): IteratorResult<T> {\n        if (result.done) {\n            return {\n                done: result.done,\n                value: (result.done && result.value === undefined) ? undefined : this.adaptor(result.value)\n            };\n        }\n        else {\n            return {\n                value: this.adaptor(result.value)\n            };\n        }\n    }\n\n    next(value?: any)  { return this.translate(this.base.next(value)); }\n\n    [Symbol.iterator](): IterableIterator<T> { return this; }\n}\n","import {HttpClientModule} from \"@angular/common/http\";\n\nimport {NgModule, ModuleWithProviders, APP_INITIALIZER} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\n// Intl is required by various web services\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\n// StartConfig\nimport {StartConfigWebService, START_CONFIG, StartConfig} from \"./start-config.web.service\";\n\nimport {WEB_SERVICES_MODULE_PROVIDERS} from \"./module.providers\";\n\n// Used to ensure that the StartConfigWebService is instantiated\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<void> {\n    const init = () => Promise.resolve();\n    return init;\n}\n\n/**\n * This module implements client services for the Sinequa web service APIs\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BaseModule,\n        IntlModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        // Ensure that the StartConfigWebService is instantiated so StartConfig is initialized\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n        ...WEB_SERVICES_MODULE_PROVIDERS\n    ]\n})\nexport class WebServicesModule {\n    /**\n     * Configures the module with a start configuration\n     *\n     * @param startConfig The start configuration object\n     *\n     * @returns The configured module\n     */\n    static forRoot(startConfig: StartConfig) : ModuleWithProviders<WebServicesModule> {\n        return {\n            ngModule: WebServicesModule,\n            providers: [\n                // Provide START_CONFIG\n                {provide: START_CONFIG, useValue: startConfig},\n            ]\n        };\n    }\n}","export * from \"./config/ccapp\";\n\nexport * from \"./query/query\";\nexport * from \"./suggest/suggestion\";\n\nexport * from \"./app.web.service\";\nexport * from \"./audit.web.service\";\nexport * from \"./dataset.web.service\";\nexport * from \"./download.web.service\";\nexport * from \"./http-client\";\nexport * from \"./http.service\";\nexport * from \"./json-method-plugin.web.service\";\nexport * from \"./labels.web.service\";\nexport * from \"./preview.web.service\";\nexport * from \"./principal.web.service\";\nexport * from \"./query-export.web.service\";\nexport * from \"./query.web.service\";\nexport * from \"./recent-queries.web.service\";\nexport * from \"./rfm.web.service\";\nexport * from \"./similar-documents.web.service\";\nexport * from './sponsored-links.web.service';\nexport * from \"./start-config.web.service\";\nexport * from \"./suggest-field.web.service\";\nexport * from \"./suggest-query.web.service\";\nexport * from \"./user-ratings.web.service\";\nexport * from \"./user-settings.web.service\";\nexport * from \"./queryintent.service\";\nexport * from \"./web-services.module\";\n","import {NgModule} from \"@angular/core\";\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {WebServicesModule} from \"@sinequa/core/web-services\";\n\nimport {APP_UTILS_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module contains a utility {@link AppService} for managing the configuration of a Sinequa SBA and a {@link FormatService}\n * for handling the formatting and parsing of Sinequa field values. It also contains an implementation of a {@link Query} class\n * as well as classes for manipulating Sinequa fielded search expressions.\n *\n * The {@link AuditInterceptor} in this module should be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        BaseModule,\n        IntlModule,\n        WebServicesModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        ...APP_UTILS_MODULE_PROVIDERS\n    ]\n})\nexport class AppUtilsModule {\n}\n","import \"hammerjs\";\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {preserveWhitespaces: true})\n    .catch(err => console.error(err));\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, EMPTY} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {Results, RFMData} from \"./query.web.service\";\n\n/**\n * A service for calling the search.rfm web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RfmWebService extends HttpService {\n    private static readonly endpoint = \"search.rfm\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get RFM data for a set of results\n     *\n     * @param rfm The name of the RFM\n     * @param results The results for which to retrieve RFM data\n     */\n    getRfmData(rfm: string, results: Results): Observable<MapOf<RFMData>> {\n        const ids: string[] = [];\n        for (const record of results.records) {\n            if (!!record.flags && record.flags.indexOf(\"r\") !== -1) {\n                ids.push(record.id);\n            }\n        }\n        if (ids.length === 0) {\n            return EMPTY;\n        }\n        const data = {\n            rfm,\n            queryHash: results.rfmQueryHash,\n            ids\n        };\n        const observable = this.httpClient.post<MapOf<RFMData>>(this.makeUrl(RfmWebService.endpoint), data);\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"rfmService.getRfmData failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Directive, Input, OnInit, DoCheck, InjectionToken, Type, Inject, ViewContainerRef} from \"@angular/core\";\nimport {FormGroup, AbstractControl} from \"@angular/forms\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {LoadComponentService, LoadedComponent} from \"@sinequa/core/load-component\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * Describes the options that can be passed to {@link ValidationDirective}.\n */\nexport interface ValidationOptions {\n    /**\n     * The `FormGroup` container.\n     */\n    form: FormGroup;\n    /**\n     * Identifies the control to validate. Defaults to the value of the `formControlName`\n     * attribute on the element to which the `ValidationDirective` is attached.\n     */\n    controlName?: string;\n    /**\n     * The class name to set on the element if validation passes. Defaults to `is-valid`.\n     */\n    validClass?: string;\n    /**\n     * The class name to set on the element if validation fails. Defaults to `is-invalid`.\n     */\n    invalidClass?: string;\n    /**\n     * The selector to identify children of the element to which to also apply the validity\n     * classes. Defaults to `.form-control`. Set to `null` to not select any children.\n     */\n    childSelector?: string;\n    /**\n     * Custom error messages to use for the validators. By default the messages defined in\n     * {@link ValidationService} are used.\n     */\n    errorMessages?: MapOf<string>;\n}\n\n/**\n * An injection token that can be provided to override the component loaded by {@link ValidationDirective}\n * to display validation error messages. The default component is {@link ValidationMessageComponent}.\n */\nexport const VALIDATION_MESSAGE_COMPONENT = new InjectionToken<Type<any>>(\"VALIDATION_MESSAGE_COMPONENT\");\n\n/**\n * A directive to automatically add validity classes to the element to which it is attached. In addition,\n * when the associated `FormControl` is invalid a component is dynamically loaded after the element to display\n * the validation message.\n * The component to load can be specified by providing the {@link VALIDATION_MESSAGE_COMPONENT} injection token.\n * By default, the {@link ValidationMessageComponent} component is used.\n */\n@Directive({\n    selector: \"[sqValidation]\"\n})\nexport class ValidationDirective implements OnInit, DoCheck {\n    @Input(\"sqValidation\") options: FormGroup | ValidationOptions;\n    private element: HTMLElement;\n    private form: FormGroup;\n    private control: AbstractControl;\n    private validClass?: string;\n    private invalidClass?: string;\n    private childSelector?: string;\n    private errorMessages?: MapOf<string>;\n    private validationMessage: LoadedComponent;\n    private active: boolean;\n    private valid: boolean;\n    private dirty: boolean;\n    private error?: string;\n    private errorInfo?: string;\n\n    constructor(\n        @Inject(VALIDATION_MESSAGE_COMPONENT) private validationMessageComponent: Type<any>,\n        private viewContainerRef: ViewContainerRef,\n        private loadComponentService: LoadComponentService,\n        private validationService: ValidationService) {\n        this.element = viewContainerRef.element.nativeElement;\n    }\n\n    ngOnInit() {\n        if (!this.options) {\n            console.log(\"Validation.ngOnInit - no options\");\n            return;\n        }\n        let controlName;\n        if (this.options instanceof FormGroup) {\n            this.form = this.options;\n        }\n        else {\n            this.form = this.options.form;\n            controlName = this.options.controlName;\n            this.validClass = this.options.validClass;\n            this.invalidClass = this.options.invalidClass;\n            this.childSelector = this.options.childSelector;\n            this.errorMessages = this.options.errorMessages;\n        }\n        if (!this.form) {\n            console.log(\"Validation.ngOnInit - no form model\");\n            return;\n        }\n        if (!this.form.controls) {\n            console.log(\"Validation.ngOnInit - no form controls\");\n            return;\n        }\n        if (controlName) {\n            this.control = this.form.controls[controlName];\n        }\n        else {\n            const formControlName = this.element.getAttribute(\"formControlName\");\n            if (formControlName) {\n                this.control = this.form.controls[formControlName];\n            }\n        }\n        if (!this.control) {\n            console.log(\"Validation.ngOnInit - no control\");\n            return;\n        }\n        if (!this.validClass) {\n            this.validClass = \"is-valid\";\n        }\n        if (!this.invalidClass) {\n            this.invalidClass = \"is-invalid\";\n        }\n        if (Utils.isUndefined(this.childSelector)) {\n            this.childSelector = \".form-control\";\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        this.active = true;\n        this.error = undefined;\n    }\n\n    private getFirstError(): string | undefined {\n        if (this.control.errors) {\n            return Object.keys(this.control.errors)[0];\n        }\n        return undefined;\n    }\n\n    private getErrorText(error?: string): string {\n        if (error && this.errorMessages && !!this.errorMessages[error]) {\n            return this.errorMessages[error];\n        }\n        return this.validationService.getErrorText(error);\n    }\n\n    private getErrorInfo(error?: string): any {\n        if (error && this.control.errors) {\n            return this.control.errors[error];\n        }\n        return undefined;\n    }\n\n    private setValidityClasses() {\n        const add = this.control.valid ? this.validClass : this.invalidClass;\n        const remove = this.control.valid ? this.invalidClass : this.validClass;\n        if (remove) {\n            this.element.classList.remove(remove);\n        }\n        if (add) {\n            this.element.classList.add(add);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (remove) {\n                    element.classList.remove(remove);\n                }\n                if (add) {\n                    element.classList.add(add);\n                }\n            });\n        }\n    }\n\n    private removeValidityClasses() {\n        if (this.validClass) {\n            this.element.classList.remove(this.validClass);\n        }\n        if (this.invalidClass) {\n            this.element.classList.remove(this.invalidClass);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (this.validClass) {\n                    element.classList.remove(this.validClass);\n                }\n                if (this.invalidClass) {\n                    element.classList.remove(this.invalidClass);\n                }\n            });\n        }\n    }\n\n    /**\n     * Update the validity classes on the element depending on the validity state of the\n     * associated `FormControl`. If the control is invalid then the validation message component\n     * is loaded to display an error message.\n     */\n    ngDoCheck() {\n        if (!this.active) {\n            return;\n        }\n        if (this.valid === this.control.valid && this.dirty === this.control.dirty) {\n            const firstError = this.getFirstError();\n            const errorInfo = this.getErrorInfo(firstError);\n            if (firstError === this.error && errorInfo === this.errorInfo) {\n                return;\n            }\n            this.error = firstError;\n            this.errorInfo = errorInfo;\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        if (this.control.dirty) {\n            this.setValidityClasses();\n            if (this.control.valid) {\n                if (this.validationMessage) {\n                    this.validationMessage.componentRef.instance.text = \"\";\n                }\n            }\n            else {\n                if (!this.validationMessage) {\n                    this.validationMessage =\n                        this.loadComponentService.loadComponent({component: this.validationMessageComponent}, this.viewContainerRef);\n                }\n                const error = this.getFirstError();\n                this.validationMessage.componentRef.instance.text = this.getErrorText(error);\n                this.validationMessage.componentRef.instance.info = this.getErrorInfo(error);\n            }\n        }\n        else {\n            this.removeValidityClasses();\n            if (this.validationMessage) {\n                this.validationMessage.componentRef.instance.text = \"\";\n            }\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {LoadComponentModule} from \"@sinequa/core/load-component\";\n\nimport {ValidationDirective, VALIDATION_MESSAGE_COMPONENT} from \"./validation.directive\";\nimport {ValidationErrorPipe} from \"./validation-error.pipe\";\nimport {ValidationMessageComponent} from \"./validation-message.component\";\n\nimport {VALIDATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module contains facilities for working with Angular's form validation. It provides a\n * {@link ValidationService} that works with {@link IntlService} and {@link FormatService} to\n * support locale-sensitive validators.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule,\n        AppUtilsModule,\n        IntlModule,\n        LoadComponentModule\n    ],\n    declarations: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    exports: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    providers: [\n        {provide: VALIDATION_MESSAGE_COMPONENT, useValue: ValidationMessageComponent},\n\n        ...VALIDATION_MODULE_PROVIDERS\n    ]\n})\nexport class ValidationModule {\n}\n","const LOGIN_MODULE_PROVIDERS = [];\n\nexport {LOGIN_MODULE_PROVIDERS};\n","import {Component, Inject} from \"@angular/core\";\nimport {MODAL_MODEL, ConfirmOptions, ModalButton} from \"./modal.service\";\nimport {ModalRef} from \"./modal-ref\";\n\n@Component({\n    selector: \"sq-core-confirm\",\n    template: `\n        <div style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <hr>\n            <ng-container *ngFor=\"let button of model.buttons\">\n                <button *ngIf=\"button.visible\" type=\"{{button.primary ? 'submit' : 'button'}}\"\n                    (click)=\"buttonClick(button)\">{{button.getText() | sqMessage}}</button>\n            </ng-container>\n        </div>\n    `\n})\nexport class Confirm {\n    constructor(\n        @Inject(MODAL_MODEL) public model: ConfirmOptions,\n        protected modalRef: ModalRef) {\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.confirm.title\";\n    }\n\n    buttonClick(button: ModalButton) {\n        button.click(this.modalRef);\n    }\n}\n","import {Injectable, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Notification types.\n */\nexport const enum NotificationType {\n    Success,\n    Info,\n    Warning,\n    Error,\n    Last = Error\n}\n\n/**\n * Notification visibility states.\n */\nexport const enum NotificationState {\n    Initial,\n    Showing,\n    Hidden\n}\n\n/**\n * Describes a notification object.\n */\nexport interface Notification {\n    /**\n     * The notification title.\n     */\n    title?: string;\n    /**\n     * The notification text.\n     */\n    text?: string;\n    /**\n     * Message parameters for the notification `text`.\n     */\n    params?: MapOf<any>;\n    /**\n     * Determines whether the notification should close automatically after a period.\n     * The duration is determined by a particular UI implementation.\n     */\n    autoClose?: boolean;\n    /**\n     * The notification type.\n     */\n    type?: NotificationType;\n    /**\n     * The nofification state.\n     */\n    state?: NotificationState;\n}\n\n/**\n * Describes a base notification event.\n */\nexport interface NotificationEvent {\n    /**\n     * The possible notification event types.\n     */\n    type: \"updated\" | \"data-updated\";\n}\n\n/**\n * Describes a notification \"updated\" event. This event is emitted\n * when one or more notifications are added, shown, hidden or deleted.\n */\nexport interface UpdatedEvent extends NotificationEvent {\n    type: \"updated\";\n}\n\n/**\n * Describes a data updated event. This event is emitted by the\n * [NotificationsService.set]{NotificationsService#set} method\n * is called.\n */\nexport interface DataUpdatedEvent extends NotificationEvent {\n    type: \"data-updated\";\n}\n\n/**\n * This service provides methods for managing notifications. No user interface\n * is imposed. It also manages a key-value data store. Events are emitted\n * when the notifications and data store are updated.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsService implements OnDestroy {\n    protected data: MapOf<any>;\n    /**\n     * The current notifications.\n     */\n    notifications: Notification[];\n    protected _events = new Subject<UpdatedEvent | DataUpdatedEvent>();\n    protected _notificationsStream = new Subject<Notification>();\n\n    constructor() {\n        this.data = {};\n        this.notifications = [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * Get the obervable stream of notification events.\n     */\n    get events(): Observable<UpdatedEvent | DataUpdatedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the observable stream of notifications. This will\n     * emit each time a notification is added. It will also emit\n     * `null` when notifications are deleted.\n     */\n    get notificationsStream(): Observable<Notification> {\n        return this._notificationsStream;\n    }\n\n    /**\n     * Set a value in the data store. The `data-updated` event\n     * is emitted.\n     *\n     * @param key The value's key.\n     * @param value The value.\n     */\n    set(key: string, value: any) {\n        this.data[key] = value;\n        this._events.next({type: \"data-updated\"});\n    }\n\n    /**\n     * Get a value from the data store.\n     *\n     * @param key The value's key.\n     */\n    get(key: string): any {\n        return this.data[key];\n    }\n\n    /**\n     * Increment a counter in the data store identified by the passed `key`.\n     * The intial value is 0.\n     *\n     * @param key The key for the counter.\n     */\n    enter(key: string) {\n        let value = this.data[key];\n        if (!value) {\n            value = 0;\n        }\n        value++;\n        this.set(key, value);\n    }\n\n    /**\n     * Decrement a counter in the data store identified by the passed `key`.\n     * Calls to `leave` should match calls to `enter`. If the counter becomes negative\n     * an \"underflow\" warning is emitted to the console and the counter set to 0.\n     *\n     * @param key The key for the counter.\n     */\n    leave(key: string) {\n        let value = this.data[key];\n        value--;\n        if (value < 0) {\n            console.warn(\"NotificationsService.leave underflow for:\", key);\n        }\n        if (!value || value < 0) {\n            value = 0;\n        }\n        this.set(key, value);\n    }\n\n    /**\n     * `true` if there are current notifications.\n     */\n    get haveNotifications(): boolean {\n        return this.notifications.length > 0;\n    }\n\n    /**\n     * `true` if the all current notifications are in the `Showing` state.\n     */\n    get allNotificationsShowing(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Showing) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * `true` if all current notifications are in the `Hidden` state.\n     */\n    get allNotificationsHidden(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Hidden) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the last added notification.\n     */\n    get lastNotification(): Notification | undefined {\n        if (this.notifications.length > 0) {\n            return this.notifications[this.notifications.length - 1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Add a notification. The `updated` event is emitted and the added notification\n     * is emitted on the notifications stream.\n     *\n     * @param type The notification type.\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     * @param autoClose A flag determining whether the notification should auto-close.\n     */\n    notify(type: NotificationType, text: string, params?: MapOf<any>, title?: string, autoClose?: boolean): Notification {\n        const notification: Notification = {\n            type,\n            text,\n            params,\n            title,\n            autoClose\n        };\n        // Replace the last notification if it is the same as the new one\n        const lastNotification = this.lastNotification;\n        if (lastNotification) {\n            notification.state = lastNotification.state;\n            if (Utils.equals(notification, lastNotification)) {\n                this.notifications.splice(this.notifications.length - 1, 1);\n            }\n        }\n        notification.state = NotificationState.Initial;\n        this.notifications.push(notification);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(notification);\n        return notification;\n    }\n\n    /**\n     * Add a `Success` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    success(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Success, text, params, title, true);\n    }\n\n    /**\n     * Add an `Info` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    info(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Info, text, params, title, true);\n    }\n\n    /**\n     * Add a `Warning` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    warning(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Warning, text, params, title, false);\n    }\n\n    /**\n     * Add an `Error` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    error(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Error, text, params, title, false);\n    }\n\n    /**\n     * Set the state of all notifications to `Showing`. The `updated` event is\n     * emitted.\n     */\n    showNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Showing;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Set the state of all notifications to `Hidden`. The `updated` event is\n     * emitted.\n     */\n    hideNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Hidden;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Delete all notifications. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream.\n     */\n    deleteAllNotifications() {\n        this.notifications.splice(0);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(undefined);\n    }\n\n    /**\n     * Delete the passed `notification`. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream if no notifications\n     * remain.\n     *\n     * @param notification The notification to delete.\n     */\n    deleteNotification(notification: Notification) {\n        for (let i = 0, ic = this.notifications.length; i < ic; i++) {\n            if (this.notifications[i] === notification) {\n                this.notifications.splice(i, 1);\n                this._events.next({type: \"updated\"});\n                if (this.notifications.length === 0) {\n                    this._notificationsStream.next(undefined);\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the passed `notification`. If the notification is in the\n     * `Initial` state then its state is set to `Hidden` otherwise the\n     * notification is deleted. The `updated` event is emitted.\n     *\n     * @param notification The notification to close.\n     */\n    closeNotification(notification: Notification) {\n        if (notification.state === NotificationState.Initial) {\n            notification.state = NotificationState.Hidden;\n            this._events.next({type: \"updated\"});\n        }\n        else {\n            this.deleteNotification(notification);\n        }\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {CCApp} from \"./config/ccapp\";\n\n/**\n * Defines the object returned by a call to [AppWebService.refresh]{@link AppWebService#refresh}. If the upToDate\n * member is false then the app member contains the latest version of the app configuration\n */\nexport interface CCAppRefresh {\n    upToDate: boolean;\n    app?: CCApp;\n}\n\n/**\n * This service provides methods to retrieve and refresh the configuration of an app\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppWebService extends HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig Provides the app name\n     * @param httpClient The HTTP client\n     */\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    /**\n     * Gets the app configuration for the app name\n     *\n     * @returns An observable of the app configuration\n     */\n    get(): Observable<CCApp> {\n        const observable = this.httpClient.get<CCApp>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\"\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                //console.log(\"appWebService.get success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.get failure - reason: \", error);\n                });\n        return observable;\n    }\n\n    /**\n     * Refreshes the app configuration based on a version identifier\n     *\n     * @param appVersionId The current app version id [CCApp.versionId]{@link CCApp#versionId}\n     * @param auditEvents Audit events to be recorded for this call\n     *\n     * @returns An observable of an object containing a flag indicating whether the configuration was up to date. If false\n     * then the app member of the object will be set to the new version of the configuration.\n     */\n    refresh(appVersionId: string, auditEvents?: AuditEvents): Observable<CCAppRefresh> {\n        const observable = this.httpClient.get<{upToDate: boolean, app: CCApp}>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\",\n                versionId: appVersionId,\n                $auditRecord: auditEvents\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                    //console.log(\"appWebService.refresh success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.refresh failure - reason: \", error);\n                });\n        return observable;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpHeaders, HttpParams, HttpResponse, HttpErrorResponse} from \"@angular/common/http\";\nimport {Observable, timer, of, throwError} from \"rxjs\";\nimport {share, flatMap, map, catchError} from \"rxjs/operators\";\nimport {AuthService} from \"ng2-ui-auth\";\nimport {HttpService, START_CONFIG, StartConfig, AuditWebService} from \"@sinequa/core/web-services\";\nimport {Utils, IRef, MapOf} from \"@sinequa/core/base\";\nimport {SqHttpClient} from \"@sinequa/core/web-services\";\nimport {TokenService} from \"./token.service\";\nimport {JWTService} from \"./jwt.service\";\n\ninterface Authentication {\n    csrfToken: string;\n    headers?: MapOf<string>;    // set in http headers\n    params?: MapOf<string>;     // added to query string\n}\n\n/**\n * Describes the credentials that a user would enter manually to authenticate\n */\nexport interface Credentials {\n    userName?: string;\n    password?: string;\n}\n\nconst LEGACY_PROCESSED_CREDENTIALS_KIND = 0;\n\n/**\n * Describes the object created after successful authentication. The form of this object\n * is designed to maintain compatibility with previous SBA libraries\n */\nexport interface ProcessedCredentials {\n    /**\n     * An unused \"kind\" value - always set to 0\n     */\n    kind: number;\n    /**\n     * The user name of the authenticated user\n     */\n    userName?: string;\n    /**\n     * Additional data containing the associated CSRF token that is sent with\n     * authenticated web service requests and the provider for informational\n     * purposes only. The provider will be `Sinequa` for form-based authentication\n     * and the name of the auto-login provider in the Sinequa configuration for\n     * OAuth and SAML authentication\n     */\n    data: {\n        csrfToken: string, // the web token itself is stored in the sinequa-web-token cookie\n        provider: string\n    };\n}\n\n/**\n * Describes the object used by an administrator to authenticate as another user\n */\nexport interface UserOverride {\n    /**\n     * The user name of the user to authenticate as\n     */\n    userName: string;\n    /**\n     * The Sinequa domain name containing the user\n     */\n    domain: string;\n}\n\n/**\n * Describes a JWT object\n */\nexport interface JsonWebToken {\n    header: {\n        typ: string,\n        alg: string\n    };\n    payload: {\n        iss: string,\n        iat: string,\n        exp: string,\n        sub: string,\n        hash: string\n    };\n    signature: string;\n}\n\n/**\n * A service to authenticate a user with a Sinequa server. Authentication can be automatic (OAuth/SAML), if configured in the\n * Sinequa administration, or manual where the user name and password are entered in a modal dialog box and transmitted in\n * clear text. There is also support for the ng2-ui-auth library where the authentication process occurs in a browser popup window.\n * Successful authentication results in a JWT stored in cookie along with a CSRF token which is stored in storage so it can\n * be picked up in other browser tabs.\n *\n * The service also holds information on the status of the \"override user\" administrator function\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationService extends HttpService {\n    private authentication: Authentication | undefined;\n    private storage: Storage;\n    /**\n     * A flag indicating whether an attempt to \"override user\" has failed. This is normally\n     * only set by the {@link HttpInterceptor} and tested and reset in {@link LoginService}\n     */\n    userOverrideFailed: boolean;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private tokenService: TokenService,\n        private auditService: AuditWebService,\n        private jWTService: JWTService,\n        private authService: AuthService) {\n        super(startConfig);\n        this.init();\n    }\n\n    private _userOverride: UserOverride | undefined;\n    /**\n     * Get the currrent user override, if any\n     */\n    get userOverride(): UserOverride | undefined {\n        return this._userOverride;\n    }\n\n    /**\n     * Set/unset the user override. The {@link #userOverrideActive} flag\n     * is set accordingly\n     */\n    set userOverride(value: UserOverride | undefined) {\n        this._userOverride = value;\n        if (this._userOverride) {\n            this._userOverrideActive = !!this._userOverride.userName && !!this._userOverride.domain;\n        }\n        else {\n            this._userOverrideActive = false;\n        }\n    }\n\n    private _userOverrideActive: boolean;\n\n    /**\n     * A flag indicating whether the current user override is active\n     */\n    get userOverrideActive(): boolean {\n        return this._userOverrideActive;\n    }\n\n    private _processedCredentials: ProcessedCredentials | undefined;\n    private _processedCredentialsStr: string | undefined;\n\n    /**\n     * Get the current processed credentials\n     */\n    get processedCredentials(): ProcessedCredentials | undefined {\n        return this._processedCredentials;\n    }\n\n    /**\n     * Set the current processed credentials. A stringified version\n     * is stored in either local or session storage\n     */\n    set processedCredentials(value: ProcessedCredentials | undefined) {\n        this._processedCredentials = value;\n        if (value) {\n            const newProcessedCredentialsStr = Utils.toJson(this._processedCredentials);\n            if (this._processedCredentialsStr !== newProcessedCredentialsStr) {\n                this._processedCredentialsStr = newProcessedCredentialsStr;\n                this.storage.setItem(\"sinequa-credentials\", this._processedCredentialsStr);\n            }\n        }\n        else {\n            if (this._processedCredentialsStr) {\n                this._processedCredentialsStr = undefined;\n                this.storage.removeItem(\"sinequa-credentials\");\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if an OAuth or SAML auto provider is configured\n     */\n    get autoLoginActive(): boolean {\n        return !!this.startConfig.autoOAuthProvider || !!this.startConfig.autoSAMLProvider;\n    }\n\n    /**\n     * Deactivate the current user override\n     */\n    deactivateUserOverride() {\n        this._userOverrideActive = false;\n    }\n\n    private loadCredentials() {\n        const sinequaCredentials = this.storage.getItem(\"sinequa-credentials\");\n        this._processedCredentialsStr = sinequaCredentials ? sinequaCredentials : undefined;\n        this._processedCredentials = this._processedCredentialsStr ? Utils.fromJson(this._processedCredentialsStr) : null;\n    }\n\n    private saveCredentials(value: ProcessedCredentials) {\n        this.processedCredentials = value;\n    }\n\n    private init() {\n        if (this.startConfig.authenticationStorage === \"local\") {\n            this.storage = window.localStorage;\n        }\n        else {\n            this.storage = window.sessionStorage;\n        }\n        this.loadCredentials();\n        window.addEventListener('storage', (event: StorageEvent) => {\n            if (event.storageArea === this.storage) {\n                if (!event.key) { // clear\n                    this.processedCredentials = undefined;\n                }\n                else if (event.key === \"sinequa-credentials\") {\n                    if (event.newValue !== this._processedCredentialsStr) {\n                        this.loadCredentials();\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Return `true` if `processedCredentials` exists\n     */\n    get haveCredentials(): boolean {\n        return !!this.processedCredentials;\n    }\n\n    /**\n     * Add the current authentication information to the passed `HttpHeaders` and `HttpParams`.\n     * Currently, this adds the `sinequa-csrf-token` value to the HTTP headers. Called from\n     * {@link HttpInterceptor}\n     *\n     * @param config HttpHeaders and HttpParams to be updated\n     *\n     * @returns new configuration\n     */\n    addAuthentication(config: {headers: HttpHeaders, params: HttpParams}): {headers: HttpHeaders, params: HttpParams} {\n        this.doAuthentication();\n        if (this.authentication) {\n            if (this.authentication.headers) {\n                for (const header in this.authentication.headers) {\n                    if (this.authentication.headers.hasOwnProperty(header)) {\n                        config.headers = config.headers.set(header, this.authentication.headers[header]);\n                    }\n                }\n            }\n            if (this.authentication.params) {\n                for (const param in this.authentication.params) {\n                    if (this.authentication.params.hasOwnProperty(param)) {\n                        config.params = config.params.set(param, this.authentication.params[param]);\n                    }\n                }\n            }\n        }\n        return config;\n    }\n\n    /**\n     * Update the current authentication information with information in the passed `response`.\n     * This processes the `sinequa-jwt-refresh` header which will contain an updated CSRF token\n     * to correspond to the new JWT cookie. Called from {@link HttpInterceptor}\n     *\n     * @param response An `HttpResponse`\n     */\n    updateAuthentication(response: HttpResponse<any>) {\n        const csrfToken = response.headers.get(\"sinequa-jwt-refresh\");\n        if (csrfToken) {\n            if (this.processedCredentials) {\n                if (this.processedCredentials.data.csrfToken !== csrfToken) {\n                    this.processedCredentials.data.csrfToken = csrfToken;\n                    this.saveCredentials(this.processedCredentials);\n                }\n            }\n            else {\n                this.setCsrfToken(csrfToken);\n            }\n        }\n    }\n\n    private refreshAuthentication() {\n        if (this.processedCredentials) {\n            if (!this.authentication) {\n                this.authentication = {\n                    csrfToken: this.processedCredentials.data.csrfToken\n                };\n            }\n            else {\n                this.authentication.csrfToken = this.processedCredentials.data.csrfToken;\n            }\n        }\n        else {\n            this.authentication = undefined;\n        }\n    }\n\n    private doAuthentication() {\n        this.refreshAuthentication();\n        if (this.authentication && this.authentication.csrfToken) {\n            this.authentication.headers = {\n                \"sinequa-csrf-token\": this.authentication.csrfToken\n            };\n        }\n    }\n\n    private getAuthenticateHeader(regex: RegExp, authenticationHeaders: string[], header: IRef<string>): boolean {\n        if (authenticationHeaders) {\n            for (let i = 0, ic = authenticationHeaders.length; i < ic; i++) {\n                const authenticationHeader = authenticationHeaders[i];\n                const matches = regex.exec(authenticationHeader);\n                if (matches && matches.length > 0) {\n                    const prefix = matches[0];\n                    header.value = authenticationHeader.slice(prefix.length);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Authenticate with the Sinequa server using the passed credentials. The credentials are sent\n     * in clear text. Prior to the authentication the passed `response` is checked for a\n     * `WWW-Authenticate: Bearer` header.\n     *\n     * @param credentials The credentials to authenticate with\n     * @param response The error response the reception of which initiated the call to this method\n     */\n    authenticate(\n        credentials: Credentials,\n        response: HttpErrorResponse): Promise<ProcessedCredentials | undefined> {\n        const wwwAuthenticate = response.headers.get(\"WWW-Authenticate\");\n        if (!wwwAuthenticate) {\n            console.error(\"Missing WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        const authenticateHeaders = wwwAuthenticate.split(\", \");\n        const header: IRef<string> = {value: \"\"};\n        if (!this.getAuthenticateHeader(/^Bearer ?/, authenticateHeaders, header)) {\n            console.error(\"Unexpected WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        return this.jWTService.getToken(credentials).toPromise()\n            .then((value) => {\n                return {\n                    kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                    userName: credentials.userName,\n                    data: {\n                        csrfToken: value,\n                        provider: \"Sinequa\"\n                    }\n                };\n            });\n    }\n\n    /**\n     * Remove all current authentication data. The JWT cookie\n     * is removed\n     */\n    logout() {\n        this.auditService.notifyLogout().subscribe(\n            _ => {\n                this.tokenService.deleteWebTokenCookie().subscribe()\n                this.authentication = undefined;\n                this.processedCredentials = undefined;\n            }\n        );\n    }\n\n    /**\n     * Add the current user override information to the passed headers.\n     *\n     * @param config An object containing the `HttpHeaders` to update\n     */\n    addUserOverride(config: {headers: HttpHeaders}): HttpHeaders {\n        if (this.userOverride && this.userOverrideActive) {\n            config.headers = config.headers.set(\"sinequa-override-user\", this.userOverride.userName);\n            config.headers = config.headers.set(\"sinequa-override-domain\", this.userOverride.domain);\n        }\n\n        return config.headers;\n    }\n\n    /**\n     * Initiate authentication using the ng2-ui-auth library. The authentication process will be performed\n     * in a browser popup window\n     *\n     * @param provider The name of the provider to use. This is the name configured in the Sinequa administration\n     * console\n     */\n    authenticateWithProvider(provider: string): Observable<any> {\n        // AuthService.authenticate opens a popup. On some platforms (Firefox) this is asynchronous\n        // so we add a delay (timer(0)) so the caller can create a promise from the returned observable\n        // without yielding\n        const observable = timer(0).pipe(flatMap((value) => {\n            const observable1 = this.authService.authenticate(provider, true).pipe(share());\n            Utils.subscribe(observable1,\n                (response) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    if (response) {\n                        this.processedCredentials = {\n                            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                            data: {\n                                csrfToken: response.csrfToken,\n                                provider\n                            }\n                        };\n                    }\n                });\n            return observable1;\n        }));\n        return observable;\n    }\n\n    private setCsrfToken(csrfToken: string, provider = \"Sinequa\"): boolean {\n        if (!csrfToken) {\n            return false;\n        }\n        this.processedCredentials = {\n            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n            data: {\n                csrfToken,\n                provider\n            }\n        };\n        return true;\n    }\n\n    private initiateAutoAuthentication(): boolean {\n        if (!this.startConfig.usePopupForLogin && this.autoLoginActive) {\n            let observable: Observable<{redirectUrl: string}>;\n            if (this.startConfig.autoOAuthProvider) {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.oauth\"),\n                    {\n                        action: \"getcode\",\n                        provider: this.startConfig.autoOAuthProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            else {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.saml\"),\n                    {\n                        action: \"getresponse\",\n                        provider: this.startConfig.autoSAMLProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href,\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            observable.subscribe(\n                (response) => {\n                    window.location.replace(response.redirectUrl);\n                }\n            );\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Initiate the auto-authentication process if an automatic OAuth or SAML provider is configured.\n     * The {@LoginService} calls this method at startup. First, an attempt is made to retrieve a CSRF token.\n     * If that works, then the token is set and authentication is complete. Otherwise, the initial OAuth or SAML\n     * call is made to the Sinequa server. The `redirectUrl` in the response to this call is then used to redirect\n     * the browser to continue the normal OAuth/SAML autentication flow. A successful authentiction will culminate\n     * in the SBA being loaded a second time, this method being called again and the attempt to retrieve a CSRF\n     * token succeeding because a valid JWT cookie will now be present.\n     *\n     * A CSRF token is always requested to allow automatic login if a valid web token cookie has previously been\n     * written via, for example, a login to the admin console.\n     *\n     * @returns An Observable of a boolean value which if `true` indicates that auto-authentication has been initiated.\n     */\n    autoAuthenticate(): Observable<boolean> {\n        return this.tokenService.getCsrfToken().pipe(\n            map((csrfToken) => {\n                // Token can be empty as getCsrfToken suppresses application errors (no cookie or cookie invalid)\n                // (We do this to avoid having errors in the console for normal situations.)\n                if (csrfToken) {\n                    this.setCsrfToken(csrfToken);\n                    return false;\n                }\n                else {\n                    this.initiateAutoAuthentication();\n                    return true;\n                }\n            }),\n            catchError((error) => {\n                // We should rarely have an error now as getCsrfToken\n                // suppresses the application-level ones\n                if (this.initiateAutoAuthentication()) {\n                    return throwError(error);\n                }\n                // Swallow the error and continue with non-auto login process\n                return of(false);\n            }));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\nimport {Results, Record} from \"./query.web.service\";\nimport {LinkResult} from \"./sponsored-links.web.service\";\n\n/**\n * Describes a single audit event\n */\nexport interface AuditEvent {\n    type: AuditEventType | string; // allow custom event types\n    detail?: JsonObject;\n    rfmDetail?: JsonObject;\n}\n\n/**\n * Contains an array of {@link AuditEvent} objects and an array of ML audit event records\n */\nexport interface AuditRecord {\n    auditEvents?: AuditEvent[];\n    mlAuditEvents?: any[];\n}\n\n/**\n * A composite type describing a set of AuditEvents\n */\nexport type AuditEvents = AuditEvent | AuditEvent[] | AuditRecord;\n\n/**\n * The standard audit event types\n */\nexport const enum AuditEventType {\n    // Should be in par with AuditEventType enum from AuditManager.cs\n    None = \"None\",\n\n    // WebApp event types\n    Search_FirstPage = \"Search_FirstPage\",\n    Search_Text = \"Search_Text\",\n    Search_Refine = \"Search_Refine\",\n    Search_Select_Item = \"Search_Select_Item\",\n    Search_Select_Custom = \"Search_Select_Custom\",\n    Search_Select_Concept = \"Search_Select_Concept\",\n    Search_Select_Correction = \"Search_Select_Correction\",\n    Search_GotoPage = \"Search_GotoPage\",\n    Search_GotoTab = \"Search_GotoTab\",\n    Search_DisplayResult = \"Search_DisplayResult\",\n    Search_RemoveResult = \"Search_RemoveResult\",\n    Search_RemoveAdvanced = \"Search_RemoveAdvanced\",\n    Search_SavedQuery = \"Search_SavedQuery\",\n    Search_WebService = \"Search_WebService\",\n    Search_DidYouMean_Original = \"Search_DidYouMean_Original\",\n    Search_DidYouMean_Correction = \"Search_DidYouMean_Correction\",\n    Search_ExportCSV = \"Search_ExportCSV\",\n    Search_SavedQuery_ExportCSV = \"Search_SavedQuery_ExportCSV\",\n    Search_Selection_ExportCSV = \"Search_Selection_ExportCSV\",\n    Search_AlertQuery = \"Search_AlertQuery\",\n    Search_Select_AnalyticsItem = \"Search_Select_AnalyticsItem\",\n    Search_Sort = \"Search_Sort\",\n    Search_Exit_Logout = \"Search_Exit_Logout\",\n    Search_Timeline_Usage = \"Search_Timeline_Usage\",\n    Search_AutoComplete = \"Search_Autocomplete\",\n\n    SavedQuery_Add = \"SavedQuery_Add\",\n    SavedQuery_Delete = \"SavedQuery_Delete\",\n    SavedQuery_DeleteAll = \"SavedQuery_DeleteAll\",\n    SavedQuery_Rename = \"SavedQuery_Rename\",\n\n    Alert_Edit = \"Alert_Edit\",\n    Alert_Delete = \"Alert_Delete\",\n    Alert_DeleteAll = \"Alert_DeleteAll\",\n\n    Link_Display = \"Link_Display\",\n    Link_Click = \"Link_Click\",\n\n    Basket_Add = \"Basket_Add\",\n    Basket_Delete = \"Basket_Delete\",\n    Basket_DeleteAll = \"Basket_DeleteAll\",\n    Basket_Rename = \"Basket_Rename\",\n    Basket_AddDoc = \"Basket_AddDoc\",\n    Basket_RemoveDoc = \"Basket_RemoveDoc\",\n    Basket_Open = \"Basket_Open\",\n    Basket_ExportCSV = \"Basket_ExportCSV\",\n\n    Label_Add = \"Label_Add\",\n    Label_Delete = \"Label_Delete\",\n    Label_Rename = \"Label_Rename\",\n    Label_Open = \"Label_Open\",\n    Label_AddDoc = \"Label_AddDoc\",\n    Label_RemoveDoc = \"Label_RemoveDoc\",\n    Label_ExportCSV = \"Label_ExportCSV\",\n    Label_Menu_ExportCSV = \"Label_Menu_ExportCSV\",\n\n    Rating_Set = \"Rating_Set\",\n    Rating_Delete = \"Rating_Delete\",\n\n    Doc_Preview = \"Doc_Preview\",\n    Doc_CacheHtml = \"Doc_CacheHtml\",\n    Doc_CachePdf = \"Doc_CachePdf\",\n    Doc_CacheOriginal = \"Doc_CacheOriginal\",\n    Doc_Url1 = \"Doc_Url1\",\n    Doc_Url2 = \"Doc_Url2\",\n\n    Click_ResultLink = \"Click_ResultLink\",\n    Click_ResultLink1 = \"Click_ResultLink1\",\n    Click_ResultLink2 = \"Click_ResultLink2\",\n    Click_ResultLink3 = \"Click_ResultLink3\",\n    Click_ResultLink4 = \"Click_ResultLink4\",\n    Click_ResultLink5 = \"Click_ResultLink5\",\n    Click_ResultLink6 = \"Click_ResultLink6\",\n    Click_ResultLink7 = \"Click_ResultLink7\",\n    Click_ResultLink8 = \"Click_ResultLink8\",\n    Click_ResultLink9 = \"Click_ResultLink9\",\n    Click_ResultLink10 = \"Click_ResultLink10\",\n    Click_PreviewLink1 = \"Click_PreviewLink1\",\n    Click_PreviewLink2 = \"Click_PreviewLink2\",\n    Click_PreviewLink3 = \"Click_PreviewLink3\",\n    Click_PreviewLink4 = \"Click_PreviewLink4\",\n    Click_PreviewLink5 = \"Click_PreviewLink5\",\n    Click_PreviewLink6 = \"Click_PreviewLink6\",\n    Click_PreviewLink7 = \"Click_PreviewLink7\",\n    Click_PreviewLink8 = \"Click_PreviewLink8\",\n    Click_PreviewLink9 = \"Click_PreviewLink9\",\n    Click_PreviewLink10 = \"Click_PreviewLink10\",\n\n    RFM_ClickSet = \"RFM_ClickSet\",\n    RFM_ClickReset = \"RFM_ClickReset\",\n    RFM_Like = \"RFM_Like\",\n    RFM_LikeReset = \"RFM_LikeReset\",\n    RFM_Dislike = \"RFM_Dislike\",\n    RFM_Important = \"RFM_Important\",\n    RFM_ImportantReset = \"RFM_ImportantReset\",\n    RFM_Ban = \"RFM_Ban\"\n}\n\n/**\n * A service to notify the audit manager on the Sinequa server of client-side events\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditWebService extends HttpService {\n    private static readonly endpoint = \"audit.notify\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        protected httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Notify the Sinequa server of a sponsored link event\n     *\n     * @param evt The audit event type\n     * @param sl The sponsored link\n     * @param resultId The id of the results that showed the sponsored link\n     * @param parameters Additional information\n     */\n    notifySponsoredLink(\n        evt: AuditEventType, sl: LinkResult, resultId: string,\n        parameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const detail: JsonObject = {\n            \"link-id\": sl.id,\n            rank: sl.rank || 0,\n            title: sl.title,\n            url: sl.url,\n            \"result-id\": resultId\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param doc The document (record) in question\n     * @param resultsOrId The results or resultid that contain the document\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocument(\n        evt: AuditEventType, doc: Record, resultsOrId: Results | string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        let resultId: string | null;\n        let results: Results | undefined;\n        if (Utils.isString(resultsOrId)) {\n            resultId = resultsOrId;\n        }\n        else {\n            results = resultsOrId;\n            resultId = results ? results.id : null;\n        }\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": doc.id,\n            rank: doc.rank,\n            title: doc.title,\n            source: Utils.treeFirstNode(doc.collection[0]),\n            collection: doc.collection[0],\n            \"result-id\": resultId,\n            filename: doc.filename,\n            fileext: doc.fileext,\n            index: doc.databasealias\n        };\n        if (results) {\n            detail[\"result-count\"] = results.totalRowCount;\n        }\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param id The id of the document (record) in question\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocumentById(\n        evt: AuditEventType, id: string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const collection = id.substr(0, id.indexOf(\"|\"));\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": id,\n            rank: -1,\n            source: Utils.treeFirstNode(collection),\n            collection\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify logout\n     */\n    notifyLogout() : Observable<void> {\n        const detail: JsonObject = {\n            app: this.appName,\n        };\n\n        const data: AuditEvent = {\n            type: AuditEventType.Search_Exit_Logout,\n            detail\n        };\n\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a set of audit events\n     *\n     * @param auditEvents The audit events\n     */\n    notify(auditEvents: AuditEvents): Observable<void> {\n        if (!this.startConfig.auditEnabled) {\n            return of(undefined);\n        }\n        const observable = this.httpClient.post<void>(this.makeUrl(AuditWebService.endpoint), {\n            event: AuditEventType.None,\n            app: this.appName,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"auditService.notify failure - error: \", error);\n            });\n        return observable;\n    }\n}","export * from \"./confirm.component\";\nexport * from \"./prompt.component\";\nexport * from \"./modal.module\";\nexport * from \"./modal.service\";\nexport * from \"./modal-ref\";\nexport * from \"./messages/index\";","import {Injectable, Inject} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {SqHttpClient} from \"./http-client\";\r\nimport {HttpService} from \"./http.service\";\r\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\r\nimport {IQuery} from \"./query/query\";\r\n\r\nexport interface QueryIntentResponse {\r\n    query: string;\r\n    intents: QueryIntentMatch[];\r\n}\r\n\r\nexport interface QueryIntentMatch {\r\n    /** name of the intent */\r\n    name: string;\r\n    /** global entities that match */\r\n    globalEntities?: QueryIntentEntity2[];\r\n    /** rule that match if exact match rule */\r\n    matchRule: string | null;\r\n    /** ml score or 1 if rule */\r\n    score: number;\r\n    /** ml confidence score or 1 if rule */\r\n    confidence: number;\r\n}\r\n\r\nexport interface QueryIntentEntity2 {\r\n    /** global entity name, eg. \"person\" */\r\n    name: string;\r\n    /** global entity type (entities are detected by classical NLP, slots are detected by ML) */\r\n    type: \"entity\" | \"slot\";\r\n    /** global entity resource */\r\n    resource: string;\r\n    /** text that match the global entity, eg. \"Bill gates\" */\r\n    value: string;\r\n    /** offset in the query */\r\n    offset: number;\r\n    /** length in the query */\r\n    length: number;\r\n    /** basic form if type=entity, eg. \"BILL GATES\"*/\r\n    basic: string | null;\r\n    /** normalization form if type=entity, eg. \"William H Gates\"*/\r\n    normalization: string | null;\r\n    /** score for the extraction if type=slot */\r\n    score?: number;\r\n}\r\n\r\n/**\r\n * A service for calling the queryintent web service\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class QueryIntentWebService extends HttpService {\r\n    private readonly endpoint = \"queryintent\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        private httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    getQueryIntent(query: IQuery): Observable<QueryIntentResponse> {\r\n        const data = {\r\n            query,\r\n            app: this.appName\r\n        };\r\n        return this.httpClient.post<QueryIntentResponse>(\r\n            this.makeUrl(this.endpoint), data);\r\n    }\r\n}\r\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Login\",\n            \"userName\": \"User name\",\n            \"password\": \"Password\",\n            \"singleSignOn\": \"Single sign-on\",\n            \"signInWith\": \"Sign in with...\"\n        }\n    }\n};\n","import {Injectable} from \"@angular/core\";\nimport {Validators, ValidatorFn, AbstractControl, ValidationErrors} from \"@angular/forms\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * @ignore\n */\nfunction isEmptyInputValue(value: any): boolean {\n    // we don't check for string here so it also works with arrays\n    return value === null || value === undefined || value.length === 0;\n}\n\nconst processInputValue = (value: any) => { // add support for object values of the advanced search\n  if (Utils.isArray(value)) {\n    return value.map(\n      (val) => {\n        if (Utils.isObject(val) && val.hasOwnProperty(\"value\")) {\n          return val.value;\n        }\n        return val;\n      }\n    )\n  } else {\n    if (Utils.isObject(value) && value.hasOwnProperty(\"value\")) {\n      return [value.value];\n    }\n    return [value];\n  }\n}\n\n// Email regular expression, taken from built-in Angular validators.\n/**\n * @ignore\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n\n/**\n * Enumerates the supported validator types.\n */\nexport enum ValidatorType {\n    Min = \"Min\",\n    Max = \"Max\",\n    Required = \"Required\",\n    Email = \"Email\",\n    Pattern = \"Pattern\",\n    Integer = \"Integer\",\n    Number = \"Number\",\n    Date = \"Date\",\n    Range = \"Range\",\n}\n\n/**\n * Describes a `Validator` object.\n */\nexport interface Validator {\n    /**\n     * The validator's type.\n     */\n    type: ValidatorType;\n    /**\n     * The validator's name.\n     */\n    name: string;\n    /**\n     * The validator's error message to be displayed when a value is invalid.\n     */\n    errorMessage: string;\n    /**\n     * `true` if the validator is to be applied.\n     */\n    active: boolean;\n}\n\n/**\n * Defines the default error messages for each validator.\n */\nconst errorMessagesMap = {\n    // Built-in Angular validators\n    min: \"msg#validation.min\",\n    max: \"msg#validation.max\",\n    required: \"msg#validation.required\",\n    requiredTrue: \"msg#validation.requiredTrue\",\n    email: \"msg#validation.email\",\n    minlength: \"msg#validation.minLength\",\n    maxlength: \"msg#validation.maxLength\",\n    pattern: \"msg#validation.pattern\",\n\n    // Custom\n    unique: \"msg#validation.unique\",\n    integer: \"msg#validation.integer\",\n    number: \"msg#validation.number\",\n    date: \"msg#validation.date\",\n    range: \"msg#validation.range\"\n};\n\n\n/**\n * This service provides a set of locale-sensitive validators with support for arrays.\n * The validator error messages are {@link IntlService} `msg#` messages of the form:\n * `msg#validation.<validator name>`.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ValidationService {\n    constructor(\n        protected formatService: FormatService,\n        protected intlService: IntlService) {\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.pattern` with support for value arrays.\n     *\n     * @param pattern The pattern.\n     * @returns The validation function.\n     */\n    static patternValidator(pattern: string | RegExp): ValidatorFn {\n        // #region This code region is based on Validators.pattern()\n        if (!pattern) {\n            return Validators.nullValidator;\n        }\n\n        let regex: RegExp;\n        let regexStr: string;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n\n            if (pattern.charAt(0) !== '^') {\n                regexStr += '^';\n            }\n\n            regexStr += pattern;\n\n            if (pattern.charAt(pattern.length - 1) !== '$') {\n                regexStr += '$';\n            }\n\n            regex = new RegExp(regexStr);\n        } else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        // #endregion\n\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!regex.test(value)) {\n                    return {pattern: {requiredPattern: pattern.toString(), actualValue: value}};\n                }\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.email` with support for value arrays.\n     *\n     * @param control The control to validate.\n     * @returns The result.\n     */\n    static emailValidation(control: AbstractControl): ValidationErrors | null {\n        if (isEmptyInputValue(control.value)) {\n            return null;  // don't validate empty values to allow optional controls\n        }\n\n        let values: any[] = [];\n        values = processInputValue(control.value);\n\n        for (const value of values) {\n            if (!EMAIL_REGEXP.test(value)) {\n                return {email: true};\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the name of the first validator in a map of validation errors.\n     * @param errors The validation errors\n     * @returns The name of the first validator, if any - `undefined` otherwise.\n     */\n    getFirstError(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            return Object.keys(errors)[0];\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the error message associated with the passed validator.\n     * @param name The name of a validator.\n     * @returns The error message.\n     */\n    getErrorText(name?: string): string {\n        const text = name ? errorMessagesMap[name] : undefined;\n        if (!text) {\n            return \"Unknown validator: \" + name;\n        }\n        return text;\n    }\n\n    /**\n     * Get the error message associated with first validator in a map of validation errors.\n     * @param errors The validation errors.\n     * @returns The error message.\n     */\n    getFirstErrorText(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return this.getErrorText(error);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the data held for the first error in a map of validation errors\n     * @param errors The validation errors.\n     */\n    getFirstErrorInfo(errors: ValidationErrors): any {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return errors[error];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get a validator function that validates that values are greater than or equal\n     * to the passed `min` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param min The minimum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    minValidator(min: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(min)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - min;\n                        }\n                    }\n                    else if (Utils.isString(min)) {\n                        cmp = Utils.compare(value1, min);\n                    }\n                    else if (Utils.isDate(min)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - min.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - min.getTime();\n                        }\n                    }\n                    if (cmp < 0) {\n                        return {min: {min, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are less than or equal\n     * to the passed `max` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param max The maximum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    maxValidator(max: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(max)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - max;\n                        }\n                    }\n                    else if (Utils.isString(max)) {\n                        cmp = Utils.compare(value1, max);\n                    }\n                    else if (Utils.isDate(max)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - max.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - max.getTime();\n                        }\n                    }\n                    if (cmp > 0) {\n                        return {max: {max, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are integers. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    integerValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testInteger(value1)) {\n                        return {integer: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are numeric. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    numberValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testFloat(value1)) {\n                        return {number: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are dates. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed. Dates will be parsed according\n     * to the current locale.\n     *\n     * @param parser An optional parser name.\n     */\n    dateValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    if (Utils.isString(value)) {\n                        let value1 = value;\n                        if (parser) {\n                            value1 = this.formatService.parseValue(value1, parser);\n                        }\n                        if (!this.intlService.parseDate(value1)) {\n                            return {date: {value}};\n                        }\n                    }\n                    else if (Utils.isDate(value)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                        if (isNaN(value.getTime())) {\n                            return {date: {value}};\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that, for pair of values, the second value is\n     * greater than the first. If one or both values are empty then the validation passes.\n     * The validator function supports single values and arrays of values and will optionally\n     * parse the values using the {@link FormatService} if a parser is passed. Dates will be\n     * parsed according to the current locale.\n     *\n     * @param type A value whose type indicates how the range test will be made.\n     * @param parser An optional parser name.\n     */\n    rangeValidator(type: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || !Utils.isArray(control.value) || control.value.length !== 2) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let value1 = control.value[0];\n            let value2 = control.value[1];\n            if (isEmptyInputValue(value1) || isEmptyInputValue(value2)) {\n                return null;\n            }\n            if (parser) {\n                value1 = this.formatService.parseValue(value1, parser);\n                value2 = this.formatService.parseValue(value2, parser);\n            }\n            let cmp = 0;\n            if (Utils.isString(type)) {\n                cmp = Utils.compare(value2, value1);\n            }\n            else if (Utils.isDate(type)) {\n                let date1: Date | undefined;\n                let date2: Date | undefined;\n                if (Utils.isString(value1)) {\n                    date1 = this.intlService.parseDate(value1);\n                }\n                else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date1 = value1;\n                }\n                if (Utils.isString(value2)) {\n                    date2 = this.intlService.parseDate(value2);\n                }\n                else if (Utils.isDate(value2)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date2 = value2;\n                }\n                if (date1 && date2) {\n                    cmp = date2.getTime() - date1.getTime();\n                }\n            }\n            else if (Utils.isNumber(type)) {\n                if (Utils.testFloat(value1) && Utils.testFloat(value2)) {\n                    const num1 = Utils.toNumber(value1);\n                    const num2 = Utils.toNumber(value2);\n                    if (num1 !== null && num2 !== null) {\n                        cmp = num2 - num1;\n                    }\n                }\n            }\n            return cmp < 0 ? {range: {value1, value2}} : null;\n        };\n    }\n}\n","export * from \"./validation.directive\";\nexport * from \"./validation-error.pipe\";\nexport * from \"./validation-message.component\";\nexport * from \"./validation.module\";\nexport * from \"./validation.service\";\nexport * from \"./messages/index\";\n","const WEB_SERVICES_MODULE_PROVIDERS = [];\n\nexport {WEB_SERVICES_MODULE_PROVIDERS};\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Utils } from \"@sinequa/core/base\";\n\n/**\n * A service to manage navigator downloads\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DownloadWebService {\n\n    /**\n     * Subscribes to the given observable to trigger a download action on the navigator\n     * when the observed object is ready.\n     *\n     * @param observable The observable to subscribe.\n     * @returns The observable for chaining.\n     */\n    public download(observable: Observable<HttpResponse<Blob>>): Observable<HttpResponse<Blob>> {\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                const header = response.headers.get('content-disposition');\n                const fileName = header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n\n                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                    // For IE\n                    window.navigator.msSaveOrOpenBlob(response.body, fileName);\n                } else {\n                    const link = document.createElement('a');\n                    document.body.appendChild(link);\n                    const blobUrl = window.URL.createObjectURL(response.body);\n                    link.href = blobUrl;\n                    link.download = fileName;\n                    link.click();\n                    link.remove();\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n\n                return response;\n            }\n        );\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Suggestion} from \"./suggest/suggestion\";\n\n/**\n * A service for calling the suggestquery web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestQueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields using the passed suggestquery web service\n     *\n     * @param suggestQuery The name of the suggestquery web service to use\n     * @param text The text to match\n     * @param query The name of the current query\n     * @param fields The fields for which to return suggestions\n     */\n    get(suggestQuery: string, text: string, query: string, fields?: string | string[]): Observable<Suggestion[]> {\n        if (!suggestQuery) {\n            return of([]);\n        }\n        else {\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestquery\"), {\n                app: this.appName,\n                suggestQuery: suggestQuery,\n                text: text,\n                query: query,\n                kinds: fields\n            });\n            return observable.pipe(map(value => value.suggests));\n        }\n    }\n}","import {Component, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {LoginService} from \"./login.service\";\n\n/**\n * A utility base class to assist main components in the handling of the login state of the\n * the application. It initiates the login process and sets `loginComplete` accordingly\n * whenever the login state changes\n */\n@Component({\n    template: ''\n})\nexport class ComponentWithLogin implements OnInit, OnDestroy, AfterViewInit {\n    protected loginSubscription: Subscription;\n    /**\n     * `true` if the application is currently logged in successfully\n     */\n    loginComplete: boolean;\n\n    constructor(\n        protected loginService: LoginService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    /**\n     * A method called whenever the `session-changed` event is received. This can be\n     * overridden by the subclassing component.\n     */\n    onLoginComplete() {\n    }\n\n    /**\n     * Subscribes to the [LoginService.events]{@link LoginService#events} and sets\n     * the `loginComplete` member whenever the `session-changed` event is received\n     */\n    ngOnInit() {\n        this.loginComplete = this.loginService.complete;\n        this.loginSubscription = this.loginService.events.subscribe(event => {\n            if (event.type === \"session-changed\") {\n                this.loginComplete = this.loginService.complete;\n                this.onLoginComplete();\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.loginSubscription.unsubscribe();\n    }\n\n    /**\n     * Initiates the login process by calling [LoginService.login]{@link LoginService#login}\n     */\n    ngAfterViewInit() {\n        this.loginService.login();\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A generic service for invoking JsonMethod plugins\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class JsonMethodPluginService extends HttpService{\n  constructor(\n    public httpClient: SqHttpClient,\n    @Inject(START_CONFIG) startConfig: StartConfig\n    ) {\n      super(startConfig);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  post(method: string, query: any, options?: {[key: string]: any}) : Observable<any> {\n    if (!Utils.isObject(query)) {\n      return throwError({error: \"invalid query object\"});\n    }\n    const observable = this.httpClient.post(this.makeUrl(method), query, options);\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.post success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.post failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.post complete\");\n      });\n\n    return observable;\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  call(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    return this.post(method, query, options);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP GET\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  get(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    const observable = this.httpClient.get(this.makeUrl(method), {\n      params: this.makeParams(query),\n      ...options\n    });\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.get success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.get failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.get complete\");\n      });\n\n    return observable;\n  }\n\n  makeUrl(api: string): string {\n    return super.makeUrl('plugin/' + api);\n  }\n}","export default {\n    \"validation\": {\n        \"min\": \"The value must be at least {min}\",\n        \"max\": \"The value can be no more than {max}\",\n        \"required\": \"This field is required\",\n        \"requiredTrue\": \"This field must be set\",\n        \"email\": \"A valid email address is required\",\n        \"minLength\": \"The value must have at least {requiredLength, plural, one {# character} other {# characters}}\",\n        \"maxLength\": \"The value can have no more than {requiredLength, plural, one {# character} other {# characters}}\",\n        \"pattern\": \"The value is invalid\",\n        \"unique\": \"This field must be unique\",\n        \"integer\": \"The value must be an integer\",\n        \"number\": \"The value must be a number\",\n        \"date\": \"\",\n        \"range\": \"The first value must be less than or equal to the second\"\n    }\n};\n","export * from \"./query/expr-parser\";\nexport * from \"./query/expr-builder\";\nexport * from \"./query/query\";\n\nexport * from \"./app.service\";\nexport * from \"./format.service\";\nexport * from \"./audit.interceptor\";\nexport * from \"./app-utils.module\";","import {MapOf, JsonObject, PatternMatcher} from \"@sinequa/core/base\";\n\n/**\n * Describes the fields available in all configuration objects. By convention, configuration object\n * interfaces are prefixed by `CC`.\n */\nexport interface CCConfig {\n    /**\n     * The name of the configuration object\n     */\n    name: string;\n    /**\n     * An optional description of the configuration object\n     */\n    description?: string;\n}\n\n/**\n * Describes the fields available in all web service configuration objects\n */\nexport interface CCWebService extends CCConfig {\n    webServiceType: \"Query\" | \"sponsoredlinks\" | \"queryexport\" | \"Preview\" | \"Labels\" | \"Autocomplete\" | \"DataSet\";\n}\n\n/**\n * Describes the fields available in the index configuration object\n */\nexport interface CCIndex extends CCConfig {\n    /**\n     * The type of the index\n     */\n    indexType: string;\n    /**\n     * The columns in the index\n     */\n    columns?: MapOf<CCColumn>;\n}\n\n/**\n * Describes the fields available in a list item configuration object\n */\nexport interface CCListItem {\n    /**\n     * The name is used to display an item\n     */\n    name: string;\n    /**\n     * The value holds the underlying value of the item\n     */\n    value: string;\n}\n\n/**\n * Describes a list configuration object. Lists can be created in `App Dependencies/Lists` in the admin interface.\n */\nexport interface CCList extends CCConfig {\n    /**\n     * The name of the list\n     */\n    name: string;\n    /**\n     * The items in the list\n     */\n    items: CCListItem[];\n}\n\n/**\n * Describes an RFM action configuration object\n */\nexport interface CCRFMAction {\n    name: string;\n    enabled: boolean;\n    actionEnabled: boolean;\n    noMenu: boolean;\n    displayUnrated: boolean;\n    negAvailable: boolean;\n}\n\n/**\n * Describes an RFM configuration object\n */\nexport interface CCRFM {\n    name: string;\n    click: CCRFMAction;\n    like: CCRFMAction;\n    important: CCRFMAction;\n}\n\n/**\n * Describes an aggregation configuration object\n */\nexport interface CCAggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The underlying column in the aggregation\n     */\n    column: string;\n    /**\n     * Determines whether this aggregation should be included in a regular search\n     */\n    includeInStandardSearch: boolean;\n    /**\n     * The maximum number of values to retrieve\n     */\n    count: number;\n    /**\n     * The value of the `order` clause\n     */\n    order: string;\n    /**\n     * The value of the `mask` clause\n     */\n    mask: string;\n    /**\n     * The name of an associated distribution configuration object\n     */\n    distribution: string;\n    /**\n     * Determines whether the aggregation is requested in the context of the currently selected tab or globally.\n     * The default is to respect the [CCTabSearch.loadAggregationsForSelectedTab]{@link CCTabSearch#loadAggregationsForSelectedTab} setting\n     */\n    tabBehavior: \"\" | \"Default\" | \"LoadForSelectedTab\" | \"LoadForAllTabs\";\n    /**\n     * The separator used for crossed aggregations\n     */\n    keySeparator: string;\n    /**\n     * The display separator used for crossed aggregations\n     */\n    displayKeySeparator: string;\n}\n\n/**\n * Describes the fields for a tab configuration object\n */\nexport interface CCTab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The values in the tab distribution that contribute to this tab\n     */\n    value: string;\n    /**\n     * Set if this tab is the default to be used when no tab is specified in a query\n     */\n    isDefault: boolean;\n    /**\n     * Indexes to exclude when executing a query with this tab selected\n     */\n    excludedIndices: string;\n    /**\n     * Aggregations to exclude when executing a query with this tab selected\n     */\n    excludedAggregations: string;\n    /**\n     * Results sorting options that should be available when executing a query with this tab selected\n     */\n    sortingChoices: CCSortingChoice[];\n}\n\n/**\n * Describes the fields for the tab search configuration in a query. A tab search defines a special distribution which is evaluated\n * as a part of query to group the results by a set of tab items. The distribution gives the count of documents\n * associated with each tab item. The values associated with a tab item are used to filter a query when a tab item is selected.\n */\nexport interface CCTabSearch {\n    /**\n     * Determines whether this tab search is used in a query\n     */\n    isActive: boolean;\n    /**\n     * Defines the column to be used in the tab distribution and for filtering results by a selected tab item\n     */\n    column: string;\n    /**\n     * `true` if the associated column is a tree\n     */\n    columnIsTree: boolean;\n    /**\n     * Determines whether the overall document total should be calculated from the per-tab item documents totals\n     */\n    totalIsSumOfTabTotals: boolean;\n    /**\n     * Determines whether configured aggregations should be evaluated in the context of the selected tab or not.\n     * This setting can be overridden at the tab item level using [CCTab.excludedAggregations]{@link CCTab#excludedAggregations}\n     */\n    loadAggregationsForSelectedTab: boolean;\n    /**\n     * Determines the `minlevel` value to use when evaluating the tab distribution for a tree column\n     */\n    valueLevels: number;\n    /**\n     * Determines whether `post-group-by=true` should be used in the tab distribution\n     */\n    postGroupBy: boolean;\n    /**\n     * Determines whether 'merge-groups=true` should be used in the tab distribution. This is only used if `postGroupBy` is set to `true`\n     */\n    mergeGroups: boolean;\n    /**\n     * The set of configured tab items\n     */\n    tabs: CCTab[];\n}\n\n/**\n * Describes a sorting choice which can be selected for a query\n */\nexport interface CCSortingChoice {\n    /**\n     * The name of this sorting choice\n     */\n    name: string;\n    /**\n     * The description of this sorting choice\n     */\n    description: string;\n    /**\n     * The display value to use when rendering this sorting choice\n     */\n    display: string;\n    /**\n     * The `ORDER BY` clause to use when this sorting choice is selected\n     */\n    orderByClause: string;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has no `text contains` clause\n     */\n    isDefaultNoRelevance: boolean;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has a `text contains` clause\n     */\n    isDefaultWithRelevance: boolean;\n}\n\n/**\n * Describes a scope configuration object. A scope defines a set of conditions which\n * will be added to the query `where clause` when the scope is selected\n */\nexport interface CCScope {\n    /**\n     * The name of the scope\n     */\n    name: string;\n    /**\n     * The description of the scope\n     */\n    description: string;\n    /**\n     * The display value to be used when rendering the scope\n     */\n    display: string;\n    /**\n     * Determines whether the scope is active or not\n     */\n    isActive: boolean;\n    /**\n     * Determines whether the scope should be considered the default scope\n     * when a scope is not specified in a query\n     */\n    isDefault: boolean;\n}\n\n/**\n * Defines different precision operators that can be automatically added to a `text contains` clause\n * when no precision operators are present.\n *\n * `Default` - no operators are added\n *\n * `ExactExpression` - text surrounded by `\"...\"`\n *\n * `InTheSamePhrase` - text surrounded by `[...]`\n *\n * `EveryWord` - text surrounded by `+(...)`\n */\nexport type QueryPrecision  = \"Default\" | \"ExactExpression\" | \"InTheSamePhrase\" | \"EveryWord\";\n\n/**\n * Defines strategies that can used in the query search parameters. Each strategy defines a pair of word weight (`ww`) and meaning\n * weight (`mw`) values to be used.\n *\n * `Default` - no `ww` and `mw` parameters used\n *\n * `WordsOnly` - `ww=1;mw=0`\n *\n * `WordsFirst` - `ww=0.8;mw=0.2`\n *\n * `WordsAndMeaning` - `ww=0.6;mw=0.4`\n *\n * `MeaningFirst` - `ww=0.3;mw=0.7`\n *\n * `MeaningOnly` - `ww=0;mw=1`\n */\nexport type QueryStrategy = \"Default\" | \"WordsOnly\" | \"WordsFirst\" | \"WordsAndMeaning\" | \"MeaningFirst\" | \"MeaningOnly\";\n\n/**\n * Defines modes for the spelling correction of search terms and did-you-mean functionality. Corrections\n * are based on edit and phonetic distance and exist among the searched documents\n *\n * `default | classic` - corrections are sought for terms that are not present in any documents. The original terms\n * and corrections are included in the query\n *\n * `smart` - corrections are sought for terms that are present in less than 10 documents and where the correction\n * is 20 times more frequent than the original term. Only the best corrections are kept. The original terms and corrections\n * are included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"We included\n * results for these terms...\" feedback to be displayed\n *\n * `correct` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. Only the best corrections are kept. The original terms that have corrections\n * are not included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"Your query\n * has been corrected to...\" feedback to be displayed\n *\n * `dymonly` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. The actual query is unaffected but the\n * [Results.didYouMean]{@link Results#didYouMean] member will be populated allowing for a \"Did you mean...\" feedback to be\n * displayed\n *\n * `force` - corrections are sought for all terms. All terms and corrections are included in the query\n *\n * `false` - no spelling correction processing occurs\n */\nexport type SpellingCorrectionMode = \"default\" | \"classic\" | \"smart\" | \"correct\" | \"dymonly\" | \"force\" | \"false\";\n\n/**\n * Describes the query web service configuration object\n */\nexport interface CCQuery extends CCWebService {\n    /**\n     * Defines the number of records or documents to request when executing the query\n     */\n    pageSize: number;\n    /**\n     * Defines the aggregations that should be included in the query\n     */\n    aggregations: CCAggregation[];\n    /**\n     * Defines configuration information for the columns in the indexes\n     */\n    columnsInfo: CCColumnsInfo;\n    /**\n     * Defines the sorting choices that can be used\n     */\n    sortingChoices: CCSortingChoice[];\n    /**\n     * Defines the scopes that can be used\n     */\n    scopes: CCScope[];\n    /**\n     * Defines whether scopes processing is activated for this query\n     */\n    scopesActive: boolean;\n    /**\n     * Defines the spelling correction mode for this query\n     */\n    sCMode: SpellingCorrectionMode;\n    /**\n     * Defines the distance to use for the `NEAR` operator when no value is specified\n     */\n    defaultNearValue: number;\n    /**\n     * Defines the tab search configuration for this query\n     */\n    tabSearch: CCTabSearch;\n    /**\n     * Defines the name of the [CCRFM]{@link CCRFM} configuration for this query\n     */\n    rFM: string;\n    /**\n     * Defines the default language to use when parsing the query text\n     */\n    questionLanguage: string;\n    /**\n     * Defines the default precision to use for this query\n     */\n    questionPrecision: QueryPrecision;\n    /**\n     * Defines the default strategy to use for this query\n     */\n    questionStrategy: QueryStrategy;\n    /**\n     * Defines the indexes that the query selects from\n     */\n    searchIndexes: string;\n    /**\n     * Determines whether filter-less queries are permitted\n     */\n    allowEmptySearch: boolean;\n    /**\n     * Defines the patterns to control which column fields are allowed\n     * in fielded search expressions.\n     */\n    columnFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which column fields are disallowed\n     * in fielded search expressions.\n     */\n    columnFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `columnFieldsIncluded` and `columnFieldsExcluded` values.\n     */\n    $columnFieldsPattern: PatternMatcher;\n    /**\n     * Defines the patterns to control which part name fields are allowed\n     * in fielded search expressions.\n     */\n    partnameFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which part name fields are disallowed\n     * in fielded search expressions.\n     */\n    partnameFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `partnameFieldsIncluded` and `partnameFieldsExcluded` values.\n     */\n    $partnameFieldsPattern: PatternMatcher;\n}\n\n/**\n * Defines configuration parameters for a column\n */\nexport interface CCColumnInfo {\n    /**\n     * The column name\n     */\n    name: string;\n    /**\n     * A description of the column\n     */\n    description: string;\n    /**\n     * A comma-separated list of aliases for the column\n     */\n    aliases: string;\n    /**\n     * A display label for the column\n     */\n    label: string;\n    /**\n     * A plural form display label for the column\n     */\n    labelPlural: string;\n    /**\n     * The name of a formatter function that produces a formatted string value from the column value. See {@link FormatService}\n     */\n    formatter: string;\n    /**\n     * A set of transform functions that are applied to the a formatted string value. See {@link FormatService}\n     */\n    transforms: string;\n    /**\n     * The name of a parser function that produces a column value from a formatted string value. See {@link FormatService}\n     */\n    parser: string;\n}\n\n/**\n * Describes a set of `CCColumnInfo` objects\n */\nexport interface CCColumnsInfo {\n    columns: CCColumnInfo[];\n}\n\n/**\n * Defines the range of column types for a column\n */\nexport const enum EngineType {\n    none = 0,\n    bool = 1,\n    date = 2,\n    dateTime = 3,\n    time = 4,\n    unsigned = 5,\n    integer = 6,\n    float = 7,\n    double = 8,\n    dates = 9,\n    dateTimes = 10,\n    times = 11,\n    varchar = 12,\n    binary = 13,\n    string = 14,\n    csv = 15\n}\n\n/**\n * Defines the type modifiers that can be used for a column\n */\nexport const enum EngineTypeModifier {\n    none  = 0x0000000,\n    a     = 0x0000805, // a -> lc\n    // b  = 0x0000002,\n    c     = 0x0000004,\n    d     = 0x0000008,\n    e     = 0x0000814, // e -> lc\n    // f  = 0x0000020,\n    // g  = 0x0000040,\n    // h  = 0x0000080,\n    i     = 0x0000100,\n    // j  = 0x0000200,\n    // k  = 0x0000400,\n    l     = 0x0000804, // l -> c\n    // m  = 0x0001000,\n    n     = 0x0002000,\n    // o  = 0x0004000,\n    // p  = 0x0008000,\n    // q  = 0x0010000,\n    // r  = 0x0020000,\n    // s  = 0x0040000,\n    t     = 0x0080004, // t -> c\n    // u  = 0x0100000,\n    // v  = 0x0200000,\n    // w  = 0x0400000,\n    x     = 0x0800000,\n    // y  = 0x1000000,\n    z     = 0x2000000,\n\n    f_ordinal    = 0x0002000, //             n\n    f_multidates = 0x0002000, //             n\n    f_varchar    = 0x2000000, //                   z\n    f_binary     = 0x2002000, //             n     z\n    f_string     = 0x2002108, //     d   i   n     z\n    f_csv        = 0x288291d, // a c d e i l n t x z\n\n    f_overridable= 0x2000108  //     d   i         z\n}\n\n/**\n * Defines the fields for a column configuration object defined in an index. See {@link CCIndex}\n */\nexport interface CCColumn {\n    name: string;\n    description?: string;\n    type: string;\n    typeModifier?: string;\n    eType: EngineType;\n    eTypeModifier: EngineTypeModifier;\n    aliases?: string[];\n    label?: string;\n    labelPlural?: string;\n    formatter?: string;\n    transforms?: string;\n    parser?: string;\n}\n\n/**\n * Enum representing supported export source.\n */\nexport enum ExportSourceType {\n    None = 0,\n    Result = 1,\n    Selection = 2,\n    SavedQuery = 4\n}\n\n/**\n * Enum representing supported export format.\n */\nexport enum ExportOutputFormat {\n    None = 0,\n    Csv = 1,\n    Xlsx = 2,\n    Json = 4\n}\n\n/**\n * Data model of the Export dialog.\n */\nexport interface ExportDialogModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n}\n\n/**\n * Describes the fields in the labels web service configuration object\n */\nexport interface CCLabels extends CCWebService {\n    /**\n     * The the index column to use for public labels\n     */\n    publicLabelsField: string;\n    /**\n     * A semi-colon separated list of predefined public labels\n     */\n    defaultPublicLabels: string;\n    /**\n     * Determines whether new public labels can be created by users\n     */\n    allowPublicLabelsCreation: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can create public labels\n     */\n    publicLabelsCreationPrincipalIds: string;\n    /**\n     * Determines whether existing public labels can be modified by users\n     */\n    allowPublicLabelsModification: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can modify existing public labels\n     */\n    publicLabelsModificationPrincipalIds: string;\n\n    /**\n     * The the index column to use for private labels\n     */\n    privateLabelsField: string;\n\n    /**\n     * The maximum number of labels to return when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestMaxCount: number;\n\n    /**\n     * The wildcard character to recognise when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestWildcard: string;\n}\n\n/**\n * Describes the fields in the autocomplete web service configuration object\n */\nexport interface CCAutocomplete extends CCWebService {\n    /**\n     * Defines whether this autocomplete service is enabled\n     */\n    enabled: boolean;\n    /**\n     * Contains a comma-separated list of suggest queries for this service\n     */\n    suggestQueries: string;\n    /**\n     * Defines the minimum number of characters that must be entered before presenting\n     * suggestions\n     */\n    inputLengthTrigger: number;\n    /**\n     * Defines whether suggestions should be grouped into categories when they are displayed\n     */\n    groupSuggestionsByCategory: boolean;\n    /**\n     * Defines whether fielded search should be used when processing suggestions\n     */\n    useFieldedSearch: boolean;\n    /**\n     * Defines the number of items per category to display when a category is not collapsed\n     */\n    uncollapsedItemsPerCategory: number;\n}\n\n/**\n * Describes the fields in the application configuration object\n */\nexport interface CCApp extends CCConfig {\n    /**\n     * Identifies the version of the application configuration. This field can be passed\n     * to the [AppWebService.refresh]{@link AppWebService#refresh} api to update the application\n     * configuration if the version now available on the server is different.\n     */\n    versionId: string;\n    /**\n     * Defines the queries configured on the application\n     */\n    queries: MapOf<CCQuery>;\n    /**\n     * Defines the RFM objects configured on the application\n     */\n    rfms: MapOf<CCRFM>;\n    /**\n     * Defines the indexes configured on the application\n     */\n    indexes: MapOf<CCIndex>;\n    /**\n     * Defines the lists configured on the application\n     */\n    lists: MapOf<CCList>;\n    /**\n     * Defines the web services configured on the application\n     */\n    webServices: MapOf<CCWebService>;\n    /**\n     * A comma-separated list of the names of the queries configured on the application\n     */\n    queryNames: string;\n    /**\n     * The name of the labels web service configured on the application\n     */\n    labels: string;\n    /**\n     * The name of the preview web service configured on the application\n     */\n    preview: string;\n    /**\n     * The name of the autocomplete web service configured on the application\n     */\n    autocomplete: string;\n    /**\n     * The name of the sponsored links web service configured on the application\n     */\n    sponsoredLinks: string;\n    /**\n     * The name of the query export web service configured on the application\n     */\n    queryExport: string;\n    /**\n     * Determines whether RSS feeds are available on saved queries\n     */\n    queryRssEnabled: boolean;\n    /**\n     * Custom JSON configuration (see App Customization tab in Sinequa admin)\n     */\n    data: JsonObject;\n    /**\n     * The version of the server API.\n     * This field is used to compare with [MINIMUM_COMPATIBLE_SERVER_API_VERSION]{@link MINIMUM_COMPATIBLE_SERVER_API_VERSION}\n     */\n    apiVersion: string;\n    /**\n     * The workspace associated with this app\n     */\n    workspaceApp: string;\n    /**\n     * The name of the default query\n     */\n    defaultQueryName: string;\n}\n\n/**\n * The minimum server api version that compatible with this version of SBA.\n */\nexport const MINIMUM_COMPATIBLE_SERVER_API_VERSION = '1.0';\n","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-SG\": \"zavE\",\n\t\"./en-SG.js\": \"zavE\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import \"fast-text-encoding\"; // IE 11 / Edge\n\n// NB the name of the intl polyfill (below) conflicts with @sinequa/core/intl in the module resolution.\n// Output of traceResolution: true gives the following:\n//\n// Resolving module name 'intl' relative to base url 'D:/ice/sba/ng-ws/projects/core' - 'D:/ice/sba/ng-ws/projects/core/intl'.\n// Loading module as file / folder, candidate module location 'D:/ice/sba/ng-ws/projects/core/intl', target file type 'TypeScript'.\n// ...\n// This can be worked around in a number of ways:\n// 1. Rename the @sinequa/core/intl folder and all references to it (not overly desirable)\n// 2. Install the intl polyfill using an alias: npm install my-intl-alias@npm:intl. But then references in the locale files would have\n//    to use import \"my-intl-alias/...\"\n// 3. Don't use index.ts as the entry point filename. This is a bit hacky but it works and has the least impact so that's what we've gone with\n//    _index.ts is used and referenced in package.json: { \"ngPackage\": { \"lib\": { \"entryFile\": \"index.ts\" } } }\n//    We also put an explicit Path to @sinequa/core/intl => ./intl/_index in the local tsconfig.json so that references to @sinequa/core/intl\n//    are resolved correctly in VSCode\nimport \"intl\"; // Safari\nimport \"intl/locale-data/jsonp/en-US\"; // Locale needed for formatjs initialization (new Intl.NumberFormat())\nimport \"js-polyfills/url\";\nimport \"matchmedia-polyfill\";\nimport focusWithin from \"focus-within\"; // IE 11 / Edge - https://github.com/jonathantneal/focus-within\n\nfocusWithin(document);\n\n// String.trimStart, String.trimEnd\nif (!(<any>String.prototype).trimStart) {\n  (<any>String.prototype).trimStart = function () {\n    return this.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n  };\n}\n\nif (!(<any>String.prototype).trimEnd) {\n  (<any>String.prototype).trimEnd = function () {\n    return this.replace(/[\\s\\uFEFF\\xA0]+$/g, '');\n  };\n}\n\n// See https://gist.github.com/jocki84/6ffafd003387179a988e\nif (!(<any>Element.prototype).scrollIntoViewIfNeeded) {\n    (<any>Element.prototype).scrollIntoViewIfNeeded = function (centerIfNeeded) {\n        function withinBounds(value, min, max, extent) {\n            if (false === centerIfNeeded || max <= value + extent && value <= min + extent) {\n                return Math.min(max, Math.max(min, value));\n            } else {\n                return (min + max) / 2;\n            }\n        }\n\n        function makeArea(left, top, width, height) {\n            return  { \"left\": left, \"top\": top, \"width\": width, \"height\": height\n                    , \"right\": left + width, \"bottom\": top + height\n                    , \"translate\":\n                        function (x, y) {\n                            return makeArea(x + left, y + top, width, height);\n                        }\n                    , \"relativeFromTo\":\n                        function (lhs, rhs) {\n                            let newLeft = left, newTop = top;\n                            lhs = lhs.offsetParent;\n                            rhs = rhs.offsetParent;\n                            if (lhs === rhs) {\n                                return area;\n                            }\n                            for (; lhs; lhs = lhs.offsetParent) {\n                                newLeft += lhs.offsetLeft + lhs.clientLeft;\n                                newTop += lhs.offsetTop + lhs.clientTop;\n                            }\n                            for (; rhs; rhs = rhs.offsetParent) {\n                                newLeft -= rhs.offsetLeft + rhs.clientLeft;\n                                newTop -= rhs.offsetTop + rhs.clientTop;\n                            }\n                            return makeArea(newLeft, newTop, width, height);\n                        }\n                    };\n        }\n\n        let parent, elem = this, area = makeArea(\n            this.offsetLeft, this.offsetTop,\n            this.offsetWidth, this.offsetHeight);\n        while ((parent = elem.parentNode) instanceof HTMLElement) {\n            const clientLeft = parent.offsetLeft + parent.clientLeft;\n            const clientTop = parent.offsetTop + parent.clientTop;\n\n            // Make area relative to parent's client area.\n            area = area.\n                relativeFromTo(elem, parent).\n                translate(-clientLeft, -clientTop);\n\n            parent.scrollLeft = withinBounds(\n                parent.scrollLeft,\n                area.right - parent.clientWidth, area.left,\n                parent.clientWidth);\n\n            parent.scrollTop = withinBounds(\n                parent.scrollTop,\n                area.bottom - parent.clientHeight, area.top,\n                parent.clientHeight);\n\n            // Determine actual scroll amount by reading back scroll properties.\n            area = area.translate(clientLeft - parent.scrollLeft,\n                                  clientTop - parent.scrollTop);\n            elem = parent;\n        }\n    };\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n(function () {\n\n  if ( typeof (<any>window).CustomEvent === \"function\" ) return;\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    const evt = document.createEvent( 'CustomEvent' );\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n    return evt;\n   }\n\n  CustomEvent.prototype = (<any>window).Event.prototype;\n\n  (<any>window).CustomEvent = CustomEvent;\n})();\n\n// IE\nif (!window.location.origin) { // Some browsers (mainly IE) do not have this property, so we need to build it manually...\n    try {\n        window.location[/*foo readonly*/<string>\"origin\"] = window.location.protocol + '//' + window.location.hostname + (window.location.port ? (':' + window.location.port) : '');\n    }\n    catch (e) {\n    }\n}\n\n// fake storage (eg for Safari private browsing)\nfunction fakeStorage(storageName: string) {\n    let fakeStorage = {};\n    let storage;\n    let needed = false;\n\n    if (typeof window[storageName] === \"object\") {\n        // Storage is there, does it work (eg Safari private browsing)\n        try {\n            window[storageName].setItem(\"fakeStorageTest\", \"1\");\n            window[storageName].removeItem(\"fakeStorageTest\");\n        }\n        catch (e) {\n            needed = true;\n        }\n    }\n    else {\n        needed = true;\n    }\n\n    if (!needed) {\n        return;\n    }\n\n    if (typeof window[storageName] === \"object\") {\n        // Override with fake implementation\n        storage = window[storageName];\n    }\n    else {\n        // Implement with fake\n        try {\n            storage = window[/*fool readonly*/<string>storageName] = {};\n        }\n        catch (e) {\n            console.warn(\"Unable to set fake\", storageName);\n            return;\n        }\n    }\n\n    console.warn(\"Using fake\", storageName);\n\n    const dispatchStorageEvent = function(key, newValue) {\n        const oldValue = (!key) ? null : storage.getItem(key);\n        const url = location.href.substr(location.origin.length);\n        const storageEvent = document.createEvent(\"StorageEvent\"); // For IE, http://stackoverflow.com/a/25514935/1214183\n\n        storageEvent[\"initStorageEvent\"](\"storage\", false, false, key, oldValue, newValue, url, storage);\n        window.dispatchEvent(storageEvent);\n    };\n\n    storage.key = function(i) {\n        const key = Object.keys(fakeStorage)[i];\n        return typeof key === \"string\" ? key : null;\n    };\n\n    storage.getItem = function(key) {\n        return typeof fakeStorage[key] === 'string' ? fakeStorage[key] : null;\n    };\n\n    storage.setItem = function(key, value) {\n        dispatchStorageEvent(key, value);\n        fakeStorage[key] = String(value);\n    };\n\n    storage.removeItem = function(key) {\n        dispatchStorageEvent(key, null);\n        delete fakeStorage[key];\n    };\n\n    storage.clear = function() {\n        dispatchStorageEvent(null, null);\n        fakeStorage = {};\n    };\n}\n\nfakeStorage(\"localStorage\");\nfakeStorage(\"sessionStorage\");\n\n// DOMRect polyfill\n// Credit: https://github.com/Financial-Times/polyfill-service/pull/1732\n(function(global: any) {\n    if (global.DOMRect) {\n        return;\n    }\n    function number(v) {\n        return v === undefined ? 0 : Number(v);\n    }\n    function different(u, v) {\n        return u !== v && !(isNaN(u) && isNaN(v));\n    }\n    function DOMRect(this: DOMRect, xArg, yArg, wArg, hArg) {\n        let x; let y; let width; let height; let left; let right; let top; let bottom;\n        x = number(xArg);\n        y = number(yArg);\n        width = number(wArg);\n        height = number(hArg);\n        Object.defineProperties(this, {\n            x: {\n                get: function () { return x; },\n                set: function (newX) {\n                    if (different(x, newX)) {\n                        x = newX;\n                        left = right = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            y: {\n                get: function () { return y; },\n                set: function (newY) {\n                    if (different(y, newY)) {\n                        y = newY;\n                        top = bottom = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            width: {\n                get: function () { return width; },\n                set: function (newWidth) {\n                    if (different(width, newWidth)) {\n                        width = newWidth;\n                        left = right = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            height: {\n                get: function () { return height; },\n                set: function (newHeight) {\n                    if (different(height, newHeight)) {\n                        height = newHeight;\n                        top = bottom = undefined;\n                    }\n                },\n                enumerable: true\n            },\n            left: {\n                get: function () {\n                    if (left === undefined) {\n                        left = x + Math.min(0, width);\n                    }\n                    return left;\n                },\n                enumerable: true\n            },\n            right: {\n                get: function () {\n                    if (right === undefined) {\n                        right = x + Math.max(0, width);\n                    }\n                    return right;\n                },\n                enumerable: true\n            },\n            top: {\n                get: function () {\n                    if (top === undefined) {\n                        top = y + Math.min(0, height);\n                    }\n                    return top;\n                },\n                enumerable: true\n            },\n            bottom: {\n                get: function () {\n                    if (bottom === undefined) {\n                        bottom = y + Math.max(0, height);\n                    }\n                    return bottom;\n                },\n                enumerable: true\n            }\n        });\n    }\n    global.DOMRect = DOMRect;\n}(window));\n\n// Element.closest and Element.matches polyfills (see https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\nif (!Element.prototype.matches) {\n    Element.prototype.matches =\n        (Element.prototype as any).msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function(s) {\n        let el = this;\n        do {\n            if (el.matches(s)) {\n                return el;\n            }\n            el = el.parentElement || el.parentNode as Element;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\n\nexport {\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enLogin, frLogin, deLogin} from \"@sinequa/core/login\";\n\nconst enCore = Utils.merge({}, enLogin);\nconst frCore = Utils.merge({}, frLogin);\nconst deCore = Utils.merge({}, deLogin);\n\nexport { enCore, frCore, deCore };\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {CCColumn, SpellingCorrectionMode} from \"./config/ccapp\";\n\n/**\n * Describes the results of a call to the query web service\n */\nexport interface Results {\n    /**\n     * A unique identifier for this set of results - typically used for auditing\n     */\n    id: string;\n    /**\n     * The sql queries that were executed on the server to produce these results\n     */\n    sql: string[];\n    /**\n     * The page number of these results\n     */\n    page: number;\n    /**\n     * The page size or number of document per page\n     */\n    pageSize: number;\n    /**\n     * The number of document results for the query.\n     */\n    rowCount: number;\n    /**\n     * The number of document results for the query. If tab search is active and the `CCTabSearch.totalIsSumOfTabTotals` option is set then\n     * the total of counts of all the tabs will be returned. Otherwise this returns the same value as `rowCount`.\n     */\n    totalRowCount: number;\n    /**\n     * Returns the number of documents included in these results, as reported by the engine. It will have the same value as `records.length`.\n     */\n    cursorRowCount: number;\n    /**\n     * The number of attributes in these results\n     */\n    attributeCount: number;\n    /**\n     * The number of columns in these results\n     */\n    columnCount: number;\n    /**\n     * The name of currently selected tab. See {@link CCTab}\n     */\n    tab: string;\n    /**\n     * Information on the tabs for these results. See {@link CCTabSearch}\n     */\n    tabs: Tab[];\n    /**\n     * The name of the currently selected scope. See {@link CCScope}\n     */\n    scope: string;\n    /**\n     * The name of the currently selected sorting choice. See {@link CCSortingChoice}\n     */\n    sort: string;\n    /**\n     * Details of the \"did you mean\" state for these results\n     */\n    didYouMean: DidYouMean;\n    /**\n     * The aggregation results\n     */\n    aggregations: Aggregation[];\n    /**\n     * The attributes for these results\n     */\n    attributes: Attributes;\n    /**\n     * Any query intents associated with these results\n     */\n    queryIntents: QueryIntent[];\n    /**\n     * An analysis of the query associated with these resullts\n     */\n    queryAnalysis: QueryAnalysis;\n    /**\n     * The document records\n     */\n    records: Record[];\n    /**\n     * A hash of the associated results for use with RFM (relevance feedback model) functionality\n     */\n    rfmQueryHash: string;\n    /**\n     * The name of the {@link IQuery} that produced these results\n     */\n    queryName: string;\n    /**\n     * SQL statements executed by the query web service\n     */\n    statements: string[];\n}\n\n/**\n * Describes the results for a particular tab\n */\nexport interface Tab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The tab value\n     */\n    value: string;\n    /**\n     * The number of document records that would be returned if this tab is selected\n     */\n    count: number;\n}\n\n/**\n * Describes a single \"did you mean\" item\n */\nexport interface DidYouMeanItem {\n    /**\n     * The original search term\n     */\n    original: string;\n    /**\n     * The corrected search term\n     */\n    corrected: string;\n}\n\n/**\n * Describes the \"did you mean\" results\n */\nexport interface DidYouMean {\n    /**\n     * The spelling correction mode used for these results\n     */\n    spellingCorrectionMode: SpellingCorrectionMode;\n    /**\n     * The `DidYouMeanItem` corresponding to the main fulltext terms\n     */\n    text: DidYouMeanItem;\n    /**\n     * The `DidYouMeanItem`s corresponding to any refine fulltext term selections\n     */\n    refine: DidYouMeanItem[];\n}\n\n/**\n * Used to inform whether a query is being executed using original or corrected search terms\n */\nexport enum DidYouMeanKind {\n    Original,\n    Corrected\n}\n\n/**\n * Various attributes that are returned with a set of search results\n */\nexport interface  Attributes {\n    queryid: string;\n    searchid: string;\n    processingtime: string;\n    rowfetchtime: string;\n    cachehit: string;\n    matchingrowcount: string;\n    internalqueryanalysis: string;\n    internalquerylog: string;\n}\n\n/**\n * Describes a single query intent item\n */\nexport interface QueryIntent {\n    name: string;\n    component: string;\n    entities: QueryIntentEntity[];\n    words: QueryIntentWord[];\n    actions: QueryIntentAction[];\n    datasets: QueryIntentDatasets;\n}\n\n/**\n * Describes a query intent entity\n */\nexport interface QueryIntentEntity {\n    name: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent word\n */\nexport interface QueryIntentWord {\n    word: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent action\n */\nexport interface QueryIntentAction {\n    type: string;\n    data: string;\n}\n\n/**\n * Describes a set of query intent datasets\n */\nexport interface QueryIntentDatasets {\n    [name: string] : {\n        attributes : [any],\n        rows : [any]\n    };\n}\n\n/**\n * Describes an analysis of a query\n */\nexport interface QueryAnalysis {\n    text: string;\n    initial: boolean;\n    queryLanguage: string | undefined;\n    elements: QueryAnalysisElement[];\n}\n\n/**\n * Describes an element of query analysis\n */\nexport interface QueryAnalysisElement {\n    text: string;\n    entity: string;\n    weight: number;\n    length: number;\n    offset: number;\n    stopword: boolean;\n    root: string;\n    normalization: string;\n    lemmas: {text: string}[];\n    entities: QueryAnalysisElement[];\n    synonyms: QueryAnalysisElement[];\n    reformulations: QueryAnalysisElement[];\n    typos: QueryAnalysisElement[];\n    expression: QueryAnalysisElement[];\n    adjacency: QueryAnalysisElement[];\n    exact: QueryAnalysisElement[];\n}\n\n/**\n * Describes the match location information for a particular partname\n */\nexport interface PartnameMatchLocations {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname match locations\n */\nexport interface MatchLocationsPerPartname {\n    matchlocations: PartnameMatchLocations[];\n}\n\n/**\n * Describes the locations of relevant extracts for a partname\n */\nexport interface PartnameExtracts {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname relevant extracts locations\n */\nexport interface ExtractsPerPartname {\n    highlight: PartnameExtracts[];\n}\n\n/**\n * Describes the term presence for a particular search term\n */\nexport interface TermPresence {\n    term: string;\n    presence: \"found\" | \"missing\";\n}\n\n/**\n * Describes an aggregation item. This serves as a base interface for list aggregation items and tree aggregation nodes\n */\nexport interface AggregationItem {\n    /**\n     * The value of the item\n     */\n    value: FieldValue;\n    /**\n     * The display value of the item, if any\n     */\n    display?: string;\n    /**\n     * The number of documents that contain this item in the current results\n     */\n    count: number;\n    /**\n     * Identifies any operator with their associated results\n     */\n    operatorResults?: {\n        [key in \"min\" | \"max\" | \"sum\" | \"avg\" | \"stddev\" | \"variance\"]: number | Date\n    };\n\n    /**\n     * A client-side field that indicates whether this item is currrently selected\n     */\n    $selected?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently excluded\n     */\n    $excluded?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently filtered\n     */\n    $filtered?: boolean;\n    /**\n     * A client-side field that indicates the column that provided the value for this item.\n     * This can be useful when mixing items from different aggregations.\n     */\n    $column?: CCColumn;\n}\n\n/**\n * Describes any fields particular to a list aggregation item\n */\nexport type ListAggregationItem = AggregationItem;\n\n/**\n * Describes any fields particular to a tree aggregation node\n */\nexport interface TreeAggregationNode extends AggregationItem {\n    /**\n     * Determines whether this node has any children even if the `items` field is not currently populated\n     */\n    hasChildren: boolean;\n    /**\n     * Contains the child nodes of this node\n     */\n    items: TreeAggregationNode[];\n\n    /**\n     * A client-side field that contains the full path of the node\n     */\n    $path?: string;\n    /**\n     * A client-side field that indicates whether a parent node is currently open\n     */\n    $opened?: boolean;\n    /**\n     * The level at which this node is in the Tree aggregation\n     */\n    $level: number;\n}\n\n/**\n * Describes the results of an aggregation. This serves as a base interface for list and tree aggregations\n */\nexport interface Aggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The name of the index column used to provide aggregation items\n     */\n    column: string;\n    /**\n     * Indicates whether the aggregation items are calculated using a distrbution (see App Dependencies in the Sinequa admin interface)\n     */\n    isDistribution?: boolean;\n    /**\n     * Indicates whether the aggregation items should be handled as tree nodes. This can be set to false for a tree aggregation\n     * if the \"Load tree as csv\" option is checked in the Sinequa configuration\n     */\n    isTree?: boolean;\n    /**\n     * Indicates whether the values for the items are fielded search expressions. This is the case for aggregations using a\n     * distribution (see `isDistribution`) and crossed distributions\n     */\n    valuesAreExpressions?: boolean;\n    /**\n     * The aggregation items for this aggregation\n     */\n    items?: AggregationItem[];\n}\n\n/**\n * Describes the fields specific to a list aggregation\n */\nexport type ListAggregation = Aggregation;\n\n/**\n * Describes the fields specific to a tree aggregation\n */\nexport type TreeAggregation = Aggregation;\n\n/**\n * Describes the fields making up an entity in the context of a particular document\n */\nexport interface EntityItem {\n    /**\n     * The value\n     */\n    value: string;\n    /**\n     * The display\n     */\n    display: string;\n    /**\n     * The locations of this item in the document text in the form `row1,col1;row2,col2;...`\n     */\n    locations?: string;\n    /**\n     * The remapped locations of this item in the original document in the form `row1,col1;row2,col2;...`\n     */\n    originalLocations?: string;\n    /**\n     * Following ES-11166, the number of occurrence of this entity in the document can be included\n     */\n    count?: number;\n}\n\n/**\n * Display kinds for RFM\n */\nexport enum RFMDisplay {\n    // Must be in par with C# RFMDisplay enum (RFM.cs)\n    none          = 0,\n\n    positiveRate  = 1,\n    mainlyPosRate = 2,\n    unrate        = 4,\n    mainlyNegRate = 8,\n    negativeRate  = 16,\n\n    all          = 31,\n    positiveOnly = 7,\n    negativeOnly = 28,\n\n    personalAll = 21,\n    personalPosOnly = 5,\n    personalNegOnly = 20,\n}\n\n/**\n * Describes the fields of an RFM action\n */\nexport interface RFMActionDisplay {\n    eventCount: number;\n    average: number;\n    status: RFMDisplay;\n    image: RFMDisplay;\n    imageAction: RFMDisplay;\n    availableActions: RFMDisplay;\n}\n\n/**\n * Describes the RFM data returned with a set of results\n */\nexport interface RFMData {\n    click?: RFMActionDisplay;\n    like?: RFMActionDisplay;\n    important?: RFMActionDisplay;\n}\n\n/**\n * Describes the standard fields in a document result record\n */\nexport interface Record {\n    /**\n     * The zero-based position of this document in the results\n     */\n    rank: number;\n    /**\n     * The unique identifier of this document\n     */\n    id: string;\n    /**\n     * The name of the index that contains this document\n     */\n    databasealias: string;\n    /**\n     * The global relevance of this document in the context of the query\n     */\n    globalrelevance: number;\n    /**\n     * Partnames that contain one or more of the search terms\n     */\n    matchingpartnames: string[];\n    /**\n     * The locations of the search terms in the document\n     */\n    matchlocations: string[];\n    /**\n     * The locations of the search terms in the document grouped by partname\n     */\n    matchlocationsperpartname: MatchLocationsPerPartname;\n    /**\n     * The relevant extracts in the document grouped by partname\n     */\n    extractsperpartname: ExtractsPerPartname;\n    /**\n     * The languages in the document\n     */\n    documentlanguages: string[];\n    /**\n     * The documentweight value of the document\n     */\n    documentweight: string;\n    /**\n     * The modified date and time of the document\n     */\n    modified: string;\n    /**\n     * The time and date when the document was indexed\n     */\n    indexationtime: string;\n    /**\n     * The version of the document\n     */\n    version: string;\n    /**\n     * The title of the document\n     */\n    title: string;\n    /**\n     * The display title of the document. This can contain HTML highlighting of the search terms\n     */\n    displayTitle: string;\n    /**\n     * The size in bytes of the document\n     */\n    size: number;\n    /**\n     * The value of the treepath of the document\n     */\n    treepath: string[];\n    /**\n     * The filename of the document\n     */\n    filename: string;\n    /**\n     * The file extension of the document\n     */\n    fileext: string;\n    /**\n     * The document flags\n     */\n    flags: string[];\n    /**\n     * The collection that produced the document (only one element will exist)\n     */\n    collection: string[];\n    /**\n     * The value of the docformat column\n     */\n    docformat: string;\n    /**\n     * The value of the doctype column\n     */\n    doctype: string;\n    /**\n     * The value of the url1 column\n     */\n    url1: string;\n    /**\n     * The value of the url2 column\n     */\n    url2: string;\n    /**\n     * The relevant extracts from the document. This can contain HTML highlighting of the search terms\n     */\n    relevantExtracts: string;\n    /**\n     * The text of the document\n     */\n    text: string;\n    /**\n     * The document authors\n     */\n    authors: string[];\n    /**\n     * The document access lists\n     */\n    accesslists: DocumentAccessLists;\n    /**\n     * The URL of the document's thumbnail\n     */\n    thumbnailUrl: string;\n    /**\n     * Indicates whether RFM has been enabled for this document\n     */\n    rfmEnabled: boolean;\n    /**\n     * Any RFM data for this document\n     */\n    rfm: RFMData;\n    /**\n     * Information about the search terms and whether they exist in the document or not\n     */\n    termspresence: TermPresence[];\n    /**\n     * A client-side field that indicates whether this document is currrently selected\n     */\n    $selected: boolean;\n    /**\n     * id of the container of this document (for splitted documents, attachments, etc.)\n     */\n    containerid?: string;\n    /**\n     * Page number of this document (for splitted documents). Added by the front-end\n     */\n    $page?: number;\n}\n\n/**\n * Describes the authorized and denied access lists for a document\n */\nexport interface DocumentAccessLists {\n    accessListIndices: number[];\n    authorizedLists: AccessLists;\n    deniedLists: AccessLists;\n}\n\n/**\n * Describes the access lists\n */\nexport interface AccessLists {\n    /**\n     * An array of `AccessListPrincipal` arrays. Each item in the outer array corresponds to column value of the document\n     */\n    [index: number]: AccessListPrincipal[];\n}\n\n/**\n * Describes the fields of a principal item in an access list\n */\nexport interface AccessListPrincipal {\n    /**\n     * The Sinequa domain to which the principal belongs\n     */\n    domain: string;\n    /**\n     * The identifier of the principal\n     */\n    id: string;\n}\n\nexport interface IMulti<T> {\n    results: T[];\n}\n\n/**\n * Describes information to be sent to the server when executing a query for server-side query intent processing\n */\nexport interface QueryIntentData {\n    /**\n     * The current results view\n     */\n    resultsView?: string;\n    /**\n     * The current tab\n     */\n    tab?: string;\n    /**\n     * Query intents\n     */\n    queryIntents?: QueryIntent[];\n    /**\n     * Analysis of the current query\n     */\n    queryAnalysis?: QueryAnalysis;\n}\n\n/**\n * A service to call the query web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        public httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    protected endPoint = \"query\";\n\n    /**\n     * Get the results for the passed query\n     *\n     * @param query The query to execute\n     * @param auditEvents Any audit events to store on the server\n     * @param queryIntentData Any accompanying query intent data\n     */\n    public getResults(query: IQuery, auditEvents?: AuditEvents, queryIntentData?: QueryIntentData): Observable<Results> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n        const observable = this.httpClient.post<Results>(this.makeUrl(this.endPoint), {\n            app: this.appName,\n            query,\n            $auditRecord: auditEvents,\n            queryIntentData\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"queryService.getResults success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"queryService.getResults failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Get the results for a set of queries\n     *\n     * @param queries The queries to execute\n     * @param auditEvents Any audit events to store on the server\n     */\n    public getMultipleResults(queries: IQuery[], auditEvents?: AuditEvents): Observable<IMulti<Results>> {\n        if (!queries || queries.length === 0) {\n            return throwError({ error: \"no queries\" });\n        }\n        const data: {\n            methods: {\n                method: string,\n                app: string,\n                query: IQuery\n            }[],\n            propagateErrors: true,\n            $auditRecord?: AuditEvents\n        } = {\n            methods: [],\n            propagateErrors: true,\n            $auditRecord: auditEvents\n        };\n        for (const query of queries) {\n            data.methods.push({\n                method: this.endPoint,\n                app: this.appName,\n                query\n            });\n        }\n        return this.httpClient.post<IMulti<Results>>(this.makeUrl(\"multi\"), data);\n    }\n}\n","export * from \"./public-api\";","const MODAL_MODULE_PROVIDERS = [];\n\nexport {MODAL_MODULE_PROVIDERS};\n","import {NgModule, Injectable, Inject, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {Ng2UiAuthModule, /*IPartialConfigOptions,*/ CONFIG_OPTIONS, IProviders, StorageType, OauthService, PopupService} from \"ng2-ui-auth\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {AuthenticationOauthService} from \"./authentication-oauth.service\";\nimport {AuthenticationPopupService} from \"./authentication-popup.service\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {WebServicesModule, START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationModule} from \"@sinequa/core/notification\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\n\n// Login\nimport {MODAL_LOGIN} from \"./login.service\";\nimport {Login} from \"./login.component\";\n\nimport {LOGIN_MODULE_PROVIDERS} from \"./module.providers\";\n\nexport interface IPartialConfigOptions {} // until export restored to ng2-ui-auth@9\n\n/**\n * Configuration for the ng2-ui-auth library\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthConfig implements IPartialConfigOptions {\n    storageType: StorageType;\n    providers: IProviders;\n    constructor(@Inject(START_CONFIG) startConfig: StartConfig) {\n        this.storageType = \"memory\" as StorageType;\n        this.providers = startConfig.providers || {};\n    }\n}\n\n/**\n * This module provides support for user authentication in the {@link AuthenticationService}. This authentication can be\n * automatic (OAuth/SAML), if configured in the Sinequa administration, or manual where the user name and password are\n * entered in a modal dialog box and transmitted in clear text. There is also support for the ng2-ui-auth library where the\n * authentication process occurs in a browser popup window. Authentication is instigated by the handling of HTTP 401 errors\n * in an `HttpInterceptor` so all web service calls requiring authentication are automatically protected. This module will\n * not be used for authentication when the web server is configured for Windows authentication.\n *\n * A higher level {@link LoginService} groups the successful retrieval of the current `application configuration` ({@link AppService}),\n * `principal` ({@link PrincipalWebService}), and `user settings` ({@link UserSettingsWebService}) all of which require the user\n * to be authenticated. This can be used as a \"gatekeeper\" to protect access to the main, often routed, component(s).\n *\n * The {@link LoginInterceptor} in this module must be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        Ng2UiAuthModule.forRoot(undefined, false),\n        ModalModule.forRoot(),\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        AppUtilsModule,\n        WebServicesModule,  // Required for start-up config (START_CONFIG token)\n        IntlModule,\n        ValidationModule,\n        NotificationModule\n    ],\n    declarations: [\n        Login, // Default Login components\n    ],\n    exports: [\n    ],\n    providers: [\n        // Auth module dependencies\n        {provide: CONFIG_OPTIONS, useClass: AuthConfig},\n        {provide: OauthService, useExisting: AuthenticationOauthService},\n        {provide: PopupService, useExisting: AuthenticationPopupService},\n\n        ...LOGIN_MODULE_PROVIDERS\n    ]\n})\nexport class LoginModule {\n    static forRoot(loginModal: Type<any> = Login): ModuleWithProviders<LoginModule> {\n        return {\n            ngModule: LoginModule,\n            providers: [\n                // Login\n                {provide: MODAL_LOGIN, useValue: loginModal},\n            ]\n        };\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport \"./polyfills\";\n\n/**\n * This module contains a variety of base types and utility classes including the {@link Utils} utilility class\n */\n@NgModule({\n    imports: [\n    ],\n    declarations: [\n    ],\n    exports: [\n    ]\n})\nexport class BaseModule {\n}","const INTL_MODULE_PROVIDERS = [];\n\nexport {INTL_MODULE_PROVIDERS};\n","export * from \"./public-api\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"W95i\";","export * from \"./public-api\";\n","import {Locale, LocalesConfig} from \"@sinequa/core/intl\";\nimport {enCore} from \"./messages\";\n\nexport class DefaultLocalesConfig implements LocalesConfig {\n    defaultLocale: Locale;\n    locales?: Locale[];\n\n    constructor() {\n        this.defaultLocale = {\n            name: \"en\",\n            display: \"English\",\n            data: {\n                intl: {\n                    locale: \"en-US\"\n                },\n                messages: enCore,\n            }\n        };\n        this.locales = [this.defaultLocale];\n    }\n}\n","import {HttpParams, HttpParameterCodec} from \"@angular/common/http\";\nimport {Observable, Subscription} from \"rxjs\";\nimport moment from \"moment\";\nimport {remove as removeDiacritics} from \"diacritics\";\nimport jsSHA from \"jssha\";\nimport {MapOf} from \"./map-of\";\nimport {FieldValue} from \"./field-value\";\nimport kebabCase from \"lodash/kebabCase\";\nimport snakeCase from \"lodash/snakeCase\";\nimport camelCase from \"lodash/camelCase\";\nimport escape from \"lodash/escape\";\nimport unescape from \"lodash/unescape\";\nimport isEqual from \"lodash/isEqual\";\n\n// Because of: https://github.com/angular/angular/issues/18261\nclass SqHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n\n/**\n * Describes options for the [Utils.toJson]{@link Utils#toJson} method\n */\nexport interface ToJsonOptions {\n    /**\n     * If `true` then spacing is added to the output string\n     */\n    pretty?: boolean;\n}\n\n/**\n * Describes options for the [Utils.fromJson]{@link Utils#fromJson} method\n */\nexport interface FromJsonOptions {\n    /**\n     * If `true` then strings containing either ISO8601 or Sinequa \"system\" dates (`yyyy-mm-dd [hh:mm:ss]`) are\n     * converted to Javascript `Date` objects\n     */\n    reviveDates?: boolean;\n}\n\n/**\n * Describes options for the [Utils.throttle]{@link Utils#throttle} method\n */\nexport interface ThrottleSettings {\n    /**\n     * Set to `false` to disable the initial call to the callback function\n     */\n    leading?: boolean;\n    /**\n     * Set to `false` to disable the final call to the callback function\n     */\n    trailing?: boolean;\n}\n\nclass FrameTask {\n    constructor(\n        public callback: (...params) => any,\n        public params: any[]) {\n    }\n\n    call(): any {\n        return this.callback(...this.params);\n    }\n}\n\n/**\n * A utility class to log execution durations\n */\nexport class Timer {\n    /**\n     * Contains the timestamp of when the `Timer` object was instantiated\n     */\n    readonly start = performance.now();\n    /**\n     * Contains the current durartion in milliseconds of the `Timer` object\n     */\n    duration = 0;\n\n    constructor(private readonly name: string) {\n    }\n\n    /**\n     * Updates the `duration` of the `Timer` object\n     */\n    stop() {\n        this.duration = performance.now() - this.start;\n        console.log(`Timer: ${this.name} finished in ${Math.round(this.duration)} ms`);\n    }\n}\n\n/**\n * A generic interface for tree nodes\n */\nexport interface TreeNode {\n    /**\n     * Children elements of this tree node\n     */\n    items?: TreeNode[];\n}\n\n/**\n * A utility class containing a variety of static methods and properties\n */\n// @dynamic\nexport class Utils {\n    /**\n     * The number of milliseconds in one day\n     */\n    static readonly oneDay = 86400000;\n    /**\n     * The number of milliseconds in one hour\n     */\n    static readonly oneHour = 3600000;\n    /**\n     * The number of milliseconds in one minute\n     */\n    static readonly oneMinute = 60000;\n    /**\n     * The number of milliseconds in one second\n     */\n    static readonly oneSecond = 1000;\n\n    private static baseExtend(dst, objs, deep?: boolean, sort?: boolean | ((a: string, b: string) => number)) {\n        for (let i = 0, ii = objs.length; i < ii; ++i) {\n            const obj = objs[i];\n            if (!Utils.isObject(obj) && !Utils.isFunction(obj)) {\n                continue;\n            }\n            let keys = Object.keys(obj);\n            if (sort) {\n                if (Utils.isFunction(sort)) {\n                    keys = keys.sort(sort);\n                }\n                else {\n                    keys = keys.sort();\n                }\n            }\n            for (let j = 0, jj = keys.length; j < jj; j++) {\n                const key = keys[j];\n                const src = obj[key];\n                if (deep && Utils.isObject(src)) {\n                    if (Utils.isDate(src)) {\n                        dst[key] = new Date(src.valueOf());\n                    }\n                    else if (Utils.isRegExp(src)) {\n                        dst[key] = new RegExp(src);\n                    }\n                    else if (src.nodeName) {\n                        dst[key] = src.cloneNode(true);\n                    }\n                    else {\n                        if (!Utils.isObject(dst[key])) {\n                            dst[key] = Utils.isArray(src) ? [] : {};\n                        }\n                        Utils.baseExtend(dst[key], [src], true);\n                    }\n                }\n                else {\n                    dst[key] = src;\n                }\n            }\n        }\n        return dst;\n    }\n\n    /**\n     * Shallowly copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be copied by reference, not duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static extend(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, false);\n    }\n\n    /**\n     * Deeply copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static merge(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, true);\n    }\n\n    /**\n     * Deeply copy the properties in the source objects to the destination object.\n     * Any nested objects or arrays will be duplicated.\n     * The source objects are treated in order so properties in later\n     * objects will override properties in earlier ones.\n     * The properties of the source objects are sorted in ascending, ASCII character order\n     * before they are copied to ensure a consistent insertion order in the destination\n     * object.\n     *\n     * @param destination The object to which properties are copied\n     * @param sources Objects from which properties are copied\n     * @return the destination object\n     */\n    static mergeAndSort(destination: any, ...sources: any[]): any {\n        return Utils.baseExtend(destination, sources, true, true);\n    }\n\n    private static forEach(obj, iterator, context?) {\n        let key, length;\n        if (obj) {\n            if (Utils.isFunction(obj)) {\n                for (key in obj) {\n                    // Need to check if hasOwnProperty exists,\n                    // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function\n                    if (key !== 'prototype' && key !== 'length' && key !== 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {\n                    iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else if (Utils.isArray(obj) || Utils.isArrayLike(obj)) {\n                const isPrimitive = typeof obj !== 'object';\n                for (key = 0, length = obj.length; key < length; key++) {\n                    if (isPrimitive || key in obj) {\n                        iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else if (obj.forEach && obj.forEach !== Utils.forEach) {\n                obj.forEach(iterator, context, obj);\n            } else if (Utils.isBlankObject(obj)) {\n                // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n                for (key in obj) {\n                    iterator.call(context, obj[key], key, obj);\n                }\n            } else if (typeof obj.hasOwnProperty === 'function') {\n                // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                    iterator.call(context, obj[key], key, obj);\n                    }\n                }\n            } else {\n            // Slow path for objects which do not have a method `hasOwnProperty`\n            for (key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    iterator.call(context, obj[key], key, obj);\n                }\n            }\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Makes a deep copy of the passed object or array and returns it.\n     * Copies of source objects of the following types: `TypedArray`, `Date`, `RegExp` `Node` are\n     * made using the appropriate constructor. Arrays are created using `[]`. Other objects are created\n     * using `Object.create` passing the source object's protptype, if any.\n     *\n     * @param source The source item to copy (`Object`, `Array`, `TypedArray`, `Date`, `RegExp`, `Node`)\n     * @param destination An optional item to use as the destination. If passed, the item is cleared\n     * before the source is copied to it. The destination cannot be a `TypedArray` and cannot be the same\n     * as the source\n     * @return The copied item\n     */\n    static copy<T extends object>(source: T, destination?: T): T {\n        const stackSource: object[] = [];\n        const stackDest: object[] = [];\n\n        if (destination) {\n            if (Utils.isTypedArray(destination)) {\n                throw new Error(\"Can't copy! TypedArray destination cannot be mutated.\");\n            }\n            if (source === destination) {\n                throw new Error(\"Can't copy! Source and destination are identical.\");\n            }\n\n            // Empty the destination object\n            if (Utils.isArray(destination)) {\n                (destination as Array<any>).length = 0;\n            }\n            else {\n                Utils.forEach(destination, (value, key) => {\n                    if (!source.hasOwnProperty(key)) {\n                        delete destination[key];\n                    }\n                });\n            }\n\n            stackSource.push(source);\n            stackDest.push(destination);\n            return copyRecurse(source, destination);\n        }\n\n        return copyElement(source);\n\n        function copyRecurse(source, destination) {\n            let key;\n            if (Utils.isArray(source)) {\n                for (let i = 0, ii = source.length; i < ii; i++) {\n                    destination.push(copyElement(source[i]));\n                }\n            } else if (Utils.isBlankObject(source)) {\n                // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n                for (key in source) {\n                    destination[key] = copyElement(source[key]);\n                }\n            } else if (source && typeof source.hasOwnProperty === 'function') {\n                // Slow path, which must rely on hasOwnProperty\n                for (key in source) {\n                    if (source.hasOwnProperty(key)) {\n                        destination[key] = copyElement(source[key]);\n                    }\n                }\n            } else {\n                // Slowest path --- hasOwnProperty can't be called as a method\n                for (key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        destination[key] = copyElement(source[key]);\n                    }\n                }\n            }\n            return destination;\n        }\n\n        function copyElement(source) {\n            // Simple values\n            if (!Utils.isObject(source)) {\n                return source;\n            }\n\n            // Already copied values\n            const index = stackSource.indexOf(source);\n            if (index !== -1) {\n                return stackDest[index];\n            }\n\n            if (Utils.isWindow(source)) {\n                throw new Error(\"Can't copy! Making copies of Window instances is not supported.\");\n            }\n\n            let needsRecurse = false;\n            let destination;\n\n            if (Utils.isArray(source)) {\n                destination = [];\n                needsRecurse = true;\n            } else if (Utils.isTypedArray(source)) {\n                destination = new source.constructor(source);\n            } else if (Utils.isDate(source)) {\n                destination = new Date(source.getTime());\n            } else if (Utils.isRegExp(source)) {\n                const matches = source.toString().match(/[^\\/]*$/);\n                destination = new RegExp(source.source, matches ? matches[0] : \"\");\n                destination.lastIndex = source.lastIndex;\n            } else if (Utils.isFunction(source.cloneNode)) {\n                destination = source.cloneNode(true);\n            } else {\n                destination = Object.create(Object.getPrototypeOf(source));\n                needsRecurse = true;\n            }\n\n            stackSource.push(source);\n            stackDest.push(destination);\n\n            return needsRecurse ? copyRecurse(source, destination) : destination;\n        }\n    }\n\n    // Not currently used\n    private static copyWithoutNullOrEmpty(dst: MapOf<any>, src: MapOf<any>): MapOf<any> {\n        const keys = Object.keys(src);\n        for (let j = 0, jj = keys.length; j < jj; j++) {\n            const key = keys[j];\n            const value = src[key];\n            if (value === null || Utils.isEmpty(null)) {\n                continue;\n            }\n            else if (Utils.isObject(value)) {\n                if (Utils.isDate(value)) {\n                    dst[key] = new Date(value.valueOf());\n                }\n                else if (Utils.isRegExp(value)) {\n                    dst[key] = new RegExp(value);\n                }\n                else {\n                    if (!Utils.isObject(dst[key])) {\n                        dst[key] = Utils.isArray(value) ? [] : {};\n                    }\n                    dst[key] = Utils.copyWithoutNullOrEmpty(dst[key], value);\n                }\n            }\n            else {\n                dst[key] = value;\n            }\n        }\n        return dst;\n    }\n\n    /**\n     * Makes a shallow copy of the passed object. Empty string values are removed from the copied object.\n     * A string value containing `\"\"` is copied as an empty string.\n     *\n     * @param defaults The object to copy\n     * @return The copied object\n     */\n    static copyDefaults(defaults: {}): {} {\n        const _defaults = Utils.copy(defaults);\n        if (_defaults) {\n            Object.keys(_defaults).forEach(key => {\n                // Unset parameters will come through as empty strings (regardless of type)\n                // Filter these out (to not hide defaults on the server) and accept \"\" as a way of explicitly\n                // setting a parameter to be an empty string\n                const value = _defaults[key];\n                if (value === \"\") {\n                    delete _defaults[key];\n                }\n                if (value === \"\\\"\\\"\") {\n                    _defaults[key] = \"\";\n                }\n            });\n        }\n        return _defaults;\n    }\n\n    /**\n     * Performs an optimized deep comparison between two objects to determine if they should be considered equal\n     * @param o1 The first object to be compared\n     * @param o2 The second object to be compared\n     */\n    static equals(o1: any, o2:any): boolean {\n        return isEqual(o1, o2);\n    }\n\n    /**\n     * Converts a string to an integer value using `parseInt` with radix = 10.\n     * If the string cannot be converted or contains additional characters then the\n     * passed default value is returned\n     * @param str The string to convert\n     * @param _default The default value to use if the string cannot be converted\n     */\n    static toInt(str: string, _default: number = 0): number {\n        let value = parseInt(str, 10);\n        if (isNaN(value) || (value + \"\" !== str)) {\n            value = _default;\n        }\n        return value;\n    }\n\n    /**\n     * Converts a string to a floating point value using `parseFloat`.\n     * If the string cannot be converted then the passed default value is returned\n     * @param str The string to convert\n     * @param _default The default value to use if the string cannot be converted\n     */\n    static toNumber(str: string, _default: number = 0): number {\n        let value = parseFloat(str);\n        if (isNaN(value)) {\n            value = _default;\n        }\n        return value;\n    }\n\n    /**\n     * Converts a string to a `Date` using `Date.parse`.\n     * The date is returned in UTC. If the string cannot be converted then `undefined` is returned\n     * @param str The string to convert\n     * @return The converted `Date` in UTC or `undefined`\n     */\n    static toDate(str: string): Date | undefined {\n        const ms = Date.parse(str);\n        if (!ms && ms !== 0) {\n            return undefined;\n        }\n        return new Date(ms + new Date(ms).getTimezoneOffset() * 60000); // get date in UTC\n    }\n\n    /**\n     * Get the time component of a `Date` in milliseconds\n     *\n     * @param date The date\n     * @return The time in milliseconds\n     */\n    static getTime(date: Date): number {\n        if (!date) {\n            return 0;\n        }\n        return (date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds()) * 1000 + date.getMilliseconds();\n    }\n\n    /**\n     * Return the current date and time\n     */\n    static get now(): Date {\n        return new Date();\n    }\n\n    /**\n     * Converts a `Date` to a Sinequa system date string (`dd-mm-yyyy[ hh:mm:ss]`)\n     * If the time component of the date is 0 then only the date portion of the string is included\n     *\n     * @param date The `Date` to convert\n     */\n    static toSysDateStr(date: Date): string {\n        if (!date)  {\n            return \"\";\n        }\n        const m = moment(date);\n        if (Utils.getTime(date) === 0) {\n            return m.format(\"YYYY-MM-DD\");\n        }\n        else {\n            return m.format(\"YYYY-MM-DD HH:mm:ss\");\n        }\n    }\n\n    /**\n     * Converts a Sinequa system date string (`dd-mm-yyyy[ hh:mm:ss]`) to a `Date`\n     * If the string cannot be converted then `undefined` is returned\n     *\n     * @param date The Sinequa system date string to convert\n     */\n    static fromSysDateStr(value: string): Date | undefined {\n        const m = moment(value, \"YYYY-MM-DD HH:mm:ss\");\n        if (m.isValid()) {\n            return m.toDate();\n        }\n        return undefined;\n    }\n\n    private static rxSysDateTime = /^\\d{4}-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])(?: (?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d)?$/;\n    // private static rxISO8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n    // ISO8601 combined date and time\n    private static rxISO8601DateTime = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\n\n    private static isSysDateTime(str: string): boolean {\n        return Utils.rxSysDateTime.test(str);\n    }\n\n    private static isISO8601DateTime(str: string): boolean {\n        return Utils.rxISO8601DateTime.test(str);\n    }\n\n    /**\n     * Converts a Javascript value to a JSON string using `JSON.stringify`.\n     * Date objects are converted to Sinequa system strings\n     *\n     * @param value The value to convert\n     * @param options Options for the conversion. The default is `{pretty: false}`\n     */\n    static toJson(value: any, options: ToJsonOptions = {pretty: false}): string {\n        return JSON.stringify(value,\n            function(key: string, value: any): any  {\n                if (key && Utils.isDate(this[key])) {\n                    const str = Utils.toSysDateStr(this[key]);\n                    return str;\n                }\n                return value;\n            }, options.pretty ? 2 : 0);\n    }\n\n    /**\n     * Converts a string to an object using `JSON.parse`.\n     * Strings that are either in Sinequa system date or ISO8601 format are converted to\n     * `Date` objects if the `reviveDates` option is specified.\n     *\n     * @param str The string to convert\n     * @param options Options for the conversion. The default is `{reviveDates: false}`\n     */\n    static fromJson(str: string, options: FromJsonOptions = {reviveDates: false}): any {\n        if (!str || typeof str !== \"string\") {\n            return {};\n        }\n        try {\n            return JSON.parse(str, options.reviveDates ?\n                (key, value) => {\n                    if (options.reviveDates && typeof value === \"string\") {\n                        if (Utils.isSysDateTime(value)) {\n                            const m = moment(value, \"YYYY-MM-DD HH:mm:ss\");\n                            if (m.isValid()) {\n                                return m.toDate();\n                            }\n                        }\n                        else if (Utils.isISO8601DateTime(value)) {\n                            const m = moment(value, moment.ISO_8601);\n                            if (m.isValid()) {\n                                return m.toDate();\n                            }\n                        }\n                    }\n                    return value;\n                } : undefined);\n        }\n        catch (exception) {\n            console.log(\"Utils.fromJson exception:\", exception);\n            return null;\n        }\n    }\n\n    /**\n     * Converts a `FieldValue` value to a string compatible with Sinequa's SQL syntax.\n     * String and `Date` values are enclosed in single quotes if the quote parameter is `true`\n     *\n     * @param value The value to convert\n     * @param quote If set, the returned string will be enclosed in single quotes for string and `Date` values\n     */\n    static toSqlValue(value: FieldValue, quote?: boolean): string {\n        if (Utils.isNumber(value)) {\n            return value + \"\";\n        }\n        if (Utils.isDate(value)) {\n            if (quote) {\n                return \"'\" + Utils.toSysDateStr(value) + \"'\";\n            }\n            else {\n                return Utils.toSysDateStr(value);\n            }\n        }\n        if (Utils.isBoolean(value)) {\n            return value ? \"true\" : \"false\";\n        }\n        if (Utils.isArray(value)) {\n            const ret: string[] = [];\n            value.forEach(v => {\n                if (ret.length > 0) {\n                    ret.push(\",\");\n                }\n                if (!v) {\n                    ret.push(\"null\");\n                }\n                else if (Utils.isString(v)) {\n                    ret.push(v);\n                }\n                else {\n                    ret.push(v.display || v.value || \"\");\n                }\n            });\n            ret.splice(0, 0, \"[\");\n            ret.push(\"]\");\n            return ret.join(\"\");\n        }\n        if (quote) {\n            return \"'\" + value + \"'\";\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * Clean a string so it is compatible with values stored in a Sinequa tree type-column.\n     * The following operations are performed:\n     * * ensure that the string starts and ends with forward slashes\n     * * replace tab characters with spaces\n     * * replace semi-colons with commas\n     * * replace back slashes with forward slashes\n     *\n     * @param s The string to clean\n     */\n    static treeClean(s: string): string {\n        if (Utils.isEmpty(s)) {\n            return s;\n        }\n        return Utils.addUrl(\"/\", Utils.replace(Utils.replace(Utils.replace(s, \"\\t\", \" \"), \";\", \",\"), \"\\\\\", \"/\"), \"/\");\n    }\n\n    /**\n     * Return the first node of a Sinequa tree value enclosed in forward slashes\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeFirst(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts.length === 0 ? \"\" : `/${parts[0]}/`;\n    }\n\n    /**\n     * Return the first node of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeFirstNode(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts[0];\n    }\n\n    /**\n     * Return the last node of a Sinequa tree value enclosed in forward slashes\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeLast(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts.length === 0 ? \"\" : `/${parts[parts.length - 1]}/`;\n    }\n\n    /**\n     * Return the last node of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeLastNode(s: string): string {\n        const parts = Utils.split(s, \"/\");\n        return parts[parts.length - 1];\n    }\n\n    /**\n     * Return the nodes making up a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeNodes(s: string): string[] {\n        return Utils.split(s, \"/\");\n    }\n\n    /**\n     * Return a Sinequa tree value, removing enclosing forward slash characters\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeDisplay(s: string): string {\n        if (!!s) {\n            if (s[0] === \"/\") {\n                s = s.substr(1);\n            }\n            if (s[s.length - 1] === \"/\") {\n                s = s.substr(0, s.length - 1);\n            }\n        }\n        return s;\n    }\n\n    /**\n     * Return the node count of a Sinequa tree value\n     *\n     * @param s A Sinequa tree value\n     */\n    static treeCount(s: string): number {\n        const count = Utils.count(s, \"/\");\n        return count > 0 ? count - 1 : 0;\n    }\n\n    /**\n     * Traverses a tree structure, executing a callback function at every node\n     * @param nodes the nodes to traverse\n     * @param callback the callback function\n     */\n    public static traverse<T extends TreeNode>(nodes: T[], callback: (lineage: T[] | undefined) => boolean): boolean {\n        if (!nodes || nodes.length === 0) {\n            return false;\n        }\n        if (!callback) {\n            return false;\n        }\n        const lineage: T[] = [];\n        const stack: (T | undefined)[] = [];\n        let _i = nodes.length;\n        while (_i--) {\n            stack.push(nodes[_i]);\n        }\n        while (stack.length) {\n            const node = stack.pop();\n            if (!node) {\n                lineage.pop();\n                callback(undefined);\n            }\n            else {\n                lineage.push(node);\n                if (callback(lineage)) {\n                    return true;\n                }\n                stack.push(undefined);\n                if (node.items && node.items.length > 0) {\n                    _i = node.items.length;\n                    while (_i--) {\n                        stack.push(node.items[_i] as T);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return a pseudo-GUID value using `Math.random`\n     *\n     * @param withHyphens If set, the returned GUID includes hyphen separators\n     */\n    static guid(withHyphens = true): string {\n        let d = Date.now();\n        const guid = (withHyphens ?\n            'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx' : 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx').replace(/[xy]/g, (c) => {\n                const r = (d + Math.random() * 16) % 16 | 0;\n                d = Math.floor(d / 16);\n                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n            });\n        return guid;\n    }\n\n    /**\n     * Return `true` if the passed value is `undefined`\n     */\n    static isUndefined(value): value is undefined {\n        return typeof value === 'undefined';\n    }\n\n    /**\n     * Return `true` if the passed value is an `object`\n     */\n    static isObject(value): value is any {\n        return value !== null && typeof value === 'object';\n    }\n\n    /**\n     * Return `true` if the passed value is a `string`\n     */\n    static isString(value): value is string {\n        return typeof value === 'string';\n    }\n\n    /**\n     * Return `true` if the passed value is a `number`\n     */\n    static isNumber(value): value is number {\n        return typeof value === 'number';\n    }\n\n    /**\n     * Return `true` if the passed value is a `boolean`\n     */\n    static isBoolean(value): value is boolean {\n        return typeof value === 'boolean';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Date`\n     */\n    static isDate(value): value is Date {\n        return Object.prototype.toString.call(value) === '[object Date]';\n    }\n\n    /**\n     * Return `true` if the passed value is a scalar (`number`, `boolean` or `Date`)\n     */\n    static isScalar(value): value is number | boolean | Date {\n        return Utils.isNumber(value) || Utils.isBoolean(value) || Utils.isDate(value);\n    }\n\n    /**\n     * Return `true` if the passed value is an `Array`\n     */\n    static isArray(value): value is Array<any> {\n        return Array.isArray(value);\n    }\n\n    /**\n     * Return `true` if the passed value is iterable\n     */\n    static isIterable(value): value is Array<any> {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return typeof value[Symbol.iterator] === \"function\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `Map`\n     */\n    static isMap(value): value is Map<any, any> {\n        return Object.prototype.toString.call(value) === '[object Map]';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Function`\n     */\n    static isFunction(value): value is Function {\n        return typeof value === 'function';\n    }\n\n    /**\n     * Return `true` if the passed value is a `RegExp`\n     */\n    static isRegExp(value): value is RegExp {\n        return Object.prototype.toString.call(value) === '[object RegExp]';\n    }\n\n    /**\n     * Return `true` if the passed value is a `Window`\n     */\n    static isWindow(value): value is Window {\n        return value && value.window === value;\n    }\n\n    /**\n     * Return `true` if the passed value is a `File`\n     */\n    static isFile(value: any): value is File {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object File]\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `FormData`\n     */\n    static isFormData(value: any): value is FormData {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object FormData]\";\n    }\n\n    /**\n     * Return `true` if the passed value is a `Blob`\n     */\n    static isBlob(value: any): value is Blob {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object Blob]\";\n    }\n\n    /**\n     * Return `true` if the passed value is an `ArrayBuffer`\n     */\n    static isArrayBuffer(value: any): value is ArrayBuffer {\n        return Utils.isObject(value) && Object.prototype.toString.call(value) === \"[object ArrayBuffer]\";\n    }\n\n    private static isArrayLike(obj): boolean {\n        // `null`, `undefined` and `window` are not array-like\n        if (obj == null || Utils.isWindow(obj)) return false;\n\n        // arrays, strings and jQuery/jqLite objects are array like\n        // * jqLite is either the jQuery or jqLite constructor function\n        // * we have to check the existance of jqLite first as this method is called\n        //   via the forEach method when constructing the jqLite object in the first place\n        if (Utils.isArray(obj) || Utils.isString(obj) /*|| (jqLite && obj instanceof jqLite)*/) return true;\n\n        // Support: iOS 8.2 (not reproducible in simulator)\n        // \"length\" in obj used to prevent JIT error (gh-11508)\n        const length = \"length\" in Object(obj) && obj.length;\n\n        // NodeList objects (with `item` method) and\n        // other objects with suitable length characteristics are array-like\n        return Utils.isNumber(length) &&\n            (length >= 0 && (length - 1) in obj || typeof obj.item === 'function');\n    }\n\n    /**\n     * Return `true` if the passed value is an `object` without a prototype\n     */\n    static isBlankObject(value): value is object {\n        return value !== null && typeof value === 'object' && !Object.getPrototypeOf(value);\n    }\n\n    private static TYPED_ARRAY_REGEXP = /^\\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\\]$/;\n    /**\n     * Return true if the passed value is a `TypedArray`\n     */\n    static isTypedArray(value) {\n        return value && Utils.isNumber(value.length) && Utils.TYPED_ARRAY_REGEXP.test(Object.prototype.toString.call(value));\n    }\n\n    /**\n     * Return a promise that is a resolved after a specified amount of time\n     *\n     * @param ms The time to delay in milliseconds\n     */\n    static delay(ms: number = 0): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            window.setTimeout(() => {\n                resolve();\n            }, ms);\n        });\n    }\n\n    /**\n     *\n     * @param value\n     * @param _default\n     */\n    static isTrue(\n        value,\n        _default?: boolean): boolean {\n        if (typeof (value) === 'string') {\n            value = value.toLowerCase();\n        }\n        switch (value) {\n            case true:\n            case \"true\":\n            case 1:\n            case \"1\":\n            case \"on\":\n            case \"yes\":\n                return true;\n            case \"\":\n            case undefined:\n                return !!_default;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Compares two strings using the current locale. The return value is negative\n     * if `a` comes before `b` and positive if `a` comes after `b`. If the values\n     * are equal then `0` is returned\n     *\n     * @param a The first string\n     * @param b The second string\n     * @param ignoreCase If set, do a case-insensitive comparison\n     */\n    static compare(a: string, b: string, ignoreCase: boolean = true): number {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.localeCompare(b);\n    }\n\n    /**\n     * Return `true` if two strings are equal, respecting case\n     *\n     * @param a The first string\n     * @param b The second string\n     */\n    static eq(a: string, b: string): boolean {\n        return Utils.compare(a, b, false) === 0;\n    }\n\n    /**\n     * Return `true` if two strings are equal, ignoring case\n     *\n     * @param a The first string\n     * @param b The second string\n     */\n    static eqNC(a: string, b: string): boolean {\n        return Utils.compare(a, b, true) === 0;\n    }\n\n    /**\n     * Return `true` if a number of strings are equal, ignoring case\n     *\n     * @param a The first string\n     * @param b Remaining strings\n     */\n    static eqNCN(a: string, ...b: string[]) {\n        if (!b) {\n            return false;\n        }\n        for (const s of b) {\n            if (Utils.eqNC(a, s)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the length of a string. If the string is empty (`null` or `undefined`)\n     * @param s A string\n     */\n    static len(s: string) {\n        return (s || '').length;\n    }\n\n    /**\n     * Return `true` if a string starts with another\n     *\n     * @param a The string to test\n     * @param b The prefix\n     * @param ignoreCase If `true` then ignore case\n     */\n    static startsWith(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.startsWith(b);\n    }\n\n    /**\n     * Return `true` if a string ends with another\n     *\n     * @param a The string to test\n     * @param b The postfix\n     * @param ignoreCase If `true` then ignore case\n     */\n    static endsWith(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.endsWith(b);\n    }\n\n    /**\n     * Return `true` if a string is a substring of another\n     * @param a The string to test\n     * @param b The substring\n     * @param ignoreCase If `true` then ignore case\n     */\n    static includes(a: string, b: string, ignoreCase: boolean = true): boolean {\n        a = a || '';\n        b = b || '';\n        if (ignoreCase) {\n            a = a.toLocaleUpperCase();\n            b = b.toLocaleUpperCase();\n        }\n        return a.includes(b);\n    }\n\n    /**\n     * Return the upper case value of a string using the current locale\n     */\n    static toUpperCase(s: string): string {\n        if (s) {\n            return s.toLocaleUpperCase();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string with the first character converted to upper case using the current locale\n     */\n    static toUpperFirst(s: string): string {\n        if (s) {\n            return s[0].toLocaleUpperCase() + s.substr(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Return the lower case value of a string using the current locale\n     */\n    static toLowerCase(s: string): string {\n        if (s) {\n            return s.toLocaleLowerCase();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string with the first character converted to lower case using the current locale\n     */\n    static toLowerFirst(s: string): string {\n        if (s) {\n            return s[0].toLocaleLowerCase() + s.substr(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where the first character of each space separated word is converted to upper case.\n     * However, if a word contains a full stop character the first character is left unchanged\n     */\n    static toStartCase(text: string): string {\n        if (text) {\n            const words = text.split(/[\\s]+/);\n            return words.map(value => !value.includes(\".\") ? Utils.toUpperFirst(value) : value).join(\" \");\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any leading and trailing whitespace characters are removed\n     */\n    static trim(s: string): string {\n        if (s) {\n            return s.trim();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any leading whitespace characters are removed\n     */\n    static trimStart(s: string): string {\n        if (s) {\n            return s.trimStart();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string where any trailing whitespace characters are removed\n     */\n    static trimEnd(s: string): string {\n        if (s) {\n            return s.trimEnd();\n        }\n        return \"\";\n    }\n\n    /**\n     * Return a string truncated to a maximum length. If the length of the string is greater than `maxLength`\n     * then it is truncated to `maxLength and a `suffix` appended. Otherwise the string is returned unchanged\n     *\n     * @param s The string to truncate\n     * @param maxLength The maximum length\n     * @param suffix The value to append if the string is truncated. The default is `...`\n     */\n    static truncate(s: string, maxLength: number, suffix?: string): string {\n        if (!s) {\n            return \"\";\n        }\n        suffix = suffix || \"...\";\n        if (s.length <= maxLength) {\n            return s;\n        }\n        return s.substring(0, maxLength - suffix.length) + suffix;\n    }\n\n    private static regExEscapeRegEx = /[-\\/\\\\^$*+?.()|[\\]{}]/g;\n\n    /**\n     * Return a string where any regular expresion operators are escaped\n     */\n    static regExEscape(s: string): string {\n        if (!s) {\n            return \"\";\n        }\n        return s.replace(Utils.regExEscapeRegEx, \"\\\\$&\");\n    }\n\n    /**\n     * Replaces patterns in a string with a replacement string. The pattern can either a string\n     * or a `RegExp`.\n     *\n     * @param s The string in which to search for a pattern\n     * @param pattern The pattern\n     * @param replacement The replacement string to replace any occurrences of the pattern in the string\n     */\n    static replace(s: string, pattern: string | RegExp, replacement: string): string {\n        if (!s || !pattern) {\n            return \"\";\n        }\n        if (Utils.isRegExp(pattern)) {\n            return s.replace(pattern, replacement);\n        }\n        else {\n            return s.replace(new RegExp(Utils.regExEscape(pattern), \"g\"), replacement);\n        }\n    }\n\n    /**\n     * Split a string into an array of substrings using the passed separators\n     *\n     * @param s The string to split\n     * @param separators One or more separators\n     * @param trim If `true` trim any leading and trailing spaces from the substrings\n     * @param removeEmpty If `true` exclude any empty strings from the array of substrings\n     */\n    static split(s: string, separators: string | string[], trim = true, removeEmpty = true): string[] {\n        if (!s) {\n            return [];\n        }\n        if (!separators) {\n            return [s];\n        }\n        let split: string[];\n        if (typeof separators === \"string\") {\n            split = s.split(separators);\n            if (trim) {\n                split = split.map(value => value.trim());\n            }\n        }\n        else {\n            let rxs = separators.map((value) => Utils.regExEscape(value)).join(\"|\");\n            if (trim) {\n                rxs = \"(?:^\\\\s*)|(?:\\\\s*(?:\" + rxs + \")\\\\s*)|(?:\\\\s*$)\";\n            }\n            split = s.split(new RegExp(rxs));\n        }\n        if (removeEmpty) {\n            split = split.filter((value) => {\n                return !Utils.isEmpty(value);\n            });\n        }\n        return split;\n    }\n\n    /**\n     * Return a string in kebab case (`CatDog => cat-dog`)\n     */\n    static toKebabCase(text: string): string {\n        return kebabCase(text);\n    }\n\n    /**\n     * Return a string in snake case (`CatDog => cat_dog`)\n     */\n    static toSnakeCase(text: string): string {\n        return snakeCase(text);\n    }\n\n    /**\n     * Return a string in camel case (`CatDog => catDog`)\n     */\n    static toCamelCase(text: string): string {\n        return camelCase(text);\n    }\n\n    /**\n     * Return a string with any diacritics removed\n     */\n    static removeAccents(text: string): string {\n        if (!text) {\n            return \"\";\n        }\n        return removeDiacritics(text);\n    }\n\n    /**\n     * Return a string in normalized form which can be used to match entity values. A normalized value\n     * has any diacritics removed and is converted to upper case\n     */\n    static normalize(text: string | null | undefined): string {\n        if (!text) {\n            return \"\";\n        }\n        return Utils.removeAccents(text).toUpperCase();\n    }\n\n    /**\n     * Return `true` if a string is valid as a simple value for the Sinequa admininistration\n     */\n    static isValidSimpleName(name: string): boolean {\n        return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n    }\n\n    /**\n     * Return `true` if a string is valid as a scoped (`.` separated) simple value for the Sinequa admininistration\n     */\n    static isValidScopedSimpleName(name: string): boolean {\n        return /^[a-zA-Z_]([\\.]?[a-zA-Z0-9_]+)*$/.test(name);\n    }\n\n    /**\n     * Return `true` if a value is `null`, `undefined` or `\"\"`\n     */\n    static isEmpty(value: any): boolean {\n        if (value === \"\") {\n            return true;\n        }\n        if (value === null) {\n            return true;\n        }\n        if (Utils.isUndefined(value)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Return the number of occurrences of a substring in a string\n     *\n     * @param text The text to test\n     * @param sub The substring\n     * @param ignoreCase If `true` don't respect case when matching the substring\n     */\n    static count(text: string, sub: string, ignoreCase = true): number {\n        if (!text || !sub) {\n            return 0;\n        }\n        if (ignoreCase) {\n            text = text.toLocaleUpperCase();\n            sub = sub.toLocaleUpperCase();\n        }\n        let pos = -1;\n        let count = 0;\n        while (true) {\n            pos = text.indexOf(sub, pos + 1);\n            if (pos === -1) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n\n    /**\n     * Return a string converted to base64\n     */\n    static toBase64(value: string): string {\n        return btoa(encodeURIComponent(value).replace(/%([0-9A-F]{2})/g, (match, hex) => String.fromCharCode(parseInt(hex, 16))));\n    }\n\n    /**\n     * Return a string converted from base64\n     */\n    static fromBase64(value: string): string {\n        return decodeURIComponent(atob(value).split('').map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    }\n\n    /**\n     * Return the SHA256 hash value of string\n     */\n    static sha256(value: string): string {\n        const sha = new jsSHA(\"SHA-256\", \"TEXT\");\n        sha.update(value);\n        return sha.getHash(\"B64\");\n    }\n\n    /**\n     * Return the SHA512 hash value of string\n     */\n    static sha512(value: string): string {\n        const sha = new jsSHA(\"SHA-512\", \"TEXT\");\n        sha.update(value);\n        return sha.getHash(\"B64\");\n    }\n\n    /**\n     * Return a string where any HTML special characters are percent encoded\n     */\n    static encodeHTML(value: string): string {\n        return escape(value);\n    }\n\n    /**\n     * Return a string where any percent encoded characters are replaced by their corresponding unencoded characters\n     */\n    static decodeHTML(value: string): string {\n        return unescape(value);\n    }\n\n    /**\n     * Get a field with passed name from an object. The field name is matched insensitive of case\n     */\n    static getField<T>(obj: MapOf<T>, name: string): T | undefined {\n        if (!Utils.isObject(obj) || Utils.isEmpty(name)) {\n            return undefined;\n        }\n        const keys = Object.keys(obj).filter(key => Utils.eqNC(key, name));\n        if (keys.length === 0) {\n            return undefined;\n        }\n        return obj[keys[0]];\n    }\n\n    /**\n     * Clear fields from an object. If the `_delete` parameter is `false` then\n     * array or map fields are emptied and other fields are set to `undefined`.\n     * If the `_delete` parameter is `true` then fields are deleted\n     */\n    static clearObject(obj: {}, _delete: boolean = false): {} {\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                if (_delete) {\n                    delete obj[prop];\n                }\n                else {\n                    if (Utils.isArray(obj[prop])) {\n                        obj[prop].length = 0;\n                    }\n                    else if (Utils.isMap(obj[prop])) {\n                        obj[prop].clear();\n                    }\n                    else {\n                        obj[prop] = undefined;\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Return the non-empty fields in the `override` object that that are different to fields of the same name\n     * in the `template` object\n     * @param template The object to compare against\n     * @param override The object defining the fields and values to be compared\n     * @param ret An optional return object. If not set a new object is created\n     */\n    static deltas(template: {}, override: {}, ret?: {}): {} {\n        if (!ret) {\n            ret = {};\n        }\n        for (const name of Object.keys(override)) {\n            if (name in template) {\n                if (Utils.isObject(override[name]) && !Utils.isArray(override[name])) {\n                    const diff = Utils.deltas(template[name], override[name]);\n                    if (!Utils.equals(diff, {})) {\n                        ret[name] = diff;\n                    }\n                }\n                else if (!Utils.equals(template[name], override[name])) {\n                    if (!Utils.isEmpty(override[name])) {\n                        ret[name] = override[name];\n                    }\n                }\n            }\n            else {\n                if (!Utils.isEmpty(override[name])) {\n                    ret[name] = override[name];\n                }\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Returns an object containing the fields in a source object whose names match one of the passed keys. The keys can either be\n     * an array of strings or a callback function that is called for each field in the source object and returns `true` if a field\n     * should be \"picked\".\n     *\n     * @param obj The source object\n     * @param keys An array of keys or a callback function\n     */\n    static pick(obj: {}, keys: string[] | ((value: any, key: string, obj: object) => boolean)): {} {\n        const ret = {};\n        if (!!obj) {\n            if (Utils.isFunction(keys)) {\n                Object.keys(obj).forEach(key => {\n                    if (keys(obj[key], key, obj)) {\n                        ret[key] = obj[key];\n                    }\n                });\n            }\n            else {\n                for (const key of keys) {\n                    if (obj.hasOwnProperty(key)) {\n                        ret[key] = obj[key];\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Create a debounce function that delays invoking `func` until after `wait` millseconds have elapsed since the previous invocation.\n     *\n     * @param func The function to debounce\n     * @param wait The delay in milliseconds to wait before calling `func`\n     * @param immediate If `true` then make an initial call to `func`\n     * @param every An optional callback to call without debouncing\n     */\n    static debounce(func: (...params) => any, wait = 0, immediate = false, every?: (...params) => any): (...params) => any {\n        let timeout, args, context, timestamp, result;\n\n        const later = function() {\n            const last = Date.now() - timestamp;\n\n            if (last < wait && last >= 0) {\n                timeout = setTimeout(later, wait - last);\n            }\n            else {\n                timeout = null;\n                if (!immediate) {\n                    result = func.apply(context, args);\n                    if (!timeout) {\n                        context = args = null;\n                    }\n                }\n            }\n        };\n\n        return function(this: any) {\n            context = this;\n            args = arguments;\n            if (every) {\n                every.apply(context, args);\n            }\n            timestamp = Date.now();\n            const callNow = immediate && !timeout;\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Create a throttled function that only invokes func at most once per every `wait` milliseconds.\n     *\n     * @param func The function to throttle\n     * @param wait The number of milliseconds to throttle invocations to\n     * @param options Options to control the throttling behaviour\n     */\n    static throttle(func: (...params) => any, wait: number, options: ThrottleSettings = {}): (...pararms) => any {\n        let timeout, context, args, result;\n        let previous = 0;\n\n        const later = function() {\n            previous = options.leading === false ? 0 : Date.now();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        };\n\n        const throttled = function(this: any) {\n            const now = Date.now();\n            if (!previous && options.leading === false) previous = now;\n            const remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) context = args = null;\n            }\n            else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n\n        throttled[\"cancel\"] = function() {\n            clearTimeout(timeout);\n            previous = 0;\n            timeout = context = args = null;\n        };\n\n        return throttled;\n    }\n\n    private static frameTasks: Map<(...params) => any, FrameTask> = new Map<(...params) => any, FrameTask>();\n\n    /**\n     * Create a function that calls `callback` the next time the browser next repaints\n     */\n    static frame(callback: (...params) => any): (...params) => any {\n        return (...params) => {\n            if (Utils.frameTasks.size === 0) {\n                requestAnimationFrame((timestamp) => {\n                    Utils.frameTasks.forEach((task, key, map) => {\n                        task.call();\n                    });\n                    Utils.frameTasks.clear();\n                });\n            }\n            const task = Utils.frameTasks.get(callback);\n            if (task) {\n                // Update params\n                task.params = params;\n            }\n            else {\n                // Add new task\n                Utils.frameTasks.set(callback, new FrameTask(callback, params));\n            }\n        };\n    }\n\n    /**\n     * Create a URL object from a `url` string. If the string is a relative url then\n     * `base` specifies the base to use\n     */\n    static makeURL(url: string, base?: string): URL {\n        if (!base) {\n            base = \"http://x.y.z\"; // Firefox and IOS need this\n        }\n        return new URL(url, base);\n    }\n\n    /**\n     * Add query string parameters to a url\n     *\n     * @param url The url to which to add the parameters\n     * @param params An object whose fields should be added as parameters\n     */\n    static addSearchParams(url: string, params: MapOf<any>): string {\n        if (!url || !params) {\n            return url;\n        }\n        const urlObj = Utils.makeURL(url);\n        for (const param in params) {\n            if (params.hasOwnProperty(param)) {\n                urlObj.searchParams.set(param, params[param]);\n            }\n        }\n        const index = url.indexOf(\"?\");\n        if (index !== -1) {\n            url = url.substr(0, index);\n        }\n        url += \"?\" + urlObj.searchParams.toString();\n        return url;\n    }\n\n    private static _addUrl(url: string, path: string): string {\n        if (!path) {\n            return url;\n        }\n        if (!url) {\n            return path;\n        }\n        if (url[url.length - 1] === \"/\") {\n            if (path[0] === \"/\") {\n                return url + path.substr(1);\n            }\n            else {\n                return url + path;\n            }\n        }\n        else {\n            if (path[0] === \"/\") {\n                return url + path;\n            }\n            else {\n                return url + \"/\" + path;\n            }\n        }\n    }\n\n    /**\n     * Add paths to a url adding path separators as necessary\n     *\n     * @param url The url\n     * @param paths One or more paths to add to the url\n     */\n    static addUrl(url: string, ...paths: string[]): string {\n        let _url = url;\n        for (const path of paths) {\n            _url = Utils._addUrl(_url, path);\n        }\n        return _url;\n    }\n\n    /**\n     * Return `true` if a url is absolute\n     */\n    static isUrlAbsolute(url: string): boolean {\n        return /^(?:[a-zA-Z][a-zA-Z\\d+.-]*:|\\/\\/)/.test(url);\n    }\n\n    /**\n     * Return an `HttpParams` object containing the fields in the passed object\n     */\n    static makeHttpParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        let httpParams = new HttpParams({encoder: new SqHttpParameterCodec()});\n        if (params) {\n            for (const param in params) {\n                if (params.hasOwnProperty(param)) {\n                    const _value = params[param];\n                    let value = \"\";\n                    if (Utils.isString(_value)) {\n                        value = _value;\n                    }\n                    else if (Utils.isBoolean(_value) || Utils.isNumber(_value)) {\n                        value = _value.toString();\n                    }\n                    else if (Utils.isDate(_value)) {\n                        value = Utils.toSysDateStr(_value);\n                    }\n                    else {\n                        value = Utils.toJson(_value);\n                    }\n                    httpParams = httpParams.set(param, value);\n                }\n            }\n        }\n        return httpParams;\n    }\n\n    private static escapeDiv: HTMLElement;\n\n    /**\n     * Return a string with HTML special characters escaped\n     *\n     * @param html The string to escape\n     */\n    static escapeHtml(html: string): string {\n        if (!html) {\n            return html;\n        }\n        if (!Utils.escapeDiv) {\n            Utils.escapeDiv = document.createElement(\"div\");\n        }\n        const textNode = Utils.escapeDiv.appendChild(document.createTextNode(html));\n        const escapedHtml = Utils.escapeDiv.innerHTML;\n        Utils.escapeDiv.removeChild(textNode);\n        return escapedHtml;\n    }\n\n    /**\n     * Move an element in an array\n     *\n     * @param array The array containing the element to move\n     * @param from The index of the element to move\n     * @param to The index that the element should be moved to\n     */\n    static arrayMove(array: any[], from: number, to: number): void {\n        if (to === from ) {\n            return;\n        }\n        array.splice(to, 0, array.splice(from, 1)[0]);\n    }\n\n    /**\n     * Set the contents of a target array to the contents of a source array\n     *\n     * @param target The target array\n     * @param source The source array\n     */\n    static arraySet(target: any[], source: any[]): any[] {\n        return target.splice.apply(target, [0, target.length].concat(source));\n    }\n\n    private static genericNext(value) {\n    }\n\n    private static genericError(error: any) {\n    }\n\n    private static genericComplete() {\n    }\n\n    /**\n     * A simple wrapped around `Observable.subscribe`\n     */\n    static subscribe<T>(\n        observable: Observable<T>,\n        next: (value: T) => void, error?: (err: any) => void, complete?: () => void): Subscription {\n        if (!next) {\n            next = Utils.genericNext;\n        }\n        if (!error) {\n            error = Utils.genericError;\n        }\n        if (!complete) {\n            complete = Utils.genericComplete;\n        }\n        return observable.subscribe(next, error, complete);\n    }\n\n    /**\n     * Return a value as a `Date` converting as necessary. If the value\n     * cannot be converted then `undefined` is returned\n     */\n    static asDate(value: any): Date | undefined {\n        if (!value) {\n            return undefined;\n        }\n\n        if (Utils.isDate(value)) {\n            return value as Date;\n        }\n\n        if (Utils.isString(value)) {\n            return Utils.toDate(value as string);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Return a value as a `number` converting as necessary. If the value\n     * cannot be converted then `undefined` is returned.\n     */\n    static asNumber(value: any): number | undefined {\n        if (!value && value !== 0) {\n            return undefined;\n        }\n        if (Utils.isNumber(value)) {\n            return value;\n        }\n        if (Utils.isString(value)) {\n            if (Utils.testInteger(value)) {\n                return Utils.toInt(value);\n            }\n            if (Utils.testFloat(value)) {\n                return Utils.toNumber(value);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Return a value as a `string` converting as necessary\n     */\n    static asString(value: any): string | undefined {\n        if (!value && value !== \"\") {\n            return undefined;\n        }\n\n        if (Utils.isString(value)) {\n            return value as string;\n        }\n\n        return value.toString();\n    }\n\n    /**\n     * Return `true` if a string represents an integer\n     */\n    static testInteger(str: string): boolean {\n        return /^(\\-|\\+)?([0-9]+)$/.test(str);\n    }\n\n    /**\n     * Return `true` if a string represents a floating point number\n     */\n    static testFloat(str: string): boolean {\n        return /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/.test(str);\n    }\n\n    /**\n     * Round the passed number away from zero: 4.5 => 5, -4.5 => -5\n     */\n    static roundAway(num: number): number {\n        return num >= 0 ? Math.round(num) : Math.sign(num) * Math.round(Math.abs(num));\n    }\n\n    private static matchSuffix(str: string, factor: number, ...suffixes: string[]): {str: string, factor: number} | undefined {\n        for (const suffix of suffixes) {\n            if (Utils.endsWith(str, suffix)) {\n                return {\n                    str: Utils.trimEnd(str.substr(0, str.length - suffix.length)),\n                    factor\n                };\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Convert a size in string form to a number in bytes.\n     *\n     * The following units are supported: `b`, `kb`, `mb`, `gb`, `tb`, `pb`\n     *\n     * For example `2.5 gb` will return `2621440`.\n     */\n    static toSize(str: string, _default = 0): number {\n        str = Utils.trim(str);\n        if (!str) {\n            return _default;\n        }\n        let factor = 1;\n        let ret = Utils.matchSuffix(str, 1024 * 1024 * 1024 * 1024 * 1024, \"PB\", \"PO\");\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024 * 1024 * 1024, \"TB\", \"TO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024 * 1024, \"GB\", \"GO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024 * 1024, \"MB\", \"MO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1024, \"KB\", \"KO\");\n        }\n        if (ret === undefined) {\n            ret = Utils.matchSuffix(str, 1, \"B\", \"O\");\n        }\n        if (ret !== undefined) {\n            str = ret.str;\n            factor = ret.factor;\n        }\n        if (!Utils.testFloat(str)) {\n            return _default;\n        }\n        const value = Utils.toNumber(str, _default) * factor;\n        return Math.round(value);\n    }\n\n    private static calculateDuration(current: number, unit: string): number {\n        switch (Utils.toLowerCase(unit)) {\n            case \"d\":    case \"j\":\n            case \"days\": case \"jours\":\n            case \"day\":  case \"jour\":\n                return current * Utils.oneDay;\n            case \"h\":\n            case \"hours\": case \"heures\":\n            case \"hour\":  case \"heure\":\n                return current * Utils.oneHour;\n            case \"m\":\n            case \"minutes\": case \"minute\":\n            case \"mins\":    case \"min\":\n                return current * Utils.oneMinute;\n            case \"s\":\n            case \"seconds\":  case \"secondes\":\n            case \"second\":   case \"seconde\":\n            case \"secs\": case \"sec\":\n                return current * Utils.oneSecond;\n                break;\n            case \"ms\":\n            case \"milliseconds\": case \"miliseconds\":  case \"millisecondes\": case \"milisecondes\":\n            case \"millisecond\":  case \"milliseconde\": case \"milisecond\":    case \"miliseconde\":\n                return current;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * Convert a duration in string form to a number in milliseconds.\n     *\n     * These units are supported: `days`, `hours`, `minutes`, `seconds`, `milliseconds` (abbreviations are also supported)\n     *\n     * For example `3 h 2mins 4s => 10924000`\n     *\n     * @param defaultUnit The unit to use if no units are in the string. The default value is `ms`\n     */\n    static toDuration(str: string, defaultUnit = \"ms\"): number {\n        let total = 0;\n        if (str) {\n            let current = 0;\n            const tokens = str.match(/[0-9\\.,]+|[a-zA-Z]+/g) || [];\n            for (const token of tokens) {\n                if (/[a-zA-Z]/.test(token)) {\n                    total += Utils.calculateDuration(current, token);\n                    current = 0;\n                }\n                else {\n                    if (current) {\n                        total += Utils.calculateDuration(current, defaultUnit);\n                    }\n                    current = Utils.toNumber(token);\n                }\n            }\n            if (current) {\n                total += Utils.calculateDuration(current, defaultUnit);\n            }\n        }\n        return total;\n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Utils, MapOf, PatternMatcher} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"./format.service\";\nimport {AppWebService, AuditEvents, START_CONFIG, StartConfig,\n    CCApp, CCQuery, CCLabels, CCAutocomplete, CCColumn, CCIndex, CCWebService, CCConfig, CCList, CCAggregation,\n    EngineType, EngineTypeModifier, MINIMUM_COMPATIBLE_SERVER_API_VERSION} from \"@sinequa/core/web-services\";\nimport {ExprParser, ExprParserOptions, Expr} from \"./query/expr-parser\";\nimport {AppServiceHelpers} from \"./app-service-helpers\";\n\n/**\n * A base event from which all events that can be issued by the {@link AppService} are derived\n */\nexport interface AppEvent {\n    type: \"query-changed\";\n}\n\n/**\n * This event is fired each time the [ccquery]{@link AppService#ccquery} member is modified.\n */\nexport interface QueryChangedEvent extends AppEvent {\n    type: \"query-changed\";\n    current?: CCQuery;\n    previous?: CCQuery;\n}\n\n/**\n * A union of the different events that the {@link AppService} can generate\n */\nexport type AppEvents = QueryChangedEvent;\n\n/**\n * A service to manage the Sinequa SBA configuration\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppService implements OnDestroy {\n    // Should match AdditionalQueryableColumns in Engine.cs\n    private static extraColumns: MapOf<CCColumn> = {\n        id: AppService.makeColumn(\"id\", \"string\"),\n        text: AppService.makeColumn(\"text\", \"varchar\"),\n        documentlanguages: AppService.makeColumn(\"documentlanguages\", \"csv\", \"ci\"),\n        databasealias: AppService.makeColumn(\"databasealias\", \"varchar\"),\n        globalrelevance: AppService.makeColumn(\"globalrelevance\", \"double\"),\n        matchingpartnames: AppService.makeColumn(\"matchingpartnames\", \"csv\"),\n        matchlocations: AppService.makeColumn(\"matchlocations\", \"csv\"),\n        matchlocationsperpartname: AppService.makeColumn(\"matchlocationsperpartname\", \"varchar\"), // json\n        extracts: AppService.makeColumn(\"extracts\", \"csv\"),\n        extractsperpartname: AppService.makeColumn(\"extractsperpartname\", \"varchar\"), // json\n        extractslocations: AppService.makeColumn(\"extractslocations\", \"csv\"),\n        documentweight: AppService.makeColumn(\"documentweight\", \"varchar\"),\n        groupcount: AppService.makeColumn(\"groupcount\", \"integer\"),\n        accesslists: AppService.makeColumn(\"accesslists\", \"varchar\", undefined, [\"accessLists\"]) // json\n    };\n\n    /**\n     * The app configuration\n     */\n    app?: CCApp;\n    /**\n     * The labels configuration\n     */\n    cclabels?: CCLabels;\n    /**\n     * The autocomplete configuration\n     */\n    ccautocomplete?: CCAutocomplete;\n    /**\n     * The suggest queries configured on the application\n     */\n    suggestQueries: string[];\n    private columnsByQuery: MapOf<MapOf<CCColumn>>;\n    private columnsByIndex: MapOf<MapOf<CCColumn>>;\n    private fieldsByQuery: MapOf<string[]>;\n    private _defaultCCQuery?: CCQuery;\n    private _ccquery?: CCQuery;\n\n    protected _events = new Subject<AppEvents>();\n\n    private static toEngineType(type: string): EngineType {\n        if (!type) {\n            return EngineType.none;\n        }\n        switch (Utils.toLowerCase(type)) {\n            case \"bool\"     :\n            case \"boolean\"  : return EngineType.bool;\n            case \"date\"     : return EngineType.date;\n            case \"datetime\" : return EngineType.dateTime;\n            case \"time\"     : return EngineType.time;\n            case \"unsigned\" : return EngineType.unsigned;\n            case \"integer\"  : return EngineType.integer;\n            case \"float\"    : return EngineType.float;\n            case \"double\"   : return EngineType.double;\n            case \"dates\"    : return EngineType.dates;\n            case \"datetimes\": return EngineType.dateTimes;\n            case \"times\"    : return EngineType.times;\n            case \"varchar\"  : return EngineType.varchar;\n            case \"binary\"   : return EngineType.binary;\n            case \"string\"   : return EngineType.string;\n            case \"csv\"      : return EngineType.csv;\n            default         : return EngineType.none;\n        }\n    }\n\n    private static toEngineTypeModifierSimple(c: string): EngineTypeModifier {\n        switch (c) {\n            case 'a': return EngineTypeModifier.a;\n            case 'c': return EngineTypeModifier.c;\n            case 'd': return EngineTypeModifier.d;\n            case 'e': return EngineTypeModifier.e;\n            case 'i': return EngineTypeModifier.i;\n            case 'l': return EngineTypeModifier.l;\n            case 'n': return EngineTypeModifier.n;\n            case 't': return EngineTypeModifier.t;\n            case 'x': return EngineTypeModifier.x;\n            case 'z': return EngineTypeModifier.z;\n            default : return EngineTypeModifier.none;\n        }\n    }\n\n    private static toEngineTypeModifier(eType: EngineType, typeModifier: string): EngineTypeModifier {\n        let etm = EngineTypeModifier.none;\n        if (typeModifier) {\n            for (const c of typeModifier) {\n                etm |= AppService.toEngineTypeModifierSimple(c);\n            }\n        }\n        return etm;\n    }\n\n    private static makeColumn(name: string, type: string, typeModifier?: string, aliases?: string[]) {\n        const eType = AppService.toEngineType(type);\n        const eTypeModifier = AppService.toEngineTypeModifier(eType, typeModifier || \"\");\n        return {\n            name,\n            type,\n            typeModifier,\n            eType,\n            eTypeModifier,\n            aliases\n        };\n    }\n\n    /**\n     * Return `true` if a `column` is a string\n     */\n    static isString(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isString(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a csv\n     */\n    static isCsv(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isCsv(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a tree\n     */\n    static isTree(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isTree(column);\n    }\n\n    /**\n     * Return `true` if a `column` is an entity\n     */\n    static isEntity(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isEntity(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a boolean\n     */\n    static isBoolean(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isBoolean(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a date\n     */\n    static isDate(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isDate(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a double\n     */\n    static isDouble(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isDouble(column);\n    }\n\n    /**\n     * Return `true` if a `column` is an integer\n     */\n    static isInteger(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isInteger(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a number (integer or double)\n     */\n    static isNumber(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isNumber(column);\n    }\n\n    /**\n     * Return `true` if a `column` is a scalar\n     */\n    static isScalar(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isScalar(column);\n    }\n\n    /**\n     * Return `true` if a `column` is sortable\n     */\n    static isSortable(column: CCColumn | undefined): boolean {\n        return AppServiceHelpers.isSortable(column);\n    }\n\n    constructor(\n        @Inject(START_CONFIG) public startConfig: StartConfig,\n        public appWebService: AppWebService,\n        public intlService: IntlService,\n        public formatService: FormatService) {\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * Return an `Observable` stream of the events that the `AppService` can generate\n     */\n    get events(): Observable<AppEvents> {\n        return this._events;\n    }\n\n    /**\n     * Return the name of the SBA\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Return the origin of the Sinequa server\n     */\n    get origin(): string {\n        return this.startConfig.origin!;\n    }\n\n    private initDefaultQuery() {\n        if (!this.app) {\n            console.warn(\"No app configured\");\n            return;\n        }\n        // If not set explicitly, the default query is the first in the list\n        const defaultQueryName = this.app.defaultQueryName || Utils.split(this.app.queryNames, \",\")[0];\n        this._defaultCCQuery = Utils.getField<CCQuery>(this.app.queries, defaultQueryName);\n        if (!this._defaultCCQuery) {\n            console.warn(`Query not configured for app: ${this.appName}`);\n        }\n        this.ccquery = this._defaultCCQuery;\n    }\n\n    private setApp(app: CCApp) {\n        this.app = app;\n        this.verifyServerApiVersionCompatibility(app);\n        this.cclabels = this.getWebService<CCLabels>(this.app.labels);\n        this.ccautocomplete = this.getWebService<CCAutocomplete>(this.app.autocomplete);\n        this.initDefaultQuery();\n        this.makeMaps();\n        this.suggestQueries = Utils.split(this.ccautocomplete ? this.ccautocomplete.suggestQueries : \"\", \",\");\n    }\n\n    private verifyServerApiVersionCompatibility(app: CCApp): void {\n        if (!app) {\n            console.warn('Unexpected empty app configuration.');\n            return;\n        }\n        if (!app.apiVersion) {\n            console.error(`The App config '${app.name}' is not of 'Angular Workspace application' type.`);\n        } else if (app.apiVersion !== MINIMUM_COMPATIBLE_SERVER_API_VERSION) {\n            console.warn(`This SBA is not compatible with the REST API of Sinequa Server.\\n` +\n                `The SBA expects the server API version to be at least '${MINIMUM_COMPATIBLE_SERVER_API_VERSION}',` +\n                ` whereas the server API version is '${app.apiVersion}'.`);\n        }\n    }\n\n    /**\n     * Initialize this service by retrieving the current application\n     * configuration from the Sinequa server and using it to set up the data structures\n     * on which the service relies\n     */\n    init(): Observable<CCApp> {\n        return this.appWebService.get().pipe(\n            map(app => {\n                this.setApp(app);\n                return app;\n            }\n        ));\n    }\n\n    /**\n     * Initialize this service from an application configuration object. This is typically\n     * used for supporting mutiple concurrent queries within the same application by providing\n     * component level instances of this service.\n     */\n    initFromApp(app: CCApp) {\n        if (app) {\n            this.setApp(app);\n        }\n    }\n\n    /**\n     * Refresh the application configuration, reinitializing the service if it has changed\n     *\n     * @param auditEvents Any associated audit events that should be stored\n     */\n    refresh(auditEvents?: AuditEvents): Observable<CCApp | undefined> {\n        const observable = this.appWebService.refresh(this.app ? this.app.versionId : \"\", auditEvents);\n        observable.subscribe(\n            response => {\n                if (!response.upToDate && response.app) {\n                    this.setApp(response.app);\n                }\n                return response;\n            }\n        );\n        return observable.pipe(map((value) => {\n            return this.app;\n        }));\n    }\n\n    /**\n     * Clear the data associated with the service. Typically used when processing a user logout\n     */\n    clear() {\n        this.app = undefined;\n        this.cclabels = undefined;\n        this._defaultCCQuery = undefined;\n        this.ccquery = undefined;\n        this.clearMaps();\n    }\n\n    private indexIsNormal(ccindex: CCIndex): boolean {\n        return !!ccindex && (!ccindex.indexType || Utils.startsWith(ccindex.indexType, \"normal\"));\n    }\n\n    private getIndexForQuery(ccquery: CCQuery): CCIndex | undefined {\n        if (!ccquery) {\n            return undefined;\n        }\n        const indexes = Utils.split(ccquery.searchIndexes, [\",\"]);\n        if (indexes.length === 0) {\n            return this.app ? this.app.indexes._ : undefined;\n        }\n        else {\n            const ccindex = this.getIndex(indexes[0]);\n            if (ccindex && this.indexIsNormal(ccindex)) {\n                return this.app ? this.app.indexes._ : undefined;\n            }\n            return ccindex;\n        }\n    }\n\n    private _makeColumnMapForIndex(columnMap: MapOf<CCColumn>, ccindex: CCIndex) {\n        if (!ccindex || !ccindex.columns) {\n            return;\n        }\n        for (const columnName of Object.keys(ccindex.columns)) {\n            const column = ccindex.columns[columnName];\n            columnMap[Utils.toLowerCase(column.name)] = column;\n            if (column.aliases) {\n                for (const alias of column.aliases) {\n                    columnMap[Utils.toLowerCase(alias)] = column;\n                }\n            }\n        }\n    }\n\n    private _makeColumnMapForQuery(columnMap: MapOf<CCColumn>, ccquery: CCQuery) {\n        if (!ccquery || !ccquery.columnsInfo || !ccquery.columnsInfo.columns) {\n            return;\n        }\n        const ccindex = this.getIndexForQuery(ccquery);\n        if (!ccindex || !ccindex.columns) {\n            return;\n        }\n        for (const columnInfo of ccquery.columnsInfo.columns) {\n            if (columnInfo.name) {\n                const columnName = Utils.toLowerCase(columnInfo.name);\n                let column = ccindex.columns[columnName];\n                if (!column) {\n                    column = AppService.extraColumns[columnName];\n                }\n                if (column) {\n                    // Copy column so we can add the query specific aliases and labels\n                    column = Utils.copy(column);\n                    columnMap[columnName] = column;\n                    if (columnInfo.aliases) {\n                        column.aliases = Utils.split(columnInfo.aliases, [\",\", \";\"]);\n                        for (const alias of column.aliases) {\n                            columnMap[Utils.toLowerCase(alias)] = column;\n                        }\n                    }\n                    // Overwrite labels if defined on the query\n                    if (columnInfo.label) {\n                        column.label = columnInfo.label;\n                    }\n                    if (columnInfo.labelPlural) {\n                        column.labelPlural = columnInfo.labelPlural;\n                    }\n                    if (columnInfo.formatter) {\n                        column.formatter = columnInfo.formatter;\n                    }\n                    if (columnInfo.transforms) {\n                        column.transforms = columnInfo.transforms;\n                    }\n                    if (columnInfo.parser) {\n                        column.parser = columnInfo.parser;\n                    }\n                    if (columnInfo.description) {\n                        column.description = columnInfo.description;\n                    }\n                }\n            }\n        }\n    }\n\n    protected makeMaps() {\n        this.columnsByQuery = {};\n        this.columnsByIndex = {};\n        this.fieldsByQuery = {};\n        if (!this.app) {\n            return;\n        }\n        let columnMap: MapOf<CCColumn>;\n\n        // Queries\n        if (this.app.queries) {\n            for (const queryName of Object.keys(this.app.queries)) {\n                const ccquery = this.app.queries[queryName];\n                if (ccquery) {\n                    ccquery.$columnFieldsPattern = new PatternMatcher(\"included column fields\", \"excluded column fields\");\n                    ccquery.$columnFieldsPattern.includedPattern.setText(ccquery.columnFieldsIncluded);\n                    ccquery.$columnFieldsPattern.excludedPattern.setText(ccquery.columnFieldsExcluded);\n                    ccquery.$partnameFieldsPattern = new PatternMatcher(\"included part name fields\", \"excluded part name fields\");\n                    ccquery.$partnameFieldsPattern.includedPattern.setText(ccquery.partnameFieldsIncluded);\n                    ccquery.$partnameFieldsPattern.excludedPattern.setText(ccquery.partnameFieldsExcluded);\n                    if (ccquery.columnsInfo) {\n                        columnMap = {};\n                        this.columnsByQuery[Utils.toLowerCase(ccquery.name)] = columnMap;\n                        this._makeColumnMapForQuery(columnMap, ccquery);\n                    }\n                }\n            }\n        }\n\n        // Indexes\n        if (this.app.indexes) {\n            // Special normal index\n            const ccindex = this.app.indexes._;\n            if (ccindex) {\n                columnMap = {};\n                this.columnsByIndex._ = columnMap;\n                this._makeColumnMapForIndex(columnMap, ccindex);\n\n            }\n            for (const indexName of Object.keys(this.app.indexes)) {\n                const ccindex1 = this.app.indexes[Utils.toLowerCase(indexName)];\n                if (ccindex1) {\n                    if (this.indexIsNormal(ccindex1)) {\n                        if (ccindex1.name !== \"_\") {\n                            this.columnsByIndex[Utils.toLowerCase(ccindex1.name)] = this.columnsByIndex._;\n                        }\n                    }\n                    else {\n                        columnMap = {};\n                        this.columnsByIndex[Utils.toLowerCase(ccindex1.name)] = columnMap;\n                        this._makeColumnMapForIndex(columnMap, ccindex1);\n                    }\n                }\n            }\n        }\n\n        // Fields per query (contains aliases for default query and globally defined aliases)\n        const globalFields = new Map<string, string>();\n        const columns = this.columnsByIndex._;\n        if (columns) {\n            for (const key of Object.keys(columns)) {\n                const column = columns[key];\n                if (column.aliases && column.aliases.length > 0) {\n                    const alias = column.aliases[0];\n                    if (alias) {\n                        globalFields.set(alias, alias);\n                    }\n                }\n            }\n        }\n        for (const queryName of Object.keys(this.columnsByQuery)) {\n            const queryFields = new Map<string, string>(globalFields);\n            const columns1 = this.columnsByQuery[Utils.toLowerCase(this.defaultCCQuery ? this.defaultCCQuery.name : \"\")];\n            if (columns1) {\n                for (const key of Object.keys(columns1)) {\n                    const column = columns1[key];\n                    if (column.aliases && column.aliases.length > 0) {\n                        const alias = column.aliases[0];\n                        if (alias) {\n                            queryFields.set(alias, alias);\n                        }\n                    }\n                }\n                this.fieldsByQuery[queryName] = Array.from(queryFields.keys());\n            }\n        }\n    }\n\n    protected clearMaps() {\n        this.columnsByQuery = {};\n        this.columnsByIndex = {};\n        this.fieldsByQuery = {};\n    }\n\n    /**\n     * Get the configuration of the web service with the passed name\n     */\n    getWebService<T extends CCWebService>(name: string): T | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return Utils.getField<CCConfig>(this.app.webServices, name) as T;\n    }\n\n    /**\n     * Get the list configuration with the passed name\n     */\n    getList(name: string): CCList | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return this.app.lists[name];\n    }\n\n    /**\n     * Return the default {@link CCQuery}\n     */\n    get defaultCCQuery(): CCQuery | undefined {\n        return this._defaultCCQuery;\n    }\n\n    /**\n     * Return the current {@link CCQuery}\n     */\n    get ccquery(): CCQuery | undefined {\n        if (!!this._ccquery) {\n            return this._ccquery;\n        }\n        return this._defaultCCQuery;\n    }\n\n    /**\n     * Set the current {@link CCQuery}\n     */\n    set ccquery(value: CCQuery | undefined) {\n        if (value !== this._ccquery) {\n            const previous = this._ccquery;\n            this._ccquery = value;\n            this._events.next({type: \"query-changed\", current: this._ccquery, previous: previous});\n        }\n    }\n\n    /**\n     * Get the {@link CCQuery} with the passed name\n     */\n    getCCQuery(name: string): CCQuery | undefined {\n        return this.app ? this.app.queries[Utils.toLowerCase(name)] : undefined;\n    }\n\n    /**\n     * Set the current {@link CCQuery} to that with the passed name\n     */\n    setCCQuery(name?: string): boolean {\n        const ccquery = !name ? this.defaultCCQuery : this.getCCQuery(name);\n        if (ccquery) {\n            this.ccquery = ccquery;\n            return true;\n        }\n        else {\n            console.warn(`AppService.setCCQuery - query '${name}' does not exist`);\n            return false;\n        }\n    }\n\n    /**\n     * Return the fields defined on the current {@link CCQuery}\n     */\n    get fields(): string[] {\n        if (!this.ccquery) {\n            return [];\n        }\n        return this.fieldsByQuery[Utils.toLowerCase(this.ccquery.name)] || [];\n    }\n\n    /**\n     * Get the {@link CCAggregation} with the passed name\n     */\n    getCCAggregation(name: string): CCAggregation | undefined {\n        if (!this.ccquery || !this.ccquery.aggregations) {\n            return undefined;\n        }\n        return this.ccquery.aggregations.find((value) => Utils.eqNC(name, value.name));\n    }\n\n    /**\n     * Get the {@link CCIndex} with the passed name\n     */\n    getIndex(name: string): CCIndex | undefined {\n        if (!this.app) {\n            return undefined;\n        }\n        return Utils.getField<CCIndex>(this.app.indexes, name);\n    }\n\n    /**\n     * Get the {@link CCColumn} with the passed name. Aliases are resolved\n     */\n    getColumn(name: string | null | undefined): CCColumn | undefined {\n        if (!name) {\n            return undefined;\n        }\n        if (!this.ccquery) {\n            return undefined;\n        }\n        // First, CCQuery specific aliases\n        let column: CCColumn;\n        let columnAliases = this.columnsByQuery[Utils.toLowerCase(this.ccquery.name)];\n        if (columnAliases) {\n            column = columnAliases[Utils.toLowerCase(name)];\n            if (column) {\n                return column;\n            }\n        }\n        // Second, aliases by index\n        const indexes = Utils.split(this.ccquery.searchIndexes, [\",\"]);\n        const firstIndex = indexes.length === 0 ? undefined : this.getIndex(indexes[0]);\n        if (indexes.length === 0 || (!!firstIndex && this.indexIsNormal(firstIndex))) {\n            columnAliases = this.columnsByIndex._;\n            if (columnAliases) {\n                column = columnAliases[Utils.toLowerCase(name)];\n                if (column) {\n                    return column;\n                }\n            }\n        }\n        else {\n            for (const index of indexes) {\n                columnAliases = this.columnsByIndex[Utils.toLowerCase(index)];\n                if (columnAliases) {\n                    column = columnAliases[Utils.toLowerCase(name)];\n                    if (column) {\n                        return column;\n                    }\n                }\n            }\n        }\n        // Third, extra columns\n        column = AppService.extraColumns[Utils.toLowerCase(name)];\n        if (column) {\n            return column;\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the default alias a column\n     *\n     * @param column The column\n     * @return The default alias or `null` if no alias is defined\n     */\n    getColumnDefaultAlias(column?: CCColumn): string {\n        if (column) {\n            if (column.aliases && column.aliases.length > 0) {\n                return column.aliases[0];\n            }\n        }\n        return \"\";\n    }\n\n    /**\n     * Get the name of a column\n     *\n     * @param column The column\n     * @param _default A default name to return if `column` is empty\n     */\n    private getColumnName(column?: CCColumn, _default = \"\"): string {\n        if (column) {\n            return column.name;\n        }\n        return _default;\n    }\n\n    /**\n     * Get the default alias for a column\n     *\n     * @param column The column\n     * @param _default A default alias name to return if the `column` is empty or no alias is defined\n     */\n    getColumnAlias(column?: CCColumn, _default = \"\"): string {\n        if (column) {\n            const alias = this.getColumnDefaultAlias(column);\n            if (alias) {\n                return alias;\n            }\n        }\n        return _default;\n    }\n\n    /**\n     * Return a column name from a name which can be an alias\n     */\n    resolveColumnName(name: string | null | undefined): string {\n        const column = this.getColumn(name);\n        return this.getColumnName(column, name || \"\");\n    }\n\n    /**\n     * Return a column alias from a name which can be an alias\n     */\n    resolveColumnAlias(name: string | null | undefined): string {\n        const column = this.getColumn(name);\n        return this.getColumnAlias(column, name || \"\");\n    }\n\n    /**\n     * Parse a fielded search expression\n     *\n     * @param text The expression\n     * @param options Options for the parsing\n     * @return The parsed {@link Expr} or an error message\n     */\n    parseExpr(text: string, options?: ExprParserOptions): Expr | string {\n        return ExprParser.parse(text, {appService: this, formatService: this.formatService, intlService: this.intlService}, options);\n    }\n\n    /**\n     * Escape a value for fielded search if necessary. `Date` objects are converted to\n     * Sinequa system date strings and non-scalars fields are escaped\n     * @param field The value's field\n     * @param value The value\n     */\n    escapeFieldValue(field: string, value: string | number | Date | boolean | undefined): string {\n        if (Utils.isDate(value)) {\n            return Utils.toSysDateStr(value);\n        }\n        value = value + \"\";\n        const column = this.getColumn(field);\n        if (column && !AppService.isScalar(column)) {\n            // escaoe columns that might contain search operators in them (treating negative numbers as an ignorable edge case)\n            return ExprParser.escape(value);\n        }\n        return value;\n    }\n\n    /**\n     * Get the label of a column. The plural label is returned for csv-type columns.\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column) {\n            const label = AppService.isCsv(column) ? column.labelPlural : column.label;\n            if (label) {\n                return label;\n            }\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Get the singular label of a column\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getSingularLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column && column.label) {\n            return column.label;\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Get the plural label of a column\n     *\n     * @param name The name of the column which can be an alias\n     * @param _default The default label to return if no label is defined\n     */\n    getPluralLabel(name: string, _default?: string): string {\n        const column = this.getColumn(name);\n        if (column && column.labelPlural) {\n            return column.labelPlural;\n        }\n        if (!Utils.isUndefined(_default)) {\n            return _default;\n        }\n        return name;\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a string\n     */\n    isString(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isString(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a csv\n     */\n    isCsv(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isCsv(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a tree\n     */\n    isTree(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isTree(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is an entity\n     */\n    isEntity(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isEntity(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a boolean\n     */\n    isBoolean(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isBoolean(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a date\n     */\n    isDate(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isDate(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a double\n     */\n    isDouble(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isDouble(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is an integer\n     */\n    isInteger(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isInteger(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a number (integer or double)\n     */\n    isNumber(name: string): boolean {\n        return this.isInteger(name) || this.isDouble(name);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is a scalar\n     */\n    isScalar(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isScalar(column);\n    }\n\n    /**\n     * Return `true` if a column with the passed name or alias is sortable\n     */\n    isSortable(name: string): boolean {\n        const column = this.getColumn(name);\n        return !!column && AppService.isSortable(column);\n    }\n\n    /**\n     * If the passed url is relative and CORS is active then\n     * prepend it with the Sinequa server origin\n     */\n    updateUrlForCors(url: string): string {\n        if (this.startConfig.corsActive && !!url && !Utils.isUrlAbsolute(url)) {\n            url = Utils.addUrl(this.origin, url);\n        }\n        return url;\n    }\n\n    /**\n     * Return the url to the Sinequa administration console\n     */\n    get adminUrl(): string {\n        return this.updateUrlForCors(Utils.addUrl(this.startConfig.applicationPath!, \"admin\"));\n    }\n}","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {wahr} other {falsch}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Serverfehler\",\n        \"loginCancelled\": \"Anmeldung abgebrochen (login cancelled)\",\n        \"processedCredentialsError\": \"Verarbeitete Anmeldeinformationen konnten nicht ermittelt werden (unable to get processed credentials)\",\n        \"autoLoginError\": \"Anmeldung fehlgeschlagen (login failed)\",\n        \"principalSwitched\": \"Der angemeldete Benutzer hat sich geändert (the logged in user has changed)\",\n        \"userOverrideFailure\": \"Benutzerwechsel fehlgeschlagen (unable to override user)\",\n        \"responseLoadFailure\": \"Antwort konnte nicht geladen werden (failed to load response)\",\n        \"unknownError\": \"Unbekannter Fehler\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabisch\",\n        \"da\": \"Dänisch\",\n        \"de\": \"Deutsch\",\n        \"el\": \"Griechisch\",\n        \"en\": \"Englisch\",\n        \"es\": \"Spanisch\",\n        \"fi\": \"Finnisch\",\n        \"fr\": \"Französisch\",\n        \"it\": \"Italienisch\",\n        \"ja\": \"Japanisch\",\n        \"ko\": \"Koreanisch\",\n        \"nl\": \"Niederländisch\",\n        \"no\": \"Norwegisch\",\n        \"pl\": \"Polnisch\",\n        \"pt\": \"Portugiesisch\",\n        \"ro\": \"Rumänisch\",\n        \"ru\": \"Russisch\",\n        \"sv\": \"Schwedisch\",\n        \"th\": \"Thailändisch\",\n        \"zh\": \"Traditionelles Chinesisch\",\n        \"zs\": \"Vereinfachtes Chinesisch\",\n        \"zz\": \"Unbekannt\"\n    },\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport {enModal, frModal, deModal} from \"@sinequa/core/modal\";\nimport {enValidation, frValidation, deValidation} from \"@sinequa/core/validation\";\nimport _enLogin from \"./en\";\nimport _frLogin from \"./fr\";\nimport _deLogin from \"./de\";\n\nconst enLogin = Utils.merge({}, _enLogin, enIntl, enModal, enValidation);\nconst frLogin = Utils.merge({}, _frLogin, frIntl, frModal, frValidation);\nconst deLogin = Utils.merge({}, _deLogin, deIntl, deModal, deValidation);\n\nexport { enLogin, frLogin, deLogin };\n","import {Injectable, Optional, Inject, OnDestroy, InjectionToken} from \"@angular/core\";\nimport {Subject, Observable, concat, of, throwError} from \"rxjs\";\nimport {map, last} from \"rxjs/operators\";\nimport IntlMessageFormat from \"intl-messageformat\";\nimport memoizeFormatConstructor from \"intl-format-cache\";\n// TODO - check loading of locale data per locale - the ponyfill doesn't seem to work\nimport \"@formatjs/intl-relativetimeformat/polyfill\";\nimport \"intl-pluralrules\";\nimport get from \"lodash/get\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\n// We support loading d3 bundled and unbundled as it is typically easier\n// for others to integrate bundled examples but some 3rd party libs (eg swimlane/charts)\n// load d3 unbundled.\nimport {FormatLocaleDefinition, formatDefaultLocale} from \"d3-format\";\nimport {TimeLocaleDefinition, timeFormatDefaultLocale} from \"d3-time-format\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\n\n/**\n * @ignore\n */\nconst formatters = {\n    getMessageFormat: memoizeFormatConstructor(IntlMessageFormat),\n    getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat),\n    getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat),\n    getRelativeTimeFormat: memoizeFormatConstructor(Intl.RelativeTimeFormat),\n    getPluralRules: memoizeFormatConstructor(Intl.PluralRules)\n};\n\n/**\n * @ignore\n */\nconst DATE_TIME_FORMAT_OPTIONS = [\n    \"dateStyle\",\n    \"timeStyle\",\n    \"localeMatcher\",\n    \"timeZone\",\n    \"hour12\",\n    \"hourCycle\",\n    \"formatMatcher\",\n    \"weekday\",\n    \"era\",\n    \"year\",\n    \"month\",\n    \"day\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"timeZoneName\",\n];\n\n/**\n * @ignore\n */\nconst NUMBER_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"style\",\n    \"currency\",\n    \"currencyDisplay\",\n    \"useGrouping\",\n    \"minimumIntegerDigits\",\n    \"minimumFractionDigits\",\n    \"maximumFractionDigits\",\n    \"minimumSignificantDigits\",\n    \"maximumSignificantDigits\",\n];\n\n/**\n * @ignore\n */\nconst RELATIVE_TIME_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"numeric\",\n    \"style\"\n];\n\n/**\n * Describes event emitted by {@link IntlService} when the current locale changes\n */\nexport interface LocaleChangeEvent {\n    /**\n     * The name of the newly selected locale\n     */\n    locale: string;\n}\n\n/**\n * Describes the data that can be set in a Sinequa locale. Instances are normally\n * defined in application locale modules which can be included statically or loaded\n * dynamically\n */\nexport interface LocaleData {\n    /**\n     * Options pertaining to the `Intl` API\n     */\n    intl: {\n        locale: string\n    };\n    /**\n     * Options pertaining to the `Moment.js` library\n     */\n    moment?: { // default to built-in en-us, data is auto set by moment.defineLocale when the locale module is loaded\n        locale: string\n    };\n    /**\n     * Options pertaining to the `D3.js` library\n     */\n    d3?: {\n        locale: string,\n        format: FormatLocaleDefinition,\n        time: TimeLocaleDefinition\n    };\n    /**\n     * The messages (ICU Message syntax) for this locale\n     */\n    messages: JsonObject;\n}\n\n/**\n * Describes a Sinequa locale\n */\nexport interface Locale {\n    /**\n     * The name identifying the locale\n     */\n    name: string;\n    /**\n     * A display name for the locale\n     */\n    display: string;\n    /**\n     * The directionality of text in this locale (left-to-right or right-to-left)\n     */\n    direction?: \"ltr\" | \"rtl\";\n    /**\n     * The locale data for the locale\n     */\n    data?: LocaleData;\n}\n\n/**\n * @ignore\n */\ninterface NextLang {\n    start: number;\n    end: number;\n    lang1: number;\n    lang2: number;\n}\n\n\n// moment needs to be set globally to load moment locales successfully when the locales are bundled in the main rollup bundle\n// see: https://github.com/rollup/rollup/issues/641\nimport \"./import-moment\";\n\n/**\n * Describes the locales configuration object defined by an application and used by the {@link IntlService}\n */\nexport interface LocalesConfig {\n    /**\n     * The default locale\n     */\n    defaultLocale: Locale;\n    /**\n     * The set of locales supported by the application\n     */\n    locales?: Locale[];\n    /**\n     * An optional loader for the dynamic loading of locale data\n     * for locales that do not define the data statically\n     */\n    loadLocale?(locale: string): Observable<LocaleData>;\n}\n\n/**\n * An injection token used to initialize the [locales configuration]{@link LocalesConfig} of {@link IntlModule}\n */\nexport const LOCALES_CONFIG = new InjectionToken<LocalesConfig>('LOCALES_CONFIG');\n\n/**\n * Describes the object to specify custom ICU Message formats\n */\nexport interface IntlFormats {\n    /**\n     * Format options for dates\n     */\n    date?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for times\n     */\n    time?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for numbers\n     */\n    number?: MapOf<Intl.NumberFormatOptions>;\n    /**\n     * Format options for relative times\n     */\n    relativeTime?: MapOf<Intl.RelativeTimeFormatOptions>;\n}\n\n/**\n * Describes a general configuration object for the {@link IntlModule}\n */\nexport interface IntlConfig {\n    /**\n     * Custom formats for ICU Message processing\n     */\n    formats?: IntlFormats;\n}\n\n/**\n * An injection token used to initialize the [general configuration]{@link IntlConfig} of {@link IntlModule}\n */\nexport const INTL_CONFIG = new InjectionToken<IntlConfig>('INTL_CONFIG');\n\n/**\n * Default custom ICU Message formats\n */\nconst DEFAULT_FORMATS: IntlFormats = {\n    date: {\n        sqDateTime: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n        },\n        sqDate: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\"\n        },\n        sqYear: {\n            year: \"numeric\"\n        },\n        sqMonthYear: {\n            month: \"short\",\n            year: \"numeric\"\n        }\n    },\n    time: {\n    },\n    number: {\n        sqWeek: {\n            minimumIntegerDigits: 2,\n            useGrouping: false\n        },\n        sqYear: {\n            useGrouping: false\n        },\n        sqNoGrouping: {\n            useGrouping: false\n        },\n        sqZeroDecimalPlaces: {\n            maximumFractionDigits: 0\n        },\n        sqOneDecimalPlace: {\n            maximumFractionDigits: 1\n        },\n        sqTwoDecimalPlaces: {\n            maximumFractionDigits: 2\n        },\n        sqThreeDecimalPlaces: {\n            maximumFractionDigits: 3\n        },\n        sqFourDecimalPlaces: {\n            maximumFractionDigits: 4\n        },\n        sqFiveDecimalPlaces: {\n            maximumFractionDigits: 5\n        }\n    }\n};\n\n/* eslint-disable jsdoc/check-alignment,jsdoc/check-indentation,jsdoc/newline-after-description */\n/**\n * This service provides methods for managing locales and for formatting dates, numbers and strings using\n * [ICU Message syntax]{@link https://formatjs.io/guides/message-syntax/}. [Messages]{@link LocaleData#messages} stored\n * in a locale's data are referenced using a key in the following form: `msg#<JSONPath>`. Given the following messages:\n``` json\n{\n    \"myComponent\": {\n        \"title\": \"Component: {name}\",\n        \"footer\": \"Created on {created, date, medium} by {author}\"\n    }\n}\n```\n * this key: `msg#myComponent.footer` references myComponent's footer message. The message itself uses\n * ICU Message syntax.\n *\n * This service registers a number of [default custom ICU formats]{@link DEFAULT_FORMATS}. These can be overridden or\n * extended by providing the [INTL_CONFIG]{@link INTL_CONFIG} injection token.\n */\n/* eslint-enable jsdoc/check-alignment, jsdoc/check-indentation, jsdoc/newline-after-description */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class IntlService implements OnDestroy {\n    /**\n     * The prefix for ICU messages to be retrieved from [LocaleData.messages]{@link LocaleData#messages}\n     * by {@link formatMessage}\n     */\n    readonly messagePrefix = \"msg#\";\n    /**\n     * An alternative prefix for inline ICU messages processed by {@link formatMessage}\n     */\n    readonly textPrefix = \"txt#\";\n    /**\n     * The available locales\n     */\n    locales: Locale[];\n    /** The current locale */\n    currentLocale: Locale;\n    protected intlLocale: string;\n    /** The current direction */\n    direction: \"ltr\" | \"rtl\";\n    protected _events: Subject<LocaleChangeEvent>;\n    protected formats: IntlFormats;\n\n    constructor(\n        @Optional() @Inject(INTL_CONFIG) protected intlConfig: IntlConfig,\n        @Optional() @Inject(LOCALES_CONFIG) protected localesConfig: LocalesConfig\n    ) {\n        if (!this.intlConfig) {\n            this.intlConfig = {};\n        }\n        if (!localesConfig) {\n            if (!localesConfig) {\n                console.error(\"LOCALES_CONFIG has not been provided by the calling app. \" +\n                    \"Please import IntlModule using the forRoot method to which you should pass a LocalesConfig object\");\n            }\n        }\n        this._events = new Subject<LocaleChangeEvent>();\n        this.locales = localesConfig.locales || [localesConfig.defaultLocale];\n    }\n\n    private static getLanguage(name: string) {\n        const sepPos = name.indexOf(\"-\");\n        if (sepPos === -1) {\n            return name;\n        }\n        return name.substring(0, sepPos);\n    }\n\n    private static getBrowserLanguages(): string[] {\n        if ((navigator as any).languages) {\n            return (navigator as any).languages;\n        }\n        const language = navigator.language || (navigator as any).userLanguage ||\n            (navigator as any).browserLanguage || (navigator as any).systemLanguage;\n        return !!language ? [language] : [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<LocaleChangeEvent> {\n        return this._events;\n    }\n\n    private getInitialLocale(): Locale {\n        const language = window.localStorage.getItem(\"sinequa-locale\");\n        const languages = !!language ? [language] : IntlService.getBrowserLanguages();\n        let locale = this.getLocale(languages);\n        if (locale) {\n            return locale;\n        }\n        locale = this.getLocale(languages, true);\n        if (locale) {\n            return locale;\n        }\n        return this.localesConfig.defaultLocale;\n    }\n\n    /**\n     * Initialize the service. The current locale is initialized to either the `sinequa-locale` local\n     * storage value, the browser language or the default locale.\n     *\n     * This method is called automatically by the {@link IntlModule} at application startup.\n     *\n     * @return An observable of the current locale\n     */\n    init(): Observable<string> {\n        // Set up formats\n        this.formats = Utils.merge(DEFAULT_FORMATS, this.intlConfig.formats);\n        // Load default locale\n        let observable = this.use(this.localesConfig.defaultLocale.name, false);\n        const initialLocale = this.getInitialLocale();\n        if (initialLocale !== this.localesConfig.defaultLocale) {\n            // Load initial locale if different to default\n            console.log(\"Setting initial locale: \", initialLocale.name);\n            observable = concat<string>(observable, this.use(initialLocale.name, false)).pipe(last<string>());\n        }\n        Utils.subscribe(observable,\n            (value) => {\n                console.log(\"Initial locale set: \", value);\n            });\n        return observable;\n    }\n\n    private loadData(locale: string): Observable<LocaleData> {\n        if (!this.localesConfig.loadLocale) {\n            return throwError(\"Dynamic locale loading has not been implemented in the calling app - \"  +\n                \"please add a loadLocale handler to your LocalesConfig\");\n        }\n        return this.localesConfig.loadLocale(locale);\n    }\n\n    private getLocale(names: string | string[], approximate = false): Locale | undefined {\n        if (typeof names === \"string\") {\n            names = [names];\n        }\n        for (const name of names) {\n            const locale = this.locales.find((locale1) => {\n                if (locale1.name === name) {\n                    return true;\n                }\n                if (approximate && IntlService.getLanguage(locale1.name) === IntlService.getLanguage(name)) {\n                    return true;\n                }\n                return false;\n            });\n            if (locale) {\n                return locale;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Change the current locale. The change is made asynchronously as the locale may need to be\n     * downloaded. The current locale is optionally stored in local storage (`sinequa-locale`)\n     * to be picked up the next time the service is initialized\n     *\n     * @param locale The name of the locale to use\n     * @param store If `true` the current locale is stored in local storage\n     */\n    use(locale: string, store = true): Observable<string> {\n        const newLocale = this.getLocale(locale);\n        if (!newLocale) {\n            return throwError({error: \"unsupported locale\"});\n        }\n\n        const observable = !!newLocale.data ? of(newLocale.data) : this.loadData(locale);\n        Utils.subscribe<LocaleData>(observable,\n            (data) => {\n                this.currentLocale = newLocale;\n\n                if (store) {\n                    window.localStorage.setItem(\"sinequa-locale\", this.currentLocale.name);\n                }\n\n                this.direction = this.currentLocale.direction || \"ltr\";\n\n                if (!this.currentLocale.data) {\n                    this.currentLocale.data = data;\n                }\n\n                // Set moment locale\n                if (this.currentLocale.data.moment) {\n                    // Set (and define if necessary) moment locale (it auto-defines when we are not bundled)\n                    if (moment.locale(this.currentLocale.data.moment.locale) !== this.currentLocale.data.moment.locale) {\n                        console.log(`moment locale not defined: ${this.currentLocale.data.moment.locale} - defaulting to en`);\n                        moment.locale(\"en\");\n                    }\n                }\n                else {\n                    moment.locale(\"en\");\n                }\n\n                // Set d3 locale\n                if (this.currentLocale.data.d3) {\n                    formatDefaultLocale(this.currentLocale.data.d3.format);\n                    timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                    d3.formatDefaultLocale(this.currentLocale.data.d3.format);\n                    d3.timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                }\n\n                if (this.currentLocale.data.intl && this.currentLocale.data.intl.locale) {\n                    this.intlLocale = this.currentLocale.data.intl.locale;\n                }\n                else {\n                    this.intlLocale = this.localesConfig.defaultLocale.data ? this.localesConfig.defaultLocale.data.intl.locale : \"en\";\n                }\n                return of(this.intlLocale);\n            });\n\n        const observable2 = observable.pipe(map((value) => {\n            return this.currentLocale.name;\n        }));\n\n        Utils.subscribe(observable2,\n            (name) => {\n                this._events.next({locale: name});\n            });\n\n        return observable2;\n    }\n\n    private getDefaultMessages(): any {\n        const _default = this.locales.find((value) => !!value.data && !!value.data.messages);\n        if (_default) {\n            return _default.data && _default.data.messages;\n        }\n        return {};\n    }\n\n    private getMessages(): any {\n        let messages;\n        if (this.currentLocale && this.currentLocale.data) {\n            messages = this.currentLocale.data.messages;\n        }\n        if (!messages) {\n            messages = this.getDefaultMessages();\n        }\n        return messages;\n    }\n\n    /**\n     * Get the message from the current locale that corresponds to the passed `key`.\n     * If the is not prefixed by {@link messagePrefix} then `null` is returned\n     *\n     * @param key The message key\n     */\n    getMessage(key: string): string | undefined {\n        if (!Utils.startsWith(key, this.messagePrefix)) {\n            return undefined;\n        }\n        key = key.substr(this.messagePrefix.length);\n        const messages = this.getMessages();\n        let message = get(messages, key);\n        if (!message) {\n            const defaultMessages = this.getDefaultMessages();\n            if (messages !== defaultMessages) {\n                message = get(defaultMessages, key);\n            }\n        }\n        return message;\n    }\n\n    // Returned start and end are for the text BEFORE the language specifier and so refer to the previous\n    // language not the one returned by the same call to this method\n    private nextLang(text: string, start: number, allowNone: boolean): NextLang | undefined {\n        for (let i = start, ic = text.length - 3; i < ic; i++) {\n            if (text[i] === \"[\" && text[i + 3] === \"]\") {\n                return {\n                    start,\n                    end: i,\n                    lang1: text.charCodeAt(i + 1),\n                    lang2: text.charCodeAt(i + 2)\n                };\n            }\n        }\n        if (allowNone) {\n            return {\n                start,\n                end: text.length,\n                lang1: -1,\n                lang2: -1\n            };\n        }\n        return undefined;\n    }\n\n    // ([nnn])<default>[fr]<french>[de]<german>...\n    private sysLang(text: string): string {\n        if (!text) {\n            return text;\n        }\n        let iStart = 0;\n        const len = text.length;\n        // Skip order\n        let i = 0;\n        if (text[i] === \"[\") {\n            while (i < len && text[i] >= \"0\" && text[i] <= \"9\") {\n                i++;\n            }\n            if (text[i] === \"]\") {\n                iStart = i + 1;\n            }\n        }\n        // Pick out default value\n        const defaultLang = this.nextLang(text, iStart, false);\n        if (!defaultLang) {\n            return text; // Not a sys lang formatted text\n        }\n        // Look for a matching language\n        const lang1 = this.currentLocale.name.charCodeAt(0);\n        const lang2 = this.currentLocale.name.charCodeAt(1);\n        let curLang: NextLang | undefined = defaultLang;\n        while (curLang) {\n            if (lang1 === curLang.lang1 && lang2 === curLang.lang2) {\n                // We have a matching language, get its text\n                const nextLang = this.nextLang(text, curLang.end + 4, true);\n                return text.substring(nextLang!.start, nextLang!.end);\n            }\n            else {\n                curLang = this.nextLang(text, curLang.end + 4, false);\n            }\n        }\n        // return default language text\n        return text.substring(defaultLang.start, defaultLang.end);\n    }\n\n    private processFormatMessage(message: string, values = {}): string {\n        const hasValues = Object.keys(values).length > 0;\n        if (!hasValues) {\n            return message;\n        }\n        if (message) {\n            try {\n                const formatter = formatters.getMessageFormat(message, this.intlLocale, this.formats, {formatters});\n                const formattedMessage = formatter.format(values);\n                return formattedMessage;\n            }\n            catch (e) {\n                console.log(\"IntlService.processFormatMessage error:\", e);\n                return message;\n            }\n        }\n        else {\n            return message;\n        }\n    }\n\n    /**\n     * Format a message identified by a `key`. Any values referenced\n     * by the message are taken from an optional `values` map. The key can be\n     * in a variety of forms:\n     * * a Sinequa \"syslang\" string: `apple[fr]pomme[de]Apfel`\n     * * a message key resolved in the [messages]{@link LocaleData#messages} of the current\n     * locale:  `msg#path1.path2.path3`\n     * * an ICU message using the `txt#` prefix: `txt#Hello {name}`\n     *\n     * @param key The message identifier\n     * @param values Values referenced by an ICU message\n     * @return The formatted message. If the key is not resolved then it is returned unprocessed\n     */\n    formatMessage(key: string, values?: MapOf<any>): string {\n        key = Utils.trim(key);\n        const sysLangStr = this.sysLang(key);\n        if (sysLangStr !== key) {\n            return sysLangStr;\n        }\n        const _values = {};\n        if (values) {\n            for (const valueName of Object.keys(values)) {\n                const value = values[valueName];\n                if (value && Utils.isString(value)) {\n                    _values[valueName] = this.formatMessage(value);\n                }\n                else {\n                    _values[valueName] = value;\n                }\n            }\n        }\n        if (Utils.startsWith(key, this.messagePrefix)) {\n            if (Utils.eq(key, this.messagePrefix)) {\n                return key;\n            }\n            let message = this.getMessage(key);\n            if (!Utils.isString(message)) {\n                message = key;\n            }\n            const formattedMessage = this.processFormatMessage(message, _values);\n            return formattedMessage;\n        }\n        else if (Utils.startsWith(key, this.textPrefix)) {\n            if (Utils.eq(key, this.textPrefix)) {\n                return key;\n            }\n            key = key.substr(this.textPrefix.length);\n            const formattedMessage = this.processFormatMessage(key, _values);\n            return formattedMessage;\n        }\n        else {\n            return key;\n        }\n    }\n\n    /**\n     * Format an ICU Message string\n     *\n     * @param text An ICU Message to format\n     * @param values Values referenced by an ICU message\n     */\n    formatText(text: string, values?: {}): string {\n        const formattedMessage = this.processFormatMessage(text, values);\n        return formattedMessage;\n    }\n\n    /**\n     * Parse a date string in the current locale - eg `04/09/1986`\n     *\n     * @param value A date string\n     * @returns The parse `Date` or `undefined` if the date cannot be parsed\n     */\n    parseDate(value: string): Date | undefined {\n        const m = moment(value, \"L\");\n        if (m.isValid()) {\n            return m.toDate();\n        }\n        return undefined;\n    }\n\n    private getNamedFormat(type: string, name: string): Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | undefined {\n        const format = this.formats && this.formats[type] && this.formats[type][name];\n        if (format) {\n            return format;\n        }\n        console.warn(`IntlService.getNamedFormat - not found - type: ${type}, name: ${name}`);\n        return undefined;\n    }\n\n    private filterProps(props: {[k: string]: any}, whitelist: string[], defaults: {[k: string]: any} = {}): any {\n        return whitelist.reduce<{[k: string]: string}>((filtered, name) => {\n            if (props.hasOwnProperty(name)) {\n                filtered[name] = props[name];\n            }\n            else if (defaults.hasOwnProperty(name)) {\n                filtered[name] = defaults[name];\n            }\n            return filtered;\n        }, {});\n    }\n\n    /**\n     * Format a date in the current locale according to the passed options. If the passed `value` is not a `Date`\n     * then one is constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatDate(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"date\", format)) || {};\n        const filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatDate:\", e);\n        }\n        return String(date);\n    }\n\n    /**\n     * Format a time in the current locale according to the passed options. If the passed `value` is not a `Date` then one is\n     * constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatTime(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"time\", format)) || {};\n        let filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {\n            // Add default formatting options if hour, minute, or second isn't defined.\n            filteredOptions = Object.assign({},\n                filteredOptions,\n                {\n                    hour: 'numeric',\n                    minute: 'numeric'\n                });\n        }\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatTime:\", e);\n        }\n        return String(date);\n    }\n\n    private makeRelativeTimeParams(value: Date): { value: number, unit: Intl.RelativeTimeUnit } {\n        const diff = value.getTime() - Utils.now.getTime();\n        const absDiff = Math.abs(diff);\n        if (absDiff < Utils.oneSecond) {\n            return { value: 0, unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneMinute) {\n            return { value: Utils.roundAway(diff / Utils.oneSecond), unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneHour) {\n            return { value: Utils.roundAway(diff / Utils.oneMinute), unit: \"minutes\" };\n        }\n        else if (absDiff < Utils.oneDay) {\n            return { value: Utils.roundAway(diff / Utils.oneHour), unit: \"hours\" };\n        }\n        else if (absDiff < (Utils.oneDay * 30)) {\n            return { value: Utils.roundAway(diff / Utils.oneDay), unit: \"days\" };\n        }\n        else if (absDiff < (Utils.oneDay * 365)) {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 30)), unit: \"months\" };\n        }\n        else {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 365)), unit: \"years\" };\n        }\n    }\n\n    /**\n     * Format a relative time in the current locale according to the passed options\n     *\n     * @param value The relative time to format. Negative number values represent times in the past.\n     * If a Date value is passed then a number value and unit are deduced automatically based on\n     * the current date and time.\n     * @param unit The relative time unit (eg years, days or seconds). Must be passed if value\n     * is a number.\n     * @param options The options can include a custom format\n     */\n    formatRelativeTime(\n        value: string | number | Date | undefined, unit?: Intl.RelativeTimeUnit,\n        options: Intl.RelativeTimeFormatOptions & { format?: string } = {}\n    ): string {\n        if (value === undefined) {\n            return \"\";\n        }\n        if (Utils.isString(value)) {\n            value = new Date(value);\n        }\n        if (Utils.isDate(value)) {\n            const params =  this.makeRelativeTimeParams(value);\n            value = params.value;\n            unit = params.unit;\n        }\n        const { format } = options;\n        const defaults = (format && this.getNamedFormat(\"relativeTime\", format)) || {};\n        const filteredOptions = this.filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.numeric) {\n            filteredOptions.numeric = \"auto\"; // default is always - we prefer auto\n        }\n        try {\n            return formatters.getRelativeTimeFormat(this.intlLocale, filteredOptions).format(value, unit);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatRelativeTime:\", e);\n        }\n        return String(value);\n    }\n\n    /**\n     * Format a number in the current locale\n     *\n     * @param value The number to format\n     * @param options The options can include a custom format\n     */\n    formatNumber(value: any, options: Intl.NumberFormatOptions & { format?: any } = {}): string {\n        const {format} = options;\n        const defaults = format && this.getNamedFormat(\"number\", format);\n        const filteredOptions = this.filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n        try {\n          return formatters.getNumberFormat(this.intlLocale, filteredOptions).format(value);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatNumber:\", e);\n        }\n        return String(value);\n    }\n}\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enModal from \"./en\";\nimport _frModal from \"./fr\";\nimport _deModal from \"./de\";\n\nconst enModal = Utils.merge({}, _enModal, enIntl);\nconst frModal = Utils.merge({}, _frModal, frIntl);\nconst deModal = Utils.merge({}, _deModal, deIntl);\n\nexport { enModal, frModal, deModal };\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\n\nexport class RecentQueriesList {\n    constructor(name: string) {\n        this.name = name;\n        this.queries = [];\t// Make sure to have at least a valid \"queries\" member, to simplify tests in GUI code.\n    }\n    name: string;\t\t// App name or user name the queries are related to.\n    queries: IQuery[];\n}\n\nexport class RecentQueries {\n    app?: RecentQueriesList;\n    user?: RecentQueriesList;\n}\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RecentQueriesWebService extends HttpService {\n    recentQueries: RecentQueries;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    load(): Observable<RecentQueries> {\n        const observable = this.httpClient.get<RecentQueries>(this.makeUrl(\"recentqueries\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.recentQueries = response;\n                if (!this.recentQueries)\n                    this.recentQueries = new RecentQueries();\n                if (this.recentQueries) {\n                    if (!this.recentQueries.app)\n                        this.recentQueries.app = new RecentQueriesList(this.appName);\n                    if (!this.recentQueries.user)\n                        this.recentQueries.user = new RecentQueriesList(\"currentuser\");\n                }\n                console.log(\"recentQueriesService.load success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"recentQueriesService.load failure - error: \", error);\n            });\n        return observable;\n    }\n    // No save/patch action for the recent queries: MRU lists are generated server side when the query is executed.\n\n    appRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries;\n        else {\n            return [];\n        }\n    }\n\n    appRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries.length;\n        else\n            return 0;\n    }\n\n    userRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries;\n        else {\n            return [];\n        }\n    }\n\n    userRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries.length;\n        else\n            return 0;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Credentials} from \"./authentication.service\";\n\n/**\n * A service to retrieve a JWT (JSON Web Token) from the Sinequa server.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class JWTService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get a JWT from the Sinequa server using the passed credentials. The JWT is received in a cookie\n     * and the associated CSRF token in the response payload.\n     *\n     * @param credentials The credentials to be used for the JWT. These are sent in clear text\n     */\n    getToken(credentials: Credentials): Observable<string> {\n        const observable = this.httpClient.post<{csrfToken: string}>(this.makeUrl(\"webToken\"),\n            {\n                action: \"get\",\n                user: credentials.userName,\n                password: credentials.password,\n                tokenInCookie: true,\n            },\n            {\n                params: this.makeParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            });\n        return observable.pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n}\n","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalResult, ModalRef} from \"@sinequa/core/modal\";\nimport {Credentials} from \"./authentication.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A basic login component that request a user name and password. It is designed to work with\n * [LoginService.getCredentials]{@link LoginService#getCredentials} and can be set using the\n * {@link MODAL_LOGIN} injection token\n */\n@Component({\n    selector: \"sq-core-login\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\"\n            cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{'msg#modal.login.title' | sqMessage}}</h3>\n            <input placeholder=\"{{'msg#modal.login.userName' | sqMessage}}\" formControlName=\"userName\">\n            <ng-container *ngIf=\"showError(userNameControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"userName\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <div style=\"margin-bottom: 8px;\"></div>\n            <input type=\"password\" placeholder=\"{{'msg#modal.login.password' | sqMessage}}\" formControlName=\"password\">\n            <ng-container *ngIf=\"showError(passwordControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"password\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Login implements OnInit, OnDestroy {\n    userNameControl: FormControl;\n    passwordControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) protected model: Credentials,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.userNameControl = new FormControl(this.model.userName, Validators.required);\n        this.passwordControl = new FormControl(this.model.password, Validators.required);\n        this.form = this.formBuilder.group({\n            userName: this.userNameControl,\n            password: this.passwordControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.userName = this.userNameControl.value;\n                this.model.password = this.passwordControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {AbstractIntlPipe} from \"./abstract-intl.pipe\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the parameters that can be passed to the [sqMessage]{@link MessagePipe} pipe\n */\nexport interface MessageParams {\n    /**\n     * Values that can be referenced from ICU messages\n     */\n    values?: MapOf<any>;\n}\n\n/**\n * A pipe to display messages in the current locale. Inputs are processed by\n * [IntlService.formatMessage]{@link IntlService#formatMessage}\n */\n@Pipe({name: \"sqMessage\", pure: false})\nexport class MessagePipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef) {\n        super(intlService, changeDetectorRef);\n    }\n\n    protected updateValue(value: any, params: MessageParams): void {\n        if (!Utils.isEmpty(value)) {\n            // coerce to string (eg sys date strings get converted to dates so if this happens to a title we will break otherwise)\n            value = value + \"\";\n        }\n        super.updateValue(value, params);\n        if (!value) {\n            this.value = value;\n            return;\n        }\n        let values: MapOf<any> | undefined;\n        if (params) {\n            values = params.values ? params.values : params;\n        }\n        this.value = this.intlService.formatMessage(value, values);\n    }\n}\n","export * from \"./load-component.module\";\nexport * from \"./load-component.service\";\nexport * from \"./load-component.directive\";\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes a rating configuration object\n */\nexport interface CCRating {\n    ratingsColumn: string;\n    averageColumn: string;\n\n    updateDocWeight: boolean;\n\n    ratingsDistribution: string[];\n}\n\n/**\n * Describes a user rating response object\n */\nexport interface UserRatingResponse {\n    rating: number;\n    averagerating: number;\n}\n\n/**\n * A service for calling the ratings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserRatingsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets the current user rating for a document\n     *\n     * @param docid The id of a document for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRating(docid: string, config: CCRating): Observable<UserRatingResponse> {\n        return this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"get\",\n            docid,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution\n        }).pipe(tap(\n            r => {},\n            error => console.log(\"ratingsService.getRating failure - error: \", error)\n        ));\n    }\n\n    /**\n     * Sets the current user rating for a document\n     *\n     * @param record The document for which to set the rating\n     * @param rating A rating value\n     * @param config The ratings configuration\n     */\n    setRating(record: Record, rating: number, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"set\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            rating,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Set,\n                        detail: {\n                            \"doc-id\": record.id,\n                            ratingnum: rating,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.setRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Delete a rating for a document\n     *\n     * @param record The document for which to delete the rating\n     * @param config The ratings configuration\n     */\n    deleteRating(record: Record, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"delete\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Delete,\n                        detail: {\n                            \"doc-id\": record.id,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.deleteRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Gets user rating information from the given record\n     *\n     * @param record The record for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRecordRating(record: Record, config: CCRating): UserRatingResponse {\n        return {\n            rating: this.parseUserRating(record[config.ratingsColumn], config),\n            averagerating: this.parseAverageRating(record[config.averageColumn], config)\n        };\n    }\n\n    private parseAverageRating(columnEntries: string[], config: CCRating): number {\n        if (config.ratingsDistribution && columnEntries) {\n            return config.ratingsDistribution.indexOf(columnEntries[0]);\n        }\n        else {\n            return -1;\n        }\n    }\n\n    private parseUserRating(ratingValues: string[], config: CCRating): number {\n        if(ratingValues) {\n            if (config.ratingsDistribution) {\n                return config.ratingsDistribution.indexOf(ratingValues[0]);\n            }\n        }\n        return -1;\n    }\n}\n","import {Utils, MapOf, IRef, FieldValue} from \"@sinequa/core/base\";\nimport {AppService} from \"../app.service\";\nimport {AppServiceHelpers} from \"../app-service-helpers\";\nimport {CCColumn, EngineType} from \"@sinequa/core/web-services\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"../format.service\";\n\n/**\n * Describes a context for processing expressions\n */\nexport interface ExprContext {\n    appService: AppService;\n    formatService: FormatService;\n    intlService: IntlService;\n    disallowFulltext?: boolean;\n}\n\n/**\n * The operators accepted in fielded search expressions\n */\nexport const enum ExprOperator {\n    none,\n    eq,\n    gt,\n    gte,\n    lt,\n    lte,\n    neq,\n    regex,\n    like,\n    contains,\n    in,\n    between\n}\n\n/**\n * The range operators accepted in fielded search expressions\n */\nexport const enum ExprRange {\n    none,\n    gteLte,\n    gteLt,\n    gtLte,\n    gtLt\n}\n\n/**\n * An object containing the data necessary to format an `Expr` using\n * [IntlService.formatMessage]{@link IntlService#formatMessage}\n */\nexport interface ExprMessage {\n    /**\n     * The `IntlService` compatible message string\n     */\n    message: string;\n    /**\n     * Any values referenced by `message`\n     */\n    values?: {\n        [key: string]: FieldValue\n    };\n}\n\n/**\n * Options to be used with `Expr.toMessage`\n */\nexport interface ExprMessageOptions {\n    /**\n     * If `true`, field names are included in the message\n     */\n    withFields?: boolean;\n    /**\n     * If `true`, use any display value set in the expression\n     */\n    useDisplay?: boolean;\n    /**\n     * Include HTML formatting in the message\n     */\n    asHTML?: boolean;\n    /**\n     * If `true`, don't include any outer `NOT` operator in the message\n     */\n    hideOuterNot?: boolean;\n}\n\n/**\n * @ignore\n */\ninterface ExprMessageCtxt {\n    inner: boolean;\n    message: string[];\n    values: {\n        [key: string]: FieldValue\n    };\n    valueIndex: number;\n}\n\n/**\n * Describes a location in a fielded search expression\n */\nexport interface ExprLocation {\n    start: number;\n    length: number;\n}\n\n/**\n * Describes a location and value in a fielded search expression\n */\nexport interface ExprValueLocation extends ExprLocation {\n    value: string;\n}\n\n/**\n * Describes a location, value and field in a fielded search expression\n */\nexport interface ExprValueInfo extends ExprValueLocation {\n    field: string;\n}\n\n/**\n * Describes the data used in [Expr.evaluate]{@link Expr#evaluate}\n */\nexport interface ExprEvaluationContext {\n    [key: string]: any;\n}\n\n/**\n * Describes an initialization object used in the construction of an {@link Expr} from a value\n */\nexport interface ExprValueInitializer {\n    /**\n     * The expression context\n     */\n    exprContext: ExprContext;\n    /**\n     * A single value\n     */\n    value?: string;\n    /**\n     * An array of values\n     */\n    values?: string[];\n    /**\n     * Locations of the values used in range expressions\n     */\n    locations?: ExprLocation[];\n    /**\n     * The operator used in the expression\n     */\n    operator?: ExprOperator;\n    /**\n     * The field name\n     */\n    field?: string;\n    /**\n     * The display value\n     */\n    display?: string;\n}\n\n/**\n * Describes an initialization object used in the construction of a boolean {@link Expr} with a pair of operands\n */\nexport interface ExprOperandsInitializer {\n    /**\n     * The expression context\n     */\n    exprContext: ExprContext;\n    /**\n     * The first operand\n     */\n    op1: Expr;\n    /**\n     * If `true` this `Expr` represents an `AND` expression, otherwise it represents an `OR` expression\n     */\n    and: boolean;\n    /**\n     * The second operand\n     */\n    op2: Expr;\n    /**\n     * The field name\n     */\n    field?: string;\n    /**\n     * The display value\n     */\n    display?: string;\n}\n\n/**\n * Represents a parsed fielded search expression. A tree of expression nodes is built when an expression\n * combines sub-expressions using boolean operators\n */\nexport class Expr {\n\n    private _field: string | undefined = undefined;\n\n    /**\n     * Return the field name of this expression. Return the first ancestor's non-empty field\n     * if the field on this node is empty\n     */\n    public get field(): string | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (!Utils.isEmpty(expr._field)) {\n                return expr._field;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * Set the field name of this expression\n     */\n    public set field(value: string | undefined) {\n        this._field = value;\n    }\n\n    private _display: string | undefined = undefined;\n    private _displayObj: {label?: string, display?: string} | undefined = undefined;\n\n    /**\n     * Return the display value of this expression. Return the first ancestor's non-empty display value\n     * if the display value on this node is empty\n     */\n    public get display(): string | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (!Utils.isEmpty(expr._display)) {\n                return expr._display;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * Set the display value of this expression. If the display value is a valid stringified JSON object\n     * then set `displayObj` to the parsed object\n     */\n    public set display(value: string | undefined) {\n        this._display = value;\n        if (!this._display) {\n            this._displayObj = undefined;\n        }\n        else {\n            if (this._display[0] === \"{\" && this._display[this._display.length - 1] === \"}\") {\n                try {\n                    this._displayObj = Utils.fromJson(this._display);\n                }\n                catch (e) {\n                    this._displayObj = undefined;\n                }\n            }\n            else {\n                this._displayObj = undefined;\n            }\n        }\n    }\n\n    /**\n     * Return the display object of this expression. Return the first ancestor's non-empty display object\n     * if the display object on this node is empty\n     */\n    public get displayObj(): {label?: string, display?: string} | undefined {\n        let expr: Expr = this;\n        while (expr) {\n            if (expr._displayObj) {\n                return expr._displayObj;\n            }\n            expr = expr.parent;\n        }\n        return undefined;\n    }\n\n    /**\n     * The values of this expression\n     */\n    public values: string[] | undefined = undefined;\n    /**\n     * The locations of the values of this expression\n     */\n    public locations: ExprLocation[] | undefined;\n\n    /**\n     * Return the value of this expression. Note that range expressions may have multiple values\n     */\n    public get value(): string | undefined {\n        if (!this.values || this.values.length === 0) {\n            return undefined;\n        }\n        return this.values[0];\n    }\n\n    /**\n     * Set the value of this expression\n     */\n    public set value(value: string | undefined) {\n        if (value === undefined) {\n            this.values = undefined;\n        }\n        else {\n            if (!this.values) {\n                this.values = [];\n            }\n            this.values[0] = value;\n            this.values.length = 1;\n        }\n    }\n\n    /**\n     * The operator of this expression\n     */\n    public operator: ExprOperator;\n    /**\n     * If `true` then this expression included the `NOT` boolean operator\n     */\n    public not: boolean;\n    /**\n     * If `true` then the operands of this expression are combined with the `AND` operator.\n     * Otherwise the operands are combined with the `OR` operator\n     */\n    public and: boolean;\n    /**\n     * The operands of this expression, if any\n     */\n    public operands: Expr[];\n    /**\n     * The parent expression, if any\n     */\n    public parent: Expr;\n    /**\n     * The expression context\n     */\n    public exprContext: ExprContext;\n    /**\n     * The distance specified in a `NEAR` expression\n     */\n    public near: number;\n    /**\n     * The position of this expression's value in the original text\n     */\n    public start: number;\n    /**\n     * The length of this expression's value in the original text\n     */\n    public length: number;\n    private mergedStructured: boolean;\n\n    // for evaluate\n    private _evaluationRegExps: MapOf<RegExp | undefined>;\n    private get evaluationRegExps(): MapOf<RegExp | undefined> {\n        if (!this._evaluationRegExps) {\n            this._evaluationRegExps = {};\n        }\n        return this._evaluationRegExps;\n    }\n\n    constructor(init: ExprValueInitializer | ExprOperandsInitializer) {\n        if (!(<ExprOperandsInitializer>init).op1) {\n            const valueInit: ExprValueInitializer = <ExprValueInitializer>init;\n            this.exprContext = valueInit.exprContext;\n            if (!Utils.isUndefined(valueInit.value)) {\n                this.value = ExprParser.unescape(valueInit.value);\n            }\n            else if (!Utils.isUndefined(valueInit.values)) {\n                this.values = ExprParser.unescapeList(valueInit.values);\n            }\n            this.locations = valueInit.locations;\n            this.field = valueInit.field;\n            this.display = valueInit.display;\n            this.operator = !Utils.isUndefined(valueInit.operator) ? valueInit.operator : ExprOperator.none;\n            this.near = -1;\n            this.start = -1;\n            this.length = 0;\n        }\n        else {\n            const opsInit: ExprOperandsInitializer = init as ExprOperandsInitializer;\n            this.exprContext = opsInit.exprContext;\n            this.field = opsInit.field;\n            this.display = opsInit.display;\n            this.addOperand(opsInit.op1);\n            this.addOperand(opsInit.op2);\n            this.and = opsInit.and;\n            this.near = -1;\n            this.start = -1;\n            this.length = 0;\n        }\n    }\n\n    /**\n     * Add an operand to this expression\n     *\n     * @param operand The operand to add\n     * @param contextField The parser's field context, if any\n     * @param prepend If `true` the operand is prepended to the operands\n     */\n    public addOperand(operand: Expr, contextField?: string, prepend = false) {\n        if (Utils.isUndefined(contextField)) {\n            contextField = this.field;\n        }\n        if (!this.operands) {\n            this.operands = [];\n        }\n        if (!Utils.isEmpty(this.field) && Utils.isEmpty(operand.field) && !operand.isStructured) {\n            if (Utils.isEmpty(contextField)) {\n                // Prefer setting the fields explicitly on the target operands rather the Field to \"text\" on the source operand\n                // operand.field = ExprParser.fieldPartnamePrefix + \"text\";\n                for (const expr of this.operands) {\n                    if (Utils.isEmpty(expr._field)) {\n                        expr._field = this.field;\n                    }\n                }\n                this.field = undefined;\n            }\n        }\n        if (!Utils.eqNC(this.field || \"\", operand.field || \"\")) {\n            operand._field = operand.field;\n        }\n        else {\n            operand._field = undefined;\n        }\n        if (!Utils.isEmpty(this.display)) {\n            operand._display = undefined;\n        }\n        if (prepend) {\n            this.operands.unshift(operand);\n        }\n        else {\n            this.operands.push(operand);\n        }\n        operand.parent = this;\n    }\n\n    /**\n     * Return `true` if this expression is a leaf node (does have a value)\n     */\n    public get isLeaf(): boolean {\n        // if (this.value === null && !this.operands) throw \"Expr.isLeaf - bad expression\";\n        return !!this.value;\n    }\n\n    /**\n     * Make an expression object\n     *\n     * @param exprContext The expression context\n     * @param text The value of the expression\n     * @param field The parser's field context\n     * @param display The display value\n     * @param allowEmptyValue Determines how empty values will be processed when making the expression\n     */\n    public static makeExpr(exprContext: ExprContext, text: string, field: string, display: string, allowEmptyValue: boolean): Expr | undefined {\n        if (!Expr.getIsStructuredField(exprContext, Expr.resolveField(exprContext, field))) {\n            return new Expr({\n                exprContext: exprContext,\n                value: text,\n                field: field,\n                display: display\n            });\n        }\n\n        const values: IRef<string[] | undefined> = {value: undefined};\n        const locations: IRef<ExprLocation[] | undefined> = {value: undefined};\n        const operator: IRef<ExprOperator> = {value: ExprOperator.none};\n        const range: IRef<ExprRange> = {value: ExprRange.none};\n        Expr.parseValue(exprContext, text, field, allowEmptyValue, values, locations, operator, range);\n        if (range.value !== ExprRange.none && values.value && locations.value) {\n            const value1 = values.value[0];\n            const value2 = values.value[1];\n            const location1 = locations.value[0];\n            const location2 = locations.value[1];\n            if (range.value === ExprRange.gteLte && !Utils.eqNC(value1, \"*\") && !Utils.eqNC(value2, \"*\")) {\n                return new Expr({\n                    exprContext: exprContext,\n                    values: values.value,\n                    locations: locations.value,\n                    field: field,\n                    display: display,\n                    operator: ExprOperator.between\n                });\n            }\n            const expr1 = !Utils.eqNC(value1, \"*\") ? new Expr({\n                exprContext: exprContext,\n                value: value1,\n                locations: [location1],\n                field: field,\n                display: display,\n                operator: range.value === ExprRange.gteLt || range.value === ExprRange.gteLte ? ExprOperator.gte : ExprOperator.gt\n            }) : null;\n            const expr2 = !Utils.eqNC(value2, \"*\") ? new Expr({\n                exprContext: exprContext,\n                value: value2,\n                locations: [location2],\n                field: field,\n                display: display,\n                operator: range.value === ExprRange.gteLte || range.value === ExprRange.gtLte ? ExprOperator.lte : ExprOperator.lt\n            }) : undefined;\n            if (!expr1 && !expr2) {\n                return undefined;\n            }\n            if (!(!!expr1 && !!expr2)) return !!expr1 ? expr1 : expr2;\n            return new Expr({\n                exprContext: exprContext,\n                op1: expr1,\n                and: true,\n                op2: expr2,\n                display: display\n            });\n        }\n        return new Expr({\n            exprContext: exprContext,\n            values: values.value,\n            locations: locations.value,\n            field: field,\n            display: display,\n            operator: operator.value\n        });\n    }\n\n    private static resolveField(exprContext: ExprContext, field: string | null | undefined): string {\n        if (Utils.isString(field)) {\n            return exprContext.appService.resolveColumnName(field);\n        }\n        return \"\";\n    }\n\n    private static getColumn(exprContext: ExprContext, field: string | undefined): CCColumn | undefined {\n        return exprContext.appService.getColumn(field);\n    }\n\n    /**\n     * Return the {@link CCColumn} corresponding to this expression\n     */\n    get column(): CCColumn | undefined {\n        return Expr.getColumn(this.exprContext, this.field);\n    }\n\n    private static getIsStructuredField(exprContext: ExprContext, field: string | undefined): boolean {\n        if (!field) {\n            return false;\n        }\n        if (exprContext.disallowFulltext) {\n            return true;\n        }\n        else {\n            if (field[0] === \":\") {\n                return false; // :: => take partname over column\n            }\n            if (Utils.eqNCN(field, \"exists\", \"missing\")) {\n                return true;\n            }\n            return !!Expr.getColumn(exprContext, field);\n        }\n    }\n\n    /**\n     * Return `true` if the expression has a non-fulltext field. In this case the expression will be a leaf node\n     */\n    get isStructuredField(): boolean {\n        if (!this.isLeaf) {\n            return false;\n        }\n        return Expr.getIsStructuredField(this.exprContext, this.field);\n    }\n\n    /**\n     * Return `true` if the expression only contains non-fulltext fields\n     */\n    public get isStructured(): boolean {\n        if (this.mergedStructured) {\n            return true;\n        }\n        if (this.isLeaf) {\n            return this.isStructuredField;\n        }\n        if (!this.operands) {\n            return false;\n        }\n        for (const operand of this.operands) {\n            if (!operand.isStructured) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the expression and its ancestors do not have `not` set to `true`\n     */\n    public get isPositive(): boolean {\n        let positive = true;\n        let current: Expr = this;\n        while (current != null) {\n            positive = positive && !current.not;\n            current = current.parent;\n        }\n        return positive;\n    }\n\n    /**\n     * Return an `ExprValueLocation` object for the passed text. Leading and trailing\n     * whitespace is excluded\n     */\n    static getValueAndLocation(text: string): ExprValueLocation {\n        let start = 0;\n        let length = text.length;\n        const value1 = Utils.trimStart(text);\n        start += length - value1.length;\n        length -= length - value1.length;\n        const value2 = Utils.trimEnd(value1);\n        length -= length - value2.length;\n        return {\n            value: value2,\n            start: start,\n            length: length\n        };\n    }\n\n    private static parseValue(exprContext: ExprContext, text: string, field: string, allowEmptyValue: boolean, values: IRef<string[] | undefined>, locations: IRef<ExprLocation[] | undefined>, operator: IRef<ExprOperator>, range: IRef<ExprRange>) {\n        if (Utils.isEmpty(text) && !allowEmptyValue) {\n            return;\n        }\n        const first = text[0];\n        const last = text[text.length - 1];\n        let vl: ExprValueLocation;\n        if (\"[{\".includes(first) && \"]}\".includes(last)) {\n            text = text.substr(1, text.length - 2);\n            let sepLen = 4;\n            let sep = text.indexOf(\" TO \");\n            if (sep === -1) {\n                sepLen = 2;\n                sep = text.indexOf(\"..\");\n            }\n            if (sep === -1) {\n                const vls = ExprParser.valuesAndLocationsFromText(text, ',');\n                values.value = [];\n                locations.value = [];\n                vls.forEach(vl1 => {\n                    values.value!.push(vl1.value);\n                    locations.value!.push({start: 1 + vl1.start, length: vl1.length});\n                });\n                operator.value = ExprOperator.in;\n                return;\n            }\n            vl = Expr.getValueAndLocation(text.substr(0, sep));\n            values.value = [vl.value];\n            locations.value = [{start: 1 + vl.start, length: vl.length}];\n            vl = Expr.getValueAndLocation(text.substr(sep + sepLen));\n            values.value.push(vl.value);\n            locations.value.push({start: 1 + sep + sepLen + vl.start, length: vl.length});\n            if (first === \"[\") {\n                range.value = last === \"]\" ? ExprRange.gteLte : ExprRange.gteLt;\n            }\n            else { // '{'\n                range.value = last === \"}\" ? ExprRange.gtLt : ExprRange.gtLte;\n            }\n            return;\n        }\n        vl = {\n            value: text,\n            start: 0,\n            length: text.length\n        };\n        if (text.startsWith(\"=\")) {\n            operator.value = ExprOperator.eq;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\">=\")) {\n            operator.value = ExprOperator.gte;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\">\")) {\n            operator.value = ExprOperator.gt;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\"<=\")) {\n            operator.value = ExprOperator.lte;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\"<>\")) {\n            operator.value = ExprOperator.neq;\n            vl = Expr.getValueAndLocation(text.substr(2));\n            vl.start += 2;\n        }\n        else if (text.startsWith(\"<\")) {\n            operator.value = ExprOperator.lt;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.startsWith(\"~\")) {\n            operator.value = ExprOperator.regex;\n            vl = Expr.getValueAndLocation(text.substr(1));\n            vl.start += 1;\n        }\n        else if (text.length > 1 && text.startsWith(\"/\") && text.endsWith(\"/\")) {\n            operator.value = ExprOperator.regex;\n            vl.value = text.substr(1, text.length - 2);\n            vl.start = 1;\n            vl.length = vl.value.length;\n        }\n        if (text.startsWith(\"\\\"\") && text.endsWith(\"\\\"\")) {\n            vl.value = text.substr(1, text.length - 2);\n            vl.start = 1;\n            vl.length = vl.value.length;\n        }\n        values.value = [vl.value];\n        locations.value = [{start: vl.start, length: vl.length}];\n    }\n\n    private static getOperatorText(operator: ExprOperator): string {\n        switch (operator) {\n            case ExprOperator.eq: return \"=\";\n            case ExprOperator.gt: return \">\";\n            case ExprOperator.gte: return \">=\";\n            case ExprOperator.lt: return \"<\";\n            case ExprOperator.lte: return \"<=\";\n            case ExprOperator.neq: return \"<>\";\n            case ExprOperator.regex: return \"REGEXP\";\n            case ExprOperator.like: return \"LIKE\";\n            case ExprOperator.contains: return \"CONTAINS\";\n            case ExprOperator.in: return \"IN\";\n            case ExprOperator.between: return \"BETWEEN\";\n            default: return \"=\";\n        }\n    }\n\n    /**\n     * Find the first `ExprValueInfo` object from a starting position in this expression\n     *\n     * @param start The position at which to start the search\n     */\n    findValue(start: number): ExprValueInfo | undefined {\n        if (this.isLeaf) {\n            if (start >= this.start && start <= this.start + this.length) {\n                if (!this.isStructured) {\n                    return {\n                        /* eslint-disable-next-line */\n                        value: this.value!,\n                        /* eslint-disable-next-line */\n                        field: this.field!,\n                        start: this.start,\n                        length: this.length\n                    };\n                }\n                else if (!!this.locations && this.values && this.values.length === this.locations.length) {\n                    for (let i = 0, ic = this.values.length; i < ic; i++) {\n                        const value = this.values[i];\n                        const location = this.locations[i];\n                        if (start >= this.start + location.start && start <= this.start + location.start + location.length) {\n                            return {\n                                value,\n                                /* eslint-disable-next-line */\n                                field: this.field!,\n                                start: this.start + location.start,\n                                length: location.length\n                            };\n                        }\n                    }\n                }\n            }\n        }\n        else if (!!this.operands) {\n            for (const expr of this.operands) {\n                const value = expr.findValue(start);\n                if (value) {\n                    return value;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Combine two expressions into a single expression. The second expression will be added to\n     * the first expression and the first expression returned if the first expression is non-leaf\n     * and is an `AND` expression and not negated. Otherwise, a new `AND` expression will be created\n     * to which both expressions are added as operands.\n     */\n    static combine(expr1: Expr, expr2: Expr): Expr {\n        if (!expr1) {\n            return expr2;\n        }\n        if (!expr2) {\n            return expr1;\n        }\n        if (!expr1.isLeaf && expr1.and && !expr1.not) {\n            if (expr1.isLeaf || !expr2.and || expr2.not) {\n                expr1.addOperand(expr2);\n            }\n            else {\n                for (const expr3 of expr2.operands) {\n                    expr1.addOperand(expr3);\n                }\n            }\n            return expr1;\n        }\n        return new Expr({\n            exprContext: expr1.exprContext,\n            op1: expr1,\n            and: true,\n            op2: expr2\n        });\n    }\n\n    private normalizeField(field: string | undefined): string | undefined {\n        if (field && field[0] === ExprParser.fieldPartnamePrefix) {\n            return field.substr(1);\n        }\n        return field;\n    }\n\n    private shouldDisplayField(): boolean {\n        if (!this.field && !this.parent) { // top level full text\n            return true;\n        }\n        return !!this.field && (!this.parent || !Utils.eqNC(this.field, this.parent.field || \"\"));\n    }\n\n    private getOperatorString(): string {\n        if (this.operator === ExprOperator.none || this.operator === ExprOperator.eq) {\n            return \"\";\n        }\n        return Expr.getOperatorText(this.operator);\n    }\n\n    private escapeValue(value: string | null | undefined): string {\n        if (!!value && !!this.column && (AppServiceHelpers.isString(this.column) || AppServiceHelpers.isCsv(this.column))) {\n            return ExprParser.escape(value);\n        }\n        return value || \"\";\n    }\n\n    private getValueString(): string {\n        if (this.operator === ExprOperator.between && this.values && this.values.length === 2) {\n            return `[${this.escapeValue(this.values[0])}..${this.escapeValue(this.values[1])}]`;\n        }\n        if (this.values && this.values.length > 1) {\n            const sb: string[] = [];\n            for (const value of this.values) {\n                if (sb.length > 0) {\n                    sb.push(\", \");\n                }\n                sb.push(this.escapeValue(value));\n            }\n            sb.unshift(\"[\");\n            sb.push(\"]\");\n            return sb.join(\"\");\n        }\n        return this.escapeValue(this.value);\n    }\n\n    private addFieldToString(sb: string[]): boolean {\n        let added = false;\n        if (this.shouldDisplayField()) {\n            sb.push(this.normalizeField(this.field) || \"text\");\n            added = true;\n        }\n        if (this.display) {\n            sb.push(ExprParser.escape(this.display));\n            added = true;\n        }\n        if (added) {\n            sb.push(\":\");\n        }\n        return added;\n    }\n\n    private _toString(withFields: boolean, inner: boolean): string {\n        const sb: string[] = [];\n        if (this.isLeaf) {\n            if (this.not) {\n                sb.push(\"NOT \");\n            }\n            if (withFields) {\n                this.addFieldToString(sb);\n            }\n            sb.push(this.getOperatorString());\n            sb.push(this.getValueString());\n        }\n        else {\n            if (!this.operands) {\n                return \"\";\n            }\n            if (this.not) {\n                sb.push(\"NOT \");\n            }\n            let bracketed = inner;\n            if (this.addFieldToString(sb)) {\n                bracketed = true;\n            }\n            if (bracketed) {\n                sb.push(\"(\");\n            }\n            let first = true;\n            for (const operand of this.operands) {\n                if (!first) {\n                    if (this.and) {\n                        sb.push(\" AND \");\n                    }\n                    else {\n                        sb.push(\" OR \");\n                    }\n                }\n                first = false;\n                sb.push(operand._toString(withFields, true));\n            }\n            if (bracketed) {\n                sb.push(\")\");\n            }\n        }\n        return sb.join(\"\");\n    }\n\n    /**\n     * Return a string representation of this expression\n     *\n     * @param withFields If `true`, include field names\n     */\n    toString(withFields = true): string {\n        return this._toString(withFields, false);\n    }\n\n    private addDisplay(options: ExprMessageOptions, ctxt: ExprMessageCtxt, display: string) {\n        this._addValue(options, ctxt, this.value || \"\", display);\n    }\n\n    private encodeHTML(text: string, options: ExprMessageOptions): string {\n        if (options && options.asHTML) {\n            return Utils.encodeHTML(text);\n        }\n        else {\n            return text;\n        }\n    }\n\n    private _addValue(options: ExprMessageOptions, ctxt: ExprMessageCtxt, value: string, display?: string) {\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-value\">`);\n        }\n        const column = this.exprContext.appService.getColumn(this.field);\n        const valueId = `value${ctxt.valueIndex++}`;\n        let _value: FieldValue = value;\n        let _display: string | undefined;\n        if (display) {\n            _display = this.encodeHTML(ExprParser.unescape(display), options);\n        }\n        if (column && AppServiceHelpers.isNumber(column) && Utils.testFloat(value)) {\n            _value = +value;\n        }\n        else if (column && AppServiceHelpers.isDate(column)) {\n            _value = Utils.fromSysDateStr(value) || value;\n        }\n        else if (column && AppServiceHelpers.isBoolean(column)) {\n            _value = Utils.isTrue(value);\n        }\n        else if (Utils.isString(_value)) {\n            _value = this.encodeHTML(_value, options);\n        }\n        ctxt.message.push(`{${valueId}}`);\n        ctxt.values[valueId] = column\n            ? this.exprContext.formatService.formatFieldValue({value: _value, display: _display}, column)\n            : _display || _value;\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private addValue(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (this.values) {\n            if (this.operator === ExprOperator.between && this.values.length === 2) {\n                this._addValue(options, ctxt, this.values[0]);\n                ctxt.message.push(\" \");\n                this.addOperator(\"AND\", options, ctxt);\n                ctxt.message.push(\" \");\n                this._addValue(options, ctxt, this.values[1]);\n            }\n            else if (this.values.length > 1) {\n                let first = true;\n                for (const value of this.values) {\n                    ctxt.message.push(first ? \"[\" : \", \");\n                    first = false;\n                    this._addValue(options, ctxt, value);\n                }\n                ctxt.message.push(\"]\");\n            }\n            else {\n                this._addValue(options, ctxt, this.values[0]);\n            }\n        }\n    }\n\n    private addText(options: ExprMessageOptions, ctxt: ExprMessageCtxt, text: string) {\n        const valueId = `value${ctxt.valueIndex++}`;\n        const message = `{${valueId}}`;\n        ctxt.message.push(message);\n        ctxt.values[valueId] = this.encodeHTML(text, options);\n    }\n\n    private addFieldLabel(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        const displayObj = this.displayObj;\n        if (displayObj && displayObj.label) {\n            this.addText(options, ctxt, displayObj.label);\n        }\n        else if (this.field) {\n            const label = this.exprContext.appService.getLabel(this.normalizeField(this.field) || \"\");\n            this.addText(options, ctxt, label);\n        }\n        else {\n            if (!this.isStructured) {\n                const label = this.exprContext.appService.getLabel(\"text\");\n                this.addText(options, ctxt, label);\n            }\n            else {\n                const fields = this.getFields();\n                fields.forEach((field, index) => {\n                    if (index !== 0) {\n                        this.addText(options, ctxt, \"/\");\n                    }\n                    const label = this.exprContext.appService.getLabel(field);\n                    this.addText(options, ctxt, label);\n                });\n            }\n        }\n    }\n\n    private addField(options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-field\">`);\n        }\n        this.addFieldLabel(options, ctxt);\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n            ctxt.message.push(`<span class=\"sq-separator\">`);\n        }\n        this.addText(options, ctxt, \"msg#system.fieldSeparator\");\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private addOperator(operator: string, options: ExprMessageOptions, ctxt: ExprMessageCtxt) {\n        if (!operator) {\n            return;\n        }\n        if (options.asHTML) {\n            ctxt.message.push(`<span class=\"sq-operator\">`);\n        }\n        ctxt.message.push(this.encodeHTML(operator, options));\n        if (options.asHTML) {\n            ctxt.message.push(`</span>`);\n        }\n    }\n\n    private _toMessage(ctxt: ExprMessageCtxt, options?: ExprMessageOptions): ExprMessage {\n        const inner = ctxt.inner;\n        ctxt.inner = true;\n        if (!options) {\n            options = {};\n        }\n        if (Utils.isUndefined(options.useDisplay)) {\n            options.useDisplay = true;\n        }\n\n        const displayObj = this.displayObj;\n        const display = (displayObj ? displayObj.display : undefined) || this.display;\n        const showNot = this.not && (inner || !options.hideOuterNot);\n        const showField = (options.withFields || inner) && this.shouldDisplayField();\n        if (options.useDisplay && !!display) {\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            if (showField) {\n                this.addField(options, ctxt);\n            }\n            this.addDisplay(options, ctxt, display);\n        }\n        else if (this.isLeaf) {\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            if (showField) {\n                this.addField(options, ctxt);\n            }\n            const operator = this.getOperatorString();\n            if (operator) {\n                this.addOperator(operator, options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            this.addValue(options, ctxt);\n        }\n        else {\n            if (!this.operands) {\n                return {message: \"\"};\n            }\n            if (showNot) {\n                this.addOperator(\"NOT\", options, ctxt);\n                ctxt.message.push(\" \");\n            }\n            let bracketed = inner;\n            if (showField) {\n                this.addField(options, ctxt);\n                bracketed = true;\n            }\n            if (bracketed) {\n                ctxt.message.push(\"(\");\n            }\n            let first = true;\n            for (const operand of this.operands) {\n                if (!first) {\n                    if (this.and) {\n                        ctxt.message.push(\" \");\n                        this.addOperator(\"AND\", options, ctxt);\n                        ctxt.message.push(\" \");\n                    }\n                    else {\n                        ctxt.message.push(\" \");\n                        this.addOperator(\"OR\", options, ctxt);\n                        ctxt.message.push(\" \");\n                    }\n                }\n                first = false;\n                operand._toMessage(ctxt, options);\n            }\n            if (bracketed) {\n                ctxt.message.push(\")\");\n            }\n        }\n        if (inner) {\n            return {message: \"\"};\n        }\n        return {\n            message: ctxt.message.join(\"\"),\n            values: ctxt.values\n        };\n    }\n\n    /**\n     * Return an `ExprMessage` for the expression which can be used with [IntlService.formatMessage]{@link IntlService#formatMessage}\n     * for display purposes\n     */\n    toMessage(options?: ExprMessageOptions): ExprMessage {\n        return this._toMessage({\n            inner: false,\n            message: [\"txt#\"],\n            values: {},\n            valueIndex: 0\n        }, options);\n    }\n\n    private static matchNode(context: ExprContext, expr1: Expr, expr2: Expr): boolean {\n        if (expr1.isLeaf !== expr2.isLeaf) {\n            return false;\n        }\n        if (expr1.isLeaf) {\n            if (expr1.isStructured !== expr2.isStructured) {\n                return false;\n            }\n            if (expr1.not !== expr2.not) {\n                return false;\n            }\n            const field1 = context.appService.resolveColumnAlias(expr1.field);\n            const field2 = context.appService.resolveColumnAlias(expr2.field);\n            if (field1 !== field2) {\n                return false;\n            }\n            const operator1 = expr1.operator === ExprOperator.none ? ExprOperator.eq : expr1.operator;\n            const operator2 = expr2.operator === ExprOperator.none ? ExprOperator.eq : expr2.operator;\n            if (operator1 !== operator2) {\n                return false;\n            }\n        }\n        if (!expr1.isLeaf) {\n            if (expr1.and !== expr2.and) {\n                return false;\n            }\n            // All of the structured and non-structured operands in expr2 must be in expr1 so check that there are at least enough\n            // operands available. (The actual matching of the contents of the operand nodes is done in the recursive calls to MatchNode)\n            if (!expr1.operands !== !expr2.operands) {\n                return false;\n            }\n            let expr1StructuredCount = 0, expr1UnstructuredCount = 0, expr2StructuredCount = 0, expr2UnstructuredCount = 0;\n            expr1.operands.forEach((operand) => { if (operand.isStructured) { expr1StructuredCount++; } else { expr1UnstructuredCount++; }});\n            expr2.operands.forEach((operand) => { if (operand.isStructured) { expr2StructuredCount++; } else { expr2UnstructuredCount++; }});\n            if ((expr2StructuredCount > expr1StructuredCount) || (expr2UnstructuredCount > expr1UnstructuredCount)) {\n                return false;\n            }\n        }\n        const values1Length = expr1.values ? expr1.values.length : 0;\n        const values2Length = expr2.values ? expr2.values.length : 0;\n        if (values1Length !== values2Length) {\n            return false;\n        }\n        if (values1Length && expr1.values && expr2.values) {\n            for (const value1 of expr1.values) {\n                let found = false;\n                for (const value2 of expr2.values) {\n                    if (Utils.eqNC(value1, value2)) {\n                        found = true;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if this expression matches the passed one\n     */\n    matchNode(expr: Expr): boolean {\n        return Expr.matchNode(this.exprContext, this, expr);\n    }\n\n    /**\n     * Returns the matching expression or sub-expression in this expression with the passed one.\n     *\n     * @param expr The expression to match\n     * @param filter An option filter function called on first level candidate sub-expressions\n     * before matching within them\n     */\n    find(expr: Expr, filter?: (expr: Expr) => boolean): Expr | null {\n        if (this.matchNode(expr)) {\n            if (!this.isLeaf && this.operands) {\n                for (const child1 of expr.operands) {\n                    let found = false;\n                    for (const child2 of this.operands) {\n                        if (filter && filter(child2)) {\n                            continue;\n                        }\n                        if (child2.find(child1)) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        return null;\n                    }\n                }\n            }\n            return this;\n        }\n        else {\n            if (!this.isLeaf && this.operands) {\n                for (const child of this.operands) {\n                    if (filter && filter(child)) {\n                        continue;\n                    }\n                    if (child.find(expr)) {\n                        return child;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Perform the passed `action` on this expression and any descendant operands\n     *\n     * @param action The action to perform\n     */\n    forEach(action: (expr: Expr) => void) {\n        action(this);\n        if (this.operands) {\n            for (const operand of this.operands) {\n                operand.forEach(action);\n            }\n        }\n    }\n\n    /**\n     * Execute the callback function on this node and any descendants until the callback returns a truthy value\n     * in which case immediately return `true`. Otherwise return `false`.\n     */\n    some(callback: (expr: Expr) => boolean): boolean {\n        if (callback(this)) {\n            return true;\n        }\n        if (this.operands) {\n            for (const operand of this.operands) {\n                if (operand.some(callback)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Execute the callback function on this node and any descendants until the callback returns a falsy value\n     * in which case, immediately return `false`. Otherwise return `true`.\n     */\n    every(callback: (expr: Expr) => boolean): boolean {\n        if (!callback(this)) {\n            return false;\n        }\n        if (this.operands) {\n            for (const operand of this.operands) {\n                if (!operand.every(callback)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the exoression has at least one fulltext operand.\n     * The test on `isPositive` filters expressions that only contain\n     * negative fulltext terms which will be ignored on the server. Fulltext\n     * expressions must have at least one positive term.\n     */\n    get hasRelevance(): boolean {\n        return this.some(expr => expr.isLeaf && !expr.isStructured && expr.isPositive);\n    }\n\n    /**\n     * Return an array of all fields used in this expression\n     */\n    getFields(): string[] {\n        const fields: string[] = [];\n        this.forEach((expr) => {\n            const field = this.exprContext.appService.resolveColumnAlias(expr.field);\n            if (field) {\n                if (!fields.find((field1) => Utils.eqNC(field, field1))) {\n                    fields.push(field);\n                }\n            }\n        });\n        return fields;\n    }\n\n    /**\n     * Return an array of all values used in this expression that pertain to the passed field and where the associated `isPositive`\n     * field matches the passed `positive` parameter\n     *\n     * @param field The field for which values are to be returned\n     * @param positive The value to test against `isPositive`\n     */\n    getValues(field: string, positive = true): string[] {\n        const values: string[] = [];\n        const column = this.exprContext.appService.resolveColumnName(field);\n        this.forEach((expr) => {\n            if (column) {\n                const column1 = this.exprContext.appService.resolveColumnName(expr.field);\n                if (!Utils.eqNC(column, column1)) {\n                    return;\n                }\n            }\n            if (expr.isLeaf && expr.isPositive === positive && expr.values) {\n                values.push(...expr.values);\n            }\n        });\n        return values;\n    }\n\n    private getDataValue(data: ExprEvaluationContext, field?: string, defaultScope?: string): any {\n        if (!data) {\n            return undefined;\n        }\n        const fields = Utils.split(field || \"\", \".\");\n        if (fields.length >= 1 && Utils.isUndefined(data[fields[0]]) && !!defaultScope) {\n            // By default, look on the \"defaultScope\" sub-object\n            fields.unshift(...Utils.split(defaultScope, \".\"));\n        }\n        let value: any = data;\n        for (const _field of fields) {\n            if (!value) {\n                break;\n            }\n            value = value[_field];\n        }\n        return value;\n    }\n\n    private getWildcardRegExp(value: string): RegExp | undefined {\n        if (value) {\n            let regExp = this.evaluationRegExps[value];\n            if (!Utils.isUndefined(regExp)) {\n                return regExp;\n            }\n            let haveWildcards = false;\n            let escaping = false;\n            const sb: string[] = [];\n            for (const ch of value) {\n                switch (ch) {\n                    // Handle wildcards and wildcard escaping\n                    case \"\\\\\":\n                        if (escaping) {\n                            sb.push(\"\\\\\\\\\");\n                            escaping = false;\n                        }\n                        else {\n                            escaping = true;\n                        }\n                        break;\n                    case \"*\":\n                        if (escaping) {\n                            sb.push(\"\\\\\");\n                            sb.push(ch);\n                            escaping = false;\n                        }\n                        else {\n                            haveWildcards = true;\n                            sb.push(\".*?\");\n                        }\n                        break;\n                    case \"?\":\n                        if (escaping) {\n                            sb.push(\"\\\\\");\n                            sb.push(ch);\n                            escaping = false;\n                        }\n                        else {\n                            haveWildcards = true;\n                            sb.push(\".\");\n                        }\n                        break;\n                    // Escape other regexp special characters\n                    case \"-\":\n                    case \"/\":\n                    case \"^\":\n                    case \"$\":\n                    case \"+\":\n                    case \".\":\n                    case \"(\":\n                    case \")\":\n                    case \"|\":\n                    case \"[\":\n                    case \"]\":\n                    case \"{\":\n                    case \"}\":\n                        sb.push(\"\\\\\");\n                        sb.push(ch);\n                        escaping = false;\n                        break;\n                    // All other characters just emit\n                    default:\n                        sb.push(ch);\n                        escaping = false;\n                        break;\n                }\n            }\n            if (haveWildcards) {\n                regExp = new RegExp(\"^\" + sb.join(\"\") + \"$\", \"i\");\n                this.evaluationRegExps[value] = regExp;\n                return regExp;\n            }\n            else {\n                this.evaluationRegExps[value] = undefined;\n            }\n        }\n        return undefined;\n    }\n\n    // NB comparisons with NaN always return false\n    private compare(value: string | string[] | undefined, dataValue: any, equality?: boolean): number {\n        if (Utils.isArray(dataValue) && dataValue.length === 0) {\n            return NaN;\n        }\n        const column = Expr.getColumn(this.exprContext, this.field || \"\");\n        if (Utils.isArray(dataValue) || Utils.isArray(value)) {\n            // \"in\" / \"contains\"\n            if (!Utils.isArray(dataValue)) {\n                dataValue = [dataValue];\n            }\n            if (Utils.isArray(value)) {\n                if (value.length === 0) {\n                    return NaN;\n                }\n            }\n            else {\n                value = [value + \"\"];\n            }\n            // At least one value in the value array must match a value in the dataValue array\n            for (const value1 of value) {\n                for (const dataValue1 of dataValue) {\n                    if (this.compare(value1, dataValue1, true) === 0) {\n                        return 0;\n                    }\n                }\n            }\n            return NaN;\n        }\n        if (!Utils.isArray(value)) {\n            value = ExprParser.unescape(value || \"\");\n            if (column && column.parser) {\n                value = this.exprContext.formatService.parseValue(value, column.parser);\n            }\n            if (AppServiceHelpers.isNumber(column)) {\n                if (!Utils.isNumber(dataValue)) {\n                    dataValue = 0;\n                }\n                const _value = Utils.toNumber(value);\n                return dataValue - _value;\n            }\n            if (AppServiceHelpers.isDate(column)) {\n                if (Utils.isString(dataValue)){\n                    dataValue = Utils.toDate(dataValue);\n                }\n                if (Utils.isDate(dataValue)) {\n                    const _value = this.exprContext.intlService.parseDate(value);\n                    if (_value) {\n                        return dataValue.getTime() - _value.getTime();\n                    }\n                }\n                return NaN;\n            }\n            if (AppServiceHelpers.isBoolean(column)) {\n                const _value = Utils.isTrue(value) ? 1 : 0;\n                return (dataValue ? 1 : 0) - _value;\n            }\n            dataValue = dataValue || \"\";\n            if (Utils.isString(dataValue)) {\n                dataValue = ExprParser.unescape(dataValue);\n                if (equality) {\n                    const regExp = this.getWildcardRegExp(value);\n                    if (regExp) {\n                        return regExp.test(dataValue) ? 0 : -1;\n                    }\n                }\n                return Utils.compare(dataValue, value);\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Evaluate this expression using `data` to provide field values. Field values\n     * can contain scopes (full stop separated components) to reference sub-objects\n     * in the data\n     *\n     * @param data The field values to be used in the evaluation\n     * @param defaultScope If a field value cannot be resolved then try to retrieve a value with this scope prepended to the field name\n     * @return The boolean result of the expression evaluation\n     */\n    evaluate(data: ExprEvaluationContext, defaultScope?: string): boolean {\n        let ret: boolean;\n        if (this.isLeaf) {\n            if (!this.isStructured) {\n                ret = false;\n            }\n            else {\n                if (Utils.eqNC(this.field || \"\", \"exists\")) {\n                    const dataValue = this.getDataValue(data, this.value, defaultScope);\n                    ret = !Utils.isUndefined(dataValue);\n                }\n                else if (Utils.eqNC(this.field || \"\", \"missing\")) {\n                    const dataValue = this.getDataValue(data, this.value, defaultScope);\n                    ret = Utils.isUndefined(dataValue);\n                }\n                else {\n                    const dataValue = this.getDataValue(data, this.field, defaultScope);\n                    switch (this.operator) {\n                        case ExprOperator.none:\n                        case ExprOperator.eq:\n                            ret = this.compare(this.value, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.gt:\n                            ret = this.compare(this.value, dataValue) > 0;\n                            break;\n                        case ExprOperator.gte:\n                            ret = this.compare(this.value, dataValue) >= 0;\n                            break;\n                        case ExprOperator.lt:\n                            ret = this.compare(this.value, dataValue) < 0;\n                            break;\n                        case ExprOperator.lte:\n                            ret = this.compare(this.value, dataValue) <= 0;\n                            break;\n                        case ExprOperator.neq:\n                            ret = this.compare(this.value, dataValue, true) !== 0;\n                            break;\n                        case ExprOperator.regex: {\n                            const regExp = new RegExp(this.value || \"\");\n                            ret = regExp.test(dataValue + \"\");\n                            break;\n                        }\n                        case ExprOperator.like: // not currently generated in parse\n                            ret = this.compare(this.value + \"*\", dataValue, true) === 0;\n                            break;\n                        case ExprOperator.in:\n                            ret = this.compare(this.values, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.contains: // not currently generated in parse\n                            ret = this.compare(this.value, dataValue, true) === 0;\n                            break;\n                        case ExprOperator.between:\n                            ret = !!this.values &&\n                                this.compare(this.values[0], dataValue) >= 0 && this.compare(this.values[1], dataValue) <= 0;\n                            break;\n                    }\n                }\n            }\n        }\n        else {\n            ret = !!this.and;\n            for (const operand of this.operands) {\n                const ret1 = operand.evaluate(data, defaultScope);\n                if (this.and) {\n                    ret = ret && ret1;\n                    if (!ret) {\n                        break;\n                    }\n                }\n                else {\n                    ret = ret || ret1;\n                }\n            }\n        }\n        if (this.not) {\n            ret = !ret;\n        }\n        return ret;\n    }\n}\n\n/**\n * @ignore\n */\nexport const enum Token {\n    invalid=-1,\n    or=0,\n    and=1,\n    not=2,\n    near=3,\n    infixNear=4,\n    lPar=5,\n    rPar=6,\n    eof=7,\n    value=8\n}\n\n/**\n * @ignore\n */\nconst enum Act {\n    s,  // shift\n    r,  // reduce\n    a,  // accept\n    e1, // error : missing right parenthesis\n    e2, // error : missing operator\n    e3, // error : unbalanced right parenthesis\n    e4  // error : invalid function argument\n}\n\n/**\n * Parsing options\n */\nexport interface ExprParserOptions {\n    /**\n     * If `true` then a fielded search expression with no value will not generate an error. This would be used\n     * when providing feedback during text entry\n     */\n    allowEmptyValues?: boolean;\n    /**\n     * If `true`, fields can contain the scoping character (`.`). This is typically used with `Expr.evaluate`\n     */\n    allowScopedFields?: boolean;\n    /**\n     * If `true` then arbitrary field names are permitted. This is typically used with `Expr.evaluate`\n     */\n    disallowFulltext?: boolean;\n}\n\n/**\n * @ignore\n */\nexport class ExprParserOperator {\n    public static invalid: ExprParserOperator = new ExprParserOperator(Token.invalid);\n    public static or: ExprParserOperator = new ExprParserOperator(Token.or);\n    public static and: ExprParserOperator = new ExprParserOperator(Token.and);\n    public static not: ExprParserOperator = new ExprParserOperator(Token.not);\n    public static lPar: ExprParserOperator = new ExprParserOperator(Token.lPar);\n    public static rPar: ExprParserOperator = new ExprParserOperator(Token.rPar);\n    public static eof: ExprParserOperator = new ExprParserOperator(Token.eof);\n\n    public tok: Token;\n    public tokValue: string;\n    public tokValuePos: number;\n    public tokValueLen: number;\n\n    constructor(tok: Token, value: string = \"\", valuePos: number = -1, valueLen: number = -1) {\n        this.tok = tok;\n        this.tokValue = value;\n        this.tokValuePos = valuePos;\n        this.tokValueLen = valueLen;\n    }\n}\n\n/**\n * A parser for Sinequa fielded search expressions. Such expressions allow filters to be specified in fulltext and\n * can be combined with boolean operators to build complex queries.\n *\n * A single fielded search clause has this form:\n * ``<fieldname>[`display value`]:[:][<operator>]<value>``\n *\n * A field name is either a column name or alias or a partname. In the case of a partname and column name clashing then\n * the field is treated as a column. Two colons can be specified as the separator to denote that the field is a partname.\n * An optional display value can follow the fieldname enclosed in backquote characters\n *\n * Operators are: `=` (default), `>=`, `>`, `<=`, `<`, `~` (regexp)\n * In addition, a regular expression can be specified by enclosing the value in `/` characters\n *\n * An inclusive range of values can be specified using a square bracket syntax: `[value1..value2]`\n * An exclusive range of values can be specified using a curly bracket syntax: `{value1..value2}`\n * The brackets can be mixed. For example: `age:{5..13]` expresses `13 >= age > 5`.\n *\n * For multi-value csv fields an `IN` condition can be expressed using a comma-separated list of values enclosed in square brackets.\n * For example: `authors:[Proust, Orwell, Dickens]`\n *\n * If a value contains reserved characters then it can be enclosed in backquote characters to prevent the parser interpreting them\n * incorrectly. For example: ``code: `a:b:c` ``\n *\n * The parser also supports a NEAR operator to allow searching for terms close to each other. There are two forms suppported:\n * * infix - `term1 NEAR[/n] term2` where `n` is the maximum number of words between the two terms for them to match\n * * function - `NEAR[/n](term1, term2, term3, ...)` where `n` is \"window\" size within which all the terms must be present for them\n * to match. The minimum useful value for n is thus equal to the number of terms passed to the operator.\n *\n * Fielded search expresions can be combined with the boolean operators `AND`, `OR` and `NOT` and brackets used for grouping.\n * For example: `football (age:>=7 AND (name:smith OR name:jones))`\n */\nexport class ExprParser {\n\n    public static fieldPartnamePrefix = \"@\";\n    private static parsetbl: Act[][] = [\n    /* stk  ------------- input ------------*/\n    /*\t\t                                 INFIX                  */\n    /*\t\t         OR\t   AND\t NOT   NEAR  NEAR  (\t  )\t     $  */\n    /*OR */         [Act.r, Act.s, Act.s, Act.s, Act.s, Act.s, Act.r, Act.r],\n    /*AND*/         [Act.r, Act.r, Act.s, Act.s, Act.s, Act.s, Act.r, Act.r],\n    /*NOT*/         [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*NEAR*/        [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*INFIXNEAR*/   [Act.r, Act.r, Act.s, Act.s, Act.r, Act.s, Act.r, Act.r],\n    /*(*/           [Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.e1],\n    /*)*/           [Act.r, Act.r, Act.r, Act.r, Act.r, Act.e2, Act.r, Act.r],\n    /*$*/           [Act.s, Act.s, Act.s, Act.s, Act.s, Act.s, Act.e3, Act.a]\n    ];\n\n    private exprContext: ExprContext;\n    private options: ExprParserOptions;\n    private expressions: Expr[];\n    private operators: ExprParserOperator[];\n    private fields: string[]; // pushed on '(', popped on ')'\n    private displays: string[]; // pushed on '(', popped on ')'\n    private op: ExprParserOperator;\n    private prevOp: ExprParserOperator;\n    private saveOp: ExprParserOperator; // for default conjunction operator\n    private field: string;\n    private display: string;\n    private text: string;\n    private current: number;\n    private length: number;\n\n    private constructor(exprContext: ExprContext, options?: ExprParserOptions) {\n        this.exprContext = exprContext;\n        this.options = options || {};\n        this.exprContext.disallowFulltext = this.options.disallowFulltext;\n        this.expressions = [];\n        this.operators = [];\n        this.fields = [];\n        this.displays = [];\n        this.text = \"\";\n        this.current = 0;\n        this.length = 0;\n        this.op = this.prevOp = this.saveOp = ExprParserOperator.invalid;\n    }\n\n    /**\n     * Escape a string so that the characters in it are not processed by the fielded search expression parser.\n     * Single occurrences of the backslash character are replaced by two backslashes and backquote characters\n     * are prefixed by a backslash. Finally, the string is enclosed in backquotes.\n     *\n     * For example: `` a\\`\\b `` => `` a\\\\\\`\\\\b ``\n     */\n    // \\ => \\\\\n    // ` => \\`\n    // then surround with ``\n    public static escape(value: string | undefined): string {\n        if (!value) {\n            return \"``\";\n        }\n        value = String(value); // make sure we have a string\n        if (value.search(/[\\\\`]/) === -1) {\n            return \"`\" + value + \"`\";\n        }\n        const sb: string[] = [\"`\"];\n        for (let i = 0, ic = value.length; i < ic; i++) {\n            const ch = value[i];\n            if (ch === \"\\\\\" || ch === \"`\") {\n                sb.push(\"\\\\\");\n            }\n            sb.push(ch);\n        }\n        sb.push(\"`\");\n        return sb.join(\"\");\n    }\n\n    private static isEscaped(value: string | undefined): boolean {\n        return !!value && value.length >= 2 && value[0] === \"`\" && value[value.length - 1] === \"`\";\n    }\n\n    /**\n     * Perform the reverse operation to [ExprParser.escpae]{@link ExprParser#escape}\n     */\n    // remove surrounding ``\n    // \\\\ => \\\n    // \\` => `\n    public static unescape(value: string): string {\n        if (!ExprParser.isEscaped(value)) {\n            return value;\n        }\n        const sb: string[] = [];\n        for (let i = 1, ic = value.length - 1; i < ic; i++) {\n            let ch = value[i];\n            if (ch === \"\\\\\") {\n                if (i >= ic - 1) { // we end with a \\ => drop it\n                    continue;\n                }\n                ch = value[++i];\n            }\n            sb.push(ch);\n        }\n        return sb.join(\"\");\n    }\n\n    /**\n     * @ignore\n     */\n    public static unescapeList(values: string[]): string[] {\n        if (!values) {\n            return values;\n        }\n        const values1: string[] = [];\n        for (let _i = 0, _a = values; _i < _a.length; _i++) {\n            const value = _a[_i];\n            values1.push(ExprParser.unescape(value));\n        }\n        return values1;\n    }\n\n    /**\n     * @ignore\n     */\n    public static valuesAndLocationsFromText(text: string, separator: string): ExprValueLocation[] {\n        if (Utils.isEmpty(text)) {\n            return [];\n        }\n        if (!text.includes(separator)) {\n            return [{value: text, start: 0, length: text.length}];\n        }\n        const values: ExprValueLocation[] = [];\n        const length = text.length;\n        let current = 0;\n        let currentStart = 0;\n        const sb: string[] = [];\n        let value: ExprValueLocation;\n        while (true) {\n            if (current >= length) {\n                value = Expr.getValueAndLocation(sb.join(\"\"));\n                value.start += currentStart;\n                if (!Utils.isEmpty(value.value)) {\n                    values.push(value);\n                }\n                break;\n            }\n            const ch = text[current];\n            if (ch === \"\\\\\") {\n                sb.push(ch);\n                current++;\n                if (current < length) {\n                    const ch1 = text[current];\n                    if (ch1 === \"\\\\\" || ch1 === \"`\") {\n                        sb.push(ch1);\n                        current++;\n                    }\n                }\n            }\n            else if (ch === \"`\") {\n                const last: IRef<number> = {value: 0};\n                const s = ExprParser.matchUntil(text, length, current, current + 1, \"`\", last);\n                if (!!s) {\n                    sb.push(s);\n                    current = last.value;\n                }\n                else {\n                    sb.push(ch);\n                    current++;\n                }\n            }\n            else if (ch === separator) {\n                value = Expr.getValueAndLocation(sb.join(\"\"));\n                value.start += currentStart;\n                sb.length = 0;\n                if (!Utils.isEmpty(value.value)) {\n                    values.push(value);\n                }\n                current++;\n                currentStart = current;\n            }\n            else {\n                sb.push(ch);\n                current++;\n            }\n        }\n        return values;\n    }\n\n    private matchKeyword(keyword: string, sbCurrentValue: string[], suffixCh?: string): boolean {\n        if (sbCurrentValue.length !== 0) {\n            const currentValue = sbCurrentValue.join(\"\");\n            if (!!currentValue && !\" \\r\\n\\t\".includes(currentValue[currentValue.length - 1])) {\n                return false;\n            }\n        }\n        if (Utils.isEmpty(keyword)) {\n            return false;\n        }\n        const keywordLen = keyword.length;\n        if (this.current + keywordLen > this.length) {\n            return false;\n        }\n        for (let i = 0, ic = keywordLen; i < ic; i++) {\n            const ch = this.text[this.current + i];\n            const kh = keyword[i];\n            if (ch !== kh) {\n                return false;\n            }\n        }\n        if (this.current + keywordLen < this.length) {\n            const nch = this.text[this.current + keywordLen];\n            if (nch !== suffixCh && !\" \\r\\n\\t(\".includes(nch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private matchUntil(first: number, start: number, endChars: string, last: IRef<number>): string | undefined {\n        return ExprParser.matchUntil(this.text, this.length, first, start, endChars, last);\n    }\n\n    private static matchUntil(text: string, length: number, first: number, start: number, endChars: string, last: IRef<number>): string | undefined {\n        last.value = start;\n        let found = false;\n        const sb: string[] = [text.substr(first, start - first)];\n        while (last.value < length) {\n            let ch = text[last.value++];\n            if (ch === \"\\\\\") {\n                sb.push(ch);\n                if (last.value < length) {\n                    ch = text[last.value++];\n                    if (ch === \"\\\\\" || ch === \"`\") {\n                        sb.push(ch);\n                        continue;\n                    }\n                }\n            }\n            sb.push(ch);\n            if (endChars.includes(ch)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return undefined;\n        }\n        return sb.join(\"\");\n    }\n\n    private matchSimpleValue(start: number): string {\n        const first = this.current;\n        let last = start;\n        while (last < this.length) {\n            const ch = this.text[last];\n            if (\" \\r\\n\\t)\".includes(ch)) {\n                break;\n            }\n            last++;\n        }\n        if (last === start) {\n            return \"\";\n        }\n        return this.text.substr(first, last - first);\n    }\n\n    private getTerminators(ch: string, allowRanges: boolean): string {\n        if (ch === \"\\\"\") return \"\\\"\";\n        if (ch === \"[\") return allowRanges ? \"]}\" : \"]\";\n        if (ch === \"{\") return allowRanges ? \"}]\" : \"}\";\n        if (ch === \"/\") return \"/\";\n        if (ch === \"(\") return \")\";\n        if (ch === \"`\") return \"`\";\n        return \"\";\n    }\n\n    private canBeTokValue(value: string, canBeEmpty = true) {\n        return !Utils.isEmpty(value) || (canBeEmpty && this.options.allowEmptyValues && !Utils.isEmpty(this.field));\n    }\n\n    private _getTokValue(value: string, canBeEmpty = true): boolean {\n        // Current is pointing at the next non-whitepspace character after this value\n        if (value === null) return false;\n        let pos = this.current;\n        const len = value.length;\n        value = Utils.trimEnd(value);\n        pos -= len - value.length;\n        value = value.trim();\n        if (this.canBeTokValue(value, canBeEmpty)) {\n            this.op = new ExprParserOperator(Token.value, value, pos - value.length, value.length);\n            return true;\n        }\n        return false;\n    }\n\n    private getTokValue(sb: string[], canBeEmpty = true): boolean {\n        if (!sb) {\n            return false;\n        }\n        return this._getTokValue(sb.join(\"\"), canBeEmpty);\n    }\n\n    private ensureNearValue(value: string): string {\n        const defaultNearValue = this.exprContext.appService.ccquery ? this.exprContext.appService.ccquery.defaultNearValue : 0;\n        let near = Utils.toInt(value, defaultNearValue);\n        if (near < 0) {\n            near = defaultNearValue;\n        }\n        return near.toString();\n    }\n\n    private findDisplay(value: string): number {\n        if (!value || value.length < 3) {\n            return -1;\n        }\n        if (value[value.length - 1] !== \"`\") {\n            return -1;\n        }\n        let pos = value.length - 2;\n        while (pos !== -1) {\n            pos = value.lastIndexOf(\"`\", pos);\n            if (pos !== -1) {\n                let escapes = 0;\n                let pos1 = pos - 1;\n                while (pos1 >= 0) {\n                    if (value[pos1] !== \"\\\\\") {\n                        break;\n                    }\n                    escapes++;\n                    pos1--;\n                }\n                if (escapes % 2 === 0) {\n                    return pos;\n                }\n                pos--;\n            }\n        }\n        return -1;\n    }\n\n    private isValidFieldName(name: string): boolean {\n        return this.options.allowScopedFields ? Utils.isValidScopedSimpleName(name) : Utils.isValidSimpleName(name);\n    }\n\n    private isAllowedField(field: string, forcePartname: boolean, isPartname: IRef<boolean>): boolean {\n        isPartname.value = false;\n        if (Utils.eqNCN(field, \"exists\", \"missing\")) {\n            return true;\n        }\n        if (Utils.eqNCN(field, \"text\", \"concepts\", \"refine\", \"matchingpartnames\")) {\n            // NB @concepts, @refine and @matchingpartnames must be handled specially by the caller\n            isPartname.value = true;\n            return true;\n        }\n        const ccquery = this.exprContext.appService.ccquery;\n        if (ccquery) {\n            forcePartname = forcePartname && !this.exprContext.disallowFulltext;\n            let column = forcePartname ? undefined : this.exprContext.appService.getColumn(field);\n            if (!!column) {\n                if (column.eType === EngineType.varchar) { // only type not indexed\n                    column = undefined;\n                }\n                else if ((ccquery.$columnFieldsPattern && ccquery.$columnFieldsPattern.hasPatterns()) &&\n                    !ccquery.$columnFieldsPattern.isIncluded(field) &&\n                    !ccquery.$columnFieldsPattern.isIncluded(column.name)) {\n                    column = undefined;\n                }\n            }\n            if (!this.exprContext.disallowFulltext && !column) {\n                isPartname.value = true;\n                if ((ccquery.$partnameFieldsPattern && ccquery.$partnameFieldsPattern.hasPatterns()) &&\n                    !ccquery.$partnameFieldsPattern.isIncluded(field)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private readToken(): string | undefined {\n        if (this.saveOp !== ExprParserOperator.invalid) {\n            this.prevOp = this.op;\n            this.op = this.saveOp;\n            this.saveOp = ExprParserOperator.invalid;\n            return undefined;\n        }\n        let ch;\n        this.prevOp = this.op;\n        let nextValue: string | undefined;\n        const sbCurrentValue: string[] = [];\n        let candidateFieldPos = -1;\n        let fieldSpecified = false;\n        while (true) {\n            if (this.current >= this.length) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.eof;\n                return undefined;\n            }\n            ch = this.text[this.current];\n            if (ch === \"\\\\\") { // \\ escapes \\ and `\n                sbCurrentValue.push(ch);\n                this.current++;\n                if (this.current < this.length) {\n                    const ch1 = this.text[this.current];\n                    if (ch1 === \"\\\\\" || ch1 === \"`\") {\n                        sbCurrentValue.push(ch1);\n                        this.current++;\n                    }\n                }\n            }\n            else if (ch === \"(\") {\n                if (this.getTokValue(sbCurrentValue, false)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.lPar;\n                this.current++;\n                return undefined;\n            }\n            else if (ch === \")\") {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.rPar;\n                this.current++;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"AND\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.and;\n                this.current += 3;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"OR\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.or;\n                this.current += 2;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"NOT\", sbCurrentValue)) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.op = ExprParserOperator.not;\n                this.current += 3;\n                return undefined;\n            }\n            else if (this.matchKeyword(\"NEAR\", sbCurrentValue, \"/\")) {\n                if (this.getTokValue(sbCurrentValue)) {\n                    return undefined;\n                }\n                this.current += 4;\n                nextValue = undefined;\n                if (this.current < this.length && this.text[this.current] === \"/\") {\n                    const last: IRef<number> = {value: 0};\n                    nextValue = this.matchUntil(this.current + 1, this.current + 1, \" \\r\\n\\t`\\\"([/\", last);\n                    let near = -1;\n                    if (nextValue !== undefined) {\n                        nextValue = nextValue.substr(0, nextValue.length - 1);\n                        near = Utils.toInt(nextValue, -1);\n                    }\n                    if (near < 0) {\n                        return \"bad operator\";\n                    }\n                    this.current = last.value - 1;\n                }\n                nextValue = this.ensureNearValue(nextValue || \"\");\n                const infix = this.current >= this.length || this.text[this.current] !== \"(\";\n                // For infix, near value is the number of words between the two terms so add the 2 terms to\n                // the window (near/0 = adjacent terms)\n                this.op = infix ?\n                    new ExprParserOperator(Token.infixNear, (Utils.toInt(nextValue) + 2).toString()) :\n                    new ExprParserOperator(Token.near, nextValue);\n                return undefined;\n            }\n            else if (ch === \"+\" || ch === \"-\") {\n                if (this.current + 1 < this.length) {\n                    const ch1 = this.text[this.current + 1];\n                    const last: IRef<number> = {value: 0};\n                    let length: number;\n                    if (\"(\\\"[/`\".includes(ch1)) { // ( \" [ / `\n                        nextValue = this.matchUntil(this.current, this.current + 2, this.getTerminators(ch1, false), last);\n                        length = last.value - this.current;\n                    }\n                    else {\n                        nextValue = this.matchSimpleValue(this.current + 1);\n                        length = !!nextValue ? nextValue.length : 0;\n                    }\n                    if (!!nextValue) {\n                        sbCurrentValue.push(nextValue);\n                        this.current += length;\n                        continue;\n                    }\n                }\n                return \"bad operator: \" + ch;\n            }\n            else if (\"\\\"[{/`\".includes(ch)) { // \" [ { / `\n                const last: IRef<number> = {value: 0};\n                nextValue = this.matchUntil(this.current, this.current + 1, this.getTerminators(ch, true), last);\n                if (!!nextValue) {\n                    const forceRange = (fieldSpecified && \"[{\".includes(ch) && sbCurrentValue.length === 0);\n                    sbCurrentValue.push(nextValue);\n                    this.current = last.value;\n                    if (forceRange && this.getTokValue(sbCurrentValue)) {\n                        return undefined;\n                    }\n                    continue;\n                }\n                return \"bad operator: \" + ch;\n            }\n            else {\n                if (ch === \":\") { // Field\n                    // Pick out previous value and/or field name\n                    // Field specifier can be:\n                    // field:value\n                    // field`display`:value\n                    // `display`:value\n                    const currentValue = sbCurrentValue.join(\"\");\n                    if (candidateFieldPos === -1) {\n                        // Check for display\n                        candidateFieldPos = this.findDisplay(currentValue);\n                        if (candidateFieldPos === -1) {\n                            this.op = ExprParserOperator.invalid;\n                            return \"invalid token\";\n                        }\n                    }\n                    let field = currentValue.substr(candidateFieldPos).trim();\n                    let display = \"\";\n                    // Extract display\n                    const displayStart = this.findDisplay(field);\n                    if (displayStart !== -1) {\n                        display = ExprParser.unescape(field.substr(displayStart, field.length - displayStart));\n                        field = field.substr(0, displayStart);\n                    }\n                    if (this.isValidFieldName(field) || (Utils.isEmpty(field) && !Utils.isEmpty(display))) {\n                        const value = currentValue.substr(0, candidateFieldPos);\n                        if (this.canBeTokValue(value.trim())) {\n                            this.current -= (sbCurrentValue.join(\"\").length - candidateFieldPos); // back up to field\n                            this._getTokValue(value);\n                            return undefined;\n                        }\n                        if (!Utils.isEmpty(field)) {\n                            let forcePartname = false;\n                            if (this.current + 1 < this.length && this.text[this.current + 1] === \":\") {\n                                // :: => force partname over column\n                                forcePartname = true;\n                                this.current++;\n                            }\n                            const isPartname: IRef<boolean> = { value: false };\n                            if (!this.isAllowedField(field, forcePartname, isPartname)) {\n                                candidateFieldPos = -1;\n                                sbCurrentValue.push(\":\");\n                                if (forcePartname) {\n                                    sbCurrentValue.push(\":\");\n                                }\n                                this.current++;\n                                continue;\n                            }\n                            if (isPartname.value) {\n                                field = ExprParser.fieldPartnamePrefix + field;\n                            }\n                        }\n                        if (!Utils.isEmpty(field)) {\n                            this.field = field;\n                            fieldSpecified = true;\n                        }\n                        if (!Utils.isEmpty(display)) {\n                            this.display = display;\n                        }\n                        sbCurrentValue.length = 0;\n                        this.current++;\n                        continue;\n                    }\n                }\n                if (\" \\r\\n\\t)\".includes(ch)) {\n                    candidateFieldPos = -1;\n                }\n                else if (candidateFieldPos === -1) {\n                    candidateFieldPos = sbCurrentValue.join(\"\").length;\n                }\n                sbCurrentValue.push(ch);\n                this.current++;\n            }\n        }\n    }\n\n    private clear() {\n        this.text = \"\";\n        this.current = 0;\n        this.length = 0;\n        this.operators.length = 0;\n        this.expressions.length = 0;\n        this.fields.length = 0;\n        this.displays.length = 0;\n    }\n\n    /**\n     * Parse some text using the Sinequa fielded search syntax\n     *\n     * @return The parsed `Expr` or an error string\n     */\n    public static parse(text: string, context: ExprContext, options?: ExprParserOptions): Expr | string {\n        const parser = new ExprParser(context, options);\n        const error = parser.parse(text);\n        if (error) {\n            return error;\n        }\n        return parser.parseResult();\n    }\n\n    private parseResult(): Expr | string {\n        if (this.expressions.length !== 1) {\n            return \"no expression found\";\n        }\n        return this.expressions[0];\n    }\n\n    private get contextField(): string {\n        let field = this.field;\n        if (Utils.isEmpty(field)) {\n            field = this.peekField();\n        }\n        return field;\n    }\n\n    private get contextDisplay(): string {\n        let display = this.display;\n        if (Utils.isEmpty(display)) {\n            display = this.peekDisplay();\n        }\n        return display;\n    }\n\n    private parse(text: string): string {\n        this.clear();\n        if (this.options.allowEmptyValues && !Utils.len(text.trim())) {\n            const expr = Expr.makeExpr(this.exprContext, \"\", this.contextField, this.contextDisplay, this.options.allowEmptyValues);\n            if (expr) {\n                expr.start = 0;\n                expr.length = 0;\n                this.expressions.push(expr);\n            }\n            return \"\";\n        }\n        this.text = text || \"\";\n        this.length = this.text.length;\n        this.operators.push(ExprParserOperator.eof);\n        let err = this.readToken();\n        if (err) {\n            return err;\n        }\n        while (true) {\n            if ((this.op.tok === Token.value || this.op.tok === Token.lPar || this.op.tok === Token.not || this.op.tok === Token.near) &&\n                (this.prevOp.tok === Token.value || this.prevOp.tok === Token.rPar)) {\n                // Default to AND for space separated terms\n                // NOT xxx => AND NOT xxx\n                this.saveOp = this.op;\n                this.op = ExprParserOperator.and;\n            }\n\n            let a: Act;\n            if (this.op.tok === Token.value) {\n                a = Act.s;\n            }\n            else {\n                a = ExprParser.parsetbl[this.operators[this.operators.length - 1].tok][this.op.tok];\n            }\n            switch (a) {\n                case Act.r:\n                    err = this.reduce();\n                    if (err) {\n                        return err;\n                    }\n                    break;\n                case Act.s:\n                    err = this.shift();\n                    if (err) {\n                        return err;\n                    }\n                    break;\n                case Act.a:\n                    if (this.expressions.length !== 1) {\n                        return \"syntax error\";\n                    }\n                    return \"\";\n                case Act.e1:\n                    return \"missing ')'\";\n                case Act.e2:\n                    return \"missing operator (AND,OR,NOT)\";\n                case Act.e3:\n                    return \"missing '('\";\n                case Act.e4:\n                    return \"invalid argument\";\n            }\n        }\n    }\n\n    private shift(): string | undefined {\n        if (this.op.tok === Token.value) {\n            const value = this.op.tokValue.trim();\n            if (Utils.isEmpty(value) && !this.options.allowEmptyValues) {\n                return \"empty token\";\n            }\n            const expr = Expr.makeExpr(this.exprContext, value, this.contextField, this.contextDisplay, !!this.options.allowEmptyValues);\n            if (!expr) {\n                return \"invalid expression\";\n            }\n            expr.start = this.op.tokValuePos;\n            expr.length = this.op.tokValueLen;\n            if (!!expr.operands) {\n                expr.operands.forEach(operand => {\n                    operand.start = this.op.tokValuePos;\n                    operand.length = this.op.tokValueLen;\n                });\n            }\n            this.expressions.push(expr);\n            this.field = \"\";\n            this.display = \"\";\n        }\n        else {\n            this.operators.push(this.op);\n            if (this.op.tok === Token.lPar) {\n                if (Utils.isEmpty(this.field)) {\n                    this.fields.push(this.peekField());\n                }\n                else {\n                    this.fields.push(this.field);\n                }\n                this.field = \"\";\n                if (Utils.isEmpty(this.display)) {\n                    this.displays.push(this.peekDisplay());\n                }\n                else {\n                    this.displays.push(this.display);\n                }\n                this.display = \"\";\n            }\n        }\n        return this.readToken();\n    }\n\n    private peekField(): string {\n        if (this.fields.length === 0) {\n            return \"\";\n        }\n        return this.fields[this.fields.length - 1];\n    }\n\n    private peekDisplay(): string {\n        if (this.displays.length === 0) {\n            return \"\";\n        }\n        return this.displays[this.displays.length - 1];\n    }\n\n    private canBeMergeTarget(e: Expr, and: boolean): boolean {\n        if (e.isLeaf) {\n            return false;\n        }\n        if (e.near >= 0) {\n            return false;\n        }\n        if (e.and !== and) {\n            return false;\n        }\n        if (e.not) {\n            return false;\n        }\n        return true;\n    }\n\n    private mergeExpr(e1: Expr, e2: Expr, and: boolean): Expr {\n        let source: Expr, target: Expr;\n        let prepend = false;\n        if (this.canBeMergeTarget(e1, and)) {\n            target = e1;\n            source = e2;\n        }\n        else if (this.canBeMergeTarget(e2, and)) {\n            target = e2;\n            source = e1;\n            prepend = true; // to keep the same order as in the input text\n        }\n        else {\n            return new Expr({\n                exprContext: e1.exprContext,\n                op1: e1,\n                and,\n                op2: e2,\n                field: this.peekField(),\n                display: this.peekDisplay()\n            });\n        }\n        if (source.isLeaf || source.and !== and || source.not || !Utils.eq(source.display || \"\", target.display || \"\")) {\n            target.addOperand(source, this.peekField(), prepend);\n        }\n        else {\n            if (source.operands) {\n                for (const operand of source.operands) {\n                    target.addOperand(operand, this.peekField(), prepend);\n                }\n            }\n        }\n        return target;\n    }\n\n    private reduce(): string | undefined {\n        let e: Expr | undefined;\n        let e1: Expr | undefined;\n        let e2: Expr | undefined;\n        const op: ExprParserOperator = this.operators[this.operators.length - 1];\n        switch (op.tok) {\n            case Token.not:\n                // Apply E := NOT E\n                e = this.expressions.pop();\n                if (!e) {\n                    return \"syntax error\";\n                }\n                e.not = !e.not;\n                this.expressions.push(e);\n                break;\n            case Token.and:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                this.expressions.push(this.mergeExpr(e1, e2, true));\n                break;\n            case Token.or:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                this.expressions.push(this.mergeExpr(e1, e2, false));\n                break;\n            case Token.near:\n                e = this.expressions.pop();\n                if (!e) {\n                    return \"syntax error\";\n                }\n                e.near = Utils.toInt(this.ensureNearValue(op.tokValue));\n                this.expressions.push(e);\n                break;\n            case Token.infixNear:\n                e2 = this.expressions.pop();\n                e1 = this.expressions.pop();\n                if (!e1 || !e2) {\n                    return \"syntax error\";\n                }\n                if (!e2.isLeaf || e2.isStructured || !e1.isLeaf || e1.isStructured || e2.not || e1.not || !Utils.eqNC(e2.field || \"\", e1.field || \"\")) {\n                    return \"syntax error\";\n                }\n                e = new Expr({\n                    exprContext: e1.exprContext,\n                    op1: e1,\n                    and: false,\n                    op2: e2,\n                    field: this.peekField(),\n                    display: this.peekDisplay()\n                });\n                e.near = Utils.toInt(this.ensureNearValue(op.tokValue));\n                this.expressions.push(e);\n                break;\n            case Token.rPar:\n                this.operators.pop();\n                if (this.fields.length === 0) {\n                    return \"missing field\";\n                }\n                if (this.expressions.length === 0) {\n                    return \"syntax error\";\n                }\n                const field = this.fields.pop();\n                const display = this.displays.pop();\n                // Set Field for single term bracketed expressions\n                e = this.expressions[this.expressions.length - 1];\n                if (e.isLeaf) {\n                    if (Utils.isEmpty(e.field)) {\n                        e.field = field;\n                    }\n                    if (Utils.isEmpty(e.display)) {\n                        e.display = display;\n                    }\n                }\n                break;\n        }\n        this.operators.pop();\n        return undefined;\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport {Utils} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport { ExportOutputFormat, ExportSourceType } from './config/ccapp';\nimport { IQuery } from './query/query';\nimport { Results } from \"./query.web.service\";\nimport { AuditEventType } from './audit.web.service';\n\n/**\n * A service to export the result of a query.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryExportWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    private logErrorToConsole(methodName: string, errorMessage: string): void {\n        console.log(`queryExportService.${methodName} ${errorMessage}.`);\n    }\n\n    private preliminaryCheck(\n        methodName: string,\n        webService: string,\n        format: ExportOutputFormat): Observable<HttpResponse<Blob>> | undefined {\n\n        if (!this.appName) {\n            const errorMessage = 'No app';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!webService) {\n            const errorMessage = 'No web service';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!format || format as ExportOutputFormat === ExportOutputFormat.None) {\n            const errorMessage = 'No output format';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Exports the current result.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query The query to export.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportResult(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportResult';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            type: ExportSourceType[ExportSourceType.Result],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the current selected records.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query\n     * @param selection\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSelection(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        selection: string[],\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSelection';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!selection || selection.length === 0) {\n            const errorMessage = 'No selection';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            selection,\n            type: ExportSourceType[ExportSourceType.Selection],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_Selection_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the result of a saved query.\n     *\n     * @param webService The configuration for the export web service.\n     * @param queryName The query name.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSavedQuery(\n        webService: string,\n        queryName: string,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSavedQuery';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!queryName) {\n            const errorMessage = 'No saved query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            type: ExportSourceType[ExportSourceType.SavedQuery],\n            format: ExportOutputFormat[format],\n            name: queryName,\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_SavedQuery_ExportCSV,\n                detail: {\n                    query: queryName\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    private doExport(body: {}): Observable<HttpResponse<Blob>> {\n        const observable = this.httpClient.post(\n            this.makeUrl('query.export'),\n            body,\n            {\n                observe: 'response',\n                responseType: 'blob'\n            }\n        );\n\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                console.log('queryExportService.export success: ', this.readBlobFileName(response));\n                return response;\n            },\n            (error) => {\n                console.log('queryExportService.export failure - error: ', error);\n            });\n\n        return observable;\n    }\n\n    private readBlobFileName(response: HttpResponse<Blob>): string {\n        const header = response.headers.get('content-disposition');\n        return header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n    }\n}\n","const VALIDATION_MODULE_PROVIDERS = [];\n\nexport {VALIDATION_MODULE_PROVIDERS};\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes the object returned by the list action of the labels web service\n */\nexport interface Labels {\n    labels: string[];\n}\n\n/**\n * Describes the object returned by the getUserRights action of the labels web service\n */\nexport interface LabelsRights {\n    canManagePublicLabels: boolean;\n    canEditPublicLabels: boolean;\n}\n\n/**\n * A service for calling the labels web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LabelsWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Calls the list action of the labels web service\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    list(\n        prefix: string,\n        _public: boolean): Observable<Labels> {\n        const observable = this.httpClient.get<Labels>(this.makeUrl(\"labels\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"list\",\n                q: prefix,\n                public: _public,\n                locale: this.intlService.currentLocale.name,\n                localize: false\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.list failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * A wrapper around the list method. The matching labels are returned as an array of strings\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    array(\n        prefix: string,\n        _public: boolean): Observable<string[]> {\n        return this.list(prefix, _public)\n            .pipe(map((value) => {\n                return value.labels;\n            }));\n    }\n\n    /**\n     * Calls the getUserRights action of the labels web service\n     */\n\n    getUserRights(): Observable<LabelsRights> {\n        const observable = this.httpClient.get<LabelsRights>(\n            this.makeUrl('labels'),\n            {\n                params: this.makeParams({\n                    app: this.appName,\n                    action: 'getUserRights'\n                })\n            }\n        );\n        Utils.subscribe(\n            observable,\n            response => response,\n            error => console.log(\"labelsService.getUserRights failure - error: \", error)\n        );\n        return observable;\n    }\n\n    /**\n     * Add labels to a set of documents\n     *\n     * @param labels The labels to add\n     * @param ids The ids of the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    add(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"add\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_AddDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addToLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.add failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from a set of documents\n     *\n     * @param labels The labels to remove\n     * @param ids The ids of the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    remove(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"remove\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_RemoveDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeFromLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.remove failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Renames a set of labels\n     *\n     * @param labels The labels to rename\n     * @param newLabel The new name for the labels\n     * @param _public Determines whether the labels are public or private\n     */\n    rename(labels: string[],\n        newLabel: string,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"rename\",\n            labels: labels,\n            newLabel: newLabel,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Rename,\n                detail: {\n                    public: _public,\n                    oldlabel: !!labels ? labels.toString() : null,\n                    label: newLabel\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.rename failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Deletes a set of labels\n     *\n     * @param labels The labels to be deleted\n     * @param _public Determines whether the labels are public or private\n     */\n    delete(labels: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"delete\",\n            labels: labels,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.delete failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Adds labels to the documents identified by the passed query\n     *\n     * @param labels The labels to add\n     * @param query The query to produce the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkAdd(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkAdd\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Add,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkAdd failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from the documents identified by the passed query\n     *\n     * @param labels The labels to remove\n     * @param query The query to produce the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkRemove(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkRemove\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkRemove failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import enIntl from \"./en\";\nimport frIntl from \"./fr\";\nimport deIntl from \"./de\";\n\nexport { enIntl, frIntl, deIntl };\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Annuler\",\n            \"yes\": \"Oui\",\n            \"no\": \"Non\",\n            \"abort\": \"Abandonner\",\n            \"retry\": \"Réessayer\",\n            \"ignore\": \"Ignorer\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirmer\"\n        },\n        \"prompt\": {\n            \"title\": \"Saississez une valeur\"\n        }\n    }\n};\n","import {Injectable, Inject, Type, Injector, InjectionToken} from \"@angular/core\";\nimport {FormGroup, ValidatorFn} from \"@angular/forms\";\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Utils, Keys} from \"@sinequa/core/base\";\nimport {MessageParams} from \"@sinequa/core/intl\"; // Dependency to INTL !\nimport {ModalRef, IModalRef} from \"./modal-ref\";\n\n/** Describes the configuration object that can be passed when opening\n * a modal with the {@link ModalService}.\n */\nexport interface ModalConfig {\n    /**\n     * Classes that should be added to the `Overlay` pane.\n     */\n    panelClass?: string | string[];\n    /**\n     * Indicates whether a backdrop should be added when opening the modal.\n     */\n    hasBackdrop?: boolean;\n    /**\n     * Classes that should be added to the backdrop.\n     */\n    backdropClass?: string | string[];\n    /**\n     * The data model that the modal will operate on.\n     */\n    model?: any;\n    /**\n     * The CSS width of the modal.\n     */\n    width?: string;\n    /**\n     * The CSS height of the modal.\n     */\n    height?: string;\n    /**\n     * Indicates whether the modal should occupy the screen width and height. In this case\n     * `width` and `height` are set to `100%` and the `sq-modal-fullscreen` class is added\n     * to `panelClass`\n     */\n    fullscreen?: boolean;\n    /**\n     * Indicates whether a click on the backdrop should close the modal. The default value\n     * is `true`.\n     */\n    closeOnBackdropClick?: boolean;\n}\n\nconst DEFAULT_CONFIG: ModalConfig = {\n    hasBackdrop: true,\n    backdropClass: [\"cdk-overlay-dark-backdrop\", \"sq-modal-backdrop\"],\n    panelClass: \"sq-modal-pane\",\n    model: null,\n    closeOnBackdropClick: true\n};\n\n/**\n * The `MODAL_MODEL` injection token can be used to access the modal's model in\n * the the modal component. The value is `provided` from the value set in the\n * {@link ModalConfig} options when the modal is opened.\n */\nexport const MODAL_MODEL = new InjectionToken<any>('MODAL_MODEL');\n\n/**\n * The possible result values that can be set when a modal is closed. Buttons in a modal\n * have an associated `ModalResult` value. All buttons except those with a `Custom` result\n * value will close the modal when they are clicked.\n */\nexport const enum ModalResult {\n    OK = -1,\n    Cancel = -2,\n    Yes = -3,\n    No = -4,\n    Abort = -5,\n    Retry = -6,\n    Ignore = -7,\n    Custom = 0\n}\n\n/**\n * An enumeration of the types of confirm modals. The type of the confirm modal\n * can be reflected in the icon and/or colors used.\n */\nexport const enum ConfirmType {\n    Success,\n    Info,\n    Warning,\n    Error\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.confirm]{@link ModalService#confirm}\n * method.\n */\nexport interface ConfirmOptions {\n    /**\n     * The title of the confirm modal.\n     */\n    title?: string;\n    /**\n     * The message dispayed in the confirm modal.\n     */\n    message: string;\n    /**\n     * Any parameters for the `message`.\n     */\n    messageParams?: MessageParams;\n    /**\n     * The type of the confirm modal.\n     */\n    confirmType?: ConfirmType;\n    /**\n     * The buttons to display in the confirm modal.\n     */\n    buttons: ModalButton[];\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.prompt]{@link ModalService#prompt}\n * method.\n */\nexport interface PromptOptions extends ConfirmOptions {\n    /**\n     * text written by the user in the prompt input\n     */\n    output: string;\n    /**\n     * List of validators for the input form control\n     */\n    validators?: ValidatorFn[];\n    /**\n     * If omitted, a single-line input is displayed. If specified, a textarea with the\n     * given number of rows is displayed\n     */    \n    rowCount?: number;\n}\n\n/**\n * Describes the options that can be used when creating an instance of a {@link ModalButton}.\n */\nexport interface IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary?: boolean;\n    /**\n     * The button text.\n     */\n    text?: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible?: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation?: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor?: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action?: (button: ModalButton) => void;\n}\n\n/**\n * A class representing a button displayed in a modal.\n */\nexport class ModalButton implements IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary: boolean;\n    /**\n     * The button text.\n     */\n    text: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action: (button: ModalButton) => void;\n\n    constructor(options: IModalButton) {\n        Utils.extend(this, {visible: true, anchor: false}, options);\n    }\n\n    /**\n     * Get the button text. Buttons with non-custom result types\n     * have default text depending on their result type -\n     * `msg#modal.buttons.ok`, `msg#modal.buttons.cancel` etc\n     */\n    getText() {\n        if (this.text) {\n            return this.text;\n        }\n        switch (this.result) {\n            case ModalResult.OK:\n                return \"msg#modal.buttons.ok\";\n            case ModalResult.Cancel:\n                return \"msg#modal.buttons.cancel\";\n            case ModalResult.Yes:\n                return \"msg#modal.buttons.yes\";\n            case ModalResult.No:\n                return \"msg#modal.buttons.no\";\n            case ModalResult.Abort:\n                return \"msg#modal.buttons.abort\";\n            case ModalResult.Retry:\n                return \"msg#modal.buttons.retry\";\n            case ModalResult.Ignore:\n                return \"msg#modal.buttons.ignore\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Perform a click on a button. The button's explicit action is performed if set and\n     * the modal closed with the button's modal result if the `result` type is non-`Custom`.\n     * If the validation status not `valid` this method returns without performing any action.\n     *\n     * @param closer An object with a `close` method. If the result type is non-custom then\n     * the `close` method of this object is called.\n     */\n    click(closer: {close(result: any): void}) {\n        if (this.validation && !this.validation.valid) {\n            return;\n        }\n        if (this.action) {\n            this.action(this);\n        }\n        if (this.result !== ModalResult.Custom) {\n            closer.close(this.result);\n        }\n    }\n}\n\n/**\n * An injection token to set the component to use for the `confirm` modal displayed\n * by the [ModalService.confirm]{@link ModalService#confirm} method.\n */\nexport const MODAL_CONFIRM = new InjectionToken<Type<any>>('MODAL_CONFIRM');\n\n/**\n * An injection token to set the component to use for the `prompt` modal displayed\n * by the [ModalService.prompt]{@link ModalService#confirm} method.\n */\nexport const MODAL_PROMPT = new InjectionToken<Type<any>>('MODAL_PROMPT');\n\n/**\n * A service to open modal dialogs.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ModalService {\n    constructor(\n        protected injector: Injector,\n        protected overlay: Overlay,\n        @Inject(MODAL_CONFIRM) protected confirmModal: Type<any>,\n        @Inject(MODAL_PROMPT) protected promptModal: Type<any>\n    ) {\n    }\n\n    /**\n     * Open a modal dialog using the passed configuration options.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns An `IModalRef` object that can be used to close the modal.\n     */\n    openRef(component: Type<any>, config: ModalConfig = {}): IModalRef {\n        // Override default configuration\n        const modalConfig = { ...DEFAULT_CONFIG, ...config };\n        if (modalConfig.fullscreen) {\n            modalConfig.width = \"100%\";\n            modalConfig.height = \"100%\";\n            if (Utils.isString(modalConfig.panelClass)) {\n                modalConfig.panelClass = [modalConfig.panelClass, \"sq-modal-fullscreen\"];\n            }\n            else if (modalConfig.panelClass) {\n                modalConfig.panelClass.push(\"sq-modal-fullscreen\");\n            }\n            else {\n                modalConfig.panelClass = \"sq-modal-fullscreen\";\n            }\n        }\n        // Returns an OverlayRef which is a PortalHost\n        const overlayRef = this.createOverlay(modalConfig);\n        // Instantiate remote control\n        const modalRef = new ModalRef(overlayRef);\n        const overlayComponent = this.attachDialogContainer(component, overlayRef, modalConfig, modalRef);\n        modalRef.componentInstance = overlayComponent;\n        overlayRef.hostElement.classList.add(\"sq-modal-host\");\n        if (modalConfig.closeOnBackdropClick) {\n            // NB backdropClick will not fire if pointer-events are enabled on modal-host\n            overlayRef.backdropClick().subscribe(() => modalRef.close());\n            // Provide support for a scrollable sq-modal-host (overlay wrapper)\n            // The standard cdk styling disables pointer-events at this level which means that scrolling\n            // won't work. We can enable pointer-events in css but then the backdrop will not receive the\n            // click event. So, we handle the click event directly on sq-modal-host also and if the\n            // click target === sq-modal-host then we initiate modal closing here\n            overlayRef.hostElement.addEventListener(\"click\", (event) => {\n                if (event.target === overlayRef.hostElement) {\n                    modalRef.close();\n                }\n            });\n        }\n        overlayRef.keydownEvents().subscribe((event) => {\n            if (event.keyCode === Keys.esc) {\n                modalRef.close();\n            }\n        });\n        modalRef.disableSubmit();\n        return modalRef;\n    }\n\n    /**\n     * A wrapper around the {@link #openRef} method which returns a `Promise` that resolves\n     * with the `ModalResult` when the modal is closed.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns The `ModalResult` when the modal is closed.\n     */\n    open(component: Type<any>, config: ModalConfig = {}): Promise<ModalResult> {\n        const modalRef = this.openRef(component, config);\n        return modalRef.afterClosed().toPromise();\n    }\n\n    private createOverlay(config: ModalConfig): OverlayRef {\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(component: Type<any>, overlayRef: OverlayRef, config: ModalConfig, modalRef: ModalRef) {\n        // PortalInjector() is deprecated\n        const injector = Injector.create({\n            providers:[\n                {provide: ModalRef, useValue: modalRef},\n                {provide: MODAL_MODEL, useValue: config.model}\n            ], \n            parent:this.injector\n        });\n        const containerPortal = new ComponentPortal(component, null, injector);\n        const containerRef = overlayRef.attach<Type<any>>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    private getOverlayConfig(config: ModalConfig): OverlayConfig {\n        const positionStrategy = this.overlay.position()\n            .global()\n            .centerHorizontally()\n            .centerVertically();\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n\n        return overlayConfig;\n    }\n\n    /**\n     * Open a confirmation modal dialog displaying a message and a set buttons. This is similar to the Javacsript\n     * `Window.alert` method but renders a modal.\n     *\n     * @param options The options used to open the confirm modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    confirm(options: ConfirmOptions): Promise<ModalResult> {\n        return this.open(this.confirmModal, {model: options});\n    }\n\n    /**\n     * Open a prompt modal dialog displaying a message, an input and OK/Cancel buttons.\n     *\n     * @param options The options used to open the prompt modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    prompt(options: PromptOptions): Promise<ModalResult> {\n        return this.open(this.promptModal, {model: options});\n    }\n\n    /**\n     * Open a confirm modal that has an `OK` button.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     */\n    oK(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Success): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: true })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `OK` and `Cancel` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    oKCancel(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.OK): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: primaryButton === ModalResult.OK }),\n                new ModalButton({ visible: true, result: ModalResult.Cancel, primary: primaryButton === ModalResult.Cancel })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `Yes` and `No` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    yesNo(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.Yes): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.Yes, primary: primaryButton === ModalResult.Yes }),\n                new ModalButton({ visible: true, result: ModalResult.No, primary: primaryButton === ModalResult.No })\n            ]\n        });\n    }\n}\n","// moment locales need moment set globally\nimport moment from \"moment\";\n(window as any).moment = moment;\n","import {NgModule, APP_INITIALIZER} from \"@angular/core\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {RouterModule} from '@angular/router';\nimport {LocationStrategy, HashLocationStrategy} from \"@angular/common\";\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {WebServicesModule, StartConfigWebService, StartConfig} from \"@sinequa/core/web-services\";\nimport {LoginModule, LoginInterceptor} from \"@sinequa/core/login\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationsInterceptor} from \"@sinequa/core/notification\";\nimport {AuditInterceptor} from \"@sinequa/core/app-utils\";\n\nimport {DefaultLocalesConfig} from \"@sinequa/core\";\nimport {AppComponent} from \"./app.component\";\nimport {environment} from \"../environments/environment\";\n\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<StartConfig> {\n    const init = () => startConfigWebService.fetchPreLoginAppConfig().toPromise();\n    return init;\n}\n\nexport const startConfig: StartConfig = {\n    // app: \"your-app-name\",\n    production: environment.production\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        ReactiveFormsModule,\n\n        WebServicesModule.forRoot(startConfig),\n        IntlModule.forRoot(DefaultLocalesConfig),\n        LoginModule.forRoot(), // Just use default login modal\n        ModalModule.forRoot(),\n    ],\n    declarations: [\n        AppComponent,\n    ],\n    providers: [\n        // Provides an APP_INITIALIZER which will fetch application configuration information from the Sinequa\n        // server automatically at startup using the application name specified in the URL (app[-debug]/<app-name>).\n        // This allows an application to avoid hard-coding parameters in the StartConfig but requires that the application\n        // be served from the an app[-debug]/<app name> URL.\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n\n        // Provides the Angular LocationStrategy to be used for reading route state from the browser's URL. Currently\n        // only the HashLocationStrategy is supported by Sinequa.\n        {provide: LocationStrategy, useClass: HashLocationStrategy},\n\n        // Provides an HttpInterceptor to handle user login. The LoginInterceptor handles HTTP 401 responses\n        // to Sinequa web service requests and initiates the login process.\n        {provide: HTTP_INTERCEPTORS, useClass: LoginInterceptor, multi: true},\n\n        // Provides an HttpInterceptor that offers a centralized location through which all client-side\n        // audit records pass. An application can replace AuditInterceptor with a subclass that overrides\n        // the updateAuditRecord method to add custom audit information to the records.\n        {provide: HTTP_INTERCEPTORS, useClass: AuditInterceptor, multi: true},\n\n        // Provides an HttpInterceptor that automatically processes any notifications specified in the $notifications\n        // member of the response body to any Sinequa web service requests.\n        {provide: HTTP_INTERCEPTORS, useClass: NotificationsInterceptor, multi: true},\n    ],\n    bootstrap: [\n        AppComponent\n    ]\n})\nexport class AppModule {\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport jstz from \"jstz\";\n\n/**\n * Minimal built-in user settings. Can be extended in the context of\n * complex applications to store user data, preferences, objects, etc.\n */\nexport interface UserSettings {\n    language?: string;\n    skipCount?: number;\n    email?: string;\n    [key: string]: any;\n}\n\n/**\n * A base event from which all events that can be issued by the {@link UserSettingsWebService} are derived\n */\nexport interface UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [userSettings]{@link UserSettingsWebService#userSettings} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface UserSettingsChangedEvent extends UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the usersettings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserSettingsWebService extends HttpService implements OnDestroy {\n    private _userSettings: UserSettings | undefined;\n    /**\n     * The timezone for the user\n     */\n    timezone: string;\n    /**\n     * A reviver function that, if set, will be called on the user settings when they are loaded\n     */\n    reviver: (us: UserSettings) => void;\n    private _events = new Subject<UserSettingsChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n        this.timezone = jstz.determine().name(); // until momentjs gets this\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<UserSettingsChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link UserSettings}\n     */\n    get userSettings(): UserSettings | undefined {\n        return this._userSettings;\n    }\n\n    /**\n     * Sets the current {@link UserSettings} and issues the \"changed\" event\n     */\n    set userSettings(value: UserSettings | undefined) {\n        this._userSettings = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    //TODO remove\n    /**\n     * @deprecated use \"userSettings\" get property to retrieve the user settings\n     * @returns User settings object or undefined\n     */\n    public getUserSettings(): UserSettings | undefined{\n        return this.userSettings;\n    }\n\n    /**\n     * Load the user settings for the currently logged in user.\n     * Sets the userSettings member and issues the \"changed\" event\n     */\n    public load(): Observable<UserSettings> {\n        const observable = this.httpClient.get<UserSettings>(this.makeUrl(\"usersettings\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.userSettings = response;\n                if (this.userSettings) {\n                    if (this.reviver) {\n                        this.reviver(this.userSettings);\n                    }\n                }\n            },\n            (error) => {\n                console.log(\"userSettingsService.load failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Saves the current user settings on the server\n     *\n     * @param auditEvents\n     */\n    public save(auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"save\",\n            userSettings: this.userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.save failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Patches the user settings on the server using a partial user settings object. The partial\n     * object is used to update the user settings on the server according to [RFC7396]{@link https://tools.ietf.org/html/rfc7396}\n     *\n     * @param userSettings The partial user settings\n     * @param auditEvents Any associated audit events to store on the server\n     */\n    public patch(userSettings: UserSettings, auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"patch\",\n            userSettings: userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.patch failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Resets User Settings (emits a change event and audit events).\n     */\n    public reset() {\n        // Save current state\n        const currentState = this.userSettings;\n        // Reset User settings (and emit an event!)\n        this.userSettings = {};\n        const observable = this.save({\n            type: 'UserSettings_Reset'\n        });\n        observable.subscribe({\n            next: () => {},\n            error: () => this.userSettings = currentState // Restore previous state\n        })\n        return observable;\n    }\n\n    /**\n     * Reads a user setting.\n     *\n     * @param paths The path to the setting in the JSON.\n     */\n    public readUserSetting(paths: string[]): any {\n        let json: any = this.userSettings;\n        if (json) {\n            for (const path of paths) {\n                json = json[path];\n                if (!json) {\n                    // Value does not exist yet\n                    return undefined;\n                }\n            }\n        }\n        return json;\n    }\n}\n","export * from \"./messages/index\";\nexport * from \"./default-locales-config\";","import {Pipe, PipeTransform, OnDestroy, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An abstract base class for pipes that should refresh automatically\n * when the current locale on {@link IntlService} changes. Pipes should\n * be declared as `pure: false` - the current value is cached to avoid\n * unnecessary processing\n */\n@Pipe({name: \"sqAbstractIntlPipe\", pure: false})\nexport abstract class AbstractIntlPipe implements PipeTransform, OnDestroy {\n    protected value: any = \"\";\n    protected lastValue: any;\n    protected lastParams: any;\n    protected localeChange: Subscription;\n\n    constructor(\n        protected intlService: IntlService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    protected updateValue(value: any, params?: any): void {\n        this.lastValue = value;\n        this.lastParams = params;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    transform(value: any, params?: any): any {\n        // if we ask another time for the same key, return the last value\n        if (Utils.equals(value, this.lastValue) && Utils.equals(params, this.lastParams)) {\n            return this.value;\n        }\n\n        // set the value\n        this.updateValue(value, params);\n\n        // subscribe to localeChange event\n        if (!this.localeChange) {\n            this.localeChange = this.intlService.events.subscribe(\n                (event) => {\n                    if (!Utils.isEmpty(this.lastValue)) {\n                        this.lastValue = null;\n                        this.updateValue(value, params);\n                    }\n                });\n        }\n\n        return this.value;\n    }\n\n    ngOnDestroy(): void {\n        if (this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpParams} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {START_CONFIG, StartConfig, AuditRecord, AuditEvent, AuditEvents} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An `HttpInterceptor` to process audi events attached to the request body\n * in the `$auditRecord` member.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditInterceptor implements HttpInterceptor {\n    \n    // Store the session id and its datetime of creation/refresh\n    sessionid: string;\n    sessionstart: Date;\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig\n    ) {\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    // Handle legacy calls where auditEvents is either an AuditEvent or AuditEvent[]\n    private ensureAuditRecord(auditEvents: AuditEvents): AuditRecord | undefined{\n        if (!auditEvents) {\n            return undefined;\n        }\n        let auditEvents1: AuditEvent[] | undefined;\n        if (Utils.isArray(auditEvents)) {\n            auditEvents1 = auditEvents;\n        }\n        else if (Utils.isObject(auditEvents)) {\n            const auditRecord = auditEvents as AuditRecord;\n            if (auditRecord.auditEvents || auditRecord.mlAuditEvents) {\n                return auditRecord;\n            }\n            auditEvents1 = [auditEvents as AuditEvent];\n        }\n        return {\n            auditEvents: auditEvents1\n        };\n    }\n\n    /**\n     * Add a sessionid to all the audit events\n     * @param auditRecord \n     */\n    private addSessionId(auditRecord?: AuditRecord) {\n        const sessionid = this.getSessionId();\n        auditRecord?.auditEvents?.forEach(event => {\n            if(!event.detail) {\n                event.detail = {};\n            }\n            event.detail['session-id'] = sessionid;\n        });\n    }\n\n    /**\n     * Get a Session Id initialized upon login. The session is maintained for 10 minutes\n     * after the last call to this method.\n     */\n    private getSessionId(): string {\n        if(!this.sessionid || this.isSessionStale()) {\n            this.sessionid = Utils.guid();\n        }\n        this.sessionstart = new Date();\n        return this.sessionid;\n    }\n\n    /**\n     * Test whether the current session id valid or stale (need to be refreshed)\n     */\n    private isSessionStale(): boolean {\n        const lastSession = new Date().getTime() - this.sessionstart.getTime();\n        // Consider the session stale after 10 minutes\n        return lastSession > 10 * 60 * 1000;\n    }\n\n    /**\n     * Called once the `$auditRecord` member has been standardized, this method\n     * can be overidden to update fields in the audit events associated with a\n     * web service call.\n     */\n    protected updateAuditRecord(auditRecord?: AuditRecord) {\n    }\n\n    /**\n     * Intercept requests with a JSON body and standardize the format of the\n     * `$auditRecord` member.\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.shouldIntercept(request.url) && this.isJsonable(request.body)) {\n            request.body.$auditRecord = this.ensureAuditRecord(request.body.$auditRecord);\n            this.addSessionId(request.body.$auditRecord);\n            this.updateAuditRecord(request.body.$auditRecord);\n        }\n        return next.handle(request);\n    }\n}\n","import {Component, AfterViewInit} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl} from \"@angular/forms\";\nimport {QueryWebService, Results} from \"@sinequa/core/web-services\";\nimport {LoginService} from \"@sinequa/core/login\";\nimport {AppService, Query} from \"@sinequa/core/app-utils\";\nimport {NotificationsService, Notification} from \"@sinequa/core/notification\";\nimport {Observable} from 'rxjs';\n\n@Component({\n    selector: \"app\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements AfterViewInit {\n    searchControl: FormControl;\n    form: FormGroup;\n    results$: Observable<Results> | undefined;\n\n    constructor(\n        protected formBuilder: FormBuilder,\n        public loginService: LoginService,\n        public appService: AppService,\n        public queryWebService: QueryWebService,\n        public notificationsService: NotificationsService) {\n\n\n        this.searchControl = new FormControl(\"\");\n        this.form = this.formBuilder.group({\n            search: this.searchControl\n        });\n    }\n\n    ngAfterViewInit() {\n        this.login();\n    }\n\n    search() {\n        const ccquery = this.appService.ccquery;\n        const query = new Query(ccquery ? ccquery.name : \"_unknown\");\n        query.text = this.searchControl.value || \"\";\n        this.results$ = this.queryWebService.getResults(query);\n    }\n\n    clear() {\n        this.results$ = undefined;\n        this.searchControl.setValue(\"\");\n    }\n\n    login() {\n        this.loginService.login();\n    }\n\n    logout() {\n        this.clear();\n        this.loginService.logout();\n    }\n\n    deleteNotification(notification: Notification) {\n        setTimeout(() => this.notificationsService.deleteNotification(notification), 5000);\n        return true;\n    }\n}","<div class=\"search\">\n    <h1>Hello Search 🔍</h1>\n    <form novalidate [formGroup]=\"form\">\n        <input type=\"text\" placeholder=\"Enter search terms...\" formControlName=\"search\" spellcheck=\"false\" autocomplete=\"off\" [attr.disabled]=\"!loginService.complete? '' : null\">\n        <button type=\"submit\" (click)=\"search()\" [attr.disabled]=\"!loginService.complete? '' : null\">Search</button>\n        <button *ngIf=\"results$ | async\" type=\"button\" (click)=\"clear()\">Clear</button>\n    </form>\n    <div *ngIf=\"results$ | async; let results\">\n        <hr>    \n        <div *ngFor=\"let record of results.records\" class=\"record\">\n            <a href=\"{{record.url1}}\">\n                <h3 [innerHtml]=\"record.displayTitle || record.title\"></h3>\n            </a>\n            <div class=\"source\">{{record.url1}}</div>\n            <p *ngIf=\"record.relevantExtracts\" [innerHTML]=\"record.relevantExtracts\"></p>       \n        </div>\n    </div>\n    <hr>    \n    <button *ngIf=\"loginService.complete\" type=\"button\" (click)=\"logout()\">Logout</button>\n    <button *ngIf=\"!loginService.complete\" type=\"button\" (click)=\"login()\">Login</button>\n    <ng-container *ngIf=\"notificationsService.notificationsStream | async as notification\">\n        <hr>\n        <div *ngIf=\"deleteNotification(notification)\" class=\"notification\">\n            <div *ngIf=\"notification.title\" class=\"title\">\n                <span>{{notification.title | sqMessage}}</span>\n                <hr>\n            </div>\n            <div>{{notification.text | sqMessage:{values: notification.params} }}</div>\n        </div>\n    </ng-container>\n</div>","export * from \"./array-view\";\nexport * from \"./error\";\nexport * from \"./field-value\";\nexport * from \"./item-array-view\";\nexport * from \"./iterator-adaptor\";\nexport * from \"./json\";\nexport * from \"./keyboard\";\nexport * from \"./map-of\";\nexport * from \"./ref\";\nexport * from \"./pattern-matcher\";\nexport * from \"./utils\";\nexport * from \"./base.module\";\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {ValidationErrors} from \"@angular/forms\";\nimport {AbstractIntlPipe, IntlService} from \"@sinequa/core/intl\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * A pipe to display the first error in a `ValidationErrors` map.\n */\n@Pipe({name: \"sqValidationError\", pure: false})\nexport class ValidationErrorPipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef,\n        protected validationService: ValidationService) {\n        super(intlService, changeDetectorRef);\n    }\n\n    updateValue(key: ValidationErrors, params: any): void {\n        super.updateValue(key, params);\n        const text = this.validationService.getFirstErrorText(key);\n        const info = this.validationService.getFirstErrorInfo(key);\n        this.value = text ? this.intlService.formatMessage(text, {values: info}) : undefined;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {AppServiceHelpers} from \"./app-service-helpers\";\nimport {CCColumn} from \"@sinequa/core/web-services\";\nimport {format} from \"d3-format\";\n\n/**\n * Describes a value item object that includes a {@link FieldValue} and an optional display value\n * to override standard field value formatting\n */\nexport interface ValueItem {\n    value: FieldValue;\n    display?: string;\n    count?: number; // Following ES-11166, the number of occurrence for an entity can be included\n}\n\n/**\n * This service provides methods for locale-sensitive formatting and parsing of values that can be found in\n * Sinequa search results.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FormatService {\n    constructor(\n        public intlService: IntlService) {\n    }\n\n    /**\n     * Returns `true` if the passed parameter is a `ValueItem` object\n     */\n    protected isValueItem(valueItem: ValueItem | FieldValue): valueItem is ValueItem {\n        if (Utils.isObject(valueItem) && !Utils.isDate(valueItem) && !Utils.isArray(valueItem)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Extracts the value and display components from a parameter that can be either a `ValueItem`\n     * object or a simple `FieldValue`, in which case the display will be `undefined`.\n     */\n    protected getValueAndDisplay(valueItem: ValueItem | FieldValue): [FieldValue, string] {\n        let value: FieldValue;\n        let display: string;\n        if (this.isValueItem(valueItem)) {\n            value = valueItem.value;\n            display = valueItem.display || \"\";\n        }\n        else {\n            value = valueItem;\n            display = \"\";\n        }\n        return [value, display];\n    }\n\n    /**\n     * Return the display equivalent of a Sinequa language specifier (`en`, `fr`, ...).\n     * The display values are defined in the {@link IntlModule} message files\n     *\n     * @param value A value containing a Sinequa language specifier\n     */\n    formatLanguage(value: FieldValue): string {\n        return this.intlService.formatMessage(`msg#language.${Utils.toLowerCase(value + \"\")}`);\n    }\n\n    /**\n     * Return the display equivalent of a size value. The units (`kb`, `mb`, ...) are defined\n     * in the {@link IntlModule} message files\n     *\n     * @param size A memory size in bytes\n     */\n    formatMemorySize(size: number): string {\n        const kiloBytes: number = size / 1024;\n        const megaBytes: number = kiloBytes / 1024;\n        const gigaBytes: number = megaBytes / 1024;\n        const teraBytes: number = gigaBytes / 1024;\n        const petaBytes: number = teraBytes / 1024;\n\n        let messageKey = \"msg#system.memorySize.bytes\";\n        const params: any = { value: size };\n        if (Math.abs(petaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.pb\";\n            params.value = petaBytes;\n        }\n        else if (Math.abs(teraBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.tb\";\n            params.value = teraBytes;\n        }\n        else if (Math.abs(gigaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.gb\";\n            params.value = gigaBytes;\n        }\n        else if (Math.abs(megaBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.mb\";\n            params.value = megaBytes;\n        }\n        else if (Math.abs(kiloBytes) >= 1) {\n            messageKey = \"msg#system.memorySize.kb\";\n            params.value = kiloBytes;\n        }\n        return this.intlService.formatMessage(messageKey, params);\n    }\n\n    /** D3 formatter for large number: 42096 => 42K */\n    bigNumberFormatter = format(\"~s\");\n\n    /** Similar to bigNumberFormatter, but replaces \"G\" by \"B\" (as in \"$42B\") */\n    moneyFormatter = s => this.bigNumberFormatter(s).replace(/G/, \"B\");\n    \n    /**\n     * Format an amount of money (typically extracted by a Sinequa Text-mining agent)\n     * USD 42069 => USD 42K\n     * @param value \n     * @returns \n     */\n    formatMoney(value: string): string {\n        let [currency, val] = value.split(\" \");\n        return `${currency} ${this.moneyFormatter(+val)}`;\n    }\n\n    /**\n     * Format a value for display according to the passed `column`. Formatters\n     * can be defined in the column's configuration to provide domain-specific\n     * formatting. The standard formatters are `language` and `memorysize`.\n     *\n     * @param valueItem The value to format\n     * @param column The column associated with the value\n     */\n    formatValue(valueItem: ValueItem | FieldValue, column?: CCColumn): string {\n        let [value, display] = this.getValueAndDisplay(valueItem);\n        if (column && column.formatter) {\n            switch (Utils.toLowerCase(column.formatter)) {\n                case \"language\": return this.formatLanguage(value);\n                case \"memorysize\":\n                    if (Utils.isNumber(value)) {\n                        return this.formatMemorySize(value);\n                    }\n                    break;\n                case \"money\":\n                    if(Utils.isString(value)) {\n                        return this.formatMoney(value);\n                    }\n                    else if(Utils.isArray(value)) {\n                        return value.map(v => \n                            this.formatMoney(Utils.isString(v)? v : v.value)\n                        ).join(', ');\n                    }\n                    break;\n            }\n        }\n        if (display) {\n            if (Utils.isDate(display)) { // ES-7785\n                display = Utils.toSysDateStr(display);\n            }\n            return this.intlService.formatMessage(display, {value});\n        }\n        if (Utils.isNumber(value)) {\n            const message = this.intlService.getMessage(\"msg#system.number\");\n            if (message) {\n                return this.intlService.formatText(message, {value});\n            }\n            else {\n                return this.intlService.formatNumber(value);\n            }\n        }\n        if (column && AppServiceHelpers.isDate(column) && Utils.isString(value)) {\n            value = Utils.fromSysDateStr(value) || value;\n        }\n        if (Utils.isDate(value)) {\n            if (column && !AppServiceHelpers.isDate(column)) { // ES-7785\n                value = Utils.toSysDateStr(value);\n            }\n            else {\n                const message = this.intlService.getMessage(\"msg#system.date\");\n                if (message) {\n                    return this.intlService.formatText(message, {date: value, time: Utils.getTime(value)});\n                }\n                else {\n                    let s = this.intlService.formatDate(value);\n                    if (Utils.getTime(value) !== 0) {\n                        s += \", \" + this.intlService.formatTime(value);\n                    }\n                    return s;\n                }\n            }\n        }\n        if (Utils.isBoolean(value)) {\n            const message = this.intlService.getMessage(\"msg#system.boolean\");\n            if (message) {\n                return this.intlService.formatText(message, {value});\n            }\n            else {\n                return value.toString();\n            }\n        }\n        if (Utils.isArray(value)) {\n            const joinValue: string[] = [];\n            value.forEach(v => {\n                if (joinValue.length > 0) {\n                    joinValue.push(\";\");\n                }\n                let _v: string;\n                if (!v) {\n                    _v = \"<null>\";\n                }\n                else if (Utils.isDate(v)) {\n                    _v = Utils.toSysDateStr(v);\n                }\n                else if (Utils.isString(v)) {\n                    _v = v;\n                }\n                else {\n                    _v = v.display || v.value || \"<null>\";\n                }\n                joinValue.push(_v);\n            });\n            value = joinValue.join(\"\");\n        }\n        if (!value) {\n            return value;\n        }\n        return this.intlService.formatMessage(value);\n    }\n\n    /**\n     * Transform a display value. Multiple transformers can be defined on a column and their calls are chained.\n     * The standard formatters are `uppercase`, `upperfirst`, `lowercase`, `lowerfirst`, `startcase`, `kebabcase`,\n     * `snakecase` and `camelcase`.\n     *\n     * @param value The value to transform\n     * @param column The column associated with the value\n     */\n    transformValue(value: string, column?: CCColumn): string {\n        const transforms = column ? Utils.split(column.transforms || \"\", \",\") : undefined;\n        if (!transforms || transforms.length === 0) {\n            return value;\n        }\n        // transforms are composable\n        for (const transform of transforms) {\n            switch (Utils.toLowerCase(transform)) {\n                case \"uppercase\": value = Utils.toUpperCase(value); break;\n                case \"upperfirst\": value = Utils.toUpperFirst(value); break;\n                case \"lowercase\": value = Utils.toLowerCase(value); break;\n                case \"lowerfirst\": value = Utils.toLowerFirst(value); break;\n                case \"startcase\": value = Utils.toStartCase(value); break;\n                case \"kebabcase\": value = Utils.toKebabCase(value); break;\n                case \"snakecase\": value = Utils.toSnakeCase(value); break;\n                case \"camelcase\": value = Utils.toCamelCase(value); break;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Format a value item for display. This is the standard entry point for formatting a value.\n     * By default, this method calls [formatValue]{@link #formatValue} and [transformValue]{@link #transformValue}.\n     *\n     * @param valueItem The value item to format\n     * @param column The column associated with the value item\n     */\n    formatFieldValue(valueItem: ValueItem | FieldValue, column?: CCColumn): string {\n        let formattedValue = this.formatValue(valueItem, column);\n        formattedValue = this.transformValue(formattedValue, column);\n        return formattedValue;\n    }\n\n    /**\n     * Parse an input value according to the passed `parser`. The standard parser is `memorysize`. Parsers\n     * are configured in the {@link CCColumn} configuration. The parsed value is returned as a string for\n     * processing by the {@link ValidationModule}\n     *\n     * @param value The value to parse\n     * @param parser The parser to use\n     */\n    parseValue(value: any, parser: string): string {\n        if (Utils.isString(value)) {\n            if (parser) {\n                switch (Utils.toLowerCase(parser)) {\n                    case \"memorysize\": {\n                        return this.parseMemorySize(value) + \"\";\n                    }\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Parse a size string using [Utils.toSize]{@link Utils#toSize}\n     *\n     * @param str The string to parse\n     * @param _default The default value to return if the string cannot be parsed\n     * @return The parsed size in bytes\n     */\n    parseMemorySize(str: string, _default = 0): number {\n        return Utils.toSize(str, _default);\n    }\n\n    /**\n     * Display a raw value without applying any formatting\n     * (besides the native toString() method for non-string values)\n     * @param value \n     * @returns \n     */\n    formatRaw(value: ValueItem | FieldValue): string {\n        let [val] = this.getValueAndDisplay(value);\n        if(Utils.isArray(val)) {\n            return val.map(v => Utils.isString(v)? v : v.value).join(';');\n        }\n        return val?.toString();\n    }\n}\n","const NOTIFICATION_MODULE_PROVIDERS = [];\n\nexport {NOTIFICATION_MODULE_PROVIDERS};\n","import { Injectable } from '@angular/core';\nimport { Utils } from '@sinequa/core/base';\nimport { Aggregation, AggregationItem, TreeAggregationNode } from '@sinequa/core/web-services';\nimport { ValueItem } from '../format.service';\nimport { ExprParser } from './expr-parser';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ExprBuilder {\n\n    /**\n     * Make a standard selection expression\n     * (resulting in a SQL clause like \"company contains 'BOEING'\")\n     * @param field Name of the field to select (eg. \"company\")\n     * @param value Value of the field to select (eg. \"BOEING\")\n     * @param display Optional string to display that value (eg. \"Boeing\")\n     */\n    makeExpr(field: string, value: string, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: ${ExprParser.escape(value)}`; // company`Boeing`: BOEING\n    }\n\n    /**\n     * Make a boolean expression\n     * @param field Name of the field to select (eg. \"toto\")\n     * @param value Value of the field to select (eg. \"true\")\n     * @param display Optional string to display that value (eg. \"True\")\n     */\n    makeBooleanExpr(field: string, value: boolean, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: ${ExprParser.escape(Utils.toSqlValue(value))}`; // toto`True`: true\n    }\n\n\n    /**\n     * Make a numerical expression using a comparison operator (>, <, <=, >=, etc.)\n     * @param field Name of the field to select (eg. \"modified\")\n     * @param operator Comparison operator used for that selection (eg. \">\")\n     * @param value Value of the field to select (eg. \"2020-12-15\")\n     * @param display Optional string to display that value (eg. \"After Dec 15 2020\")\n     */\n    makeNumericalExpr(\n        field: string,\n        operator: '>' | '>=' | '<' | '<=' | '=' | '<>',\n        value: number | Date | string,\n        display?: string): string {\n\n        field = this.formatField(field, display);\n\n        if(Utils.isString(value)) {\n            value = ExprParser.escape(value);\n        }\n        if(Utils.isDate(value) || Utils.isNumber(value)) {\n            value = Utils.toSqlValue(value);\n        }\n\n        return `${field}:${operator} ${value}`; // modified`After Dec 15 2020`:> 2020-12-15\n    }\n\n\n    /**\n     * Make a list expression\n     * @param field Name of the field to select (eg. \"docformat\")\n     * @param values Values of the field to select (eg. ['htm','pdf'])\n     * @param display Optional string to display that value (eg. \"htm, pdf\")\n     */\n    makeListExpr(field: string, values: string[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: [${values.map(v => ExprParser.escape(v)).join(',')}]`; // docformat`htm, pdf`:[`htm`,`pdf`]\n    }\n\n\n    /**\n     * Make a range expression\n     * @param field Name of the field to select (eg. \"modified\")\n     * @param from Begining of the range (eg. 2020-12-15)\n     * @param to End of the range (eg. 2020-12-20)\n     * @param display Optional string to display that value (eg. \"[Dec 15 2020, Dec 20 2020]\")\n     */\n    makeRangeExpr(\n        field: string,\n        from: number | Date | string,\n        to: number | Date | string,\n        display?: string): string {\n\n        field = this.formatField(field, display);\n        return `${field}: [${Utils.toSqlValue(from)}..${Utils.toSqlValue(to)}]`; // modified`[Dec 15 2020, Dec 20 2020]`: [2020-12-15..2020-12-20]\n    }\n\n\n    /**\n     * Make a RegExp expression\n     * @param field Name of the field to select (eg. \"company\")\n     * @param value Value of the regular expression to match (eg. \"BOE.*\")\n     * @param display Optional string to display that value (eg. \"Boe...\")\n     */\n    makeRegexpExpr(field: string, value: string, display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}:~ ${ExprParser.escape(value)}`; // company`Boe...`:~ BOE.*\n    }\n\n\n    /**\n     * Make a refine expression\n     * @param text The text to add to the query\n     */\n    makeRefineExpr(text: string): string {\n        return `refine: ${ExprParser.escape(text)}`;\n    }\n\n\n    /**\n     * Return an expression that selects multiple values for a field\n     * (All values are ANDed)\n     * @param field Name of the field to select (eg. \"company\")\n     * @param values Values of the field to select (eg. ['IBM','APPLE'])\n     * @param display Optional string to display that value (eg. \"IBM and Apple\")\n     */\n    makeAndExpr(field: string, values: (string | ValueItem)[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: (${this.concatWithOperator(values, 'AND')})`; // company: (IBM AND APPLE AND GOOGLE)\n    }\n\n\n    /**\n     * Return an expression that selects multiple values for a field\n     * (All values are ORed)\n     * This function should be equivalent to using makeListExpr\n     * @param field Name of the field to select (eg. \"company\")\n     * @param values Values of the field to select (eg. ['IBM','APPLE'])\n     * @param display Optional string to display that value (eg. \"IBM and Apple\")\n     */\n    makeOrExpr(field: string, values: (string | ValueItem)[], display?: string): string {\n        field = this.formatField(field, display);\n        return `${field}: (${this.concatWithOperator(values, 'OR')})`; // company: (IBM OR APPLE OR GOOGLE)\n    }\n\n    /**\n     * Combine a list of values with AND or OR operators\n     * @param values the list of values\n     * @param operator the operator\n     */\n    private concatWithOperator(values: (string | ValueItem)[], operator: 'AND' | 'OR') {\n        return values.map(v => {\n            if (Utils.isString(v)){\n                return ExprParser.escape(v);\n            }\n            if (v.display) {\n                return `${ExprParser.escape(v.display)}:${ExprParser.escape(Utils.toSqlValue(v.value))}`;\n            }\n            return ExprParser.escape(Utils.toSqlValue(v.value));\n        }).join(' '+operator+' ');\n    }\n\n    /**\n     * Returns the negative expression of the given expression\n     * eg. NOT(person:Bill GATES)\n     * @param expr\n     */\n    makeNotExpr(expr: string): string {\n        return `NOT (${expr})`;\n    }\n\n    /**\n     * Returns an expression that is the union of given expressions\n     * eg. person:Bill GATES OR company:MICROSOFT\n     * @param exprs\n     */\n    concatOrExpr(exprs: string[]): string {\n        if (exprs.length <= 1) {\n            return exprs[0] || '';\n        }\n        return `(${exprs.join(') OR (')})`;\n    }\n\n\n    /**\n     * Returns an expression that is the intersection of given expressions\n     * eg. person:Bill GATES AND company:MICROSOFT\n     * @param exprs\n     */\n    concatAndExpr(exprs: string[]): string {\n        if (exprs.length <= 1) {\n            return exprs[0] || '';\n        }\n        return `(${exprs.join(') AND (')})`;\n    }\n\n\n    /**\n     * Returns an expression to select the given item\n     * @param field Name of the field to select (eg. \"company\")\n     * @param items A single or list of ValueItem object(s) (eg. content of a record)\n     */\n    makeFieldExpr(field: string, items: ValueItem | ValueItem[], combineWithAnd?: boolean): string {\n        if(!Utils.isArray(items)) {\n            items = [items];\n        }\n        if(items.length === 0) {\n            return \"\"; // Return a falsy string instead of \"()\" or \"``\" which would be truthy\n        }\n        return combineWithAnd? this.makeAndExpr(field, items) : this.makeOrExpr(field, items);\n    }\n\n    /**\n     * Create an expression for the given aggregation item\n     * @param aggregation The aggregation containing this object\n     * @param items The AggregationItem(s) to select\n     * @param combineWithAnd If there are multiple values, combine them with AND (instead of OR)\n     */\n    makeAggregationExpr(aggregation: Aggregation, items: AggregationItem | AggregationItem[], combineWithAnd?: boolean): string {\n        if(!Utils.isArray(items)) {\n            items = [items];\n        }\n        if(aggregation.valuesAreExpressions) {\n            const exprs = items.map(i => i.value.toString()); // .toString() is to avoid typing issues. With valuesAreExpressions = true, item.value is expected to be a string\n            return combineWithAnd? this.concatAndExpr(exprs) : this.concatOrExpr(exprs);\n        }\n        else {\n            const _items = this.asValueItems(items, aggregation.isTree);\n            return this.makeFieldExpr(aggregation.column, _items, combineWithAnd);\n        }\n    }\n\n\n    /**\n     * Combines the field with the optional display value(s)\n     * @param field\n     * @param display\n     */\n    private formatField(field: string, display?: string): string {\n        if(display) {\n            field = `${field}${ExprParser.escape(display)}`;\n        }\n        return field;\n    }\n\n\n    /**\n     * Return the AggregationItem list as a ValueItem list\n     * @param items\n     * @param isTree\n     */\n    private asValueItems(items: AggregationItem[], isTree?: boolean): ValueItem[] {\n        if(isTree) {\n            return items.map(i => {\n                return {\n                    value: (i as TreeAggregationNode).$path + \"*\",\n                    display: i.display || i.value as string\n                };\n            });\n        }\n        return items; // This works because ValueItem and AggregationItem share the value and display properties\n    }\n}\n","import { ArrayView } from \"./array-view\";\nimport { IteratorAdaptor } from \"./iterator-adaptor\";\n\n/**\n * A generic interface describing a name and associated value\n */\nexport interface NameValuePair<U, V> {\n    name: U;\n    value: V;\n}\n\n/**\n * An {@link ArrayView} of {@link NameValuePair}\n */\nexport interface NameValueArrayView<U, V> extends ArrayView<NameValuePair<U, V>> {\n    getName(index: number): U;\n    getValue(index: number): V;\n    items(): IterableIterator<NameValuePair<U, V>>;\n    names(): IterableIterator<U>;\n    values(): IterableIterator<V>;\n}\n\nclass ArrayBasedView<T, U, V> implements NameValueArrayView<U, V> {\n    constructor(\n        private base: T[],\n        private nameSelector: (t: T) => U,\n        private valueSelector: (t: T) => V\n    ) { }\n\n    get length(): number {\n        return this.base.length;\n    }\n\n    get(index: number): NameValuePair<U, V> {\n        return this.toNameValuePair(this.base[index]);\n    }\n\n    getName(index: number): U {\n        return this.nameSelector(this.base[index]);\n    }\n\n    getValue(index: number): V {\n        return this.valueSelector(this.base[index]);\n    }\n\n    private toNameValuePair(obj: T): NameValuePair<U, V> {\n        return { name: this.nameSelector(obj), value: this.valueSelector(obj) };\n    }\n\n    /*\n        Iterators\n    */\n\n    [Symbol.iterator](): IterableIterator<NameValuePair<U, V>> {\n        return this.items();\n    }\n\n    items(): IterableIterator<NameValuePair<U, V>> {\n        return IteratorAdaptor.forIterable(\n            this.base,\n            (obj) => this.toNameValuePair(obj)\n        );\n    }\n\n    names(): IterableIterator<U> {\n        return IteratorAdaptor.forIterable(this.base, this.nameSelector);\n    }\n\n    values(): IterableIterator<V> {\n        return IteratorAdaptor.forIterable(this.base, this.valueSelector);\n    }\n\n    forEach(callback: (item: NameValuePair<U, V>, index?: number, items?: NameValueArrayView<U, V>) => void, thisArg?: any) {\n        for (let idx = 0; idx < this.length; idx++) {\n            const r = this.get(idx);\n            if (thisArg)\n                callback.call(thisArg, r, idx, this);\n            else\n                callback(r, idx, this);\n        }\n        return this;\n    }\n}\n\n/**\n * A helper class for creating {@link NameValueArrayView} instances\n */\n// @dynamic\nexport class NameValueArrayViewHelper {\n    /**\n     * Creates a {@link NameValueArrayView} from an array of {@link NameValuePair} items\n     *\n     * @param items An array of `NameValuePair` items\n     */\n    static fromArray<U, V>(items: NameValuePair<U, V>[]): NameValueArrayView<U, V> {\n        return new ArrayBasedView(items || [], p => p.name, p => p.value);\n    }\n\n    static fromObjects<T>(items: T[], nameKey: keyof T, valueKey: keyof T): NameValueArrayView<T[keyof T], T[keyof T]> {\n        return new ArrayBasedView(items || [], p => p[nameKey], p => p[valueKey]);\n    }\n\n    static from<T, U, V>(items: T[], nameSelector: (t: T) => U, valueSelector: (t: T) => V): NameValueArrayView<U, V> {\n        return new ArrayBasedView(items || [], nameSelector, valueSelector);\n    }\n}\n","export default {\n    \"validation\": {\n        \"min\": \"Der Mindestwert ist {min}\",\n        \"max\": \"Der Wert kann nicht größer sein als {max}\",\n        \"required\": \"Dies ist ein Mussfeld\",\n        \"requiredTrue\": \"Dieses Feld muss ausgefüllt werden\",\n        \"email\": \"Eine gültige E-Mail-Adresse ist einzutragen\",\n        \"minLength\": \"Die Mindestlänge des Wertes beträgt {requiredLength, plural, one {# Zeichen} other {# Zeichen}}\",\n        \"maxLength\": \"Der Wert darf nicht mehr als {requiredLength, plural, one {# Zeichen} other {# Zeichen}} haben\",\n        \"pattern\": \"Der Wert ist ungültig\",\n        \"unique\": \"Dieses Feld muss eindeutig sein\",\n        \"integer\": \"Der Wert muss eine ganze Zahl sein\",\n        \"number\": \"Der Wert muss eine Nummer sein\",\n        \"date\": \"\",\n        \"range\": \"Der erste Wert muss kleiner oder gleich dem zweiten Wert sein\"\n    }\n};\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { MODAL_MODEL, PromptOptions, ModalResult} from \"./modal.service\";\nimport { ModalRef } from \"./modal-ref\";\nimport { Utils } from '@sinequa/core/base';\n\n@Component({\n    selector: \"sq-core-prompt\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <input type=\"text\" formControlName=\"input\" *ngIf=\"!model.rowCount\">\n            <textarea type=\"text\" formControlName=\"input\" spellcheck=\"on\" rows=\"{{model.rowCount}}\" autofocus *ngIf=\"!!model.rowCount\">\n            </textarea>\n            <ng-container *ngIf=\"showError(inputControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"input\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Prompt implements OnInit, OnDestroy {\n    inputControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: PromptOptions,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.inputControl = new FormControl(this.model.output, this.model.validators || Validators.required);\n        this.form = this.formBuilder.group({\n            input: this.inputControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.output = this.inputControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.prompt.title\";\n    }\n\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Connexion\",\n            \"userName\": \"Identifiant\",\n            \"password\": \"Mot de passe\",\n            \"singleSignOn\": \"Authentification unique\",\n            \"signInWith\": \"S'identifier avec ...\"\n        }\n    },\n};\n","import {NgModule} from \"@angular/core\";\n\nimport {NOTIFICATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides a service for managing notifications. It is used by the\n * Sinequa runtime and can also be used for application-specific purposes.\n *\n * The {@link NotificationsInterceptor} in this module should be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        ...NOTIFICATION_MODULE_PROVIDERS\n    ]\n})\nexport class NotificationModule {\n}\n","export * from \"./authentication.service\";\nexport * from \"./token.service\";\nexport * from \"./component-with-login.component\";\nexport * from \"./jwt.service\";\nexport * from \"./login.module\";\nexport * from \"./login.service\";\nexport * from \"./login.component\";\nexport * from \"./login.interceptor\";\nexport * from \"./authentication-oauth.service\";\nexport * from \"./authentication-popup.service\";\nexport * from \"./messages/index\";\n","export default {\n    \"validation\": {\n        \"min\": \"La valeur doit être supérieure ou égale à {min}\",\n        \"max\": \"La valeur ne peut pas être supérieure à {max}\",\n        \"required\": \"Ce champ est obligatoire\",\n        \"requiredTrue\": \"Ce champ doit être positionné\",\n        \"email\": \"Une adresse e-mail valide est exigée\",\n        \"minLength\": \"La valeur doit comporter au moins {requiredLength, plural, one {# caractère} autre que {# caractère}}\",\n        \"maxLength\": \"La valeur ne peut comporter plus de {requiredLength, plural, one {# caractère} autre que {# caractères}}\",\n        \"pattern\": \"La valeur est invalide\",\n        \"unique\": \"Ce champ doit être unique\",\n        \"integer\": \"La valeur doit être un entier\",\n        \"number\": \"La valeur doit être un nombre\",\n        \"date\": \"\",\n        \"range\": \"La première valeur doit être inférieure ou égale à la seconde\"\n    }\n};\n","import {Utils} from \"./utils\";\n\n/**\n * Describes the error codes that can be set in the {@link SqError} class.\n */\nexport enum SqErrorCode {\n    loginCancelled,\n    processedCredentialsError,\n    principalSwitched,\n    autoLoginError\n}\n\n/**\n * A subclass of the built-in {@link Error} class with added `code` and\n * `data` (optional) properties.\n */\nexport class SqError extends Error {\n    // See https://github.com/Microsoft/TypeScript/issues/7639\n    // and https://github.com/Microsoft/TypeScript/issues/1168#issuecomment-107833988\n    /**\n     * The error code associated with the error.\n     */\n    code: SqErrorCode;\n    /**\n     * Arbitrary data associated with the error.\n     */\n    data: any;\n\n    constructor(code: SqErrorCode, message?: string, data?: any) {\n        super(message || SqError.message(code));\n        this.code = code;\n        this.name = \"SqError\";\n        this.message = message || SqError.message(code);\n        if (data) {\n            this.data = data;\n        }\n    }\n\n    /**\n     * Return `true` if the passed `error` is a valid `SqErrorCode` instance.\n     * If the optional `code` parameter is defined then only return true\n     * if the code on `error` matches this value.\n     */\n    static is(error: any, code?: SqErrorCode): error is SqError {\n        if (error instanceof SqError || (error instanceof Error && error.name === \"SqError\")) {\n            return Utils.isUndefined(code) || (error as SqError).code === code;\n        }\n        return false;\n    }\n\n    /**\n     * Return the message corresponding to the passed error `code`.\n     */\n    static message(code: SqErrorCode) {\n        switch (code) {\n            case SqErrorCode.loginCancelled: return \"msg#error.loginCancelled\";\n            case SqErrorCode.processedCredentialsError: return \"msg#error.processedCredentialsError\";\n            case SqErrorCode.principalSwitched: return \"msg#error.principalSwitched\";\n            case SqErrorCode.autoLoginError: return \"msg#error.autoLoginError\";\n            default: return \"msg#error.unknownError\";\n        }\n    }\n}\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enValidation from \"./en\";\nimport _frValidation from \"./fr\";\nimport _deValidation from \"./de\";\n\nconst enValidation = Utils.merge({}, _enValidation, enIntl);\nconst frValidation = Utils.merge({}, _frValidation, frIntl);\nconst deValidation = Utils.merge({}, _deValidation, deIntl);\n\nexport { enValidation, frValidation, deValidation };\n","export * from \"./abstract-intl.pipe\";\nexport * from \"./import-moment\";\nexport * from \"./intl.module\";\nexport * from \"./intl.service\";\nexport * from \"./message.pipe\";\nexport * from \"./messages/index\";\n","export * from \"./public-api\";","import {Injectable, Inject, OnDestroy, Type, InjectionToken, Optional} from \"@angular/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {BehaviorSubject, Observable, forkJoin, of, throwError} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig, CCApp, PrincipalWebService, Principal,\n    UserSettingsWebService, UserSettings} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {AuthenticationService, ProcessedCredentials, Credentials, UserOverride} from \"./authentication.service\";\n\n/**\n * Describes the different session events that are emitted by the {@link LoginService}\n * * `session-start`: emitted after successful login\n * * `session-end`: emitted after logout and also when the {@link LoginService} is destroyed\n * * `session-changed`: emitted whenever the login state changes - login, logout and user override\n */\nexport interface SessionEvent {\n    type: \"session-start\" | \"session-end\" | \"session-changed\";\n}\n\n\n/**\n * An `InjectionToken` to set the component to use for the login modal dialog which is displayed\n * by the {@link LoginService} when performing a manual login. This makes the service independent\n * of any particular UI framework. If manual login is to be used a component must be configured by\n * providing this token.\n */\nexport const MODAL_LOGIN = new InjectionToken<Type<any>>('MODAL_LOGIN');\n\n/**\n * Describes the data retrieved during the login process.\n */\nexport interface LoginData {\n    /**\n     * The application configuration.\n     */\n    app: CCApp;\n    /**\n     * The principal corresponding to the logged in user.\n     */\n    principal: Principal;\n    /**\n     * The user settings for the logged in user.\n     */\n    userSettings: UserSettings;\n}\n\n/**\n * A high-level service to manage user login\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginService implements OnDestroy {\n    /**\n     * `true` if a user is currently logged in\n     */\n    complete: boolean;\n    // getCredentials handling (concurrent calls)\n    protected loginModalPromise: Promise<ModalResult> | undefined;\n    protected processCredentialsPromise: Promise<ProcessedCredentials | undefined> | undefined;\n    protected checkPrincipalPromise: Promise<Principal> | undefined;\n    protected automaticLoginPromise: Promise<any> | undefined;\n    protected _events = new BehaviorSubject<SessionEvent>({type: \"session-changed\"});\n\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        @Inject(MODAL_LOGIN) protected loginModal: Type<any>,\n        @Optional() protected router: Router,\n        protected appService: AppService,\n        protected principalService: PrincipalWebService,\n        protected userSettingsService: UserSettingsWebService,\n        protected modalService: ModalService,\n        protected notificationsService: NotificationsService,\n        protected authenticationService: AuthenticationService) {\n        // NB unload doesn't fire reliably so we listen for beforeunload\n        window.addEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    protected beforeUnloadEventListener = (e: Event) => {\n        this._events.next({type: \"session-end\"});\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n        window.removeEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    /**\n     * Get an `Observable` stream of {@link SessionEvent} events emitted by the service\n     */\n    get events(): Observable<SessionEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the currently logged in {@link Principal}, if any. Note that a principal can exist\n     * without the login being complete. For example, in the situation where access is denied to\n     * the selected app.\n     */\n    get principal(): Principal | undefined {\n        return this.principalService.principal;\n    }\n\n    private setComplete() {\n        const complete = this.complete;\n        this.complete = !!this.appService.app && !!this.principalService.principal && !!this.userSettingsService.userSettings;\n        if (this.complete) {\n            if (!this.authenticationService.userOverrideFailed) {\n                this.notificationsService.hideNotifications();\n            }\n            this.authenticationService.userOverrideFailed = false;\n        }\n        if (!!complete !== !!this.complete) {\n            this._events.next({type: \"session-changed\"});\n        }\n    }\n\n    /**\n     * Perform a logout of the currently logged in user. [AppService.app]{@link AppService#app},\n     * [PrincipalWebService.principal]{@link PrincipalWebService#prinicpal} and\n     * [UserSettingsWebService.userSettings]{@link UserSettingsWebService#userSettings} are reset.\n     * The `session-end` event is emitted\n     */\n    logout() {\n        this._events.next({type: \"session-end\"});\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.authenticationService.deactivateUserOverride();\n        this.authenticationService.logout();\n        this.setComplete();\n    }\n\n    /**\n     * Override the current user to the user specified in `userOverride`. Only an administrator\n     * is permitted to do this. They can revert to the normal login by calling this method with\n     * `undefined`\n     *\n     * @param userOverride The user override\n     */\n    overrideUser(userOverride: UserOverride | undefined) {\n        this.authenticationService.userOverride = userOverride;\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.setComplete();\n        Utils.delay().then(() => this.login());\n    }\n\n    private switchPrincipal(principal: Principal) {\n        if (!principal.isAdministrator) {\n            this.authenticationService.deactivateUserOverride();\n        }\n        this.principalService.principal = principal;\n        this.userSettingsService.userSettings = undefined;\n        Utils.delay().then(() => this.login());\n    }\n\n    /**\n     * Initiate the user login process. The method attempts to retrieve\n     * the [application configuration]{@link CCApp}, the\n     * [logged in user]{@link Principal} and the [user settings]{@link UserSettings}.\n     * If a user is not currently authenticated then authentication is performed using\n     * the {@link AuthenticationService} - OAuth/SAML if configured on the Sinequa Server\n     * or manual using a login modal dialog provided using the {@link MODAL_LOGIN} injection\n     * token.\n     */\n    login(): Observable<LoginData> {\n        const appName = this.appService.appName;\n        if (!appName) {\n            return throwError({error: \"App not specified\"});\n        }\n        let appNeeded: boolean;\n        if (this.router) {\n            const hash = window.location.hash.replace(\"#\", \"\");\n            const href = hash.split(\"?\")[0];\n            const params = new URLSearchParams(hash.split(\"?\")[1]);\n            const queryParams = {}\n            params.forEach((v, k) => queryParams[k] = v);\n\n            // Pick up any user override from the query string\n            const overrideUser = queryParams[\"overrideUser\"];\n            const overrideDomain = queryParams[\"overrideDomain\"];\n            if (overrideUser) {\n                this.authenticationService.userOverride = {\n                    userName: overrideUser,\n                    domain: overrideDomain\n                };\n                delete queryParams[\"overrideUser\"];\n                delete queryParams[\"overrideDomain\"];\n                const url = Utils.makeURL(href);\n                this.router.navigate([url.pathname], {queryParams});\n            }\n        }\n\n        interface ObservableLoginData {\n            app: Observable<CCApp> | undefined;\n            principal: Observable<Principal> | undefined;\n            userSettings: Observable<UserSettings> | undefined;\n        }\n\n        const makeObservables = (): ObservableLoginData => {\n            const observables: ObservableLoginData = {\n                app: undefined,\n                principal: undefined,\n                userSettings: undefined\n            };\n            if (!this.appService.app || (appName && this.appService.app.name !== appName)) {\n                appNeeded = true;\n                observables.app = this.appService.init();\n            }\n            else {\n                observables.app = of(this.appService.app);\n            }\n            let loadUserSettings = false;\n            if (!this.principalService.principal) {\n                loadUserSettings = true;\n                observables.principal = this.principalService.load();\n            }\n            else {\n                observables.principal = of(this.principalService.principal);\n            }\n            if (!this.userSettingsService.userSettings || loadUserSettings) {\n                observables.userSettings = this.userSettingsService.load();\n            }\n            else {\n                observables.userSettings = of(this.userSettingsService.userSettings);\n            }\n            return observables;\n        };\n\n        const observable = this.authenticationService.autoAuthenticate()\n            .pipe(flatMap((success) => {\n                const observables = makeObservables();\n                return forkJoin<ObservableLoginData, keyof ObservableLoginData>(observables);\n            }));\n        Utils.subscribe(observable,\n            (result) => {\n                console.log(\"loginService.login ok: \", result);\n                this.setComplete();\n                if (appNeeded) {\n                    this._events.next({type: \"session-start\"});\n                }\n            },\n            (error) => {\n                console.log(\"loginService.login failed: \", error);\n                // proceed to logout to clean process\n                this.logout();\n                return throwError(error);\n            });\n        return observable;\n    }\n\n    private getAutomaticProvider(): string | undefined {\n        if (this.startConfig.providers) {\n            return Object.keys(this.startConfig.providers).find((value) => {\n                const provider = this.startConfig.providers && this.startConfig.providers[value];\n                return !!provider && (provider as any).automatic;\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Called by the {@link HttpInterceptor} on reception of an `HTTP 401` response.\n     * This will either initiate an auto login process (OAuth/SAML) if configured on\n     * the Sinequa server or display the login modal dialog to request user credentials\n     *\n     * @param response An `HTTP 401` response\n     * @param acceptCurrent If `true` and the `AuthenticationService` currently has\n     * processed credentials then use them instead of starting a new login\n     * @returns A promise that is resolved when credentials have been obtained. Note that\n     * when auto-authentication is configured the promise will be rejected and the browser\n     * redirected to the OAuth/SAML redirect url\n     */\n    getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        if (acceptCurrent && this.authenticationService.processedCredentials) {\n            return Promise.resolve(); // initiate retry\n        }\n        if (!this.startConfig.usePopupForLogin && this.authenticationService.autoLoginActive) {\n            return this.authenticationService.autoAuthenticate().toPromise()\n                .then(result => {\n                    if (result/*auto-authentication initiated*/) {\n                        return Promise.reject(\"performing auto login\");\n                    }\n                    else {\n                        return undefined;\n                    }\n                });\n        }\n        let firstCaller = false;\n        const automaticProvider = this.getAutomaticProvider();\n        if (automaticProvider) {\n            if (!this.automaticLoginPromise) {\n                this.automaticLoginPromise = this.authenticationService.authenticateWithProvider(automaticProvider).toPromise();\n                firstCaller = true;\n            }\n            return this.automaticLoginPromise\n                .then((result) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    this.automaticLoginPromise = undefined;\n                    return result ? Promise.resolve() : Promise.reject(\"popup failed?\");\n                })\n                .catch((reason) => {\n                    this.automaticLoginPromise = undefined;\n                    const error = new SqError(SqErrorCode.autoLoginError);\n                    if (firstCaller) {\n                        this.notificationsService.error(error.message);\n                    }\n                    throw error;\n                });\n        }\n        const credentials: Credentials = {};\n        if (this.authenticationService.processedCredentials) {\n            credentials.userName = this.authenticationService.processedCredentials.userName;\n        }\n        if (!this.loginModalPromise) {\n            this.loginModalPromise = this.modalService.open(this.loginModal, {model: credentials});\n            firstCaller = true;\n        }\n        return this.loginModalPromise\n            .then((result) => {\n                this.loginModalPromise = undefined;\n                // result === ModalResult.Yes is a special return from Login when using AuthenticationService.authenticateWithProvider\n                if (result === ModalResult.OK || result === ModalResult.Yes) {\n                    if (!this.processCredentialsPromise) {\n                        this.processCredentialsPromise = result === ModalResult.Yes ?\n                            Promise.resolve<ProcessedCredentials | undefined>(undefined) :\n                            this.authenticationService.authenticate(credentials, response);\n                    }\n                    return this.processCredentialsPromise\n                        .then((value) => {\n                            this.processCredentialsPromise = undefined;\n                            if (result !== ModalResult.Yes) {\n                                this.authenticationService.processedCredentials = value;\n                            }\n                            if (!this.checkPrincipalPromise) {\n                                this.checkPrincipalPromise = this.principalService.get(false).toPromise();\n                            }\n                            return this.checkPrincipalPromise\n                                .then((principal) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    if (!this.principalService.principal || this.principalService.principal.id === principal.id) {\n                                        // no current principal OR prinicpal unchanged - initiate retry\n                                        return Promise.resolve();\n                                    }\n                                    const error = new SqError(SqErrorCode.principalSwitched);\n                                    if (firstCaller) {\n                                        this.switchPrincipal(principal);\n                                        this.notificationsService.info(error.message);\n                                    }\n                                    throw error;\n                                })\n                                .catch((reason) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    throw reason;\n                                });\n                        })\n                        .catch((reason) => {\n                            this.processCredentialsPromise = undefined;\n                            if (SqError.is(reason, SqErrorCode.principalSwitched)) {\n                                throw reason;\n                            }\n                            throw new SqError(SqErrorCode.processedCredentialsError);\n                        });\n                }\n                else {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                    const error = new SqError(SqErrorCode.loginCancelled);\n                    if (firstCaller) {\n                        this.notificationsService.info(error.message);\n                    }\n                    throw error;\n                }\n            })\n            .catch((reason) => {\n                if (!SqError.is(reason, SqErrorCode.principalSwitched)) {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                }\n                this.loginModalPromise = undefined;\n                throw reason;\n            });\n    }\n}\n","import {Injectable, InjectionToken, Optional, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport atomic from \"atomicjs\";\nimport {IProviders} from \"ng2-ui-auth\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An {@link InjectionToken} to access the app's {@link StartConfig} instance\n */\nexport const START_CONFIG = new InjectionToken<StartConfig>(\"START_CONFIG\");\n\n/**\n * Defines members whose values are automatically deduced from direct {@link StartConfig} members\n */\nexport interface DeducedStartConfig {\n    /**\n     * The origin of the url used to make Sinequa API calls\n     */\n    origin?: string;\n    /**\n     * The application path of the url used to make Sinequa API calls\n     */\n    applicationPath?: string;\n    /**\n     * The url in the browser (origin + pathname)\n     */\n    browserUrl?: string;\n    /**\n     * The path used to make Sinequa API calls, including any virtual directories.\n     * If CORS is active then it will be prefixed by the Sinequa server origin\n     */\n    apiPath?: string;\n    /**\n     * A flag indicating whether the app is running in a CORS context.\n     */\n    corsActive?: boolean;\n}\n\n/**\n * Defines members whose values are retrieved from the Sinequa app configuration and that are available prior to user login\n */\nexport interface PreloginAppConfig {\n    /**\n     * Specifies which storage should be used to hold the CSRF token used to protect Sinequa API calls against\n     * CSRF attacks\n     */\n    authenticationStorage?: 'session' | 'local';\n    /**\n     * Contains the available login providers (only used for popup-based login)\n     */\n    providers?: IProviders;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoOAuthProvider?: string;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoSAMLProvider?: string;\n    /**\n     * A boolean value indicating whether popup-based login should be used\n     */\n    usePopupForLogin?: boolean;\n    /**\n     * The URL to be used to display online help\n     */\n    helpUrl?: string;\n    /**\n     * A boolean value indicating whether auditing is enabled\n     */\n    auditEnabled?: boolean;\n    /**\n     * A boolean value indicating whether ML auditing is enabled\n     */\n    mlAuditEnabled?: boolean;\n    /**\n     * The version of Sinequa running on the server\n     */\n    version?: string;\n    /**\n     * The date of the version of Sinequa running on the server\n     */\n    versionDate?: Date;\n}\n\n/**\n * Contains start-up configuration for the application. An instance of this object\n * must be provided when registering the {@link WebServicesModule} either by providing the START_CONFIG\n * injection token or by using the [forRoot]{@link WebServicesModule#forRoot} static method.\n *\n * Typically only the members declared directly (url, app, production) should be specified.\n * The other values are either deduced from these members or are retrieved from the Sinequa configuration\n */\nexport interface StartConfig extends DeducedStartConfig, PreloginAppConfig {\n    /**\n     * The url of the sinequa server including any virtual directories - defaults to the browser url\n     */\n    url?: string;\n    /**\n     * The app name (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    app?: string;\n    /**\n     * A flag indicating whether the app is running in production mode or not\n     * (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    production?: boolean;\n}\n\n/**\n * Defines Sinequa server configuration that can be held on a web server and retrieved using\n * [StartConfigWebService.fetchServerConfig]{@link StartConfigWebService#fetchServerConfig}\n */\nexport interface ServerConfig {\n    /**\n     * The URL of the Sinequa server including any virtual directories\n     */\n    url?: string;\n    /**\n     * The name of the application\n     */\n    app?: string;\n}\n\n/**\n * A service to manage the initialization of the app's {@link StartConfig} instance. The service\n * is automatically instantiated by an {@link APP_INITIALIZER} in {@link WebServicesModule} and the\n * initialization is performed in the constructor.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class StartConfigWebService {\n    private static API_PATH = \"/api/v1\";\n\n    /**\n     * Initializes the injected {@link StartConfig} instance. Outputs an error to the\n     * console if no instance is injected.\n     *\n     * @param startConfig The start configuration instance\n     */\n    constructor(@Optional() @Inject(START_CONFIG) private startConfig: StartConfig) {\n        if (!startConfig) {\n            console.error(\"START_CONFIG must be provided in your app module\");\n            return;\n        }\n        this.initStartConfig();\n    }\n\n    private getDefaultStartConfig(): StartConfig {\n        const startConfig: StartConfig = {};\n        const browserUrl = Utils.makeURL(window.location.href);\n        let parts = Utils.split(browserUrl.pathname, \"/\");\n        const appSpecifierIndex = parts.findIndex(value => Utils.eqNCN(value, \"app\", \"app-debug\"));\n        if (appSpecifierIndex !== -1 && appSpecifierIndex < parts.length - 1) {\n            const appSpecifier = parts[appSpecifierIndex];\n            startConfig.app = parts[appSpecifierIndex + 1];\n            startConfig.production = appSpecifier === \"app\" ? true : false;\n            parts = parts.slice(0, appSpecifierIndex);\n        }\n        startConfig.url = Utils.addUrl(browserUrl.origin, ...parts);\n        return startConfig;\n    }\n\n    private initStartConfig() {\n        const defaultStartConfig = this.getDefaultStartConfig();\n        const initialStartConfig = Utils.copy(this.startConfig);\n        Utils.extend(this.startConfig, defaultStartConfig, initialStartConfig);\n        const browserUrl = Utils.makeURL(window.location.href);\n        const url = Utils.makeURL(this.startConfig.url!);\n        let apiPath = Utils.addUrl(url.pathname, StartConfigWebService.API_PATH);\n        let applicationPath = url.pathname;\n        const corsActive = url.origin !== browserUrl.origin;\n        if (corsActive) {\n            apiPath = Utils.addUrl(url.origin, apiPath);\n            applicationPath = Utils.addUrl(url.origin, applicationPath);\n        }\n        this.startConfig.origin = url.origin;\n        this.startConfig.applicationPath = applicationPath;\n        this.startConfig.apiPath = apiPath;\n        this.startConfig.corsActive = corsActive;\n        this.startConfig.browserUrl = Utils.addUrl(browserUrl.origin, browserUrl.pathname);\n    }\n\n    /**\n     * Fetches pre-login app configuration from the Sinequa server and merges it\n     * into the start config instance\n     *\n     * @returns An observable of the start config after being merged with the pre-login app configuration\n     */\n    fetchPreLoginAppConfig(): Observable<StartConfig> {\n        return Observable.create(observer => {\n            let _url = Utils.addUrl(this.startConfig.apiPath!, \"app\");\n            _url = Utils.addSearchParams(_url, {\n                app: this.startConfig.app,\n                preLogin: true\n            });\n            atomic(_url, {\n                headers: {\n                    \"sinequa-force-camel-case\": true\n                }\n            })\n                .then(response => {\n                    const initialStartConfig = Utils.copy(this.startConfig);\n                    Utils.extend(this.startConfig, response.data, initialStartConfig);\n                    const versionDate = this.startConfig.versionDate;\n                    if (Utils.isString(versionDate)) { // it will be\n                        this.startConfig.versionDate = Utils.fromSysDateStr(versionDate);\n                    }\n                    observer.next(this.startConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.error(\"Error retrieving app config\");\n                    observer.error(error);\n                });\n        });\n    }\n\n    /**\n     * Retrieves Sinequa server configuration from a web server hosting the app\n     *\n     * @param url A URL to a JSON file containing the Sinequa server configuration\n     *\n     * @returns An observable of the Sinequa server configuration\n     */\n    fetchServerConfig(url?: string): Observable<ServerConfig> {\n        return Observable.create(observer => {\n            if (!url) {\n                const _url = Utils.makeURL(window.location.href);\n                url = Utils.addUrl(_url.pathname, \"sinequa-config.json\");\n            }\n            atomic(url)\n                .then(response => {\n                    // If the config file is empty or not valid json we'll most likely get a string for data\n                    let serverConfig = response.data;\n                    if (!Utils.isObject(serverConfig)) {\n                        console.warn(\"invalid sinequa-config.json file\");\n                        serverConfig = {};\n                    }\n                    observer.next(serverConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.log(\"sinequa-config.json not found\");\n                    observer.next({});\n                    observer.complete();\n                });\n        });\n    }\n}\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {true} other {false}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Server error\",\n        \"loginCancelled\": \"login cancelled\",\n        \"processedCredentialsError\": \"unable to get processed credentials\",\n        \"autoLoginError\": \"login failed\",\n        \"principalSwitched\": \"the logged in user has changed\",\n        \"userOverrideFailure\": \"unable to override user\",\n        \"responseLoadFailure\": \"failed to load response\",\n        \"unknownError\": \"unknown error\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabic\",\n        \"da\": \"Danish\",\n        \"de\": \"German\",\n        \"el\": \"Greek\",\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fi\": \"Finnish\",\n        \"fr\": \"French\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"nl\": \"Dutch\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ro\": \"Romanian\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"th\": \"Thai\",\n        \"zh\": \"Traditional Chinese\",\n        \"zs\": \"Simplified Chinese\",\n        \"zz\": \"Unknown\"\n    }\n};\n","import {Utils, MapOf} from \"@sinequa/core/base\";\nimport {IQuery, Select, Open, SpellingCorrectionMode, AggregationOptions} from \"@sinequa/core/web-services\";\n\n\nexport const advancedFacetPrefix = \"advanced_\";\n\n/**\n * Represents a query for retrieving search results from a Sinequa search engine.\n *\n * The properties are described in the {@link IQuery} interface\n */\nexport class Query implements IQuery {\n    text?: string;\n    action: \"\" | \"search\" | \"open\" | \"aggregate\";\n    select?: Select[];\n    open?: Open[];\n    page?: number;\n    pageSize?: number;\n    tab?: string;\n    scope?: string;\n    sort?: string;\n    basket?: string;\n    isFirstPage?: boolean;\n    strictRefine?: boolean;\n    globalRelevance?: number;\n    questionLanguage?: string;\n    questionDefaultLanguage?: string;\n    spellingCorrectionMode?: SpellingCorrectionMode;\n    spellingCorrectionFilter?: string;\n    documentWeight?: string;\n    textPartWeights?: string;\n    relevanceTransforms?: string;\n    removeDuplicates?: boolean;\n    queryId?: string;\n    aggregations: MapOf<AggregationOptions> | string[];\n    orderBy?: string;\n    groupBy?: string;\n\n    /**\n     * Return a copy of the passed query\n     */\n    static copy(query: Query): Query {\n        if (!query) {\n            return query;\n        }\n        return query.copy();\n    }\n\n    constructor(\n        public name: string) {\n    }\n\n    /**\n     * Return `true` if the query has fulltext search elements\n     */\n    get hasRelevance(): boolean {\n        if (!Utils.isEmpty(this.text)) {\n            return true;\n        }\n        if (this.findSelect(\"refine\")) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Add a select filter to the query\n     *\n     * @param expr The fielded search expression to filter the results\n     * @param facet The name of the associated facet\n     */\n    addSelect(expr: string, facet?: string): number {\n        return this.pushSelect({\n            expression: expr,\n            facet: facet || \"\"\n        });\n    }\n\n    /**\n     * Adds a new `Select` object to the end of the query's `selects`\n     */\n    pushSelect(select: Select): number {\n        if (!this.select) {\n            this.select = [];\n        }\n        return this.select.push(select);\n    }\n\n    /**\n     * Remove the last `Select` object from the `selects` and return it\n     */\n    popSelect(): Select | undefined {\n        if (!this.select) {\n            return undefined;\n        }\n        return this.select.pop();\n    }\n\n    /**\n     * Remove the `Select` object identified by `indexOrFacet`\n     *\n     * @param indexOrFacet either an index in the `selects` array or a facet name\n     * @param all If `true` and `indexOrFacet` is a facet name then all `Select` objects with a matching facet name will be removed\n     */\n    removeSelect(indexOrFacet: number | string, all = false): void {\n        if (!this.select) {\n            return;\n        }\n        if (Utils.isString(indexOrFacet)) {\n            // indexOrFacet is a facet name\n            for (let i = this.select.length - 1; i >= 0; i--) {\n                const _select = this.select[i];\n                if (Utils.eqNC(_select.facet, indexOrFacet)) {\n                    this.select.splice(i, 1);\n                    if (this.select.length === 0) {\n                        delete this.select; // Clean the query if no more select\n                        return;\n                    }\n                    if (!all) {\n                        return;\n                    }\n                }\n            }\n        }\n        else {\n            if (indexOrFacet < 0 || indexOrFacet >= this.select.length) {\n                return;\n            }\n            this.select.splice(indexOrFacet, 1);\n            if (this.select.length === 0) {\n                delete this.select;\n            }\n        }\n    }\n\n    /**\n     * Replace a `Select` with another\n     *\n     * @param index The index in the `selects` array of the `Select to replace\n     * @param select The `Select` to use as a replacement\n     */\n    replaceSelect(index: number, select: Select) {\n        if (!this.select) {\n            return;\n        }\n        this.select.splice(index, 1, select);\n    }\n\n    /**\n     * Find the index of the nth `Select` object matching the passed facet name\n     *\n     * @param facet A facet name\n     * @param ordinal Specifies which `Select` object to retrieve among selects with the same facet name\n     */\n    findSelectIndex(facet: string, ordinal = 0): number {\n        if (!this.select) {\n            return -1;\n        }\n        let index = 0;\n        let facetOrdinal = 0;\n        let facetIndex = -1;\n        for (const select of this.select) {\n            if (Utils.eqNC(facet, select.facet)) {\n                facetIndex = index;\n                if (facetOrdinal === ordinal) {\n                    break;\n                }\n                facetOrdinal++;\n            }\n            index++;\n        }\n        return facetIndex;\n    }\n\n    /**\n     * Find the first `Select` matching the passed facet name\n     *\n     * @param facet A facet name\n     * @param fromEnd If `true` start searching backwards from the last `Select`\n     */\n    findSelect(facet: string, fromEnd = true): Select | undefined {\n        const facetSelectIndex = this.findSelectIndex(facet, fromEnd ? -1 : 0);\n        return facetSelectIndex >= 0 ? this.select && this.select[facetSelectIndex] : undefined;\n    }\n\n    /**\n     * Return the last `Select` object\n     */\n    lastSelect(): Select | undefined {\n        if (!this.select) {\n            return undefined;\n        }\n        return this.select[this.select.length - 1];\n    }\n\n    /**\n     * Return the number of `Select` objects\n     */\n    get selectLength(): number {\n        if (!this.select) {\n            return 0;\n        }\n        return this.select.length;\n    }\n\n    /**\n     * Add an `Open` filter to the query. This is typically used to load children of tree nodes\n     *\n     * @param expr The fielded search expression specifying the node to expand\n     * @param aggregation The associated aggregation\n     */\n    addOpen(expr: string, aggregation: string) {\n        if (!this.open || !Utils.isArray(this.open)) {\n            this.open = [];\n        }\n        return this.open.push({\n            expression: expr,\n            aggregation\n        });\n    }\n\n    /**\n     * Clear all fields in the query except the name\n     */\n    clear(): void {\n        const name = this.name;\n        Utils.clearObject(this);\n        this.name = name;\n    }\n\n    /**\n     * Remove advanced search select(s) from the query\n     */\n    toStandard(): Query {\n        const advancedSelect = this.select?.filter(\n          (select: Select) => select.facet && select.facet.startsWith(advancedFacetPrefix)\n        )\n        advancedSelect?.forEach(\n          (select) => this.removeSelect(select.facet, true)\n        )\n        return this;\n    }\n\n    /**\n     * Return a copy of this query\n     */\n    copy(): Query {\n        const query = new Query(this.name);\n        Utils.copy(this, query);\n        return query;\n    }\n\n    /**\n     * Return a copy of this query but without any advanced select\n     */\n    copyStandard(): Query {\n        const query = this.copy();\n        return query.toStandard();\n    }\n\n    /**\n     * Remove all properties from the query except advanced search select(s) and optionally `text`\n     *\n     * @param withText If `true` do not remove the `text` field\n     */\n    toAdvanced(withText: boolean = false): Query {\n        for (const property in this) {\n            if (this.hasOwnProperty(property) && !Utils.eqNC(property, \"select\") && (!withText || !Utils.eqNC(property, \"text\"))) {\n                delete this[property];\n            }\n        }\n        const notAdvancedSelect = this.select?.filter(\n          (select: Select) => select.facet && !select.facet.startsWith(advancedFacetPrefix)\n        )\n        notAdvancedSelect?.forEach(\n          (select) => this.removeSelect(select.facet)\n        )\n        return this;\n    }\n\n    /**\n     * Return a copy of this query including just the advanced fields and optionally `text`\n     *\n     * @param withText If `true` include the `text` field\n     */\n    copyAdvanced(withText: boolean = false): Query {\n        const query = this.copy();\n        return query.toAdvanced(withText);\n    }\n\n    /**\n     * Tests whether this query has advanced search selections\n     */\n    hasAdvanced(): boolean {\n        return !!this.select?.find(s => s.facet && s.facet.startsWith(advancedFacetPrefix));\n    }\n\n    /**\n     * Initialize this query from the passed JSON string\n     *\n     * @param jquery JSON in string form\n     */\n    fromJson(jquery: string): Query {\n        this.clear();\n        const query = Utils.fromJson(jquery);\n        // convert select and open\n        const select = query.select;\n        if (Utils.isArray(select)) {\n            query.select = select.map<Select>((value: Select | string[]) => {\n                if (Utils.isArray(value)) {\n                    return {\n                        expression: value[0],\n                        facet: value[1]\n                    };\n                }\n                else {\n                    return value;\n                }\n            });\n        }\n        const open = query.open;\n        if (Utils.isArray(open)) {\n            query.open = open.map<Open>((value: Open | string[]) => {\n                if (Utils.isArray(value)) {\n                    return {\n                        expression: value[0],\n                        aggregation: value[1]\n                    };\n                }\n                else {\n                    return value;\n                }\n            });\n        }\n        Utils.extend(this, query);\n        return this;\n    }\n\n    /**\n     * Returns a JSON representation of this query where `Select` and `Open` objects are expressed as tuple arrays for conciseness\n     */\n    toJsonForQueryString(): string {\n        const o: any = {};\n        Utils.merge(o, this);\n        if (this.select) {\n            o.select = this.select.map<string[]>((value) => {\n                const a = [value.expression];\n                if (value.facet) {\n                    a.push(value.facet);\n                }\n                return a;\n            });\n        }\n        if (this.open) {\n            o.open = this.open.map<string[]>((value) => [value.expression, value.aggregation]);\n        }\n        return Utils.toJson(o);\n    }\n\n    /**\n     * Return a hash value of this query that excludes any pagination parameters\n     */\n    hash(): string {\n        const obj: any = {};\n        Utils.mergeAndSort(obj, this);\n        // remove pagination\n        delete obj.page;\n        delete obj.pageSize;\n        const str = Utils.toJson(obj);\n        return Utils.sha512(str);\n    }\n}\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SqHttpClient } from \"./http-client\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Results } from \"./query.web.service\";\r\nimport { StartConfig, START_CONFIG } from \"./start-config.web.service\";\r\n\r\nexport type Dataset = {[key: string]: Results|DatasetError};\r\n\r\nexport interface DatasetError {\r\n    errorCode: number;\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface DatasetDescription {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\n/**\r\n * A service to notify the audit manager on the Sinequa server of client-side events\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DatasetWebService extends HttpService {\r\n    private static readonly endpoint = \"search.dataset\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        protected httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    /**\r\n     * Return the list of queries configured in the given\r\n     * dataset web service.\r\n     * @param webServiceName name of the web service\r\n     */\r\n    list(webServiceName: string): Observable<DatasetDescription[]> {\r\n        return this.httpClient.get<DatasetDescription[]>(\r\n            `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param query name of the query\r\n     * @param params parameters of the queries\r\n     */\r\n    get(webServiceName: string, query: string, parameters = {}): Observable<Results|DatasetError> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}/${query}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets[query]));\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param params parameters of the queries\r\n     */\r\n    getAll(webServiceName: string, parameters = {}): Observable<Dataset> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets));\r\n    }\r\n\r\n}","export * from \"./public-api\";","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {IQuery} from \"./query/query\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {catchError, distinctUntilChanged, shareReplay} from \"rxjs/operators\";\n\n/**\n * Describes highlight data for a set of categories\n */\nexport interface HighlightDataPerCategory {\n    [key: string] : CategoryHighlightData;\n}\n\n/**\n * Describes highlight data for a category\n */\nexport interface CategoryHighlightData {\n    categoryDisplayLabel: string;\n    categoryDisplayLabelPlural: string;\n    categoryFilterAllLabel: string;\n    categoryFilterNoneLabel: string;\n    values: HighlightValue[];\n}\n\n/**\n * Describes a highlight value\n */\nexport interface HighlightValue {\n    value: string;\n    displayValue: string;\n    locations: Location[];\n}\n\n/**\n * Describes a single highlight location\n */\nexport interface Location {\n    start: number;\n    enclosingLength: number;\n}\n\n/**\n * Describes highlight data for a set of locations\n */\nexport interface HighlightDataPerLocation {\n    [index: number]: {\n        start: number,\n        length: number,\n        values: string[],\n        displayValue: string,\n        positionInCategories: { [category: string]: number }\n    };\n\n    size(): number;\n}\n\n/**\n * Describes the data returned by [PreviewWebService.get]{@link PreviewWebService#get}\n */\nexport interface PreviewData {\n    record: Record;\n    resultId: string;\n    cacheId: string;\n    highlightsPerCategory: HighlightDataPerCategory;\n    highlightsPerLocation: HighlightDataPerLocation;\n    documentCachedContentUrl: string;\n}\n\n/**\n * A service for calling the preview web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PreviewWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets {@link PreviewData} for a document in the context of a {@link IQuery}\n     *\n     * @param id The document id\n     * @param query The query context\n     * @param auditEvents Audit events to store on the server\n     */\n    public get(id: string, query: IQuery, auditEvents?: AuditEvents): Observable<PreviewData> {\n        return this.httpClient.post<PreviewData>(this.makeUrl(\"preview\"), {\n            app: this.appName,\n            action: \"get\",\n            id,\n            query,\n            browserUrl: this.startConfig.browserUrl,\n            $auditRecord: auditEvents\n        }).pipe(shareReplay(1));\n    }\n    \n    /**\n     * Gets document's preview HTML content\n     * \n     * @param url The document preview URL\n     * @returns \n     */\n    public getHtmlPreview(url: string): Observable<any> {\n        return this.httpClient.get(url, {responseType: \"text\"}).pipe(\n            catchError(err => throwError(err)),\n            distinctUntilChanged(),\n            shareReplay(1)\n        );                \n    }\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Anmeldung\",\n            \"userName\": \"Benutzername\",\n            \"password\": \"Passwort\",\n            \"singleSignOn\": \"Einmalanmeldung (Single sign-on)\",\n            \"signInWith\": \"Anmelden mit...\"\n        }\n    }\n};\n","import {Utils} from \"./utils\";\n\n/**\n * Defines the different pattern types\n * `Empty`: no pattern\n * `RegExp`: a regular expression pattern\n * `Value`: a literal value\n */\nexport enum PatternType {\n    Empty = 0,\n    RegExp = 1,\n    // WildCard = 2,\n    Value = 3\n}\n\n/**\n * A class that represents a single pattern. The pattern type is deduced automatically from the input pattern text.\n *\n * `<empty string>` => `Empty`\n * `<pattern with wildcards ?*>` => `RegExp` (wildcards are converted to regular expressions)\n * `<pattern starting with ~>` => `RegExp` (the text following the ~ character is treated as a regular expression)\n * `<any other value>` => `Value` (a literal value that is matched as-is)\n */\nexport class Pattern {\n    private _type: PatternType;\n    public get type(): PatternType {\n        return this._type;\n    }\n    private reg?: RegExp;\n    private preparedPattern1?: string;\n    // private preparedPattern2: string;\n    private _text?: string;\n    public get text(): string | undefined {\n        return this._text;\n    }\n\n    public static getPatternType(pattern: string): PatternType {\n        if (!pattern) {\n            return PatternType.Empty;\n        }\n        if (pattern[0] === \"~\" || pattern.includes(\"*\") || pattern.includes(\"?\")) {\n            return PatternType.RegExp;\n        }\n        return PatternType.Value;\n    }\n\n    public static isPattern(pattern: string): boolean {\n        if (!pattern) {\n            return false;\n        }\n        if (pattern[0] === \"~\" || pattern.includes(\"*\") || pattern.includes(\"?\")) {\n            return true;\n        }\n        return false;\n    }\n\n    public static doMatch(pattern: string, text: string): boolean {\n        const _pattern = new Pattern();\n        _pattern.load(pattern);\n        return _pattern.isMatch(text);\n    }\n\n    public static wildcardToRegex(pattern: string): string {\n        if (!pattern) {\n            return pattern;\n        }\n        return \"^\" + Utils.regExEscape(pattern).replace(\"\\\\*\", \".*\").replace(\"\\\\?\", \".\") + \"$\";\n    }\n\n    public constructor(pattern?: string) {\n        if (!pattern) {\n            this.clear();\n        }\n        else {\n            this.load(pattern);\n        }\n    }\n\n    private static cleanPattern(s: string): string {\n        if (!s) {\n            return s;\n        }\n        const sb: string[] = [];\n        let lastIsStar = false;\n        for (const ch of s) {\n            if (ch === \"*\") {\n                if (!lastIsStar) {\n                    lastIsStar = true;\n                    sb.push(ch);\n                }\n            }\n            else {\n                lastIsStar = false;\n                sb.push(ch);\n            }\n        }\n        return sb.join(\"\");\n    }\n\n    public clear():void {\n        this.reg= undefined;\n        this._text = undefined;\n        this.preparedPattern1 = undefined;\n        // this.preparedPattern2 = undefined;\n        this._type = PatternType.Empty;\n    }\n\n    public isEmpty(): boolean {\n        return this._type === PatternType.Empty;\n    }\n\n    public load(pattern: string): boolean {\n        this.clear();\n        try {\n            let s = pattern;\n            this._text = pattern;\n            this._type = Pattern.getPatternType(s);\n            if (this._type === PatternType.Empty) {\n                return true;\n            }\n            if (this._type === PatternType.Value) {\n                this.preparedPattern1= s ;\n                return true;\n            }\n            if (this._type === PatternType.RegExp) {\n                if (s[0] === \"~\") {\n                    s = s.substring(1);\n                }\n                else {\n                    s = Pattern.wildcardToRegex(Pattern.cleanPattern(s));\n                }\n                this.preparedPattern1 = s;\n                this.reg = new RegExp(s, \"i\");\n                return true;\n            }\n            return false;\n        }\n        catch (e) {\n            console.log(`Pattern.Load '${pattern}' error:`, e);\n            this.clear();\n            return false;\n        }\n    }\n\n    public getTypeValueText(): string | undefined {\n        if (this.type === PatternType.Value) {\n            return this.preparedPattern1;\n        }\n        return undefined;\n    }\n\n    public getTypeRegexPattern(): string | undefined {\n        if (this.type === PatternType.RegExp) {\n            return this.preparedPattern1;\n        }\n        return undefined;\n    }\n\n    public isTypeValue(): boolean {\n        return this.type === PatternType.Value;\n    }\n\n    public isMatch(text: string): boolean {\n        text = text || \"\";\n        switch (this._type) {\n            default:\n            case PatternType.Empty:\n                return true;\n            case PatternType.Value:\n                return Utils.eqNC(text, this.preparedPattern1 || \"\");\n            case PatternType.RegExp:\n                return this.reg?.test(text) || false;\n        }\n    }\n}\n\nexport class Patterns {\n    private _text?: string;\n    private _preparedPatterns?: Pattern[];\n    private _values?: { [key: string]: true };\n    private _isEmpty: boolean;\n\n    constructor(text?: string) {\n        this.text = text;\n    }\n\n    public clear(): void {\n        this._preparedPatterns = undefined;\n        this._values = undefined;\n        this._isEmpty = true;\n    }\n\n    public get text(): string | undefined {\n        return this._text;\n    }\n\n    public set text(value: string | undefined) {\n        if (value === this._text) {\n            return;\n        }\n        this._text = value;\n        const l = Utils.split(this._text || \"\", \";\");\n        this.innerSetList(l);\n\n    }\n\n    public getTypeCount(type: PatternType): number {\n        if (!this._preparedPatterns) {\n            return 0;\n        }\n        if (type === PatternType.Value) {\n            return !!this._values ? Object.keys(this._values).length : 0;\n        }\n        let count = 0;\n        for (const pattern of this._preparedPatterns) {\n            if (pattern.type === type) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private innerSetList(l: string[] | undefined): void {\n        this._preparedPatterns = undefined;\n        this._values = undefined;\n        this._isEmpty = true;\n\n        if (!!l) {\n            for (const s of l) {\n                if (!s) {\n                    continue;\n                }\n                const pattern = new Pattern();\n                if (pattern.load(s)) {\n                    if (!this._preparedPatterns) {\n                        this._preparedPatterns = [];\n                    }\n                    this._preparedPatterns.push(pattern);\n                }\n            }\n        }\n        if (this._preparedPatterns) {\n            const c = this._preparedPatterns.length;\n            if (c > 0) {\n                this._isEmpty = false;\n            }\n            for (let i = c - 1; i >= 0; i--) {\n                const pattern = this._preparedPatterns[i];\n                //do values\n                if (pattern.isTypeValue()) {\n                    if (!this._values) {\n                        this._values = {};\n                    }\n                    const val = pattern.getTypeValueText() || \"\";\n                    this._values[val] = true;\n                    this._preparedPatterns.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    public get list(): string[] {\n        return Utils.split(this.text || \"\", \";\");\n    }\n\n    public set list(value: string[]) {\n        this.text = !!value ? value.join(\";\") : undefined;\n        this.innerSetList(value);\n    }\n\n    public setText(list: string[]): void {\n        this.list = list;\n    }\n\n    public isEmpty(): boolean {\n        return this._isEmpty;\n    }\n\n    public hasPatterns(): boolean {\n        return !this.isEmpty();\n    }\n\n    public isMatch(name: string, logdisplay?: string) {\n        if (this.isEmpty()) {\n            return true;\n        }\n\n        if (!!this._values) {\n            if (this._values[name]) {\n                if (!!logdisplay) {\n                    console.log(logdisplay, ` : the pattern '${name}' matches the value '${name}'`);\n                }\n                return true;\n            }\n        }\n\n        if (!!this._preparedPatterns) {\n            for (const pattern of this._preparedPatterns) {\n                if (!pattern) {\n                    continue;\n                }\n                if (pattern.isTypeValue()) {\n                    continue;\n                }\n                if (pattern.isMatch(name)) {\n                    if (!!logdisplay) {\n                        console.log(logdisplay, ` : the pattern '${pattern.text}' matches the value '${name}'`);\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * This class is used to process \"included\" and \"excluded\" patterns typically specified in the Sinequa configuration.\n */\nexport class PatternMatcher {\n    public includedPattern: Patterns;\n    public excludedPattern: Patterns;\n\n    public get included(): string | undefined {\n        return this.includedPattern.text;\n    }\n\n    public set included(value: string | undefined) {\n        this.includedPattern.text = value;\n    }\n\n    public get excluded(): string | undefined {\n        return this.excludedPattern.text;\n    }\n\n    public set excluded(value: string | undefined) {\n        this.excludedPattern.text = value;\n    }\n\n    public set includedList(value: string[]) {\n        this.includedPattern.list = value;\n    }\n\n    public set excludedList(value: string[]) {\n        this.excludedPattern.list = value;\n    }\n\n    public includedLogDisplay?: string;\n    public excludedLogDisplay?: string;\n\n    constructor(includedLogDisplay?: string, excludedLogDisplay?: string) {\n        this.includedPattern = new Patterns();\n        this.excludedPattern = new Patterns();\n        this.includedLogDisplay = includedLogDisplay;\n        this.excludedLogDisplay = excludedLogDisplay;\n    }\n\n    public hasPatterns(): boolean {\n        return this.includedPattern.hasPatterns() || this.excludedPattern.hasPatterns();\n    }\n\n    public isExcluded(name: string): boolean {\n        return !this.isIncluded(name);\n    }\n\n    public isIncluded(name: string): boolean {\n        if (!name) {\n            return true;\n        }\n        if (this.includedPattern.hasPatterns()) {\n            if (this.excludedPattern.hasPatterns()) {\n                if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {\n                    return false;\n                }\n            }\n            if (!this.includedPattern.isMatch(name, this.includedLogDisplay)) {\n                return false;\n            }\n            return true;\n        }\n        else if (this.excludedPattern.hasPatterns()) {\n            if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    }\n\n    public isExplicitlyIncluded(name: string): boolean {\n        return this.includedPattern.hasPatterns() && this.includedPattern.isMatch(name, this.includedLogDisplay);\n    }\n\n    public isExplicitlyExcluded(name: string): boolean {\n        return this.excludedPattern.hasPatterns() && this.excludedPattern.isMatch(name, this.excludedLogDisplay);\n    }\n}\n","import {Directive, Input, Output, OnChanges, OnDestroy, ViewContainerRef, ComponentRef, EventEmitter, Type} from \"@angular/core\";\nimport {LoadComponentService, LoadComponentOptions, LoadedComponent} from \"./load-component.service\";\n\n/**\n * A directive that uses the {@link LoadComponentService} to dynamically load a component.\n * The loaded component's lifecycle is automatically managed with changes to the directive's\n * `options` reflected to the component by rebinding it using {@link LoadComponentService}\n */\n@Directive({\n    selector: \"[sqLoadComponent]\"\n})\nexport class LoadComponentDirective implements OnChanges, OnDestroy {\n    /**\n     * Options for the loading of a component\n     */\n    @Input(\"sqLoadComponent\") options: LoadComponentOptions;\n    /**\n     * Used to emit events when the component is created and destroyed\n     */\n    @Output(\"sqLoadComponent\") eventEmitter = new EventEmitter<{componentRef: ComponentRef<Type<any>> | undefined}>();\n    private loadedComponent: LoadedComponent;\n    private currentComponent: Type<any>;\n\n    constructor(\n        private loadComponentService: LoadComponentService,\n        private viewContainerRef: ViewContainerRef) {\n    }\n\n    /**\n     * Handles any changes to the input `options`. On the first call the component is loaded\n     * and bound. Subsequent changes to the `options` are handled by rebinding the component unless\n     * the component type to load changes in which case the current component is unloaded before\n     * loading the new component.\n     *\n     * The component is loaded using the `ViewContainerRef` associated with the directive\n     */\n    ngOnChanges() {\n        if (this.loadedComponent) {\n            if (this.currentComponent === this.options.component) {\n                this.loadComponentService.bindComponent(this.options, this.loadedComponent);\n                return;\n            }\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.loadedComponent.componentRef.destroy();\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n        this.loadedComponent = this.loadComponentService.loadComponent(this.options, this.viewContainerRef);\n        this.currentComponent = this.options.component;\n        this.eventEmitter.emit({componentRef: !!this.loadedComponent ? this.loadedComponent.componentRef : undefined});\n    }\n\n    /**\n     * Unbinds the loaded component. It is not destroyed here as angular will automatically destroy\n     * the component at the same time as this directive is destroyed as they share the same `ViewContainerRef`\n     */\n    ngOnDestroy() {\n        if (this.loadedComponent) {\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n    }\n}\n","import {HttpParams} from \"@angular/common/http\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {StartConfig} from \"./start-config.web.service\";\n\n/**\n * A base helper class for web services. It holds the {@link StartConfig} for the app\n */\nexport abstract class HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig The start configuration\n     */\n    constructor(\n        protected startConfig: StartConfig) {\n    }\n\n    /**\n     * The name of the application\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Makes an API url by appending the api name to the api path\n     * held on the {@link StartConfig}\n     *\n     * @param api An API name\n     */\n    makeUrl(api: string): string {\n        return Utils.addUrl(this.startConfig.apiPath!, api);\n    }\n\n    /**\n     * Makes an Angular {@link HttpParams} object from a basic Javascript object\n     *\n     * @param params A map of parameter values\n     */\n    makeParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        return Utils.makeHttpParams(params);\n    }\n}"]}