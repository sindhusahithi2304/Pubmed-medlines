import { Injectable, Inject } from "@angular/core";
import { of } from "rxjs";
import { HttpService, START_CONFIG } from "@sinequa/core/web-services";
import { Utils } from "@sinequa/core/base";
import * as i0 from "@angular/core";
import * as i1 from "@sinequa/core/app-utils";
import * as i2 from "@sinequa/core/login";
import * as i3 from "@sinequa/core/web-services";
import * as i4 from "@sinequa/core/intl";
import * as i5 from "@sinequa/components/search";
export class MlAuditService extends HttpService {
    constructor(startConfig, appService, loginService, principalService, intlService, httpClient, searchService) {
        super(startConfig);
        this.appService = appService;
        this.loginService = loginService;
        this.principalService = principalService;
        this.intlService = intlService;
        this.httpClient = httpClient;
        this.searchService = searchService;
        this.requestInitializer = (request) => {
            request.body.$auditRecord = this.ensureAuditRecord(request.body.$auditRecord);
            return true;
        };
    }
    newTimestamp() {
        return (new Date()).toISOString();
    }
    calcDwellTime(event, defaultValue) {
        if (!event.timestamp) {
            return defaultValue;
        }
        return Date.now() - (new Date(event.timestamp)).getTime();
    }
    startSession() {
        this.endSession();
        if (this.principalService.principal) {
            this.session = {
                type: "session",
                subType: "start",
                id: Utils.guid(false),
                timestamp: this.newTimestamp(),
                userId: this.principalService.principal.userId,
                isAdmin: this.principalService.principal.isAdministrator,
                locale: this.intlService.currentLocale.name
            };
        }
    }
    endSession() {
        this.endQuery();
        if (this.session && this.session.sent) {
            this.notifyEvent({
                type: "session",
                subType: "end",
                id: this.session.id,
                dwellTime: this.calcDwellTime(this.session)
            });
        }
        this.session = undefined;
        this.query = undefined;
        this.results = undefined;
    }
    newQuery(event) {
        this.endQuery();
        if (event.query) {
            this.query = {
                type: "query",
                subType: "start",
                id: Utils.guid(false),
                sessionId: this.session ? this.session.id : undefined,
                indexes: this.appService.ccquery ? this.appService.ccquery.searchIndexes : undefined,
                timestamp: this.newTimestamp()
            };
        }
    }
    endQuery() {
        this.endResults();
        if (this.query && this.query.sent) {
            this.notifyEvent({
                type: "query",
                subType: "end",
                id: this.query.id,
                sessionId: this.session ? this.session.id : undefined,
                dwellTime: this.calcDwellTime(this.query)
            });
        }
        this.query = undefined;
        this.results = undefined;
    }
    newResults() {
        this.endResults();
        if (this.searchService.results && this.searchService.results.records) {
            this.results = {
                type: "results",
                subType: "start",
                id: Utils.guid(false),
                queryId: this.query ? this.query.id : undefined,
                sessionId: (!this.query && this.session) ? this.session.id : undefined,
                timestamp: this.newTimestamp(),
                queryText: this.searchService.query.text,
                queryHash: this.searchService.query.hash(),
                page: this.searchService.results.page,
                documentIds: this.searchService.results.records.map(record => record.id),
            };
        }
    }
    endResults() {
        if (this.results && this.results.sent) {
            this.notifyEvent({
                type: "results",
                subType: "end",
                id: this.results.id,
                queryId: this.query ? this.query.id : undefined,
                sessionId: (!this.query && this.session) ? this.session.id : undefined,
                dwellTime: this.calcDwellTime(this.results)
            });
        }
        this.results = undefined;
    }
    flushContext() {
        const events = [];
        if (this.session && !this.session.sent) {
            events.push(this.session);
        }
        if (this.query && !this.query.sent) {
            events.push(this.query);
        }
        if (this.results && !this.results.sent) {
            events.push(this.results);
        }
        if (events.length !== 0) {
            this.notifyEvent(events);
            events.forEach(event => event.sent = true);
        }
    }
    newAction(actionOrActionType, documentIds) {
        this.flushContext();
        const action = {
            type: "action",
            subType: undefined,
            actionType: "click",
            id: Utils.guid(false),
            resultsId: this.results ? this.results.id : undefined,
            queryId: (!this.results && this.query) ? this.query.id : undefined,
            sessionId: (!this.results && !this.query && this.session) ? this.session.id : undefined,
            documentIds: []
        };
        delete action.actionType;
        delete action.documentIds;
        if (Utils.isObject(actionOrActionType)) {
            Utils.merge(action, actionOrActionType);
        }
        else {
            action.actionType = actionOrActionType;
            if (documentIds) {
                action.documentIds = documentIds;
            }
        }
        return action;
    }
    endAction(action) {
        if (action) {
            this.notifyEvent({
                type: "action",
                subType: "end",
                id: action.id,
                resultsId: this.results ? this.results.id : undefined,
                queryId: (!this.results && this.query) ? this.query.id : undefined,
                sessionId: (!this.results && !this.query && this.session) ? this.session.id : undefined,
                dwellTime: this.calcDwellTime(action)
            });
        }
    }
    init() {
        Utils.subscribe(this.loginService.events, (event) => {
            switch (event.type) {
                case "session-start":
                    this.startSession();
                    break;
                case "session-end":
                    this.endSession();
                    break;
            }
        });
        Utils.subscribe(this.searchService.events, (event) => {
            switch (event.type) {
                case "new-query":
                    this.newQuery(event);
                    break;
                case "new-results":
                    this.newResults();
                    break;
            }
        });
    }
    notifyEvent(events) {
        if (!this.startConfig.mlAuditEnabled) {
            return of(undefined);
        }
        const observable = this.httpClient.post(this.makeUrl(MlAuditService.Endpoint), {
            events: events
        });
        Utils.subscribe(observable, (response) => {
            return response;
        }, (error) => {
            console.log("MlAuditService.notify failure - error: ", error);
        });
        return observable;
    }
    notify(actions, documentIds) {
        if (Utils.isString(actions)) {
            return this.notifyEvent(this.newAction(actions, documentIds));
        }
        else if (Utils.isArray(actions)) {
            return this.notifyEvent(actions.map(actionInit => this.newAction(actionInit)));
        }
        else {
            return this.notifyEvent(this.newAction(actions));
        }
    }
    ensureAuditRecord(auditEvents) {
        if (Utils.isObject(auditEvents)) {
            const auditRecord = auditEvents;
            if (auditRecord.auditEvents || auditRecord.mlAuditEvents) {
                if (auditRecord.mlAuditEvents) {
                    return {
                        auditEvents: auditRecord.auditEvents,
                        mlAuditEvents: auditRecord.mlAuditEvents.map(actionInit => this.newAction(actionInit))
                    };
                }
            }
        }
        return auditEvents; // leave unchanged
    }
}
MlAuditService.Endpoint = "ml.audit.notify";
MlAuditService.ɵfac = function MlAuditService_Factory(t) { return new (t || MlAuditService)(i0.ɵɵinject(START_CONFIG), i0.ɵɵinject(i1.AppService), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.PrincipalWebService), i0.ɵɵinject(i4.IntlService), i0.ɵɵinject(i3.SqHttpClient), i0.ɵɵinject(i5.SearchService)); };
MlAuditService.ɵprov = i0.ɵɵdefineInjectable({ token: MlAuditService, factory: MlAuditService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MlAuditService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [START_CONFIG]
            }] }, { type: i1.AppService }, { type: i2.LoginService }, { type: i3.PrincipalWebService }, { type: i4.IntlService }, { type: i3.SqHttpClient }, { type: i5.SearchService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,