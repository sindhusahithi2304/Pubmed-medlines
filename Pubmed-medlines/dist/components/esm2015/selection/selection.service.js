import { Injectable, InjectionToken, Inject } from "@angular/core";
import { Subject } from "rxjs";
import { Action } from "@sinequa/components/action";
import * as i0 from "@angular/core";
import * as i1 from "@sinequa/components/search";
export var SelectionEventType;
(function (SelectionEventType) {
    SelectionEventType[SelectionEventType["SELECT"] = 0] = "SELECT";
    SelectionEventType[SelectionEventType["UNSELECT"] = 1] = "UNSELECT";
    SelectionEventType[SelectionEventType["MOVE"] = 2] = "MOVE";
})(SelectionEventType || (SelectionEventType = {}));
export const defaultSelectionOptions = {
    resetOnNewResults: false,
    resetOnNewQuery: true,
    storage: "id"
};
export const SELECTION_OPTIONS = new InjectionToken("SELECTION_OPTIONS");
export class SelectionService {
    constructor(searchService, selectionOptions) {
        this.searchService = searchService;
        this.selectionOptions = selectionOptions;
        this.selectedRecords = []; // currently selected items
        this.selectionActions = []; // Actions that other services can register onto this service
        this._events = new Subject();
        this.searchService.events.subscribe(event => {
            var _a;
            if (!this.selectionOptions.resetOnNewResults && event.type === "new-results" && this.searchService.haveRecords) {
                const newSelectedRecords = [];
                if ((_a = this.searchService.results) === null || _a === void 0 ? void 0 : _a.records) {
                    for (const record of this.searchService.results.records) {
                        const index = this.selectedRecords.findIndex(item => item.id === record.id);
                        if (index !== -1 && !record.$selected) {
                            record.$selected = true; // Select previously selected records
                            this.selectedRecords.splice(index, 1, record);
                            newSelectedRecords.push(record);
                        }
                    }
                }
                if (newSelectedRecords.length > 0) // Menus might need to be refreshed
                    this._events.next({ type: SelectionEventType.SELECT, records: newSelectedRecords, source: event.type });
            }
            if (this.selectionOptions.resetOnNewResults && event.type === "new-results") {
                this.clearSelectedRecords(event.type);
            }
            if (this.selectionOptions.resetOnNewQuery && event.type === "new-query") {
                this.clearSelectedRecords(event.type);
            }
        });
        this.selectedRecordsAction = this.buildSelectRecordsAction();
        this.selectionActions.push(this.selectedRecordsAction);
        this.events.subscribe({ next: () => {
                this.selectionActions.forEach(action => action.update());
            } });
    }
    /**
     * Emits an event on any (bulk or single) selection and unselection events
     */
    get events() {
        return this._events;
    }
    ngOnDestroy() {
        this._events.complete();
    }
    getItem(record) {
        if (this.selectionOptions.storage === "id") {
            return { id: record.id };
        }
        else if (this.selectionOptions.storage === "record") {
            return record;
        }
        else {
            return this.selectionOptions.storage(record);
        }
    }
    /**
     * Returns a copy of the list of selected records
     */
    getSelectedItems() {
        return this.selectedRecords.slice(0);
    }
    /**
     * Return the list of selected record ids
     */
    getSelectedIds() {
        return this.selectedRecords.map(r => r.id);
    }
    /**
     * @returns true if at least one record is selected
     */
    get haveSelectedRecords() {
        return this.selectedRecords.length > 0;
    }
    getSelectedCount() {
        return this.selectedRecords.length;
    }
    /**
     * @returns true if all records in the search results are selected
     */
    get allRecordsSelected() {
        if (!this.searchService.results || !this.searchService.results.records) {
            return false;
        }
        for (const record of this.searchService.results.records) {
            if (!record.$selected) {
                return false;
            }
        }
        return true;
    }
    selectCurrentRecords(source) {
        const newSelectedRecords = [];
        if (this.searchService.results && this.searchService.results.records) {
            for (const record of this.searchService.results.records) {
                if (!record.$selected) {
                    this.selectedRecords.push(this.getItem(record));
                    newSelectedRecords.push(record);
                    record.$selected = true;
                }
            }
        }
        if (newSelectedRecords.length > 0)
            this._events.next({ type: SelectionEventType.SELECT, records: newSelectedRecords, source });
    }
    /**
     * Toggles the selection of one record or all those in the results.
     * Emits a SelectionEvent if a record is selected or unselected.
     * @param record if provided, will toggle the selection of this record; if not will toggle all records in results
     */
    toggleSelectedRecords(record, source) {
        if (!!record) {
            const index = this.selectedRecords.findIndex(item => item.id === record.id);
            if (index > -1) {
                this.selectedRecords.splice(index, 1);
                record.$selected = false;
            }
            else {
                this.selectedRecords.push(this.getItem(record));
                record.$selected = true;
            }
            // record might not be the one in the search service results (if passing a SelectionItem)
            const ssRecord = this.searchService.getRecordFromId(record.id);
            if (ssRecord) {
                ssRecord.$selected = record.$selected;
            }
            this._events.next({ type: record.$selected ? SelectionEventType.UNSELECT : SelectionEventType.SELECT, records: [record], source });
        }
        else {
            if (this.allRecordsSelected) {
                this.clearSelectedRecords(source);
            }
            else {
                this.selectCurrentRecords(source);
            }
        }
    }
    /**
     * Moves a selected record to a different index;
     * @param record
     * @param newIndex
     */
    moveSelectedRecord(record, newIndex, source) {
        const i = this.selectedRecords.findIndex(r => r.id === record.id);
        if (i === -1) {
            throw new Error(`Record ${record.id} is not in the selected records`);
        }
        this.selectedRecords.splice(i, 1);
        this.selectedRecords.splice(newIndex, 0, this.getItem(record));
        this.events.next({ type: SelectionEventType.MOVE, records: [record], source });
    }
    /**
     * Unselect all selected records
     * Emits a SelectionEvent
     */
    clearSelectedRecords(source) {
        this.selectedRecords.splice(0);
        const newUnselectedRecords = [];
        if (this.searchService.results && this.searchService.results.records) {
            for (const record of this.searchService.results.records) {
                if (record.$selected) {
                    record.$selected = false;
                    newUnselectedRecords.push(record);
                }
            }
        }
        if (newUnselectedRecords.length > 0)
            this._events.next({ type: SelectionEventType.UNSELECT, records: newUnselectedRecords, source });
    }
    buildSelectRecordsAction() {
        return new Action({
            icon: "far fa-square",
            text: "msg#resultsSelector.selectDocuments",
            title: this.allRecordsSelected ? "msg#resultsSelector.unselectDocumentsTitle" : "msg#resultsSelector.selectDocumentsTitle",
            messageParams: { values: { count: this.selectedRecords.length } },
            action: (item, $event) => {
                this.toggleSelectedRecords(undefined, "multiple-selector");
            },
            updater: (item) => {
                item.icon = this.haveSelectedRecords ? "far fa-check-square" : "far fa-square";
                item.title = this.allRecordsSelected ? "msg#resultsSelector.unselectDocumentsTitle" : "msg#resultsSelector.selectDocumentsTitle";
                item.messageParams = { values: { count: this.selectedRecords.length } };
            }
        });
    }
}
SelectionService.ɵfac = function SelectionService_Factory(t) { return new (t || SelectionService)(i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(SELECTION_OPTIONS)); };
SelectionService.ɵprov = i0.ɵɵdefineInjectable({ token: SelectionService, factory: SelectionService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SelectionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.SearchService }, { type: undefined, decorators: [{
                type: Inject,
                args: [SELECTION_OPTIONS]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,