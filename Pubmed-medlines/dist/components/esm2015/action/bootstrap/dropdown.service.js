import { Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { Keys } from "@sinequa/core/base";
import * as i0 from "@angular/core";
export const gClassName = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    DROPRIGHT: 'dropright',
    DROPLEFT: 'dropleft',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left',
    POSITION_STATIC: 'position-static'
};
export const gSelector = {
    DROPDOWN: '.dropdown',
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
};
export const gAttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end',
    RIGHT: 'right-start',
    RIGHTEND: 'right-end',
    LEFT: 'left-start',
    LEFTEND: 'left-end'
};
export class BsDropdownService {
    constructor(rendererFactory) {
        this.dataApiKeydownHandler = (event) => {
            const descendant = this.matchDescendant(document.documentElement, event, `${gSelector.DATA_TOGGLE},${gSelector.MENU}`);
            if (!descendant) {
                return;
            }
            // If not input/textarea:
            //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
            // If input/textarea:
            //  - If space key => not a dropdown command
            //  - If key is other than escape
            //    - If key is not up or down => not a dropdown command
            //    - If trigger inside the menu => not a dropdown command
            if (/input|textarea/i.test(event.target.tagName) ?
                event.which === Keys.space || event.which !== Keys.esc &&
                    (event.which !== Keys.down && event.which !== Keys.up || event.target.closest(gSelector.MENU)) :
                !(event.which === Keys.up || event.which === Keys.down || event.which === Keys.esc)) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            if ( /*TODO descendant.disabled || */descendant.classList.contains(gClassName.DISABLED)) {
                return;
            }
            const parent = this.getParentFromElement(descendant);
            const isActive = parent instanceof HTMLElement && parent.classList.contains(gClassName.SHOW);
            if (!isActive && event.which === Keys.esc) {
                return;
            }
            if (!isActive || isActive && (event.which === Keys.esc || event.which === Keys.space)) {
                if (event.which === Keys.esc) {
                    const toggle = parent instanceof Element && parent.querySelector(gSelector.DATA_TOGGLE);
                    if (toggle instanceof HTMLElement) {
                        // toggle.dispatchEvent(new Event("focus", {bubbles: true}));
                        // NB $(toggle).trigger('focus') will set the focus on toggle
                        toggle.focus();
                    }
                }
                descendant.dispatchEvent(new Event("click", { bubbles: true }));
                return;
            }
            let items = [];
            if (parent instanceof Element) {
                items = items.slice.call(parent.querySelectorAll(gSelector.VISIBLE_ITEMS))
                    .filter((item) => item instanceof HTMLElement && (item.offsetWidth > 0 || item.offsetHeight > 0));
            }
            if (items.length === 0) {
                return;
            }
            let index = items.indexOf(event.target);
            if (event.which === Keys.up && index > 0) { // Up
                index--;
            }
            if (event.which === Keys.down && index < items.length - 1) { // Down
                index++;
            }
            if (index < 0) {
                index = 0;
            }
            items[index].focus();
        };
        this.clearMenus = (event) => {
            if (event && (event.which === 3 /*RIGHT_MOUSE_BUTTON_WHICH*/ ||
                event.type === 'keyup' && event.which !== Keys.tab)) {
                return;
            }
            this._events.next({ type: "clear", sourceEvent: event });
        };
        this.toggle = (event) => {
            const descendant = this.matchDescendant(document.documentElement, event, gSelector.DATA_TOGGLE);
            if (!descendant) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            this._events.next({ type: "toggle", element: descendant });
        };
        this.formChildClick = (event) => {
            if (!this.matchDescendant(document.documentElement, event, gSelector.FORM_CHILD)) {
                return;
            }
            event.stopPropagation();
        };
        this._events = new Subject();
        this.renderer = rendererFactory.createRenderer(null, null);
        this.unlisteners = [];
        this.unlisteners.push(this.renderer.listen(document, "keydown", this.dataApiKeydownHandler));
        this.unlisteners.push(this.renderer.listen(document, "click", this.clearMenus));
        this.unlisteners.push(this.renderer.listen(document, "keyup", this.clearMenus));
        this.unlisteners.push(this.renderer.listen(document, "click", this.toggle));
        this.unlisteners.push(this.renderer.listen(document, "click", this.formChildClick));
    }
    ngOnDestroy() {
        this._events.complete();
        this.unlisteners.forEach((unlistener) => unlistener());
    }
    get events() {
        return this._events;
    }
    matchDescendant(base, event, selector) {
        let element = event.target;
        while (element && element !== base) {
            if (element.matches(selector)) {
                return element;
            }
            element = element.parentElement;
        }
        return null;
    }
    getSelectorFromElement(element) {
        let selector = element.getAttribute('data-target');
        if (!selector || selector === '#') {
            const hrefAttr = element.getAttribute('href');
            selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
        }
        try {
            return document.querySelector(selector) ? selector : null;
        }
        catch (err) {
            return null;
        }
    }
    getParentFromElement(element) {
        let parent = null;
        const selector = this.getSelectorFromElement(element);
        if (selector) {
            parent = document.querySelector(selector);
        }
        if (!parent) {
            // Account for scroll menus and sub menus
            parent = element.parentElement;
            while (parent &&
                (parent.classList.contains("sq-scroll-menu") ||
                    parent.classList.contains("sq-scroll-menu-item") ||
                    parent.classList.contains("dropdown-submenu"))) {
                parent = parent.parentElement;
            }
        }
        return parent;
    }
    raiseClear() {
        this._events.next({ type: "clear", sourceEvent: undefined });
    }
}
BsDropdownService.ɵfac = function BsDropdownService_Factory(t) { return new (t || BsDropdownService)(i0.ɵɵinject(i0.RendererFactory2)); };
BsDropdownService.ɵprov = i0.ɵɵdefineInjectable({ token: BsDropdownService, factory: BsDropdownService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(BsDropdownService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: i0.RendererFactory2 }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,