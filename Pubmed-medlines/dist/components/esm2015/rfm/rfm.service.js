import { Injectable } from "@angular/core";
import { RFMDisplay } from "@sinequa/core/web-services";
import { Utils } from "@sinequa/core/base";
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@sinequa/core/app-utils";
import * as i2 from "@sinequa/core/web-services";
import * as i3 from "@sinequa/components/search";
export var RFMEventType;
(function (RFMEventType) {
    RFMEventType["ClickSet"] = "RFM_ClickSet";
    RFMEventType["ClickReset"] = "RFM_ClickReset";
    RFMEventType["Like"] = "RFM_Like";
    RFMEventType["LikeReset"] = "RFM_LikeReset";
    RFMEventType["Dislike"] = "RFM_Dislike";
    RFMEventType["Important"] = "RFM_Important";
    RFMEventType["ImportantReset"] = "RFM_ImportantReset";
    RFMEventType["Ban"] = "RFM_Ban";
})(RFMEventType || (RFMEventType = {}));
export class RFMService {
    constructor(appService, rfmService, searchService, auditService) {
        this.appService = appService;
        this.rfmService = rfmService;
        this.searchService = searchService;
        this.auditService = auditService;
        this._events = new Subject();
        this._subscription = this.searchService.resultsStream.subscribe(results => {
            this.updateRfm(results);
        });
    }
    get events() {
        return this._events;
    }
    ngOnDestroy() {
        this._events.complete();
        this._subscription.unsubscribe();
    }
    getMenuActions(config) {
        const actions = [RFMDisplay.positiveRate, RFMDisplay.unrate];
        if (config.negAvailable)
            actions.push(RFMDisplay.negativeRate);
        return actions;
    }
    static getActionName(rfmDisplay) {
        switch (rfmDisplay) {
            case RFMDisplay.positiveRate:
                return "pos";
            case RFMDisplay.mainlyPosRate:
                return "mpos";
            case RFMDisplay.unrate:
                return "unrated";
            case RFMDisplay.mainlyNegRate:
                return "mneg";
            case RFMDisplay.negativeRate:
                return "neg";
            default:
                return "none";
        }
    }
    static toAuditEventType(action, evt) {
        let aet;
        switch (action) {
            case "important":
                switch (evt) {
                    case RFMDisplay.positiveRate:
                        aet = RFMEventType.Important;
                        break;
                    case RFMDisplay.unrate:
                        aet = RFMEventType.ImportantReset;
                        break;
                    case RFMDisplay.negativeRate:
                        aet = RFMEventType.Ban;
                        break;
                }
                break;
            case "like":
                switch (evt) {
                    case RFMDisplay.positiveRate:
                        aet = RFMEventType.Like;
                        break;
                    case RFMDisplay.unrate:
                        aet = RFMEventType.LikeReset;
                        break;
                    case RFMDisplay.negativeRate:
                        aet = RFMEventType.Dislike;
                        break;
                }
                break;
            case "click":
                switch (evt) {
                    case RFMDisplay.positiveRate:
                        aet = RFMEventType.ClickSet;
                        break;
                    case RFMDisplay.unrate:
                        aet = RFMEventType.ClickReset;
                        break;
                    //case RFMDisplay.negativeRate:
                    //aet = AuditEventType.RFM_Dislike;
                    //break;
                }
                break;
        }
        return aet;
    }
    notifyRfmAction(rfmEvent, record, results) {
        this.auditService.notifyDocument(rfmEvent, record, results, undefined, {
            queryhash: this.searchService.results ? this.searchService.results.rfmQueryHash : undefined,
            querytext: this.searchService.query.text,
            querylang: this.searchService.query.questionLanguage || (this.appService.ccquery && this.appService.ccquery.questionLanguage)
        });
    }
    /**
     * Called every time new results come in.
     * Performs a request for
     * @param results
     */
    updateRfm(results) {
        if (results && results.records) {
            const ccquery = this.appService.ccquery;
            if (ccquery && ccquery.rFM) {
                Utils.subscribe(this.rfmService.getRfmData(ccquery.rFM, results), (value) => {
                    if (value) {
                        for (const record of results.records) {
                            const rfmData = value[record.id];
                            if (!!rfmData) {
                                record.rfm = rfmData;
                            }
                        }
                        this._events.next({ type: "updated" });
                    }
                });
            }
        }
    }
}
RFMService.ɵfac = function RFMService_Factory(t) { return new (t || RFMService)(i0.ɵɵinject(i1.AppService), i0.ɵɵinject(i2.RfmWebService), i0.ɵɵinject(i3.SearchService), i0.ɵɵinject(i2.AuditWebService)); };
RFMService.ɵprov = i0.ɵɵdefineInjectable({ token: RFMService, factory: RFMService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(RFMService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.AppService }, { type: i2.RfmWebService }, { type: i3.SearchService }, { type: i2.AuditWebService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,