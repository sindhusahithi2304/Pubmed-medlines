import { ExprParser, Expr } from "@sinequa/core/app-utils";
import { Utils } from "@sinequa/core/base";
/**
 * Description of the Breadcrumbs class - link to {@link SearchService}
 */
export class Breadcrumbs {
    constructor(appService, searchService, query) {
        this.appService = appService;
        this.searchService = searchService;
        this.query = query.copy();
        this.items = [];
        this.advanced = [];
        this.fields = new Set();
    }
    static create(appService, searchService, query) {
        const breadcrumbs = new Breadcrumbs(appService, searchService, query);
        return breadcrumbs.init();
    }
    get activeIndex() {
        return this.items.findIndex(item => item.active);
    }
    get activeItem() {
        const index = this.activeIndex;
        if (index !== -1) {
            return this.items[index];
        }
        return undefined;
    }
    get text() {
        return this.items[0].display;
    }
    get textExpr() {
        return this.items[0].expr;
    }
    get selects() {
        return this.items.slice(1);
    }
    get activeSelects() {
        return this.items.slice(1, this.activeIndex + 1);
    }
    get activeItems() {
        return this.items.slice(0, this.activeIndex + 1);
    }
    get isEmpty() {
        if (this.items.length === 0) {
            return true;
        }
        if (this.items.length === 1 && this.items[0].hidden) {
            return true;
        }
        return false;
    }
    find(expr) {
        let expr1 = expr;
        const init = expr;
        if (!(expr instanceof Expr)) {
            expr1 = new Expr(init);
        }
        if (!expr1.every((expr2) => {
            const field = expr2.exprContext.appService.resolveColumnAlias(expr2.field);
            return !field || this.fields.has(field);
        })) {
            return undefined;
        }
        for (const expr3 of this.advanced) {
            const expr2 = expr3.find(expr1);
            if (expr2) {
                return expr2;
            }
        }
        for (const select of this.selects) {
            if (select.expr) {
                const expr2 = select.expr.find(expr1);
                if (expr2) {
                    return expr2;
                }
            }
        }
        if (this.textExpr) {
            let expr2 = this.textExpr.find(expr1, (expr3) => expr3.isStructured);
            if (expr2) {
                return expr2;
            }
            expr2 = this.textExpr.find(expr1, (expr3) => !expr3.isStructured);
            if (expr2) {
                return expr2;
            }
        }
        return undefined;
    }
    findSelect(facet, exprOrField) {
        // Active selects only, most recent first
        const activeSelects = this.activeSelects;
        for (let i = activeSelects.length - 1; i >= 0; i--) {
            const select = activeSelects[i];
            if (select.expr && (!facet || Utils.eqNC(facet, select.facet || ""))) {
                if (!exprOrField) {
                    return select.expr;
                }
                if (Utils.isString(exprOrField)) {
                    if (Utils.eqNC(exprOrField, select.expr.field || "")) {
                        return select.expr;
                    }
                }
                else {
                    const expr1 = select.expr.find(exprOrField);
                    if (expr1) {
                        return expr1;
                    }
                }
            }
        }
        return undefined;
    }
    addFields(expr) {
        if (expr) {
            const fields = expr.getFields();
            fields.forEach((field) => {
                this.fields.add(field);
            });
        }
    }
    makeBreadcrumbsItemFromExpr(text) {
        let expr = this.appService.parseExpr(text);
        if (!(expr instanceof Expr)) {
            expr = this.appService.parseExpr(ExprParser.escape(text));
        }
        if (expr instanceof Expr) {
            return { expr, display: expr };
        }
        else {
            return { expr: undefined, display: expr };
        }
    }
    initItems() {
        // Text
        if (this.query && this.query.text) {
            const item = this.makeBreadcrumbsItemFromExpr(this.query.text);
            this.items.push(item);
            this.addFields(item.expr);
        }
        else {
            this.items.push({
                expr: undefined,
                display: this.query && this.query.basket ? this.query.basket : "msg#breadcrumbs.emptySearch",
                hidden: this.appService.ccquery && !this.appService.ccquery.allowEmptySearch &&
                    this.searchService.isEmptySearchIgnoreSelects(this.query)
            });
        }
        // Selects
        if (this.query && this.query.select) {
            for (const select of this.query.select) {
                const item = this.makeBreadcrumbsItemFromExpr(select.expression);
                item.facet = select.facet;
                this.items.push(item);
                this.addFields(item.expr);
            }
        }
        // Set last item active
        this.items[this.items.length - 1].active = true;
    }
    init() {
        this.initItems();
        return this;
    }
    selectItem(item) {
        const index = this.items.indexOf(item);
        if (this.query && index !== -1) {
            const query = this.query.copy();
            if (query.select) {
                query.select.splice(index);
            }
            this.items.forEach(item1 => item1.active = false);
            item.active = true;
            return query;
        }
        return undefined;
    }
    removeItem(item) {
        const index = this.items.indexOf(item);
        if (this.query && index !== -1) {
            let next;
            if (index === 0) { // Text
                if (this.query.text || this.query.basket) {
                    delete this.query.text;
                    delete this.query.basket;
                    item.expr = undefined;
                    item.display = "msg#breadcrumbs.emptySearch";
                    item.hidden = this.appService.ccquery && !this.appService.ccquery.allowEmptySearch &&
                        this.searchService.isEmptySearchIgnoreSelects(this.query);
                }
                if (!item.hidden) {
                    next = this.activeItem;
                }
                else if (this.items.length > 1) {
                    next = this.items[this.items.length - 1];
                }
            }
            else {
                // Find next item to activate, if necessary
                const activeIndex = this.activeIndex;
                if (activeIndex >= index) {
                    if (activeIndex > index) {
                        next = this.items[activeIndex];
                    }
                    else {
                        if (index === this.items.length - 1) {
                            next = this.items[index - 1];
                        }
                        else {
                            next = this.items[index + 1];
                        }
                        if (next.hidden) {
                            next = undefined;
                        }
                    }
                }
                if (this.query.select) {
                    this.query.select.splice(index - 1, 1);
                }
                this.items.splice(index, 1);
            }
            return next;
        }
        return undefined;
    }
    update(query) {
        if (!this.query) {
            this.query = query.copy();
        }
        this.query.text = query.text;
        this.query.basket = query.basket;
        if (!this.query.text && !this.query.basket) {
            const item = this.items[0];
            item.expr = undefined;
            item.display = "msg#breadcrumbs.emptySearch";
            item.hidden = this.appService.ccquery && !this.appService.ccquery.allowEmptySearch &&
                this.searchService.isEmptySearchIgnoreSelects(this.query);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,