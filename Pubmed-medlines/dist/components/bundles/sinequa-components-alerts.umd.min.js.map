{"version":3,"sources":["../../../projects/components/alerts/alerts.service.ts","../projects/components/alerts/bootstrap/alert-message/alert-message.component.ts","../projects/components/alerts/bootstrap/edit-alert/edit-alert.html","../projects/components/alerts/bootstrap/alert-message/alert-message.component.html","../projects/components/alerts/bootstrap/edit-alert/edit-alert.ts","../projects/components/alerts/bootstrap/manage-alerts/manage-alerts.html","../projects/components/alerts/bootstrap/manage-alerts/manage-alerts.ts","../projects/components/alerts/bootstrap/alerts-menu/alerts-menu.component.html","../projects/components/alerts/bootstrap/alerts-menu/alerts-menu.component.ts","../../projects/components/alerts/bootstrap/alerts.module.ts","../../projects/components/alerts/messages/en.ts","../../projects/components/alerts/messages/index.ts","../../projects/components/alerts/messages/fr.ts","../../projects/components/alerts/messages/de.ts"],"names":["Days","Frequency","Alert","ALERT_CHANGE_EVENTS","ALERT_COMPONENTS","InjectionToken","WINDOW","AlertsService","userSettingsService","searchService","modalService","alertComponents","window","_this","this","_events","Subject","_changes","events","subscribe","event","next","type","indexOf","changes","Object","defineProperty","prototype","userSettings","alerts","length","alert","name","i","alertIndex","undefined","ic","createAlert","unshift","patchAlerts","detail","updateAlert","index","prevIndex","splice","updateAlerts","auditEvents","Utils","arraySet","deleteAlert","setAlertToCurrentQuery","query","Query","copy","patch","error","console","searchAlert","path","setQuery","extend","makeQuery","search","createAlertModal","description","timezone","frequency","Daily","days","WeekDays","interval","times","active","combine","respectTabSelection","queryUrl","location","href","open","editAlertModal","model","then","result","index_1","yesNo","appQueryUrl","noUpdate","searchRoute","prevName","prevAlert","manageAlertsModal","ngOnDestroy","complete","i0","ɵɵinject","i1","UserSettingsWebService","i2","SearchService","i3","ModalService","factory","ɵfac","providedIn","BsAlertMessageComponent","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵlistener","i0.ɵɵelement","selectors","inputs","message","decls","vars","consts","template","rf","ctx","i0.ɵɵtextInterpolate1","BsEditAlert","formBuilder","alertsService","modalRef","weekdays","monday","Monday","tuesday","Tuesday","wednesday","Wednesday","thursday","Thursday","friday","Friday","saturday","Saturday","sunday","Sunday","showDirtyMessage","originalOrder","a","b","frequencies","Hourly","Immediate","ngOnInit","None","canUpdateQuery","results","records","alertDaysControl","FormControl","alertNameControl","Validators","required","alertFrequencyControl","alertTimesControl","alertActiveControl","updateQueryControl","updateQuery","form","group","alertName","alertFrequency","alertTimes","alertActive","formChanges","valueChanges","value","createButtons","buttons","ModalButton","text","action","button","runQuery","close","visible","primary","validation","dirty","createYesNoButtons","unsubscribe","dayChecked","day","dayChange","target","checked","setValue","markAsDirty","i0.ɵɵpropertyInterpolate","ɵɵdirectiveInject","MODAL_MODEL","i1$1","FormBuilder","ModalRef","i0.ɵɵtemplate","BsManageAlerts","reordering","addAuditEvent","auditEvent","push","reorder","remove","removeAllButton","editAlert","alert1_1","dropped","drop","arrayMove","previousIndex","currentIndex","_a","$event","ctx_r0","collapseBreakpoint","BsAlertsMenuComponent","loginService","icon","autoAdjust","autoAdjustBreakpoint","createAction","Action","title","manageAction","updateMenu","_alertsServiceSubscription","_loginServiceSubscription","_searchServiceSubscription","resultsStream","alertsActions","hasAlert","scrollGroup","children","map","data","item","menu","windowFactory","i1$2","LoginService","size","BsAlertsModule","providers","provide","useValue","useFactory","imports","CommonModule","FormsModule","ReactiveFormsModule","DragDropModule","BsModalModule","IntlModule","ValidationModule","UtilsModule","BsActionModule","declarations","exports","enAlerts","merge","manageAlerts","alertAlreadyExists","lossDataMessage","edit","removeAll","enSearch","enModal","frAlerts","frSearch","frModal","deAlerts","deSearch","deModal"],"mappings":"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","sourcesContent":["import {Injectable, InjectionToken, Inject, Type, OnDestroy} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents, AuditEvent} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\n\n// From core/models/usersettings\nexport namespace Alert {\n    export enum Frequency {\n        Daily,\n        Hourly,\n        Immediate,\n        Weekly,\n        Monthly\n    }\n\n    export enum Days {\n        None = 0x00,\n        Monday = 0x01,\n        Tuesday = 0x02,\n        Wednesday = 0x04,\n        Thursday = 0x08,\n        Friday = 0x10,\n        Saturday = 0x20,\n        Sunday = 0x40,\n        AllDays = (Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday),\n        WeekDays = (Monday | Tuesday | Wednesday | Thursday | Friday)\n    }\n}\n\nexport interface Alert {\n    name: string;\n    description?: string;\n    query: Query;\n    timezone: string;\n    timezoneOffset?: string;\n    frequency: Alert.Frequency;\n    days: Alert.Days;\n    interval: number; // every \"n\"...\n    index: number; // day of month\n    times: string; //times: number[]; // offsets from 00:00 in milliseconds\n    active: boolean;\n    combine: boolean;\n    respectTabSelection: boolean;\n    appQueryUrl?: string; // the URL reference the query of the Alert in the SBA.\n}\n\n// from core/models/audit\nexport const enum AlertEventType {\n    Loaded = \"Alert_Loaded\",\n    Patched = \"Alert_Patched\",\n\n    Add = \"Alert_Add\",\n    Delete = \"Alert_Delete\",\n    DeleteAll = \"Alert_DeleteAll\",\n    Update = \"Alert_Update\",\n\n    Search_AlertQuery = \"Search_AlertQuery\",\n}\n\n// Types of events triggering a change event\nexport const ALERT_CHANGE_EVENTS = [\n    AlertEventType.Loaded,\n    AlertEventType.Add,\n    AlertEventType.Delete,\n    AlertEventType.Update\n];\n\n\n// CRUD Events\nexport interface AlertChangeEvent {\n    type: AlertEventType;\n    alert?: Alert;\n}\n\n\n// Model expected by the ManageAlerts Modal.\nexport interface ManageAlertsModel {\n    alerts: Alert[];\n    auditEvents?: AuditEvent[];\n    searchRoute?: string;\n}\n\n/**\n * The modal types are unknown to this service.\n * The module using this service must provide these components\n * in their forRoot() method\n *\n * Example below:\n *\n *  public static forRoot(): ModuleWithProviders<AlertsModule> {\n        return {\n            ngModule: AlertsModule,\n            providers: [\n                {\n                    provide: ALERT_COMPONENTS,\n                    useValue: {\n                        editAlertModal: EditAlert,\n                        manageAlertsModal: ManageAlerts\n                    }\n                },\n                AlertsService\n            ]\n        };\n    }\n *\n */\nexport interface AlertComponents {\n    editAlertModal: Type<any>;\n    manageAlertsModal: Type<any>;\n}\nexport const ALERT_COMPONENTS = new InjectionToken<AlertComponents>('ALERT_COMPONENTS');\nexport const WINDOW = new InjectionToken('WindowToken');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AlertsService implements OnDestroy {\n\n    private readonly _events = new Subject<AlertChangeEvent>();\n    private readonly _changes = new Subject<AlertChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        public modalService: ModalService,\n        @Inject(ALERT_COMPONENTS) public alertComponents: AlertComponents,\n        @Inject(WINDOW) private window : Window\n    ){\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this.events.next({type: AlertEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(ALERT_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n    }\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's alerts.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of alerts if it does not already exist.\n     */\n    public get alerts() : Alert[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"alerts\"])\n            this.userSettingsService.userSettings[\"alerts\"] = [];\n        return <Alert[]> (<unknown>this.userSettingsService.userSettings[\"alerts\"]);\n    } // TODO: remove cast when UserSettings is updated\n\n    /**\n     * Triggers any event among AlertChangeEvent\n     * (use for fine-grained control of alerts workflow)\n     */\n    public get events() : Subject<AlertChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of alerts\n     * (use to refresh alert menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<AlertChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one alert\n     */\n    public get hasAlert(): boolean {\n        return this.alerts.length > 0;\n    }\n\n    /**\n     * @returns an alert with the given name or undefined if it does not exist\n     * @param name\n     */\n    public alert(name: string): Alert | undefined {\n        const i = this.alertIndex(name);\n        return i>= 0? this.alerts[i] : undefined;\n    }\n\n    private alertIndex(name: string): number {\n        for (let i = 0, ic = this.alerts.length; i < ic; i++) {\n            const alert = this.alerts[i];\n            if (alert && alert.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new alert unless it already exists.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert the alert to create\n     * @returns true if alert was created\n     */\n    public createAlert(alert: Alert) : boolean {\n\n        if(this.alertIndex(alert.name) >= 0)\n            return false; // This alert already exists\n\n        this.alerts.unshift(alert);\n        this.events.next({type : AlertEventType.Add, alert: alert});\n        this.patchAlerts([{\n            type: AlertEventType.Add,\n            detail: {\n                alert: alert.name\n            }\n        }]);\n        return true;\n    }\n\n    /**\n     * Update the alert at the given index, unless an alert with the same name\n     * already exists in the list of alerts.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert the alert to update\n     * @param index the index at which to update the alert\n     * @returns true if alert was updated\n     */\n    public updateAlert(alert: Alert, index : number) : boolean {\n\n        const prevIndex = this.alertIndex(alert.name);\n        if(prevIndex !== -1 && index !== prevIndex)\n            return false; // An alert with the same name exists at a different index\n\n        if(index >= 0 && index < this.alerts.length){\n\n            this.alerts.splice(index, 1, alert);\n            this.events.next({type : AlertEventType.Update, alert: alert});\n            this.patchAlerts([\n                {\n                    type: AlertEventType.Update,\n                    detail: {\n                        alert: alert.name\n                    }\n                }\n            ]);\n            return true;\n\n        }\n        return false;   // This alert does not exist\n    }\n\n    /**\n     * Updates the full list of alerts.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alerts the new list of alerts\n     * @param auditEvents the list of audit events to log\n     */\n    public updateAlerts(alerts : Alert[], auditEvents?: AuditEvents) : boolean {\n        Utils.arraySet(this.alerts, alerts);\n        this.events.next({type : AlertEventType.Update});\n        this.patchAlerts(auditEvents);\n        return true;\n    }\n\n    /**\n     * Deletes the given alert (based on its name)\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert\n     * @returns true if alert was deleted\n     */\n    public deleteAlert(alert: Alert) : boolean {\n\n        const index = this.alertIndex(alert.name);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.alerts.splice(index, 1);\n        this.events.next({type : AlertEventType.Delete, alert: alert});\n        this.patchAlerts([\n            {\n                type: AlertEventType.Delete,\n                detail: {\n                    alert: alert.name\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Sets this alert to the current search context, using the search service\n     */\n    public setAlertToCurrentQuery(alert: Alert){\n        alert.query = Query.copy(this.searchService.query);\n    }\n\n    /**\n     * Updates Alerts in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchAlerts(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({alerts: this.alerts}, auditEvents)\n            .subscribe(\n                next => {\n                    this.events.next({type: AlertEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Alerts!\", error);\n                }\n            );\n    }\n\n\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this alert.\n     * @param alert\n     * @returns the search service promise\n     */\n    public searchAlert(alert: Alert, path?: string) : Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(alert.query)));\n        this.events.next({type: AlertEventType.Search_AlertQuery, alert: alert});\n        return this.searchService.search( {path: path}, {\n            type: AlertEventType.Search_AlertQuery,\n            detail: {\n                alert: alert.name\n            }\n        });\n    }\n\n    /**\n     * Opens a dialog allowing a user to create a new alert.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the alert was created.\n     */\n    public createAlertModal() : Promise<boolean> {\n        const alert: Alert = {\n            name: \"\",\n            description: \"\",\n            timezone: this.userSettingsService.timezone,\n            query: Query.copy(this.searchService.query),\n            frequency: Alert.Frequency.Daily,\n            days: Alert.Days.WeekDays,\n            interval: 1,\n            index: 1,\n            times: \"9:00\",\n            active: true,\n            combine: true,\n            respectTabSelection: false\n        };\n        const queryUrl = this.window.location.href;\n        return this.modalService.open(this.alertComponents.editAlertModal, {model: { alert: alert }})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n\n                    const index = this.alertIndex(alert.name);\n                    if (index !== -1) {\n\n                        return this.modalService.yesNo(\"msg#alerts.alertAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    alert.appQueryUrl = queryUrl;\n                                    return this.updateAlert(alert, index);\n                                }\n                                return false;\n                            });\n\n                    } else {\n                        alert.appQueryUrl = queryUrl;\n                        return this.createAlert(alert);\n                    }\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to edit an existing alert.\n     * @param alert: The alert to edit\n     * @param noUpdate: if true, will not update the server after the edit\n     * @param searchRoute: the route to use when replaying the alert's query\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the alert was updated.\n     */\n    public editAlertModal(alert: Alert, noUpdate?: boolean, searchRoute?: string) : Promise<boolean> {\n\n        const prevName = alert.name;\n\n        const queryUrl = this.window.location.href;\n        return this.modalService.open(this.alertComponents.editAlertModal,  {model: { alert: alert, searchRoute: searchRoute }})\n            .then((result) => {\n\n                if (result === ModalResult.OK) {\n\n                    if(noUpdate) return true;\n\n                    const prevIndex = this.alertIndex(prevName);\n                    if(prevIndex === -1) return false; // this alert did not exist\n\n                    const index = this.alertIndex(alert.name);\n                    if (index !== -1 && index !== prevIndex) {  // An alert with the same (new) name exists\n\n                        return this.modalService.yesNo(\"msg#alerts.alertAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    const prevAlert = this.alert(prevName);\n                                    if (prevAlert) {\n                                        this.deleteAlert(prevAlert); // Remove the alert with old name\n                                    }\n                                    alert.appQueryUrl = queryUrl;\n                                    return this.updateAlert(alert, this.alertIndex(alert.name)); // Update the alert with new name (index might have changed due to delete of old name)\n                                }\n                                return false;\n                            });\n\n                    } else {\n\n                        alert.appQueryUrl = queryUrl;\n                        return this.updateAlert(alert, prevIndex); // Update this alert\n\n                    }\n                }\n\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to reorganize and edit the\n     * list of alerts.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true is the list was updated.\n     */\n    public manageAlertsModal(searchRoute?: string) : Promise<boolean> {\n\n        const model: ManageAlertsModel =  { alerts: Utils.copy(this.alerts), searchRoute: searchRoute };\n\n        return this.modalService.open(this.alertComponents.manageAlertsModal, {model})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n                    return this.updateAlerts(model.alerts, model.auditEvents);\n                }\n                return false;\n            });\n\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sq-alert-message',\n  templateUrl: './alert-message.component.html'\n})\nexport class BsAlertMessageComponent {\n  @Input() message: string;\n}\n","<form name=\"editAlert\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editAlert.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"alertName\">{{'msg#editAlert.name' | sqMessage}}</label>\n            <input [sqValidation]=\"form\" type=\"text\" class=\"form-control\" id=\"alertName\" formControlName=\"alertName\" autocomplete=\"off\" spellcheck=\"off\" sqAutofocus>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"alertFrequency\">{{'msg#editAlert.frequency' | sqMessage}}</label>\n            <select class=\"form-control custom-select\" id=\"alertFrequency\" formControlName=\"alertFrequency\">\n                <option *ngFor=\"let frequencyValue of frequencies\" [value]=\"frequencyValue\">{{frequency[frequencyValue] | sqMessage}}</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label>{{'msg#editAlert.days' | sqMessage}}</label>\n            <div class=\"weekdays-grid\">\n                <label *ngFor=\"let day of weekdays | keyvalue: originalOrder\" class=\"custom-control custom-control-inline custom-checkbox\">\n                    <input class=\"custom-control-input\" type=\"checkbox\" [checked]=\"dayChecked(day.value)\" (change)=\"dayChange($event, day.value)\">\n                    <span class=\"custom-control-label user-select-none cursor-pointer\">{{ 'msg#editAlert.'+day.key | sqMessage}}</span>\n                </label>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"alertTimes\">{{'msg#editAlert.times' | sqMessage}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"alertTimes\" formControlName=\"alertTimes\" autocomplete=\"off\" spellcheck=\"off\">\n        </div>\n        <div class=\"form-group\">\n            <label class=\"custom-control custom-control-inline custom-checkbox\">\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"alertActive\" formControlName=\"alertActive\">\n                <span class=\"custom-control-label user-select-none cursor-pointer\">{{'msg#editAlert.active' | sqMessage}}</span>\n            </label>\n            <label *ngIf=\"canUpdateQuery\" class=\"custom-control custom-control-inline custom-checkbox\">\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"updateQuery\" formControlName=\"updateQuery\">\n                <span class=\"custom-control-label user-select-none cursor-pointer\">{{'msg#editAlert.updateQuery' | sqMessage}}</span>\n            </label>\n        </div>\n        <sq-alert-message footer [message]=\"'msg#editAlert.lossDataMessage' | sqMessage\" *ngIf=\"showDirtyMessage\"></sq-alert-message>\n    </sq-modal>\n</form>","<div class=\"alert alert-danger ml-3 mr-3 p-3 text-center\" role=\"alert\">\n  {{ message }}\n</div>","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {ModalRef, MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AlertsService, Alert} from \"../../alerts.service\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {KeyValue} from \"@angular/common\";\n\n@Component({\n    selector: \"sq-edit-alert\",\n    templateUrl: \"./edit-alert.html\",\n    styleUrls: [\"./edit-alert.scss\"]\n})\nexport class BsEditAlert implements OnInit, OnDestroy {\n    form: FormGroup;\n    formChanges: Subscription;\n    buttons: ModalButton[];\n    frequencies: Alert.Frequency[];\n    frequency: typeof Alert.Frequency;\n    canUpdateQuery: boolean;\n    updateQuery: boolean;\n    weekdays = {\n        'monday': Alert.Days.Monday, \n        'tuesday': Alert.Days.Tuesday,\n        'wednesday': Alert.Days.Wednesday,\n        'thursday': Alert.Days.Thursday,\n        'friday': Alert.Days.Friday,\n        'saturday': Alert.Days.Saturday,\n        'sunday': Alert.Days.Sunday\n    };\n    \n    showDirtyMessage = false;\n    \n    // Preserve original property order\n    originalOrder = (a: KeyValue<string, Alert.Days>, b: KeyValue<string, Alert.Days>): number => 0\n    \n    private alertDaysControl: FormControl;\n    private alertNameControl: FormControl;\n    private alertFrequencyControl: FormControl;\n    private alertTimesControl: FormControl;\n    private alertActiveControl: FormControl;\n    private updateQueryControl: FormControl;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: { alert: Alert, searchRoute?: string },\n        private formBuilder: FormBuilder,\n        private searchService: SearchService,\n        private alertsService: AlertsService,\n        private modalRef: ModalRef) {\n        this.frequencies = [\n            Alert.Frequency.Daily,\n            Alert.Frequency.Hourly,\n            Alert.Frequency.Immediate,\n        ];\n        this.frequency = Alert.Frequency;\n    }\n\n    get alert() {\n        return this.model.alert;\n    }\n\n    ngOnInit() {\n        if (!this.alert.days) {\n            this.alert.days = Alert.Days.None;\n        }\n        this.canUpdateQuery = (!!this.alertsService.alert(this.alert.name)) &&\n            !!this.searchService.results && !!this.searchService.results.records;\n\n        this.alertDaysControl = new FormControl(this.alert.days);\n        this.alertNameControl = new FormControl(this.alert.name, Validators.required);\n        this.alertFrequencyControl = new FormControl(this.alert.frequency);\n        this.alertTimesControl = new FormControl(this.alert.times); // TODO validator\n        this.alertActiveControl = new FormControl(this.alert.active);\n        this.updateQueryControl = new FormControl(this.updateQuery);\n        this.form = this.formBuilder.group({\n            alertName: this.alertNameControl,\n            alertFrequency: this.alertFrequencyControl,\n            alertTimes: this.alertTimesControl,\n            alertActive: this.alertActiveControl,\n            updateQuery: this.updateQueryControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.alert.name = this.alertNameControl.value;\n                this.alert.frequency = this.alertFrequencyControl.value;\n                this.alert.times = this.alertTimesControl.value;\n                this.alert.active = this.alertActiveControl.value;\n                this.alert.days = this.alertDaysControl.value;\n                this.updateQuery = this.updateQueryControl.value;\n            }\n        );\n        \n        this.createButtons();\n    }\n\n    private createButtons() {\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#editAlert.runQuery\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.runQuery();\n                    this.modalRef.close(ModalResult.Cancel); // dismiss the dialog too (?)\n                },\n                visible: !!this.alertsService.alert(this.alert.name)\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form,\n                action: (button) => {\n                    if (this.updateQuery) {\n                        this.alertsService.setAlertToCurrentQuery(this.alert);\n                    }\n                }\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n                action: (button) => {\n                    if (this.form.dirty) {\n                        button.result = ModalResult.Custom;\n                        this.showDirtyMessage = true;\n                        this.createYesNoButtons();\n                    }\n                }\n            })\n        ];\n    }\n    private createYesNoButtons() {\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.Yes,\n                primary: true,\n            }),\n            new ModalButton({\n                result: ModalResult.No,\n                action: (button) => {\n                    button.result = ModalResult.Custom;\n                    this.showDirtyMessage = false;\n                    this.createButtons();\n                }\n            })\n        ];\n    }\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    dayChecked(day: Alert.Days): boolean {\n        return (this.alert.days & day) !== 0;\n    }\n\n    dayChange(event: UIEvent, day: Alert.Days) {\n        const input = event.target as HTMLInputElement;\n        if (input.checked) {\n            this.alertDaysControl.setValue(this.alert.days |= day);\n            // this.alert.days |= day;\n        }\n        else {\n            this.alertDaysControl.setValue(this.alert.days &= ~day);\n            // this.alert.days &= ~day;\n        }\n        this.form.markAsDirty();\n    }\n\n    runQuery() {\n        this.alertsService.searchAlert(this.alert, this.model.searchRoute);\n    }\n}","<form name=\"manageAlerts\" novalidate>\n    <sq-modal [title]=\"'msg#manageAlerts.title'\" [buttons]=\"buttons\">\n        <div *ngIf=\"model.alerts.length\" class=\"form-group clearfix\">\n            <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"reorder()\">{{(reordering ? \"msg#manageAlerts.edit\" : \"msg#manageAlerts.reorder\") | sqMessage}}</button>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"list-group\" cdkDropList [cdkDropListData]=\"model.alerts\" [cdkDropListDisabled]=\"!reordering\" (cdkDropListDropped)=\"dropped($event)\">\n                <a *ngFor=\"let alert of model.alerts; let $index = index\" href=\"#\" (click)=\"editAlert(alert)\" cdkDrag \n                    [ngClass]=\"['list-group-item list-group-item-action d-flex w-auto-unimportant', reordering ? 'cursor-move': '']\">\n                    <div [ngClass]=\"{'sq-active': !reordering, 'sq-alert-text': true}\">{{alert.name}}</div>\n                    <div class=\"ml-auto\">\n                        <a *ngIf=\"!reordering\" class=\"ml-2\" href=\"#\" (click)=\"remove(alert, $index)\" title=\"{{'msg#manageAlerts.remove' | sqMessage}}\">\n                            <span class=\"fas fa-times sq-remove\"></span>\n                        </a>\n                        <span *ngIf=\"reordering\" class=\"ml-2 fas fa-bars sq-move\"></span>\n                    </div>\n                </a>\n            </div>\n        </div>\n        <sq-alert-message footer [message]=\"'msg#editAlert.lossDataMessage' | sqMessage\" *ngIf=\"showDirtyMessage\"></sq-alert-message>\n    </sq-modal>\n</form>\n","import {Component, Inject, OnInit} from \"@angular/core\";\nimport {ValidatorFn} from \"@angular/forms\";\nimport {CdkDragDrop} from \"@angular/cdk/drag-drop\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvent, AuditEventType} from \"@sinequa/core/web-services\";\nimport {AlertsService, Alert, AlertEventType, ManageAlertsModel} from \"../../alerts.service\";\n\n@Component({\n    selector: \"sq-manage-alerts\",\n    templateUrl: \"./manage-alerts.html\",\n    styleUrls: [\"./manage-alerts.scss\"]\n})\nexport class BsManageAlerts implements OnInit {\n    reordering: boolean;\n    buttons: ModalButton[];\n    removeAllButton: ModalButton;\n    nameValidators: ValidatorFn[];\n    showDirtyMessage = false;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ManageAlertsModel,\n        public alertsService: AlertsService) {\n        this.reordering = false;\n    }\n\n    ngOnInit() {\n        this.createButtons();\n    }\n\n    addAuditEvent(auditEvent: AuditEvent) {\n        if (!this.model.auditEvents) {\n            this.model.auditEvents = [];\n        }\n        this.model.auditEvents.push(auditEvent);\n    }\n\n    reorder() {\n        this.reordering = !this.reordering;\n    }\n\n    remove(alert: Alert, index: number) {\n        this.model.alerts.splice(index, 1);\n        this.removeAllButton.visible = this.model.alerts.length > 0;\n        this.addAuditEvent({\n            type: AuditEventType.Alert_Delete,\n            detail: {\n                alert: alert.name\n            }\n        });\n        return false;\n    }\n\n    editAlert(alert: Alert) {\n        if (!this.reordering) {\n            const alert1 = Utils.copy(alert);\n            this.alertsService.editAlertModal(alert1, true, this.model.searchRoute)\n                .then(result => {\n                    if (result) {\n                        Utils.copy(alert1, alert);\n                        this.addAuditEvent({\n                            type: AuditEventType.Alert_Edit,\n                            detail: {\n                                alert: alert.name\n                            }\n                        });\n                    }\n                });\n        }\n        return false;\n    }\n\n    dropped(drop: CdkDragDrop<Alert[]>) {\n        Utils.arrayMove(this.model.alerts, drop.previousIndex, drop.currentIndex);\n    }\n    \n    private createButtons() {\n        this.buttons = [\n            this.removeAllButton = new ModalButton({\n                text: \"msg#manageAlerts.removeAll\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.model.alerts.splice(0);\n                    button.visible = false;\n                    this.addAuditEvent({\n                        type: AlertEventType.DeleteAll\n                    });\n                },\n                visible: this.model.alerts.length > 0\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n                action: (button) => {\n                    if (this.model.auditEvents && this.model.auditEvents?.length > 0) {\n                        button.result = ModalResult.Custom;\n                        this.showDirtyMessage = true;\n                        this.createYesNoButtons();\n                    }\n                }\n            })\n        ];\n    }\n    \n    private createYesNoButtons() {\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.Yes,\n                primary: true,\n            }),\n            new ModalButton({\n                result: ModalResult.No,\n                action: (button) => {\n                    button.result = ModalResult.Custom;\n                    this.showDirtyMessage = false;\n                    this.createButtons();\n                }\n            })\n        ];\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Action } from '@sinequa/components/action';\nimport { LoginService } from '@sinequa/core/login';\nimport { AlertsService, Alert } from '../../alerts.service';\nimport { SearchService } from '@sinequa/components/search';\nimport { Utils } from '@sinequa/core/base';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'sq-alerts-menu',\n  templateUrl: './alerts-menu.component.html'\n})\nexport class BsAlertsMenuComponent implements OnInit, OnDestroy {\n  \n  @Input() searchRoute: string = \"/search\";\n  @Input() icon: string = \"fas fa-bell\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action | undefined;\n\n  // Alerts actions\n  createAction: Action;\n  manageAction: Action;\n\n  constructor(\n    public loginService: LoginService,\n    public alertsService: AlertsService,\n    public searchService: SearchService\n  ) {\n\n    this.createAction = new Action({\n      text: \"msg#alerts.createAlert\",\n      title: \"msg#alerts.createAlert\",\n      action: () => { this.alertsService.createAlertModal(); }\n    });\n\n    this.manageAction = new Action({\n      text: \"msg#alerts.manageAlerts\",\n      title: \"msg#alerts.manageAlerts\",\n      action: () => { this.alertsService.manageAlertsModal(this.searchRoute); }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._alertsServiceSubscription = this.alertsService.changes.subscribe({\n      next: () => { this.updateMenu(); }\n    });\n    this._loginServiceSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._searchServiceSubscription = this.searchService.resultsStream.subscribe(results => {\n      this.updateMenu();\n    });\n  }\n\n  private _alertsServiceSubscription: Subscription;\n  private _loginServiceSubscription: Subscription;\n  private _searchServiceSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._alertsServiceSubscription){\n      this._alertsServiceSubscription.unsubscribe();\n    }\n    if(this._loginServiceSubscription){\n      this._loginServiceSubscription.unsubscribe();\n    }\n    if(this._searchServiceSubscription){\n      this._searchServiceSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n\n    if (!this.loginService.complete) {\n      this.menu = undefined;\n      return;\n    }\n\n    const alertsActions: Action[] = [];\n\n    if (this.alertsService.hasAlert) {\n        const scrollGroup = new Action({\n            scrollGroup: true,\n            children: this.alertsService.alerts.map(alert => new Action({\n              text: alert.name,\n              data: alert,\n              action: (item: Action) => {\n                const alert: Alert = Utils.copy(item.data);\n                this.alertsService.editAlertModal(alert, undefined, this.searchRoute);\n              }\n          }))\n        });\n        alertsActions.push(scrollGroup);\n    }\n\n    if (!!this.searchService.results) {\n        alertsActions.push(this.createAction);\n    }\n\n    if (this.alertsService.hasAlert) {\n        alertsActions.push(this.manageAction);\n    }\n\n    this.menu = new Action({\n      icon: this.icon,\n      text: \"msg#alerts.alerts\",\n      children: alertsActions\n    });\n  }\n\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\n\nimport {ALERT_COMPONENTS, WINDOW} from \"../alerts.service\";\nimport {BsEditAlert} from \"./edit-alert/edit-alert\";\nimport {BsManageAlerts} from \"./manage-alerts/manage-alerts\";\nimport {BsAlertsMenuComponent} from \"./alerts-menu/alerts-menu.component\";\nimport {BsAlertMessageComponent} from \"./alert-message/alert-message.component\";\n\nfunction windowFactory() {\n    return window;\n}\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n        DragDropModule,\n\n        BsModalModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsEditAlert, BsManageAlerts, BsAlertsMenuComponent, BsAlertMessageComponent\n    ],\n    exports: [\n        BsEditAlert, BsManageAlerts, BsAlertsMenuComponent\n    ],\n    providers: [\n        {\n            provide: ALERT_COMPONENTS,\n            useValue: {\n                editAlertModal: BsEditAlert,\n                manageAlertsModal: BsManageAlerts\n            }\n        },\n        {\n            provide: WINDOW,\n            useFactory: windowFactory\n        }\n    ]\n})\nexport class BsAlertsModule {\n}\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alerts\",\n        \"createAlert\": \"Create Alert\",\n        \"manageAlerts\": \"Manage Alerts\",\n        \"alertAlreadyExists\": \"An alert with that name already exists. Would you like to replace it?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alert\",\n        \"name\": \"Name\",\n        \"frequency\": \"Frequency\",\n        \"days\": \"Days\",\n        \"monday\": \"Monday\",\n        \"tuesday\": \"Tuesday\",\n        \"wednesday\": \"Wednesday\",\n        \"thursday\": \"Thursday\",\n        \"friday\": \"Friday\",\n        \"saturday\": \"Saturday\",\n        \"sunday\": \"Sunday\",\n        \"times\": \"Times\",\n        \"active\": \"Active\",\n        \"updateQuery\": \"Update Query\",\n        \"runQuery\": \"Run Query\",\n        \"lossDataMessage\": \"Do you want to leave without saving your modifications?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Manage Alerts\",\n        \"edit\": \"Edit\",\n        \"reorder\": \"Reorder\",\n        \"remove\": \"Remove\",\n        \"removeAll\": \"Remove all\"\n    },\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\nimport _enAlerts from \"./en\";\nimport _frAlerts from \"./fr\";\nimport _deAlerts from \"./de\";\n\nconst enAlerts = Utils.merge({}, _enAlerts, enSearch, enModal);\nconst frAlerts = Utils.merge({}, _frAlerts, frSearch, frModal);\nconst deAlerts = Utils.merge({}, _deAlerts, deSearch, deModal);\n\nexport { enAlerts, frAlerts, deAlerts };\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alertes\",\n        \"createAlert\": \"Créer une alerte\",\n        \"manageAlerts\": \"Gérer les alertes\",\n        \"alertAlreadyExists\": \"Une alerte avec ce nom existe déjà. Voulez-vous la remplacer ?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alerte\",\n        \"name\": \"Nom\",\n        \"frequency\": \"Fréquence\",\n        \"days\": \"Jours\",\n        \"monday\": \"lundi\",\n        \"tuesday\": \"mardi\",\n        \"wednesday\": \"mercredi\",\n        \"thursday\": \"jeudi\",\n        \"friday\": \"vendredi\",\n        \"saturday\": \"samedi\",\n        \"sunday\": \"dimanche\",\n        \"times\": \"Horaires\",\n        \"active\": \"Active\",\n        \"updateQuery\": \"Mettre à jour la requête\",\n        \"runQuery\": \"Exécuter la requête\",\n        \"lossDataMessage\": \"Voulez-vous quitter sans sauvegarder vos modifications ?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Gérer les alertes\",\n        \"edit\": \"Editer\",\n        \"reorder\": \"Réorganiser\",\n        \"remove\": \"Effacer\",\n        \"removeAll\": \"Effacer tout\"\n    },\n\n};\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alarme\",\n        \"createAlert\": \"Alarm erstellen\",\n        \"manageAlerts\": \"Alarme verwalten\",\n        \"alertAlreadyExists\": \"Ein Alarm mit diesem Namen existiert bereits. Möchten Sie ihn ersetzen?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alarm\",\n        \"name\": \"Name\",\n        \"frequency\": \"Häufigkeit\",\n        \"days\": \"Tage\",\n        \"monday\": \"Montag\",\n        \"tuesday\": \"Dienstag\",\n        \"wednesday\": \"Mittwoch\",\n        \"thursday\": \"Donnerstag\",\n        \"friday\": \"Freitag\",\n        \"saturday\": \"Samstag\",\n        \"sunday\": \"Sonntag\",\n        \"times\": \"Uhrzeitangaben\",\n        \"active\": \"Aktiv\",\n        \"updateQuery\": \"Aktualisiere Suchanfrage\",\n        \"runQuery\": \"Führe Suchanfrage aus\",\n        \"lossDataMessage\": \"Möchten Sie gehen, ohne Ihre Änderungen zu speichern?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Alarme verwalten\",\n        \"edit\": \"Bearbeiten\",\n        \"reorder\": \"Neu sortieren\",\n        \"remove\": \"Entfernen\",\n        \"removeAll\": \"Alle entfernen\"\n    },\n\n};\n"]}