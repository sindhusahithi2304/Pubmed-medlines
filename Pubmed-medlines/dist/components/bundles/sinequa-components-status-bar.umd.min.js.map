{"version":3,"sources":["../projects/components/status-bar/bootstrap/fullscreen-activator/fullscreen-activator.ts","../projects/components/status-bar/bootstrap/fullscreen-activator/fullscreen-activator.html","../projects/components/status-bar/bootstrap/network-activity/network-activity.ts","../projects/components/status-bar/bootstrap/network-activity/network-activity.html","../../projects/components/status-bar/bootstrap/status-bar.module.ts","../../projects/components/status-bar/messages/de.ts","../../projects/components/status-bar/messages/en.ts","../../projects/components/status-bar/messages/fr.ts"],"names":["BsFullscreenActivator","uiService","this","buildAction","prototype","getFullscreenIcon","isFullscreen","getFullscreenTitle","_this","action","Action","icon","title","item","$event","toggleFullscreen","init","resizeSubscription","Utils","subscribe","resizeEvent","event","destroy","unsubscribe","undefined","requestFullscreen","docEl","window","document","documentElement","requestFullScreen","call","cancelFullscreen","doc","cancelFullScreen","i0","ɵɵdirectiveInject","i1","UIService","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵproperty","BsNetworkActivity","notificationsService","changeDetectorRef","ngOnInit","unbind","bind","ngOnDestroy","subscription","events","value","active","get","setTimeout","markForCheck","i1$1","NotificationsService","ChangeDetectorRef","i0.ɵɵpropertyInterpolate","BsStatusBarModule","imports","CommonModule","IntlModule","BsActionModule","UtilsModule","declarations","exports","statusBar","fullscreenTitleEnter","fullscreenTitleExit","networkActivity"],"mappings":"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","sourcesContent":["import {Component} from \"@angular/core\";\nimport {Action} from \"@sinequa/components/action\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Subscription} from \"rxjs\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n@Component({\n    selector: \"sq-fullscreen-activator\",\n    templateUrl: \"./fullscreen-activator.html\"\n})\nexport class BsFullscreenActivator {\n    action: Action;\n    resizeSubscription: Subscription | undefined;\n\n    constructor(\n        private uiService: UIService) {\n        this.buildAction();\n    }\n\n    getFullscreenIcon(): string {\n        return !this.isFullscreen() ? \"fas fa-expand\" : \"fas fa-compress\";\n    }\n\n    getFullscreenTitle(): string {\n        return !this.isFullscreen() ? \"msg#statusbar.fullscreenTitleEnter\" : \"msg#statusbar.fullscreenTitleExit\";\n    }\n\n    buildAction() {\n        this.action = new Action({\n            icon: this.getFullscreenIcon(),\n            title: this.getFullscreenTitle(),\n            action: (item, $event) => {\n                this.toggleFullscreen();\n                item.icon = this.getFullscreenIcon();\n                item.title = this.getFullscreenTitle();\n            },\n            init: (item) => {\n\n                this.resizeSubscription = Utils.subscribe(this.uiService.resizeEvent,\n                    (event) => {\n                        this.action.icon = this.getFullscreenIcon();\n                        this.action.title = this.getFullscreenTitle();\n                    });\n\n            },\n            destroy: (item) => {\n\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                    this.resizeSubscription = undefined;\n                }\n\n            }\n        });\n    }\n\n    requestFullscreen() {\n        const doc = window.document;\n        const docEl = doc.documentElement;\n        const requestFullScreen = docEl[\"requestFullscreen\"] || docEl[\"mozRequestFullScreen\"] || docEl[\"webkitRequestFullScreen\"] || docEl[\"msRequestFullscreen\"];\n        if (requestFullScreen) {\n            requestFullScreen.call(docEl);\n        }\n    }\n\n    cancelFullscreen() {\n        const doc = window.document;\n        const cancelFullScreen = doc[\"exitFullscreen\"] || doc[\"mozCancelFullScreen\"] || doc[\"webkitExitFullscreen\"] || doc[\"msExitFullscreen\"];\n        if (cancelFullScreen) {\n            cancelFullScreen.call(doc);\n        }\n    }\n\n    isFullscreen() {\n        const doc = window.document;\n        return doc[\"fullscreenElement\"] || doc[\"mozFullScreenElement\"] || doc[\"webkitFullscreenElement\"] || doc[\"msFullscreenElement\"];\n    }\n\n    toggleFullscreen() {\n        if (!this.isFullscreen()) {\n            this.requestFullscreen();\n        }\n        else {\n            this.cancelFullscreen();\n        }\n    }\n}","<div class=\"btn-toolbar\">\n    <div class=\"btn-group\" [sq-action-buttons]=\"{items: [action]}\"></div>\n</div>","import {Component, OnInit, OnDestroy, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\n\n@Component({\n    selector: \"sq-network-activity\",\n    templateUrl: \"./network-activity.html\",\n    styleUrls: [\"./network-activity.scss\"]\n})\nexport class BsNetworkActivity implements OnInit, OnDestroy {\n    subscription: Subscription | undefined;\n    active: boolean;\n    hidden: boolean;\n\n    constructor(\n        private notificationsService: NotificationsService,\n        private changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.unbind();\n        this.bind();\n    }\n\n    ngOnDestroy() {\n        this.unbind();\n    }\n\n    bind() {\n        this.subscription = this.notificationsService.events.subscribe(\n            (value) => {\n                this.active = this.notificationsService.get(\"network\") > 0;\n                setTimeout(() => this.changeDetectorRef.markForCheck(), 0); // Value can switch synchronously => this can cause \"Expression has changed\" error\n            });\n    }\n\n    unbind() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n\n}","<div class=\"btn-toolbar\">\n    <div class=\"btn-group\">\n        <div class=\"btn-text\" title=\"{{'msg#statusbar.networkActivity' | sqMessage}}\">\n            <span class=\"fas fa-bolt\" [ngClass]=\"{'blink': active}\"></span>\n        </div>\n    </div>\n</div>","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {UtilsModule} from \"@sinequa/components/utils\";\n\nimport {BsFullscreenActivator} from \"./fullscreen-activator/fullscreen-activator\";\nimport {BsNetworkActivity} from \"./network-activity/network-activity\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        UtilsModule,\n    ],\n    declarations: [\n        BsFullscreenActivator, BsNetworkActivity,\n    ],\n    exports: [\n        BsFullscreenActivator, BsNetworkActivity,\n    ]\n})\nexport class BsStatusBarModule {\n}\n","export default {\n    \"statusBar\": {\n        \"fullscreenTitleEnter\": \"Vollbildmodus\",\n        \"fullscreenTitleExit\": \"Volbildmodus verlassen\",\n        \"networkActivity\": \"Netzwerk-Aktivität\"\n    }\n};\n","export default {\n    \"statusBar\": {\n        \"fullscreenTitleEnter\": \"Fullscreen\",\n        \"fullscreenTitleExit\": \"Exit fullscreen\",\n        \"networkActivity\": \"Network activity\"\n    }\n};\n","export default {\n    \"statusBar\": {\n        \"fullscreenTitleEnter\": \"Plein écran\",\n        \"fullscreenTitleExit\": \"Quitter le mode plein écran\",\n        \"networkActivity\": \"Activité reseau\"\n    }\n};\n"]}