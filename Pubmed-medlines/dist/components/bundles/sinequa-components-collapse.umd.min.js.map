{"version":3,"sources":["../../../projects/components/collapse/collapse.component.ts","../../../projects/components/collapse/collapse-button.component.html","../../../projects/components/collapse/collapse-button.component.ts","../../../projects/components/collapse/collapse-link.component.ts","../../../projects/components/collapse/collapse-link.component.html","../../../projects/components/collapse/collapse.module.ts","../../projects/components/collapse/messages/de.ts","../../projects/components/collapse/messages/en.ts","../../projects/components/collapse/messages/fr.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵelementContainer","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","collapseAnimations","timings","trigger","state","style","height","transition","animate","Collapse","this","collapsed","prototype","ngAfterViewInit","_this","setTimeout","afterViewInit","i0.ɵɵelementContainerStart","i0.ɵɵelement","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵclassMap","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵtextInterpolate","collapseButtonAnimations","transform","selectors","contentQueries","rf","ctx","dirIndex","TemplateRef","CollapseButton","EventEmitter","toggleCollapsed","emit","inputs","icon","text","outputs","decls","vars","consts","template","i0.ɵɵpropertyInterpolate","CollapseLink","title","stateChange","click","group","CollapseModule","imports","CommonModule","IntlModule","declarations","exports","collapseButton","collapse","expand"],"mappings":"moBAiBQA,EAAAA,eAAAA,EAAAA,MAAAA,GACIC,EAAAA,mBAAAA,EAAAA,GACJC,EAAAA,6CAF4CC,EAAAA,WAAAA,SAAAA,EAAAA,WAAAA,EAAAA,eAC1BC,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,mBAAAA,EAAAA,oBAfVE,EAAmBC,GAC/B,MAAO,CACHC,EAAAA,QAAQ,OAAQ,CACZC,EAAAA,MAAM,OAAQC,EAAAA,MAAM,CAACC,OAAQ,KAC7BC,EAAAA,WAAW,aAAc,CACrBC,EAAAA,QAAQN,yBAqBpB,SAAAO,IACIC,KAAKC,WAAY,SAGrBF,EAAAG,UAAAC,gBAAA,WAAA,IAAAC,EAAAJ,KACIK,YAAW,WAAM,OAAAD,EAAKE,eAAgB,IAAM,8BClCOnB,EAAAA,mBAAAA,4BAA3DoB,EAAAA,wBAAAA,GAA6BC,EAAAA,UAAAA,EAAAA,QAA8BC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GAA6CC,EAAAA,sDAArEpB,EAAAA,UAAAA,GAAAqB,EAAAA,WAAAA,EAAAA,MAAuCrB,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,SAAAA,EAAAA,0DACvEH,EAAAA,eAAAA,EAAAA,OAAAA,GAAqB0B,EAAAA,WAAAA,SAAAA,WAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,qBAA4BC,EAAAA,OAAAA,2BAAoBzB,EAAAA,+CAApBE,EAAAA,UAAAA,GAAAwB,EAAAA,kBAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,iBCEpCC,EAAyBvB,GACrC,MAAO,CACHC,EAAAA,QAAQ,kBAAmB,CACvBC,EAAAA,MAAM,IAAKC,EAAAA,MAAM,CAACqB,UAAW,kBAC7BtB,EAAAA,MAAM,IAAKC,EAAAA,MAAM,CAACqB,UAAW,qBAC7BnB,EAAAA,WAAW,UAAW,CAClBC,EAAAA,QAAQN,yCFeXO,qCAAAA,EAAQkB,UAAA,CAAA,CAAA,gBAAAC,eAAA,SAAAC,EAAAC,EAAAC,8BAGHC,EAAAA,aAAW,uOAVrBb,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,QAAMpB,EAAAA,WAAAA,QAAAA,EAAAA,iJAKEE,EAAmB,wCEI/B,SAAAgC,IACIvB,KAAKN,MAAQ,IAAI8B,EAAAA,aACjBxB,KAAKC,WAAY,SAGrBsB,EAAArB,UAAAuB,gBAAA,WACIzB,KAAKC,WAAaD,KAAKC,UACvBD,KAAKN,MAAMgC,KAAK1B,KAAKC,kDAbhBsB,qCAAAA,EAAcN,UAAA,CAAA,CAAA,uBAAAU,OAAA,CAAA1B,UAAA,YAAA2B,KAAA,OAAAC,KAAA,QAAAC,QAAA,CAAApC,MAAA,SAAAqC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,QAAA,EAAA,QAAA,CAAA,OAAA,SAAA,EAAA,MAAA,gBAAA,QAAA,EAAA,QAAA,SAAA,CAAA,EAAA,UAAAC,SAAA,SAAAf,EAAAC,SDpB3BX,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GACGA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GACAvB,EAAAA,eAAAA,EAAAA,OAAAA,GAAoD0B,EAAAA,WAAAA,SAAAA,WAAAA,OAASQ,EAAAK,6CAAoJrC,EAAAA,sBAFrMC,EAAAA,WAAAA,SAAAA,EAAAA,MACLC,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,SAAAA,EAAAA,MACwGC,EAAAA,UAAAA,GAAA6C,EAAAA,sBAAAA,QAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,UAAAA,4BAAAA,gCAA/B9C,EAAAA,WAAAA,mBAAAA,EAAAA,uFCgBnE0B,EAAyB,wCCCrC,SAAAqB,IAPSpC,KAAAqC,MAAgB,GAChBrC,KAAA4B,KAAe,GACf5B,KAAA6B,KAAe,GAEd7B,KAAAsC,YAAc,IAAId,EAAAA,aAC5BxB,KAAAC,WAAqB,SAKrBmC,EAAAlC,UAAAqC,MAAA,WAGI,OAFAvC,KAAKC,WAAaD,KAAKC,UACvBD,KAAKsC,YAAYZ,KAAK,CAACc,MAAOxC,KAAKwC,MAAOvC,UAAWD,KAAKC,aACnD,yCAdFmC,qCAAAA,EAAYnB,UAAA,CAAA,CAAA,qBAAAU,OAAA,CAAAU,MAAA,QAAAT,KAAA,OAAAC,KAAA,OAAAW,MAAA,SAAAV,QAAA,CAAAQ,YAAA,eAAAP,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,OAAA,IAAA,EAAA,QAAA,SAAA,CAAA,EAAA,YAAA,OAAA,SAAAC,SAAA,SAAAf,EAAAC,SCXzBlC,EAAAA,eAAAA,EAAAA,IAAAA,GAA0C0B,EAAAA,WAAAA,SAAAA,WAAAA,OAASQ,EAAAmB,mCAC/C/B,EAAAA,UAAAA,EAAAA,qBAAAA,GACJpB,EAAAA,sBAFY+C,EAAAA,sBAAAA,QAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,QACY7C,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,YAAAA,EAAAA,UAAAA,CAAuB,OAAA+B,EAAAQ,KAAvBvC,CAAuB,OAAA+B,EAAAS,qECkB/C,6CAAaY,iEAAAA,IAAcC,QAAA,CAXd,CACLC,EAAAA,aACAC,EAAAA,gFASKH,EAAc,CAAAI,aAAA,CANnB9C,EAAUwB,EAAgBa,GAAYM,QAAA,CAJtCC,EAAAA,aACAC,EAAAA,YAAUE,QAAA,CAMV/C,EAAUwB,EAAgBa,0IChBnB,CACXW,eAAgB,CACZC,SAAY,aACZC,OAAU,2BCHH,CACXF,eAAgB,CACZC,SAAU,WACVC,OAAQ,wBCHD,CACXF,eAAgB,CACZC,SAAU,UACVC,OAAQ","sourcesContent":["import {Component, Input, AfterViewInit, ContentChild, TemplateRef} from \"@angular/core\";\nimport {trigger, state, animate, transition, style, AnimationTriggerMetadata} from '@angular/animations';\n\nexport function collapseAnimations(timings: number | string): AnimationTriggerMetadata[] {\n    return [\n        trigger('show', [\n            state('void', style({height: 0})),\n            transition('void <=> 1', [\n                animate(timings)\n            ])\n        ])\n    ];\n}\n\n@Component({\n    selector: \"sq-collapse\",\n    template: `\n        <div *ngIf=\"!collapsed\" class=\"sq-collapse\" [@show]=\"!collapsed && afterViewInit\">\n            <ng-container [ngTemplateOutlet]=\"template\"></ng-container>\n        </div>\n    `,\n    styles: [\".sq-collapse.ng-animating { overflow: hidden; }\"],\n    animations: collapseAnimations(\".15s ease-in-out\")\n})\nexport class Collapse implements AfterViewInit {\n    @Input() collapsed: boolean;\n    afterViewInit: boolean; // This allows to only trigger the animation after the view initialization\n    @ContentChild(TemplateRef, {static: false}) template: TemplateRef<any>;\n\n    constructor() {\n        this.collapsed = true;\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => this.afterViewInit = true, 0); // Value can switch synchronously => this can cause \"Expression has changed\" error\n    }\n}","<ng-container *ngIf=\"!!icon\"><span class=\"{{icon}}\"></span><ng-container *ngIf=\"!!text\"> </ng-container></ng-container><!--\n--><span *ngIf=\"!!text\" (click)=\"toggleCollapsed()\">{{text | sqMessage}}</span><!--\n--><span class=\"fas fa-chevron-up fa-fw\" role=\"button\" (click)=\"toggleCollapsed()\" [@toggleCollapsed]=\"collapsed\" title=\"{{(collapsed ? 'msg#collapseButton.expand' : 'msg#collapseButton.collapse') | sqMessage}}\"></span>","import {Component, Input, Output, EventEmitter} from \"@angular/core\";\nimport {trigger, state, animate, transition, style, AnimationTriggerMetadata} from '@angular/animations';\n\nexport function collapseButtonAnimations(timings: number | string): AnimationTriggerMetadata[] {\n    return [\n        trigger('toggleCollapsed', [\n            state('0', style({transform: 'rotate(0deg)'})),\n            state('1', style({transform: 'rotate(-180deg)'})),\n            transition('0 <=> 1', [\n                animate(timings)\n            ])\n        ]),\n    ];\n}\n\n@Component({\n    selector: \"sq-collapse-button\",\n    templateUrl: \"./collapse-button.component.html\",\n    animations: collapseButtonAnimations(\".15s ease-in-out\")\n})\nexport class CollapseButton {\n    @Input() collapsed: boolean;\n    @Input() icon: string;\n    @Input() text: string;\n    @Output() state: EventEmitter<boolean>;\n\n    constructor() {\n        this.state = new EventEmitter<boolean>();\n        this.collapsed = true;\n    }\n\n    toggleCollapsed() {\n        this.collapsed = !this.collapsed;\n        this.state.emit(this.collapsed);\n    }\n}","import {Component, Input, Output, EventEmitter} from \"@angular/core\";\n\nexport interface CollapseStateChange {\n    group: string;\n    collapsed: boolean;\n}\n\n@Component({\n    selector: \"sq-collapse-link\",\n    templateUrl: \"./collapse-link.component.html\"\n})\nexport class CollapseLink {\n    @Input() title: string = \"\";\n    @Input() icon: string = \"\";\n    @Input() text: string = \"\";\n    @Input() group: string;\n    @Output() stateChange = new EventEmitter<CollapseStateChange>();\n    collapsed: boolean = true;\n\n    constructor() {\n    }\n\n    click() {\n        this.collapsed = !this.collapsed;\n        this.stateChange.emit({group: this.group, collapsed: this.collapsed});\n        return false; // Prevent following href\n    }\n}","<a href=\"#\" title=\"{{title | sqMessage}}\" (click)=\"click()\">\r\n    <sq-collapse-button [collapsed]=\"collapsed\" [icon]=\"icon\" [text]=\"text\"></sq-collapse-button>\r\n</a>","import {NgModule} from \"@angular/core\";\nimport {Collapse} from \"./collapse.component\";\nimport {CollapseButton} from \"./collapse-button.component\";\nimport {CollapseLink} from \"./collapse-link.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {IntlModule} from \"@sinequa/core/intl\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        IntlModule\n    ],\n    declarations: [\n        Collapse, CollapseButton, CollapseLink\n    ],\n    exports: [\n        Collapse, CollapseButton, CollapseLink\n    ],\n})\nexport class CollapseModule {\n}\n","export default {\n    collapseButton: {\n        \"collapse\": \"Reduzieren\",\n        \"expand\": \"Erweitern\"\n    }\n};\n","export default {\n    collapseButton: {\n        collapse: \"Collapse\",\n        expand: \"Expand\"\n    }\n};\n","export default {\n    collapseButton: {\n        collapse: \"Replier\",\n        expand: \"Déplier\"\n    }\n};\n"]}