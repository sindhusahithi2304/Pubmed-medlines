{"version":3,"sources":["../../../projects/components/saved-queries/saved-queries.service.ts","../../../projects/components/saved-queries/recent-queries.service.ts","../../../projects/components/saved-queries/recent-documents.service.ts","../projects/components/saved-queries/bootstrap/edit-saved-query/edit-saved-query.ts","../projects/components/saved-queries/bootstrap/edit-saved-query/edit-saved-query.html","../../../node_modules/tslib/tslib.es6.js","../projects/components/saved-queries/bootstrap/export-query/export-query.html","../projects/components/saved-queries/bootstrap/export-query/export-query.ts","../projects/components/saved-queries/bootstrap/manage-saved-queries/manage-saved-queries.html","../projects/components/saved-queries/bootstrap/manage-saved-queries/manage-saved-queries.ts","../projects/components/saved-queries/bootstrap/query-exporter/query-exporter.ts","../projects/components/saved-queries/bootstrap/query-exporter/query-exporter.html","../projects/components/saved-queries/bootstrap/saved-queries-menu/saved-queries-menu.component.html","../projects/components/saved-queries/bootstrap/saved-queries-menu/saved-queries-menu.component.ts","../projects/components/saved-queries/bootstrap/facet-saved-queries/facet-saved-queries.html","../projects/components/saved-queries/bootstrap/facet-saved-queries/facet-saved-queries.ts","../projects/components/saved-queries/bootstrap/facet-recent-queries/facet-recent-queries.html","../projects/components/saved-queries/bootstrap/facet-recent-queries/facet-recent-queries.ts","../projects/components/saved-queries/bootstrap/facet-recent-documents/facet-recent-documents.html","../projects/components/saved-queries/bootstrap/facet-recent-documents/facet-recent-documents.ts","../../projects/components/saved-queries/bootstrap/saved-queries.module.ts","../../projects/components/saved-queries/messages/en.ts","../../projects/components/saved-queries/messages/index.ts","../../projects/components/saved-queries/messages/fr.ts","../../projects/components/saved-queries/messages/de.ts"],"names":["SAVED_QUERIES_CHANGE_EVENTS","SAVEDQUERY_COMPONENTS","InjectionToken","SavedQueriesService","userSettingsService","searchService","modalService","appService","queryExportService","downloadService","selectionService","savedQueryComponents","_this","this","_events","Subject","_changes","events","subscribe","event","next","type","indexOf","changes","selectedRecordsAction","Action","icon","title","action","_item","_event","exportModal","haveSelectedRecords","ExportSourceType","Selection","Result","Object","defineProperty","prototype","userSettings","savedqueries","length","savedquery","name","i","savedqueryIndex","undefined","ic","createSavedQuery","unshift","patchSavedQueries","detail","updateSavedQuery","index","prevIndex","splice","updateSavedQueries","auditEvents","Utils","arraySet","deleteSavedQuery","setSavedQueryToCurrentQuery","query","Query","copy","patch","savedQueries","error","console","rssHref","item","addSearchParams","appWebService","makeUrl","app","appName","hasRssEnabled","queryRssEnabled","hasExportConfig","queryExport","download","model","requestExport","export","exportResult","webService","results","format","maxCount","exportedColumns","exportSelection","getSelectedIds","SavedQuery","exportSavedQuery","queryName","log","throwError","searchSavedQuery","path","setQuery","extend","makeQuery","search","saved-query","createSavedQueryModal","savedQuery","text","open","editSavedQueryModal","then","result","index_1","yesNo","manageSavedQueriesModal","exportType","Promise","resolve","ExportOutputFormat","Csv","exportSavedQueryModal","notifyOpenSavedQuery","ngOnDestroy","complete","i0","ɵɵinject","i1","UserSettingsWebService","i2","SearchService","i3$1","ModalService","i4","AppService","QueryExportWebService","DownloadWebService","i5","SelectionService","factory","ɵfac","providedIn","RECENT_QUERIES_CHANGE_EVENTS","MAX_QUERIES","RecentQueriesService","maxQueries","recentqueries","forEach","rq","isString","date","toDate","queryStream","addRecentQuery","Date","recentquery","recentqueryIndex","toLowerCase","comparator","q1","q2","getTime","trim","Math","abs","equals","push","sort","patchRecentQueries","deleteRecentQuery","recentQueries","searchRecentQuery","notifyOpenRecentQuery","RECENT_DOCUMENTS_CHANGE_EVENTS","MAX_DOCUMENTS","RecentDocumentsService","maxDocuments","recentdocuments","rd","record","addDocument","recentdocument","recentdocumentIndex","id","original","addRecentDocument","url1","treepath","docformat","authors","patchRecentDocuments","deleteRecentDocument","recentDocuments","BsEditSavedQuery","formBuilder","ngOnInit","nameControl","FormControl","Validators","required","form","group","savedQueryName","formChanges","valueChanges","value","buttons","ModalButton","primary","validation","unsubscribe","ɵɵdirectiveInject","MODAL_MODEL","i1$1","FormBuilder","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","s","Symbol","iterator","m","call","done","TypeError","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","ctx_r2","hasSelectedRecords","BsExportQuery","savedQueriesService","validationService","notificationsService","changeDetectorRef","modalRef","supportedFormats","Xlsx","Json","outputFormats","sourceTypes","_c","_d","exportableColumns","queryExportConfig","getDefaultQueryExportConfig","columns","columns_1","columns_1_1","column","isNumber","compose","integerValidator","minValidator","isDownloading","anchor","_button","observable","response","info","close","markForCheck","newFormat","newMaxCount","newExportedColumns","substring","getField","webServices","sourceChosen","sourceChanged","target","checked","showSourceChooser","savedQuery_r4","ctx_r7","nameValidators","i0.ɵɵpropertyInterpolate","i5$1","ValidationService","i6$1","NotificationsService","ChangeDetectorRef","ModalRef","i0.ɵɵtemplate","BsManageSavedQueries","reordering","control","modelControl","root","get","_b","unique","removeAllButton","button","visible","addAuditEvent","auditEvent","reorder","setName","eqNC","old-name","remove","dropped","drop","arrayMove","previousIndex","currentIndex","$event","BsQueryExporter","exportAction","inputs","rightAligned","ctx_r0","collapseBreakpoint","BsSavedQueriesMenuComponent","loginService","searchRoute","autoAdjust","autoAdjustBreakpoint","saveAction","manageAction","updateMenu","_savedQueriesSubscription","_loginSubscription","_searchSubscription","resultsStream","savedQueriesActions","hasSavedQuery","scrollGroup","children","map","data","menu","i1$2","LoginService","size","getQueryParams","query_r2","getRouterState","BsFacetSavedQueries","_super","enableDelete","page","manageSavedQueries","previousPage","updater","disabled","hidden","maxPage","nextPage","max","ceil","update","openSavedQuery","deleteQuery","stopPropagation","min","toJsonForQueryString","audit","AbstractFacet","features","ɵɵInheritDefinitionFeature","BsFacetRecentQueries","recentQueriesService","enableSave","openRecentQuery","saveQuery","q","recentQuery","i0.ɵɵattribute","ctx_r5","document_r2","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","_r4","BsFacetRecentDocuments","recentDocumentsService","openOriginal","documentOpened","EventEmitter","openRecentDocument","document","notifyOpenOriginalDocument","emit","deleteDocument","outputs","BsSavedQueriesModule","providers","provide","useValue","imports","CommonModule","FormsModule","ReactiveFormsModule","DragDropModule","BsModalModule","IntlModule","ValidationModule","RouterModule","BsSelectionModule","UtilsModule","BsActionModule","declarations","exports","enSavedQueries","merge","saveCurrentQuery","savedQueryAlreadyExists","noSavedQuery","delete","noRecentQuery","save","noRecentDocument","editSavedQuery","exportQuery","dialogTitle","dialogOutputFormat","dialogMaxCount","dialogSourceType","dialogResult","dialogSelection","btnTitle","btnDownload","btnClose","successNotification","exportedColumnsLabelTooltip","dialogMaxCountTooltip","edit","removeAll","rss","enSearch","enSelection","enModal","frSavedQueries","frSearch","frSelection","frModal","deSavedQueries","deSearch","deSelection","deModal"],"mappings":"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","sourcesContent":["import {Injectable, InjectionToken, Inject, Type, OnDestroy} from \"@angular/core\";\nimport { HttpResponse } from '@angular/common/http';\nimport {Subject, Observable, throwError} from \"rxjs\";\nimport {UserSettingsWebService, QueryExportWebService, ExportSourceType, ExportOutputFormat,\n    DownloadWebService, AuditEvents, AuditEvent} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {AppService, Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Action} from '@sinequa/components/action';\n\n\nexport interface SavedQuery {\n    name: string;\n    description?: string;\n    query: Query;\n}\n\n// from core/models/audit\nexport const enum SavedQueryEventType {\n    Loaded = \"SavedQuery_Loaded\",\n    Patched = \"SavedQuery_Patched\",\n\n    Add = \"SavedQuery_Add\",\n    Delete = \"SavedQuery_Delete\",\n    DeleteAll = \"SavedQuery_DeleteAll\",\n    Rename = \"SavedQuery_Rename\",\n    Update = \"SavedQuery_Update\",\n\n    Search = \"Search_SavedQuery\"\n}\n\n// Types of events triggering a change event\nexport const SAVED_QUERIES_CHANGE_EVENTS = [\n    SavedQueryEventType.Add,\n    SavedQueryEventType.Delete,\n    SavedQueryEventType.DeleteAll,\n    SavedQueryEventType.Rename,\n    SavedQueryEventType.Update\n];\n\n\n// CRUD Events\nexport interface SavedQueryChangeEvent {\n    type: SavedQueryEventType;\n    savedquery?: SavedQuery;\n}\n\n\n// Model expected by the ManageSavedQueries Modal.\nexport interface ManageSavedQueriesModel {\n    savedQueries: SavedQuery[];\n    auditEvents?: AuditEvent[];\n}\n\n// Data model of the Export dialog.\nexport interface ExportQueryModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n    exportedColumns?: string[];\n}\n\n/**\n * The modal types are unknown to this service.\n * The module using this service must provide these components\n * in their forRoot() method\n *\n * Example below:\n *\n *     public static forRoot(): ModuleWithProviders<SavedQueriesModule> {\n        return {\n            ngModule: SavedQueriesModule,\n            providers: [\n                {\n                    provide: SAVEDQUERY_COMPONENTS,\n                    useValue: {\n                        editSavedQueryModal: EditSavedQuery,\n                        manageSavedQueriesModal: ManageSavedQueries,\n                        exportSavedQueryModal: ExportQuery\n                    }\n                },\n                SavedQueriesService,\n                SelectionService\n            ]\n        };\n    }\n *\n */\nexport interface SavedQueryComponents {\n    editSavedQueryModal: Type<any>;\n    manageSavedQueriesModal: Type<any>;\n    exportSavedQueryModal: Type<any>;\n}\nexport const SAVEDQUERY_COMPONENTS = new InjectionToken<SavedQueryComponents>('SAVEDQUERY_COMPONENTS');\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SavedQueriesService implements OnDestroy {\n\n    private readonly _events = new Subject<SavedQueryChangeEvent>();\n    private readonly _changes = new Subject<SavedQueryChangeEvent>();\n\n    // An application may want to alter the action (icon, etc.)\n    public selectedRecordsAction: Action;\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        public modalService: ModalService,\n        public appService: AppService,\n        public queryExportService: QueryExportWebService,\n        public downloadService: DownloadWebService,\n        public selectionService: SelectionService,\n        @Inject(SAVEDQUERY_COMPONENTS) public savedQueryComponents: SavedQueryComponents\n    ){\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this._events.next({type: SavedQueryEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(SAVED_QUERIES_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n        // Initialize selection action\n        this.selectedRecordsAction = new Action({\n            icon: 'fas fa-download',\n            title: 'msg#exportQuery.btnTitle',\n            action: (_item: Action, _event: Event) => {\n                this.exportModal(this.selectionService.haveSelectedRecords\n                    ? ExportSourceType.Selection\n                    : ExportSourceType.Result);\n            },\n        });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's saved queries.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of saved queries if it does not already exist.\n     */\n    public get savedqueries() : SavedQuery[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"savedQueries\"])\n            this.userSettingsService.userSettings[\"savedQueries\"] = [];\n        return this.userSettingsService.userSettings[\"savedQueries\"];\n    }\n\n    /**\n     * Triggers any event among SavedQueryChangeEvent\n     * (use for fine-grained control of saved queries workflow)\n     */\n    public get events() : Subject<SavedQueryChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of saved queries\n     * (use to refresh saved queries menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<SavedQueryChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one saved query\n     */\n    public get hasSavedQuery(): boolean {\n        return this.savedqueries.length > 0;\n    }\n\n    /**\n     * @returns a saved query with the given name or null if it does not exist\n     * @param name\n     */\n    public savedquery(name: string): SavedQuery | undefined {\n        const i = this.savedqueryIndex(name);\n        return i>= 0? this.savedqueries[i] : undefined;\n    }\n\n    private savedqueryIndex(name: string): number {\n        for (let i = 0, ic = this.savedqueries.length; i < ic; i++) {\n            const savedquery = this.savedqueries[i];\n            if (savedquery && savedquery.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n\n    // CRUD\n\n    /**\n     * Creates a new saved query unless it already exists.\n     * Emits an savedquery event.\n     * Update the data on the server.\n     * @param savedquery the savedquery to create\n     * @returns true if savedquery was created\n     */\n    public createSavedQuery(savedquery: SavedQuery) : boolean {\n\n        if(this.savedqueryIndex(savedquery.name) >= 0)\n            return false; // This savedquery already exists\n\n        this.savedqueries.unshift(savedquery);\n        this._events.next({type : SavedQueryEventType.Add, savedquery});\n        this.patchSavedQueries([{\n            type: SavedQueryEventType.Add,\n            detail: {\n                savedquery: savedquery.name\n            }\n        }]);\n        return true;\n    }\n\n    /**\n     * Update the saved query at the given index, unless a saved query with the same name\n     * already exists in the list of saved queries.\n     * Emits an Saved Query event.\n     * Update the data on the server.\n     * @param savedquery the saved query to update\n     * @param index the index at which to update the saved query\n     * @returns true if saved query was updated\n     */\n    public updateSavedQuery(savedquery: SavedQuery, index : number) : boolean {\n\n        const prevIndex = this.savedqueryIndex(savedquery.name);\n        if(prevIndex !== -1 && index !== prevIndex)\n            return false; // A saved query with the same name exists at a different index\n\n        if(index >= 0 && index < this.savedqueries.length){\n\n            this.savedqueries.splice(index, 1, savedquery);\n            this._events.next({type : SavedQueryEventType.Update, savedquery});\n            this.patchSavedQueries([\n                {\n                    type: SavedQueryEventType.Update,\n                    detail: {\n                        savedquery: savedquery.name\n                    }\n                }\n            ]);\n            return true;\n\n        }\n        return false;   // This saved query does not exist\n    }\n\n    /**\n     * Updates the full list of saved queries.\n     * Emits an SavedQuery event.\n     * Update the data on the server.\n     * @param savedqueries the new list of saved queries\n     * @param auditEvents the list of audit events to log\n     */\n    public updateSavedQueries(savedqueries : SavedQuery[], auditEvents?: AuditEvents) : boolean {\n        Utils.arraySet(this.savedqueries, savedqueries);\n        this._events.next({type : SavedQueryEventType.Update});\n        this.patchSavedQueries(auditEvents);\n        return true;\n    }\n\n    /**\n     * Deletes the given SavedQuery (based on its name)\n     * Emits an SavedQuery event.\n     * Update the data on the server.\n     * @param savedquery\n     * @returns true if saved query was deleted\n     */\n    public deleteSavedQuery(savedquery: SavedQuery) : boolean {\n\n        const index = this.savedqueryIndex(savedquery.name);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.savedqueries.splice(index, 1);\n        this._events.next({type : SavedQueryEventType.Delete, savedquery});\n        this.patchSavedQueries([\n            {\n                type: SavedQueryEventType.Delete,\n                detail: {\n                    savedquery: savedquery.name\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Sets this saved query to the current search context, using the search service\n     */\n    public setSavedQueryToCurrentQuery(savedquery: SavedQuery){\n        savedquery.query = Query.copy(this.searchService.query);\n    }\n\n    /**\n     * Updates Saved Queries in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchSavedQueries(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({savedQueries: this.savedqueries}, auditEvents)\n            .subscribe(\n                next => {\n                    this._events.next({type: SavedQueryEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Saved queries!\", error);\n                }\n            );\n    }\n\n\n    public rssHref(item: SavedQuery) {\n        return Utils.addSearchParams(this.appService.appWebService.makeUrl(\"query.rss\"),\n            {\n                app: this.appService.appName,\n                name: item.name\n            });\n    }\n\n\n    public hasRssEnabled(): boolean {\n        return !!this.appService.app && !!this.appService.app.queryRssEnabled;\n    }\n\n\n    /**\n     * Checks if there is a configuration for the export web service.\n     *\n     * @returns true if there is a configuration for the export web service.\n     */\n    public hasExportConfig(): boolean {\n        return !!this.appService.app && !!this.appService.app.queryExport;\n    }\n\n\n    public download(model : ExportQueryModel): Observable<HttpResponse<Blob>> {\n        return this.downloadService.download(this.requestExport(model));\n    }\n\n    private requestExport(model: ExportQueryModel): Observable<HttpResponse<Blob>> {\n        switch (model.export) {\n            case ExportSourceType.Result:\n                return this.queryExportService.exportResult(\n                    model.webService,\n                    this.searchService.query,\n                    this.searchService.results,\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            case ExportSourceType.Selection:\n                return this.queryExportService.exportSelection(\n                    model.webService,\n                    this.searchService.query,\n                    this.searchService.results,\n                    this.selectionService.getSelectedIds(),\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            case ExportSourceType.SavedQuery:\n                return this.queryExportService.exportSavedQuery(\n                    model.webService,\n                    model.queryName || \"\",\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            default:\n                console.log(\n                    'QueryExporter.export unexpected export type: ',\n                    ExportSourceType[model.export]);\n                return throwError('QueryExporter.export unexpected export type: ');\n        }\n    }\n\n\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this saved query.\n     * @param saved query\n     * @returns the search service promise\n     */\n    searchSavedQuery(savedquery: SavedQuery, path?: string): Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(savedquery.query)));\n        this._events.next({type: SavedQueryEventType.Search, savedquery});\n        return this.searchService.search({ path: path }, {\n            type: SavedQueryEventType.Search,\n            detail: {\n                \"saved-query\": savedquery.name\n            }\n        });\n    }\n\n    /**\n     * Opens a dialog allowing a user to save the current query.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the query was saved.\n     */\n    createSavedQueryModal(query: Query = this.searchService.query) : Promise<boolean> {\n        const savedQuery: SavedQuery = {\n            name: query.text || \"\",\n            query: Query.copy(query)\n        };\n        return this.modalService.open(this.savedQueryComponents.editSavedQueryModal, {model: savedQuery})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n\n                    const index = this.savedqueryIndex(savedQuery.name);\n                    if (index !== -1) {\n\n                        return this.modalService.yesNo(\"msg#savedQueries.savedQueryAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    return this.updateSavedQuery(savedQuery, index);\n                                }\n                                return false;\n                            });\n\n                    } else {\n                        return this.createSavedQuery(savedQuery);\n                    }\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to reorganize and edit the\n     * list of saved queries.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true is the list was updated.\n     */\n    public manageSavedQueriesModal() : Promise<boolean> {\n\n        const model: ManageSavedQueriesModel = { savedQueries: Utils.copy(this.savedqueries) };\n\n        return this.modalService.open(this.savedQueryComponents.manageSavedQueriesModal, {model})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n                    return this.updateSavedQueries(model.savedQueries, model.auditEvents);\n                }\n                return false;\n            });\n\n    }\n\n    /**\n     * Exports a query via a modal dialog.\n     *\n     * @param exportType type of export to perform (selection, saved query, results)\n     * @param savedQuery The saved query\n     */\n    public exportModal(exportType: ExportSourceType, savedQuery?: SavedQuery)\n            : Promise<ModalResult> {\n\n        if (!this.hasExportConfig() || !this.appService.app) {\n            return Promise.resolve(ModalResult.Cancel);\n        }\n\n        const model: ExportQueryModel = {\n            format: ExportOutputFormat.Csv,\n            export: exportType,\n            webService: this.appService.app.queryExport\n        };\n\n        if (savedQuery && exportType === ExportSourceType.SavedQuery) {\n            model.queryName = savedQuery.name;\n        }\n\n        return this.modalService.open(this.savedQueryComponents.exportSavedQueryModal, {model});\n    }\n\n    notifyOpenSavedQuery(savedquery: SavedQuery) {\n        this._events.next({type: SavedQueryEventType.Search, savedquery});\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import {Injectable, Optional, OnDestroy, Inject, InjectionToken} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents} from \"@sinequa/core/web-services\";\nimport {Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\n\n\nexport interface RecentQuery {\n    query: Query;\n    date: Date;\n}\n\n\n// from core/models/audit\nexport const enum RecentQueryEventType {\n    Loaded = \"RecentQuery_Loaded\",\n    Patched = \"RecentQuery_Patched\",\n    Add = \"RecentQuery_Add\",\n    Update = \"RecentQuery_Update\",\n    Delete = \"RecentQuery_Delete\",\n    Search = \"Search_RecentQuery\"\n}\n\n// Types of events triggering a change event\nexport const RECENT_QUERIES_CHANGE_EVENTS = [\n    RecentQueryEventType.Add,\n    RecentQueryEventType.Update,\n    RecentQueryEventType.Delete,\n];\n\n\n// CRUD Events\nexport interface RecentQueryChangeEvent {\n    type: RecentQueryEventType;\n    recentquery?: RecentQuery;\n}\n\nexport const MAX_QUERIES = new InjectionToken(\"MAX_QUERIES\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RecentQueriesService implements OnDestroy {\n\n    private readonly _events = new Subject<RecentQueryChangeEvent>();\n    private readonly _changes = new Subject<RecentQueryChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        @Optional() @Inject(MAX_QUERIES) private maxQueries: number,\n    ){\n        if(!this.maxQueries){\n            this.maxQueries = 20;\n        }\n\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Revive dates\n            this.recentqueries.forEach(rq => {\n                if (Utils.isString(rq.date)) {\n                    const date = Utils.toDate(rq.date);\n                    if (date) {\n                        rq.date = date;\n                    }\n                }\n            });\n            // ==> Menus need to be rebuilt\n            this._events.next({type: RecentQueryEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(RECENT_QUERIES_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n        // Listen to search service and store queries\n        this.searchService.queryStream.subscribe((query) => {\n                if (query) {\n                    this.addRecentQuery({query: query.copy(), date: new Date()});\n                }\n            });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's recent queries.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of recent queries if it does not already exist.\n     */\n    public get recentqueries() : RecentQuery[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"recentQueries\"])\n            this.userSettingsService.userSettings[\"recentQueries\"] = [];\n        return this.userSettingsService.userSettings[\"recentQueries\"];\n    }\n\n    /**\n     * Triggers any event among RecentQueryChangeEvent\n     * (use for fine-grained control of recent queries workflow)\n     */\n    public get events() : Subject<RecentQueryChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of recent queries\n     * (use to refresh recent queries menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<RecentQueryChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one recent query\n     */\n    public get hasRecentQuery(): boolean {\n        return this.recentqueries.length > 0;\n    }\n\n    /**\n     * @returns a recent query with the given name or undefined if it does not exist\n     * @param name\n     */\n    public recentquery(text: string): RecentQuery | undefined {\n        const i = this.recentqueryIndex(text);\n        return i>= 0? this.recentqueries[i] : undefined;\n    }\n\n    private recentqueryIndex(text: string): number {\n        for (let i = 0, ic = this.recentqueries.length; i < ic; i++) {\n            const recentquery = this.recentqueries[i];\n            if (recentquery && recentquery.query.text && recentquery.query.text.toLowerCase() === text.toLowerCase()) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private comparator(q1: RecentQuery, q2: RecentQuery){\n        return q2.date.getTime() - q1.date.getTime();\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new recent query unless it already exists, in which case the existing query is updated.\n     * Emits an recentquery event.\n     * Update the data on the server.\n     * @param recentquery the recentquery to create\n     * @returns true if recentquery was created\n     */\n    public addRecentQuery(recentquery: RecentQuery) : boolean {\n\n        if(!recentquery.query || !recentquery.query.text || recentquery.query.text.trim() === ''){\n            return false;\n        }\n\n        const i = this.recentqueryIndex(recentquery.query.text); // If the query already exists\n        if(i >= 0){\n            // Ignore identical queries issued within a certain time window (1s)\n            // to avoid flooding the server. NB the request flooding mitigation in\n            // SqHttpClient will not work in this case as the request payload includes\n            // a timestamp\n            if (Math.abs(recentquery.date.getTime() - this.recentqueries[i].date.getTime()) < 1000) {\n                if (Utils.equals(this.recentqueries[i].query, recentquery.query)) {\n                    return false;\n                }\n            }\n            this.recentqueries[i].date = recentquery.date; // Update the date of the existing query\n            this.recentqueries[i].query = recentquery.query;\n            this._events.next({type : RecentQueryEventType.Update, recentquery: this.recentqueries[i]});\n        }\n        else {\n            this.recentqueries.push(recentquery);\n            this._events.next({type : RecentQueryEventType.Add, recentquery});\n        }\n\n        // Sort the list\n        this.recentqueries.sort(this.comparator);\n\n        // Truncate the list\n        if(this.maxQueries >=0 )\n            this.recentqueries.splice(this.maxQueries);\n\n        this.patchRecentQueries(); // No need to emit an \"Add\" audit event, since it is redundant with the main search API\n        return true;\n    }\n\n    /**\n     * Deletes the given RecentQuery (based on its name)\n     * Emits an RecentQuery event.\n     * Update the data on the server.\n     * @param recentquery\n     * @returns true if recent query was deleted\n     */\n    public deleteRecentQuery(recentquery: RecentQuery) : boolean {\n\n        const index = this.recentqueryIndex(recentquery.query.text || \"\");\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.recentqueries.splice(index, 1);\n        this._events.next({type : RecentQueryEventType.Delete, recentquery});\n        this.patchRecentQueries([\n            {\n                type: RecentQueryEventType.Delete,\n                detail: {\n                    recentquery: recentquery.query.text\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Updates Recent Queries in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchRecentQueries(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({recentQueries: this.recentqueries}, auditEvents)\n            .subscribe(\n                next => {\n                    this._events.next({type: RecentQueryEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Recent queries!\", error);\n                }\n            );\n    }\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this recent query.\n     * @param recentquery\n     * @returns the search service promise\n     */\n    searchRecentQuery(recentquery: RecentQuery, path?: string): Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(recentquery.query)));\n        this._events.next({type: RecentQueryEventType.Search, recentquery});\n        return this.searchService.search({ path: path }, {\n            type: RecentQueryEventType.Search,\n            detail: {\n                recentquery: recentquery.query.text\n            }\n        });\n    }\n\n    notifyOpenRecentQuery(recentquery: RecentQuery): void {\n        this._events.next({type: RecentQueryEventType.Search, recentquery});\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import {Injectable, Optional, OnDestroy, Inject, InjectionToken} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents, Record} from \"@sinequa/core/web-services\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Utils} from \"@sinequa/core/base\";\n\n\nexport interface RecentDocument {\n    /**\n     * Fields from Record that we want to store/display/index for recent documents\n     */\n    id: string;\n    title: string;\n    url1: string;\n    treepath: string[];\n    docformat: string;\n    authors: string[];\n\n    /**\n     * Date at which the document was last opened\n     */\n    date: Date;\n\n    /**\n     * Store whether the doc was opened in the preview or directly via url\n     */\n    original: boolean;\n}\n\n\n// from core/models/audit\nexport const enum RecentDocumentEventType {\n    Loaded = \"RecentDocument_Loaded\",\n    Patched = \"RecentDocument_Patched\",\n    Add = \"RecentDocument_Add\",\n    Update = \"RecentDocument_Update\",\n    Delete = \"RecentDocument_Delete\",\n    Search = \"Search_RecentDocument\"\n}\n\n// Types of events triggering a change event\nexport const RECENT_DOCUMENTS_CHANGE_EVENTS = [\n    RecentDocumentEventType.Add,\n    RecentDocumentEventType.Update,\n    RecentDocumentEventType.Delete,\n];\n\n\n// CRUD Events\nexport interface RecentDocumentChangeEvent {\n    type: RecentDocumentEventType;\n    recentdocument?: RecentDocument;\n}\n\nexport const MAX_DOCUMENTS = new InjectionToken(\"MAX_DOCUMENTS\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RecentDocumentsService implements OnDestroy {\n\n    private readonly _events = new Subject<RecentDocumentChangeEvent>();\n    private readonly _changes = new Subject<RecentDocumentChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        @Optional() @Inject(MAX_DOCUMENTS) private maxDocuments: number,\n    ){\n        if(!this.maxDocuments){\n            this.maxDocuments = 20;\n        }\n\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Revive dates\n            this.recentdocuments.forEach(rd => {\n                if (Utils.isString(rd.date)) {\n                    const date = Utils.toDate(rd.date);\n                    if (date) {\n                        rd.date = date;\n                    }\n                }\n            });\n            // ==> Menus need to be rebuilt\n            this.events.next({type: RecentDocumentEventType.Loaded});\n        });\n\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(RECENT_DOCUMENTS_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n\n        /**\n         * Subscribe to the search service to capture \"open-original-document\" event\n         * and add documents to this service\n         */\n        this.searchService.events.subscribe(event => {\n            if(event.type === \"open-original-document\" && event.record){\n                this.addDocument(event.record, true);\n            }\n        });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's recent documents.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of recent documents if it does not already exist.\n     */\n    public get recentdocuments() : RecentDocument[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"recentDocuments\"])\n            this.userSettingsService.userSettings[\"recentDocuments\"] = [];\n        return this.userSettingsService.userSettings[\"recentDocuments\"];\n    }\n\n    /**\n     * Triggers any event among RecentDocumentChangeEvent\n     * (use for fine-grained control of recent documents workflow)\n     */\n    public get events() : Subject<RecentDocumentChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of recent documents\n     * (use to refresh recent documents menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<RecentDocumentChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one recent document\n     */\n    public get hasRecentDocument(): boolean {\n        return this.recentdocuments.length > 0;\n    }\n\n    /**\n     * @returns a recent document with the given name or null if it does not exist\n     * @param name\n     */\n    public recentdocument(text: string): RecentDocument | undefined {\n        const i = this.recentdocumentIndex(text);\n        return i>= 0? this.recentdocuments[i] : undefined;\n    }\n\n    private recentdocumentIndex(id: string): number {\n        for (let i = 0, ic = this.recentdocuments.length; i < ic; i++) {\n            const recentdocument = this.recentdocuments[i];\n            if (recentdocument && recentdocument.id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private comparator(q1: RecentDocument, q2: RecentDocument){\n        return q2.date.getTime() - q1.date.getTime();\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new recent document unless it already exists, in which case the existing document is updated.\n     * Emits an recentdocument event.\n     * Update the data on the server.\n     * @param record Record to add to the service\n     * @param original Whether the original doc was opened or the preview\n     * @returns true if recentdocument was created\n     */\n    public addDocument(record: Record, original: boolean) {\n        if(record){\n            return this.addRecentDocument({\n                id: record.id,\n                title: record.title,\n                url1: record.url1,\n                treepath: record.treepath,\n                docformat: record.docformat,\n                authors: record.authors,\n\n                date: new Date(),\n                original: original\n            });\n        }\n        return false;\n    }\n\n    /**\n     * Creates a new recent document unless it already exists, in which case the existing document is updated.\n     * Emits an recentdocument event.\n     * Update the data on the server.\n     * @param recentdocument the recentdocument to create\n     * @returns true if recentdocument was created\n     */\n    public addRecentDocument(recentdocument: RecentDocument) : boolean {\n\n        if(!recentdocument.id){\n            return false;\n        }\n\n        const i = this.recentdocumentIndex(recentdocument.id); // If the document already exists\n        if(i >= 0){\n            this.recentdocuments[i].date = recentdocument.date; // Update the date of the existing document\n            this.events.next({type : RecentDocumentEventType.Update, recentdocument: this.recentdocuments[i]});\n        }\n        else {\n            this.recentdocuments.push(recentdocument);\n            this.events.next({type : RecentDocumentEventType.Add, recentdocument: recentdocument});\n        }\n\n        // Sort the list\n        this.recentdocuments.sort(this.comparator);\n\n        // Truncate the list\n        if(this.maxDocuments >=0 )\n            this.recentdocuments.splice(this.maxDocuments);\n\n        this.patchRecentDocuments(); // No need to emit an \"Add\" audit event, since it is redundant with the main search API\n        return true;\n    }\n\n    /**\n     * Deletes the given RecentDocument (based on its name)\n     * Emits an RecentDocument event.\n     * Update the data on the server.\n     * @param recentdocument\n     * @returns true if recent document was deleted\n     */\n    public deleteRecentDocument(recentdocument: RecentDocument) : boolean {\n\n        const index = this.recentdocumentIndex(recentdocument.id);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.recentdocuments.splice(index, 1);\n        this.events.next({type : RecentDocumentEventType.Delete, recentdocument: recentdocument});\n        this.patchRecentDocuments([\n            {\n                type: RecentDocumentEventType.Delete,\n                detail: {\n                    recentdocument: recentdocument.id\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Updates Recent Documents in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchRecentDocuments(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({recentDocuments: this.recentdocuments}, auditEvents)\n            .subscribe(\n                next => {\n                    this.events.next({type: RecentDocumentEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Recent documents!\", error);\n                }\n            );\n    }\n\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SavedQuery} from \"../../saved-queries.service\";\n\n@Component({\n    selector: \"sq-edit-saved-query\",\n    templateUrl: \"./edit-saved-query.html\"\n})\nexport class BsEditSavedQuery implements OnInit, OnDestroy {\n    nameControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n    buttons: ModalButton[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: SavedQuery,\n        private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.nameControl = new FormControl(this.model.name, Validators.required);\n        this.form = this.formBuilder.group({\n            savedQueryName: this.nameControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.name = this.nameControl.value;\n            }\n        );\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n}\n","<form name=\"editSavedQuery\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editSavedQuery.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"savedQueryName\">{{'msg#editSavedQuery.name' | sqMessage}}</label>\n            <input [sqValidation]=\"form\" type=\"text\" class=\"form-control\" id=\"savedQueryName\" formControlName=\"savedQueryName\" spellcheck=\"off\" sqAutofocus>\n        </div>\n    </sq-modal>\n</form>","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","<form name=\"exportQuery\" novalidate [formGroup]=\"form\">\n    <sq-modal\n        [title]=\"'msg#exportQuery.dialogTitle'\"\n        [buttons]=\"buttons\"\n        [isProcessingState]=\"isDownloading\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"format\">{{ 'msg#exportQuery.dialogOutputFormat' | sqMessage }}</label>\n            <select [sqValidation]=\"form\" class=\"form-control custom-select\" formControlName=\"format\" id=\"format\" sqAutofocus>\n                <option [value]=\"format\" *ngFor=\"let format of supportedFormats\">{{ outputFormats[format].toUpperCase() }}</option>\n            </select>\n        </div>\n        <div class=\"form-group sq-form-group\">\n            <label\n                for=\"exportedColumns\"\n                title=\"{{ 'msg#exportQuery.exportedColumnsLabelTooltip' | sqMessage }}\"\n            >\n                {{ 'msg#exportQuery.exportedColumns' | sqMessage }}&nbsp;&#9432;\n            </label>\n            <select\n                id=\"exportedColumns\"\n                formControlName=\"exportedColumns\"\n                [sqValidation]=\"form\"\n                class=\"form-control custom-select\"\n                sqAutofocus multiple\n            >\n                <option [value]=\"column\" *ngFor=\"let column of exportableColumns\">{{ column }}</option>\n            </select>\n        </div>\n        <div class=\"form-group sq-form-group\">\n            <label \n                for=\"maxCount\"\n                title=\"{{ 'msg#exportQuery.dialogMaxCountTooltip' | sqMessage:{values: {count: maxCount} } }}\"\n            >{{ 'msg#exportQuery.dialogMaxCount' | sqMessage }}&nbsp;&#9432;</label>\n            <input [sqValidation]=\"form\" type=\"number\" class=\"form-control\" id=\"maxCount\" formControlName=\"maxCount\" autocomplete=\"off\" spellcheck=\"off\">\n        </div>\n        <div class=\"form-group sq-form-group\" *ngIf=\"showSourceChooser()\">\n            <label for=\"export\">{{ 'msg#exportQuery.dialogSourceType' | sqMessage }}</label>\n            <div>\n                <div class=\"form-check form-check-inline\">\n                    <label class=\"form-check-label\">\n                        <input class=\"form-check-input\" type=\"radio\" [checked]=\"sourceChosen(sourceTypes.Result)\" (change)=\"sourceChanged($event, sourceTypes.Result)\" >\n                        {{ 'msg#exportQuery.dialogResult' | sqMessage }}\n                    </label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                    <label class=\"form-check-label\">\n                        <input class=\"form-check-input\" type=\"radio\" [checked]=\"sourceChosen(sourceTypes.Selection)\" (change)=\"sourceChanged($event, sourceTypes.Selection)\"\n                        [disabled]=\"!hasSelectedRecords()\" >\n                        {{ 'msg#exportQuery.dialogSelection' | sqMessage }}\n                    </label>\n                </div>\n            </div>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, OnDestroy, Inject, ChangeDetectorRef} from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ValidationService } from \"@sinequa/core/validation\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { ModalRef, ModalButton, ModalResult, MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { ExportSourceType, ExportOutputFormat, CCWebService, CCApp} from \"@sinequa/core/web-services\";\nimport {SavedQueriesService, ExportQueryModel} from \"../../saved-queries.service\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport { AppService } from '@sinequa/core/app-utils';\n\n/**\n * Component representing the Export dialog where user can customize the query export action.\n *\n */\n@Component({\n    selector: 'sq-export-query',\n    templateUrl: './export-query.html'\n})\nexport class BsExportQuery implements OnInit, OnDestroy {\n\n    public readonly supportedFormats: ExportOutputFormat[] = [\n        ExportOutputFormat.Csv,\n        ExportOutputFormat.Xlsx,\n        ExportOutputFormat.Json\n    ];\n    public readonly outputFormats: typeof ExportOutputFormat = ExportOutputFormat;\n    public readonly sourceTypes: typeof ExportSourceType = ExportSourceType;\n\n    public form: FormGroup;\n    public savedQueries: string[];\n    public buttons: ModalButton[];\n    public isDownloading: boolean;\n    public exportableColumns: string[];\n\n    private formChanges: Subscription;\n\n    maxCount = 1000; // Default max count hard coded in web service\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ExportQueryModel,\n        private formBuilder: FormBuilder,\n        private appService: AppService,\n        private selectionService: SelectionService,\n        private savedQueriesService: SavedQueriesService,\n        private validationService: ValidationService,\n        private notificationsService: NotificationsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        public modalRef: ModalRef) { }\n\n    ngOnInit(): void {\n        this.savedQueries = [];\n        for (const query of this.savedQueriesService.savedqueries) {\n            this.savedQueries.push(query.name);\n        }\n\n        this.exportableColumns = [];\n\n        if (this.appService.app) {\n            const queryExportConfig = this.getDefaultQueryExportConfig(this.appService.app);\n            const columns = (queryExportConfig.columns && queryExportConfig.columns['column$']) || [];\n            for (const column of columns) {\n                this.exportableColumns.push(column.title);\n            }\n            if(queryExportConfig.maxCount && Utils.isNumber(queryExportConfig.maxCount)) {\n                this.maxCount = queryExportConfig.maxCount;\n            }\n        }\n\n        this.form = this.formBuilder.group({\n            'format': [this.supportedFormats[0]],\n            'exportedColumns': [this.model.exportedColumns],\n            'export': [this.model.export, Validators.required],\n            'maxCount': [this.model.maxCount, Validators.compose([\n                this.validationService.integerValidator(),\n                this.validationService.minValidator(1)\n            ])],\n        });\n\n        this.isDownloading = false;\n\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#exportQuery.btnDownload\",\n                result: ModalResult.Custom,\n                anchor: true,\n                primary: true,\n                action: (_button) => {\n                    const observable = this.savedQueriesService.download(this.model);\n                    if (observable) {\n                        Utils.subscribe(observable,\n                            (response: HttpResponse<Blob>) => {\n                                console.log('exportQuery.download done.');\n                                this.notificationsService.info('msg#exportQuery.successNotification');\n                                this.modalRef.close(ModalResult.OK);\n                                return response;\n                            },\n                            (error) => {\n                                console.log('exportQuery.download failure - error: ', error);\n                                this.modalRef.close(error);\n                            });\n\n                        this.isDownloading = true;\n                        this.changeDetectorRef.markForCheck();\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            })\n        ];\n\n        const onFormChanged = () => {\n            const newFormat = this.form.value['format'];\n            const newMaxCount = this.form.value['maxCount'];\n            const newExportedColumns = this.form.value['exportedColumns'];\n\n            if (this.model.format !== newFormat) {\n                this.model.format = newFormat;\n            }\n\n            if (this.model.maxCount !== newMaxCount) {\n                this.model.maxCount = newMaxCount;\n            }\n\n            this.model.exportedColumns = newExportedColumns;\n        };\n\n        this.formChanges = Utils.subscribe(this.form.valueChanges, onFormChanged);\n    }\n\n    ngOnDestroy(): void {\n        if (this.formChanges) {\n            this.formChanges.unsubscribe();\n        }\n    }\n\n    private getDefaultQueryExportConfig(app: CCApp): CCQueryExport {\n        let queryExport = app.queryExport;\n        if (queryExport.indexOf(',') !== -1) {\n            queryExport = queryExport.substring(0, queryExport.indexOf(','));\n        }\n        return <CCQueryExport>Utils.getField(app.webServices, queryExport);\n    }\n\n    /**\n     * Check if the client has selected some records.\n     *\n     * @returns true if the client has selected some records.\n     */\n    public hasSelectedRecords(): boolean {\n        return this.selectionService.haveSelectedRecords;\n    }\n\n    /**\n     * Checks if the user chosen export source is the same as the given one.\n     * <p>\n     * Used to control the radio button state.\n     *\n     * @param type The source to check.\n     * @returns true if the user chosen export source is the same as the given one.\n     */\n    public sourceChosen(type: ExportSourceType): boolean {\n        return (this.model.export & type) !== 0;\n    }\n\n    /**\n     * Callback called when user chooses a new export source.\n     *\n     * @param event The related UI event.\n     * @param type The new chosen source.\n     */\n    public sourceChanged(event: UIEvent, type: ExportSourceType): void {\n        const input = <HTMLInputElement>event.target;\n        if (input.checked) {\n            this.model.export = type;\n        }\n    }\n\n    /**\n     * Checks if the dialog allows user to choose export source.\n     * Generally, it returns false when the input model export type is already saved query.\n     *\n     * @returns true if the dialog allows user to choose export source.\n     */\n    public showSourceChooser(): boolean {\n        return !this.sourceChosen(ExportSourceType.SavedQuery);\n    }\n}\n\ninterface CCQueryExportColumnDef {\n    title: string;\n    pattern: string;\n    selectionQuery?: string;\n}\n\ninterface CCQueryExport extends CCWebService {\n    webServiceType: \"queryexport\";\n    columns?: CCQueryExportColumnDef[];\n    linksFilterDuplicateUrls?: boolean;\n    linksGlobalRelevance?: string;\n    linksMaxCount?: number;\n    linksSortByOrder?: boolean;\n    maxCount?: number;\n    separator?: string;\n}\n","<form name=\"manageSavedQueries\" novalidate>\n    <sq-modal [title]=\"'msg#manageSavedQueries.title'\" [buttons]=\"buttons\">\n        <div *ngIf=\"model.savedQueries.length\" class=\"form-group clearfix\">\n            <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"reorder()\">{{(reordering ? \"msg#manageSavedQueries.edit\" : \"msg#manageSavedQueries.reorder\") | sqMessage}}</button>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"list-group\" cdkDropList [cdkDropListData]=\"model.savedQueries\" [cdkDropListDisabled]=\"!reordering\" (cdkDropListDropped)=\"dropped($event)\">\n                <div *ngFor=\"let savedQuery of model.savedQueries; let $index = index\" cdkDrag \n                    [ngClass]=\"['list-group-item list-group-item-action d-flex w-auto-unimportant', reordering ? 'cursor-move': '']\">\n                    <div *ngIf=\"reordering\" class=\"sq-saved-query-text\">{{savedQuery.name}}</div>\n                    <sq-editable *ngIf=\"!reordering\" [value]=\"savedQuery.name\" (valueChange)=\"setName(savedQuery, $event)\" name=\"msg#manageSavedQueries.name\" [model]=\"savedQuery\" [validators]=\"nameValidators\"></sq-editable>\n                    <div class=\"ml-auto\">\n                        <a *ngIf=\"!reordering && savedQueriesService.hasExportConfig()\" class=\"ml-2\" href=\"#\" (click)=\"export(savedQuery)\" title=\"{{'msg#manageSavedQueries.export' | sqMessage}}\">\n                            <span class=\"fas fa-download sq-export\"></span>\n                        </a>\n                        <a *ngIf=\"!reordering && savedQueriesService.hasRssEnabled()\" class=\"ml-2\" href=\"{{savedQueriesService.rssHref(savedQuery)}}\" target=\"_blank\" title=\"{{'msg#manageSavedQueries.rss' | sqMessage}}\">\n                            <span class=\"fas fa-rss sq-rss\"></span>\n                        </a>\n                        <a *ngIf=\"!reordering\" href=\"#\" (click)=\"remove(savedQuery, $index)\" class=\"ml-2\" title=\"{{'msg#manageSavedQueries.remove' | sqMessage}}\">\n                            <span class=\"fas fa-times sq-remove\"></span>\n                        </a>\n                        <span *ngIf=\"reordering\" class=\"ml-2 fas fa-bars sq-move\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </sq-modal>\n</form>\n","import {Component, Inject, OnInit} from \"@angular/core\";\nimport {Validators, AbstractControl} from \"@angular/forms\";\nimport {ValidatorFn} from \"@angular/forms\";\nimport {CdkDragDrop} from \"@angular/cdk/drag-drop\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ExportSourceType, AuditEvent} from \"@sinequa/core/web-services\";\nimport {SavedQueriesService, SavedQuery, SavedQueryEventType, ManageSavedQueriesModel} from \"../../saved-queries.service\";\n\n@Component({\n    selector: \"sq-manage-saved-queries\",\n    templateUrl: \"./manage-saved-queries.html\",\n    styleUrls: [\"./manage-saved-queries.scss\"]\n})\nexport class BsManageSavedQueries implements OnInit {\n    reordering: boolean;\n    buttons: ModalButton[];\n    removeAllButton: ModalButton;\n    nameValidators: ValidatorFn[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ManageSavedQueriesModel,\n        public savedQueriesService: SavedQueriesService) {\n        this.reordering = false;\n\n        this.nameValidators = [\n            Validators.required,\n            (control: AbstractControl) => {\n                const modelControl = control.root.get(\"model\");\n                if (modelControl) {\n                    for (const item of this.model.savedQueries) {\n                        if (modelControl.value === item) {\n                            continue;\n                        }\n                        if (control.value === item.name) {\n                            return {\n                                unique: true\n                            };\n                        }\n                    }\n                }\n                return null;\n            }\n        ];\n    }\n\n    ngOnInit() {\n        this.buttons = [\n            this.removeAllButton = new ModalButton({\n                text: \"msg#manageSavedQueries.removeAll\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.model.savedQueries.splice(0);\n                    button.visible = false;\n                    this.addAuditEvent({\n                        type: SavedQueryEventType.DeleteAll\n                    });\n                },\n                visible: this.model.savedQueries.length > 0\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    addAuditEvent(auditEvent: AuditEvent) {\n        if (!this.model.auditEvents) {\n            this.model.auditEvents = [];\n        }\n        this.model.auditEvents.push(auditEvent);\n    }\n\n    reorder() {\n        this.reordering = !this.reordering;\n    }\n\n    setName(savedQuery: SavedQuery, name: string) {\n        if (!Utils.eqNC(savedQuery.name, name)) {\n            this.addAuditEvent({\n                type: SavedQueryEventType.Rename,\n                detail: {\n                    query: name,\n                    \"old-name\": savedQuery.name\n                }\n            });\n            savedQuery.name = name;\n        }\n    }\n\n    remove(savedQuery: SavedQuery, index: number) {\n        this.model.savedQueries.splice(index, 1);\n        this.removeAllButton.visible = this.model.savedQueries.length > 0;\n        this.addAuditEvent({\n            type: SavedQueryEventType.Delete,\n            detail: {\n                query: savedQuery.name\n            }\n        });\n        return false;\n    }\n\n    export(savedQuery: SavedQuery) {\n        this.savedQueriesService.exportModal(ExportSourceType.SavedQuery, savedQuery);\n        return false;\n    }\n\n    dropped(drop: CdkDragDrop<SavedQuery[]>) {\n        Utils.arrayMove(this.model.savedQueries, drop.previousIndex, drop.currentIndex);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Results, ExportSourceType } from \"@sinequa/core/web-services\";\nimport { SavedQueriesService } from \"../../saved-queries.service\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { Action } from \"@sinequa/components/action\";\n\n\n\n/**\n * Toolbar component for Export query feature.\n *\n */\n@Component({\n    selector: 'sq-query-exporter',\n    templateUrl: './query-exporter.html'\n})\nexport class BsQueryExporter {\n\n    @Input() results: Results;\n    @Input() rightAligned: boolean;\n\n    public exportAction: Action;\n\n    constructor(\n        private selectionService: SelectionService,\n        private savedQueriesService: SavedQueriesService\n    ) {\n        this.exportAction = new Action({\n            icon: 'fas fa-download',\n            title: 'msg#exportQuery.btnTitle',\n            action: (item: Action, event: Event) => {\n                this.export();\n            }\n        });\n    }\n\n    /**\n     * Check if the client has selected some records.\n     *\n     * @returns true if the client has selected some records.\n     */\n    public hasSelectedRecords(): boolean {\n        return this.selectionService.haveSelectedRecords;\n    }\n\n    /**\n     * Generic export function.\n     * <p>\n     * Opens up a dialog to let user choose the export source, export format and other parameters.\n     *\n     * @memberof QueryExporter\n     */\n    public export(): void {\n\n        this.savedQueriesService.exportModal(\n            this.hasSelectedRecords() ? ExportSourceType.Selection : ExportSourceType.Result);\n\n    }\n\n}\n","<div [sq-action-buttons]=\"{\n        items: [exportAction],\n        autoAdjust: true,\n        rightAligned: rightAligned\n    }\">\n</div>","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Action } from '@sinequa/components/action';\nimport { LoginService } from '@sinequa/core/login';\nimport { SearchService } from '@sinequa/components/search';\nimport { SavedQueriesService } from '../../saved-queries.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'sq-saved-queries-menu',\n  templateUrl: './saved-queries-menu.component.html'\n})\nexport class BsSavedQueriesMenuComponent implements OnInit, OnDestroy {\n  @Input() searchRoute: string = \"/search\";\n  @Input() icon: string = \"far fa-save\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action | undefined;\n\n  // Saved queries actions\n  manageAction: Action;\n  saveAction: Action;\n\n  constructor(\n    public loginService: LoginService,\n    public savedQueriesService: SavedQueriesService,\n    public searchService: SearchService) {\n\n    this.saveAction = new Action({\n      text: \"msg#savedQueries.saveCurrentQuery\",\n      title: \"msg#savedQueries.saveCurrentQuery\",\n      action: () => { this.savedQueriesService.createSavedQueryModal(); }\n    });\n\n    this.manageAction = new Action({\n      text: \"msg#savedQueries.manageSavedQueries\",\n      title: \"msg#savedQueries.manageSavedQueries\",\n      action: () => { this.savedQueriesService.manageSavedQueriesModal(); }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._savedQueriesSubscription = this.savedQueriesService.changes.subscribe({\n      next: () => { this.updateMenu(); }\n    });\n    this._loginSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._searchSubscription = this.searchService.resultsStream.subscribe(results => {\n      this.updateMenu();\n    });\n  }\n\n  private _savedQueriesSubscription: Subscription;\n  private _loginSubscription: Subscription;\n  private _searchSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._savedQueriesSubscription){\n      this._savedQueriesSubscription.unsubscribe();\n    }\n    if(this._loginSubscription){\n      this._loginSubscription.unsubscribe();\n    }\n    if(this._searchSubscription){\n      this._searchSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n\n    if (!this.loginService.complete) {\n      this.menu = undefined;\n      return;\n    }\n\n    const savedQueriesActions: Action[] = [];\n\n    if (this.savedQueriesService.hasSavedQuery) {\n        const scrollGroup = new Action({\n            scrollGroup: true,\n            children: this.savedQueriesService.savedqueries.map(savedQuery => new Action({\n              text: savedQuery.name,\n              title: savedQuery.name,\n              data: savedQuery,\n              action: item => this.savedQueriesService.searchSavedQuery(item.data, this.searchRoute)\n          }))\n        });\n        savedQueriesActions.push(scrollGroup);\n    }\n\n    if (!!this.searchService.results) {\n      savedQueriesActions.push(this.saveAction);\n    }\n\n    if (this.savedQueriesService.hasSavedQuery) {\n      savedQueriesActions.push(this.manageAction);\n    }\n\n    this.menu = new Action({\n        icon: this.icon,\n        text: \"msg#savedQueries.savedQueries\",\n        children: savedQueriesActions\n    });\n  }\n}\n","<div class=\"list-group list-group-flush\">\n    <a *ngFor=\"let query of savedQueriesService.savedqueries | slice:startIndex:endIndex\"\n        class=\"saved-query-item list-group-item list-group-item-action d-flex align-items-center\"\n        [routerLink]=\"[searchRoute]\" [queryParams]=\"getQueryParams(query)\" [state]=\"getRouterState(query)\"\n        (click)=\"openSavedQuery(query)\">\n        <span class=\"query-name mr-auto text-truncate\" [title]=\"query.name\">{{ query.name }}</span>\n        <span *ngIf=\"query.query.text\" class=\"query-text text-muted small font-italic text-right text-truncate ml-2\">\"{{ query.query.text }}\"</span>\n        <i *ngIf=\"enableDelete\" class=\"query-delete ml-2 fas fa-times\" [title]=\"'msg#savedQueries.delete' | sqMessage\" (click)=\"deleteQuery(query, $event)\"></i>\n    </a>\n    <div *ngIf=\"savedQueriesService.savedqueries.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#savedQueries.noSavedQuery' | sqMessage }}\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { SavedQueriesService, SavedQuery, SavedQueryEventType } from '../../saved-queries.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\n\n@Component({\n  selector: 'sq-facet-saved-queries',\n  templateUrl: './facet-saved-queries.html',\n  styles: [`\n.saved-query-item .query-delete{\n    opacity: 0;\n}\n\n.saved-query-item:hover .query-delete{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetSavedQueries extends AbstractFacet  {\n    @Input() searchRoute: string = \"/search\";\n    @Input() maxQueries: number = 5;\n    @Input() enableDelete: boolean = true;\n\n    page: number = 0;\n\n    manageSavedQueries: Action;\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public savedQueriesService: SavedQueriesService) {\n        super();\n\n        this.manageSavedQueries = new Action({\n            icon: \"fas fa-cog\",\n            title: \"msg#savedQueries.manageSavedQueries\",\n            action: () => {\n                this.savedQueriesService.manageSavedQueriesModal();\n            }\n        });\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.savedQueriesService.savedqueries.length / this.maxQueries) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxQueries;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxQueries;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage, this.manageSavedQueries];\n    }\n\n    openSavedQuery(query: SavedQuery){\n        this.savedQueriesService.notifyOpenSavedQuery(query)\n        return true;\n    }\n\n    deleteQuery(query: SavedQuery, event: Event){\n        event.stopPropagation();\n        this.savedQueriesService.deleteSavedQuery(query);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    getQueryParams(savedQuery: SavedQuery) {\n        const query = this.savedQueriesService.searchService.makeQuery(savedQuery.query);\n        const queryParams = query.toJsonForQueryString();\n        return {query: queryParams};\n    }\n\n    getRouterState(savedQuery: SavedQuery) {\n        return {\n            audit: {\n                type: SavedQueryEventType.Search,\n                detail: {\n                    \"saved-query\": savedQuery.name\n                }\n            }\n        }\n    }\n}\n","<div class=\"list-group list-group-flush\">\n    <a *ngFor=\"let query of recentQueriesService.recentqueries | slice:startIndex:endIndex\" \n        class=\"recent-query-item list-group-item list-group-item-action d-flex align-items-center\"\n        [routerLink]=\"[searchRoute]\" [queryParams]=\"getQueryParams(query.query)\" [state]=\"getRouterState(query.query)\"\n        (click)=\"openRecentQuery(query)\">\n        <span class=\"query-text mr-auto text-truncate\" title=\"{{ query.query.text }}\">{{ query.query.text }}</span>\n        <span *ngIf=\"query.date\" class=\"query-date ml-2 text-muted small text-right\">{{ query.date | sqDate }}</span>\n        <i *ngIf=\"enableSave\" class=\"query-save ml-2 far fa-save\" [title]=\"'msg#recentQueries.save' | sqMessage\" (click)=\"saveQuery(query, $event)\"></i>\n        <i *ngIf=\"enableDelete\"class=\"query-delete ml-2 fas fa-times\" [title]=\"'msg#recentQueries.delete' | sqMessage\" (click)=\"deleteQuery(query, $event)\"></i>\n    </a>\n    <div *ngIf=\"recentQueriesService.recentqueries.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#recentQueries.noRecentQuery' | sqMessage }}\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { SearchService } from '@sinequa/components/search';\nimport { RecentQueriesService, RecentQuery, RecentQueryEventType } from '../../recent-queries.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SavedQueriesService } from '../../saved-queries.service';\nimport { Utils } from '@sinequa/core/base';\nimport { Query } from '@sinequa/core/app-utils';\n\n@Component({\n  selector: 'sq-facet-recent-queries',\n  templateUrl: './facet-recent-queries.html',\n  styles: [`\n.recent-query-item .query-delete, .recent-query-item .query-save{\n    opacity: 0;\n}\n\n.recent-query-item:hover .query-delete, .recent-query-item:hover .query-save{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetRecentQueries extends AbstractFacet  {\n    @Input() searchRoute: string = \"/search\";\n    @Input() maxQueries: number = 5;\n    @Input() enableDelete: boolean = true;\n    @Input() enableSave: boolean = true;\n\n    page: number = 0;\n\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public searchService: SearchService,\n        public recentQueriesService: RecentQueriesService,\n        public savedQueriesService: SavedQueriesService) {\n        super();\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.recentQueriesService.recentqueries.length / this.maxQueries) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxQueries;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxQueries;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage];\n    }\n\n    openRecentQuery(query: RecentQuery){\n        this.recentQueriesService.notifyOpenRecentQuery(query);\n        return true;\n    }\n\n    deleteQuery(query: RecentQuery, event: Event){\n        event.stopPropagation();\n        this.recentQueriesService.deleteRecentQuery(query);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    saveQuery(query: RecentQuery, event: Event){\n        event.stopPropagation();\n        const q = Utils.extend(this.searchService.makeQuery(), Utils.copy(query.query));\n        this.savedQueriesService.createSavedQueryModal(q);\n        return false;\n    }\n\n    getQueryParams(recentQuery: Query) {\n        const query = this.searchService.makeQuery(recentQuery);\n        const queryParams = query.toJsonForQueryString();\n        return {query: queryParams};\n    }\n\n    getRouterState(recentQuery: Query) {\n        return {\n            audit: {\n                type: RecentQueryEventType.Search,\n                detail: {\n                    recentquery: recentQuery.text\n                }\n            }\n        }\n    }\n}\n","<div class=\"list-group list-group-flush\">\n    <ng-container *ngFor=\"let document of recentDocumentsService.recentdocuments | slice:startIndex:endIndex\">\n        <a *ngIf=\"openOriginal && document.url1; else internalLink\"\n            class=\"recent-document-item list-group-item list-group-item-action d-flex align-items-center\"\n            [attr.href]=\"document.url1\" target=\"_blank\" rel=\"noopener\"\n            (click)=\"openRecentDocument(document)\">\n            <span class=\"document-text mr-auto text-truncate\" title=\"{{ document.title }}\">{{ document.title }}</span>\n            <span *ngIf=\"document.date\" class=\"document-date ml-2 text-muted small text-right\">{{ document.date | sqDate }}</span>\n            <i *ngIf=\"enableDelete\" class=\"document-delete ml-2 fas fa-times\" [title]=\"'msg#recentDocuments.delete' | sqMessage\" (click)=\"deleteDocument(document, $event)\"></i>\n        </a>\n        <ng-template #internalLink>\n        <a class=\"recent-document-item list-group-item list-group-item-action d-flex align-items-center\"\n            [routerLink]=\"searchRoute\" [queryParams]=\"getQueryParams(document)\"\n            (click)=\"openRecentDocument(document)\">\n            <span class=\"document-text mr-auto text-truncate\" title=\"{{ document.title }}\">{{ document.title }}</span>\n            <span *ngIf=\"document.date\" class=\"document-date ml-2 text-muted small text-right\">{{ document.date | sqDate }}</span>\n            <i *ngIf=\"enableDelete\" class=\"document-delete ml-2 fas fa-times\" [title]=\"'msg#recentDocuments.delete' | sqMessage\" (click)=\"deleteDocument(document, $event)\"></i>\n        </a>\n        </ng-template>\n    </ng-container>\n    <div *ngIf=\"recentDocumentsService.recentdocuments.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#recentDocuments.noRecentDocument' | sqMessage }}\n    </div>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { RecentDocumentsService, RecentDocument } from '../../recent-documents.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\n@Component({\n  selector: 'sq-facet-recent-documents',\n  templateUrl: './facet-recent-documents.html',\n  styles: [`\n.recent-document-item .document-delete{\n    opacity: 0;\n}\n\n.recent-document-item:hover .document-delete{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetRecentDocuments extends AbstractFacet  {\n    @Input() searchRoute: string = \"/preview\";\n    @Input() maxDocuments: number = 5;\n    @Input() enableDelete: boolean = true;\n    @Input() openOriginal: boolean = false;\n    @Output() documentOpened = new EventEmitter<RecentDocument>();\n\n    page: number = 0;\n\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public recentDocumentsService: RecentDocumentsService,\n        public searchService: SearchService) {\n        super();\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.recentDocumentsService.recentdocuments.length / this.maxDocuments) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxDocuments;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxDocuments;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage];\n    }\n\n    openRecentDocument(document: RecentDocument) {\n        if(this.openOriginal && !!document.url1){\n            this.searchService.notifyOpenOriginalDocument(<any> document);\n        }\n        this.documentOpened.emit(document); // Can be use to trigger actions, like the preview\n        return true;\n    }\n\n    deleteDocument(document: RecentDocument, event: Event){\n        this.recentDocumentsService.deleteRecentDocument(document);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    getQueryParams(document: RecentDocument) {\n        return {\n            id: document.id,\n            query: this.searchService.makeQuery().toJsonForQueryString()\n        };\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {RouterModule} from '@angular/router';\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {SAVEDQUERY_COMPONENTS} from \"../saved-queries.service\";\nimport {BsEditSavedQuery} from \"./edit-saved-query/edit-saved-query\";\nimport {BsManageSavedQueries} from \"./manage-saved-queries/manage-saved-queries\";\nimport {BsExportQuery} from \"./export-query/export-query\";\nimport {BsQueryExporter} from \"./query-exporter/query-exporter\";\nimport {BsSavedQueriesMenuComponent} from \"./saved-queries-menu/saved-queries-menu.component\";\nimport {BsFacetSavedQueries} from \"./facet-saved-queries/facet-saved-queries\";\nimport {BsFacetRecentQueries} from \"./facet-recent-queries/facet-recent-queries\";\nimport {BsFacetRecentDocuments} from \"./facet-recent-documents/facet-recent-documents\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n        DragDropModule,\n\n        BsModalModule,\n\n        IntlModule,\n        ValidationModule,\n        RouterModule,\n\n        BsSelectionModule,\n        BsModalModule,\n        UtilsModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsEditSavedQuery, BsManageSavedQueries,\n        BsExportQuery, BsQueryExporter, BsSavedQueriesMenuComponent,\n        BsFacetSavedQueries, BsFacetRecentQueries, BsFacetRecentDocuments\n    ],\n    exports: [\n        BsEditSavedQuery, BsManageSavedQueries,\n        BsExportQuery, BsQueryExporter, BsSavedQueriesMenuComponent,\n        BsFacetSavedQueries, BsFacetRecentQueries, BsFacetRecentDocuments\n    ],\n    providers: [\n        {\n            provide: SAVEDQUERY_COMPONENTS,\n            useValue: {\n                editSavedQueryModal: BsEditSavedQuery,\n                manageSavedQueriesModal: BsManageSavedQueries,\n                exportSavedQueryModal: BsExportQuery\n            }\n        }\n    ]\n})\nexport class BsSavedQueriesModule {\n}\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Saved Queries\",\n        \"saveCurrentQuery\": \"Save Current Query\",\n        \"manageSavedQueries\": \"Manage Saved Queries\",\n        \"savedQueryAlreadyExists\": \"A saved query with that name already exists. Would you like to replace it?\",\n        \"noSavedQuery\": \"You have not yet saved a search query...\",\n        \"delete\": \"Delete this saved query\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"You have not yet searched for something...\",\n        \"delete\": \"Delete this recent query\",\n        \"save\": \"Save this query\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Recent documents\",\n        \"noRecentDocument\": \"You have not yet opened a document...\",\n        \"delete\": \"Delete this recent document\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Saved Query\",\n        \"name\": \"Name\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Output format\",\n        \"dialogMaxCount\": \"Max rows\",\n        \"dialogSourceType\": \"Export from\",\n        \"dialogResult\": \"Current result\",\n        \"dialogSelection\": \"Current selection\",\n        \"btnTitle\": \"Export results\",\n        \"exportResult\": \"Export result as {type}\",\n        \"exportSelection\": \"Export selection as {type}\",\n        \"btnDownload\": \"Download\",\n        \"btnClose\": \"Close\",\n        \"successNotification\": \"Download complete\",\n        \"exportedColumns\": \"Columns to export\",\n        \"exportedColumnsLabelTooltip\": \"Select the columns that you want to export, an empty selection means exporting all columns\",\n        \"dialogMaxCountTooltip\": \"By default, the number of results is limited to {count}\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Manage Saved Queries\",\n        \"edit\": \"Edit\",\n        \"reorder\": \"Reorder\",\n        \"remove\": \"Remove\",\n        \"removeAll\": \"Remove all\",\n        \"export\": \"Export\",\n        \"name\": \"Name\",\n        \"rss\": \"RSS Feed\"\n    },\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enSelection, frSelection, deSelection} from \"@sinequa/components/selection\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\n\nimport _enSavedQueries from \"./en\";\nimport _frSavedQueries from \"./fr\";\nimport _deSavedQueries from \"./de\";\n\nconst enSavedQueries = Utils.merge({}, _enSavedQueries, enSearch, enSelection, enModal);\nconst frSavedQueries = Utils.merge({}, _frSavedQueries, frSearch, frSelection, frModal);\nconst deSavedQueries = Utils.merge({}, _deSavedQueries, deSearch, deSelection, deModal);\n\nexport { enSavedQueries, frSavedQueries, deSavedQueries };\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Requêtes sauvegardées\",\n        \"saveCurrentQuery\": \"Enregistrer la requête courante\",\n        \"manageSavedQueries\": \"Gérer les requêtes sauvegardées\",\n        \"savedQueryAlreadyExists\": \"Une requête sauvegardée avec ce nom existe déjà. Voulez-vous la remplacer ?\",\n        \"noSavedQuery\": \"Vous n'avez pas encore enregistré de requête de recherche...\",\n        \"delete\": \"Supprimer cette requête enregistrée\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"Vous n'avez pas encore effectué de recherche...\",\n        \"delete\": \"Supprimer cette requête\",\n        \"save\": \"Enregistrer cette requête\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Documents récents\",\n        \"noRecentDocument\": \"Vous n'avez pas encore ouvert de document...\",\n        \"delete\": \"Supprimer ce document récent\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Requête sauvegardée\",\n        \"name\": \"Nom\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Format de sortie\",\n        \"dialogMaxCount\": \"Nb max de lignes\",\n        \"dialogSourceType\": \"Exporter depuis\",\n        \"dialogResult\": \"Résultat courant\",\n        \"dialogSelection\": \"Sélection courante\",\n        \"btnTitle\": \"Exporter les résultats\",\n        \"exportResult\": \"Exporter le résultat en {type}\",\n        \"exportSelection\": \"Exporter la sélection en {type}\",\n        \"btnDownload\": \"Télécharger\",\n        \"btnClose\": \"Fermer\",\n        \"successNotification\": \"Téléchargement terminé\",\n        \"exportedColumns\": \"Colonnes à exporter\",\n        \"exportedColumnsLabelTooltip\": \"Sélectionnez les colonnes que vous souhaitez exporter, une sélection vide signifie la sélection de tous le colonnes\",\n        \"dialogMaxCountTooltip\": \"Par défaut, le nombre de résultats est limité à {count}\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Gérer les requêtes sauvegardées\",\n        \"edit\": \"Editer\",\n        \"reorder\": \"Réorganiser\",\n        \"remove\": \"Effacer\",\n        \"removeAll\": \"Effacer tout\",\n        \"export\": \"Exporter\",\n        \"name\": \"Nom\",\n        \"rss\": \"Flux RSS\"\n    },\n\n};\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Gespeicherte Suchanfragen\",\n        \"saveCurrentQuery\": \"Aktuelle Suchanfrage speichern\",\n        \"manageSavedQueries\": \"Aktuelle Suchanfragen verwalten\",\n        \"savedQueryAlreadyExists\": \"Es existiert bereits eine Suchanfrage mit diesem Namen. Möchten Sie sie ersetzen?\",\n        \"noSavedQuery\": \"Sie haben noch keine Suchanfrage gespeichert...\",\n        \"delete\": \"Löschen Sie diese gespeicherte Suche\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"Sie haben noch keine Suche durchgeführt...\",\n        \"delete\": \"Löschen Sie diese letzte Suche\",\n        \"save\": \"Speichern Sie diese letzte Suche\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Kürzlich angesehenes Dokument\",\n        \"noRecentDocument\": \"Sie haben kein Dokument angezeigt\",\n        \"delete\": \"Löschen Sie dieses kürzlich angezeigte Dokument\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Gespeicherte Suchanfrage\",\n        \"name\": \"Name\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Ausgabeformat\",\n        \"dialogMaxCount\": \"Maximale Anzahl der Zeilen\",\n        \"dialogSourceType\": \"Exportiere ...\",\n        \"dialogResult\": \"aktuelle Ergebnisliste\",\n        \"dialogSelection\": \"aktuelle Auswahl\",\n        \"btnTitle\": \"Export\",\n        \"exportResult\": \"Exportiere die Ergebnisliste als {type}\",\n        \"exportSelection\": \"Exportiere die Auswahl als {type}\",\n        \"btnDownload\": \"Herunterladen\",\n        \"btnClose\": \"Schließen\",\n        \"successNotification\": \"Herunterladen beendet\",\n        \"exportedColumns\": \"Zu exportierende Spalten\",\n        \"exportedColumnsLabelTooltip\": \"Wählen Sie die Spalten aus, die Sie exportieren möchten. Eine leere Auswahl bedeutet, dass alle Spalten exportiert werden\",\n        \"dialogMaxCountTooltip\": \"Standardmäßig ist die Anzahl der Ergebnisse auf {count} begrenzt\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Gespeicherte Suchanfragen verwalten\",\n        \"edit\": \"Bearbeiten\",\n        \"reorder\": \"Neu sortieren\",\n        \"remove\": \"Entfernen\",\n        \"removeAll\": \"Alle entfernen\",\n        \"export\": \"Exportieren\",\n        \"name\": \"Name\",\n        \"rss\": \"RSS-Feed\"\n    },\n\n};\n"]}