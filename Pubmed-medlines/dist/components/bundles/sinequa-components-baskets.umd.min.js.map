{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/components/baskets/baskets.service.ts","../projects/components/baskets/bootstrap/edit-basket/edit-basket.ts","../projects/components/baskets/bootstrap/manage-baskets/manage-baskets.html","../projects/components/baskets/bootstrap/edit-basket/edit-basket.html","../projects/components/baskets/bootstrap/manage-baskets/manage-baskets.ts","../projects/components/baskets/bootstrap/select-basket/select-basket.html","../projects/components/baskets/bootstrap/select-basket/select-basket.ts","../projects/components/baskets/bootstrap/result-baskets/result-baskets.ts","../projects/components/baskets/bootstrap/result-baskets/result-baskets.html","../projects/components/baskets/bootstrap/baskets-menu/baskets-menu.component.html","../projects/components/baskets/bootstrap/baskets-menu/baskets-menu.component.ts","../projects/components/baskets/bootstrap/facet-baskets/facet-baskets.component.html","../projects/components/baskets/bootstrap/facet-baskets/facet-baskets.component.ts","../../projects/components/baskets/bootstrap/baskets.module.ts","../../projects/components/baskets/messages/en.ts","../../projects/components/baskets/messages/index.ts","../../projects/components/baskets/messages/fr.ts","../../projects/components/baskets/messages/de.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","BASKET_CHANGE_EVENTS","BASKET_COMPONENTS","InjectionToken","BasketsService","userSettingsService","searchService","modalService","selectionService","basketComponents","_this","this","_events","Subject","_changes","events","subscribe","event","type","indexOf","changes","selectedRecordsAction","buildBasketsAction","defineProperty","prototype","userSettings","baskets","basket","name","basketIndex","undefined","ic","createBasket","unshift","patchBaskets","detail","updateBasket","index","prevIndex","splice","updateBaskets","auditEvents","Utils","arraySet","deleteBasket","savedquery","addToBasket","ids","skipPatch","isArray","id","push","doc-id","removeFromBasket","removeFromAllBaskets","_b","_c","updateSearch","obs","patch","query","search","error","console","searchBasket","path","makeQuery","setQuery","addToBasketModal","recordBaskets","model","basketFilter","includes","allowNew","open","selectBasketModal","then","result","removeFromBasketModal","createBasketModal","editBasketModal","index_1","yesNo","manageBasketsModal","copy","Action","icon","title","hidden","children","text","action","item","$event","getSelectedIds","updater","haveSelectedRecords","notifyOpenBasket","ngOnDestroy","complete","i0","ɵɵinject","i3$1","UserSettingsWebService","i2","SearchService","i3$2","ModalService","i4","SelectionService","factory","ɵfac","providedIn","BsEditBasket","formBuilder","ngOnInit","nameControl","FormControl","Validators","required","form","group","basketName","formChanges","valueChanges","buttons","ModalButton","primary","validation","unsubscribe","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵproperty","basket_r4","ctx_r7","nameValidators","i0.ɵɵelement","i0.ɵɵpropertyInterpolate","ɵɵdirectiveInject","MODAL_MODEL","i1","FormBuilder","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵtemplate","BsManageBaskets","reordering","control","modelControl","root","get","unique","removeAllButton","button","visible","addAuditEvent","auditEvent","reorder","setName","eqNC","old-name","remove","dropped","drop","arrayMove","previousIndex","currentIndex","BsSelectBasket","basketsService","modalRef","filter","activate","select","close","newBasket","ModalRef","BsResultBaskets","changeDetectorRef","ngOnChanges","initialized","addToBasketAction","buildAddToBasketAction","removeFromBasketAction","buildRemoveFromBasketAction","removeFromAllBasketsAction","buildRemovalFromAllBasketsAction","basketsSubscription","updateRecordBaskets","refreshVisualization","basketsAction","markForCheck","currentBaskets","currentBaskets_1","currentBaskets_1_1","record","values","join","isInBaskets","ChangeDetectorRef","inputs","rightAligned","features","ɵɵNgOnChangesFeature","i0.ɵɵclassMapInterpolate1","ctx_r0","collapseBreakpoint","BsBasketsMenuComponent","loginService","principalService","appService","searchRoute","autoAdjust","autoAdjustBreakpoint","basketOptions","basketCustomOptions","createAction","_","manageAction","updateMenu","basketsActions","hasBasket","map","sendEmail","separator","menu","curr","mailToUrl","_a","principal","appName","body","window","location","host","pathname","encodeURIComponent","log","href","i1$1","LoginService","PrincipalWebService","AppWebService","size","getQueryParams","basket_r2","getRouterState","i0.ɵɵtextInterpolate1","BsFacetBasketsComponent","_super","maxBaskets","enableDelete","page","manageBasket","previousPage","disabled","maxPage","nextPage","__","constructor","__extends","Math","max","ceil","openBasket","update","stopPropagation","min","toJsonForQueryString","audit","AbstractFacet","ɵɵInheritDefinitionFeature","BsBasketsModule","providers","provide","useValue","imports","CommonModule","FormsModule","ReactiveFormsModule","DragDropModule","RouterModule","BsModalModule","IntlModule","ValidationModule","UtilsModule","BsSelectionModule","BsActionModule","declarations","exports","enBaskets","merge","removeFromAllBasketsConfirmation","basketAlreadyExists","noBasket","manageBaskets","delete","editBasket","edit","removeAll","selectBasket","enSearch","enSelection","enModal","frBaskets","frSearch","frSelection","frModal","deBaskets","deSearch","deSelection","deModal"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {Injectable, Inject, InjectionToken, Type, OnDestroy} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvent, AuditEvents} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport {Action} from \"@sinequa/components/action\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Query} from '@sinequa/core/app-utils';\n\n// Basket interface (from models/UserSettings)\nexport interface Basket {\n    name: string;\n    description?: string;\n    ids?: string[];\n}\n\n\n// Audit Events (from models/Audit)\nexport const enum BasketEventType {\n    Loaded = \"Basket_Loaded\",\n    Add = \"Basket_Add\",\n    Delete = \"Basket_Delete\",\n    DeleteAll = \"Basket_DeleteAll\",\n    Update = \"Basket_Update\",\n    Rename = \"Basket_Rename\",\n\n    AddDoc = \"Basket_AddDoc\",\n    RemoveDoc = \"Basket_RemoveDoc\",\n    Open = \"Basket_Open\",\n    ExportCSV = \"Basket_ExportCSV\",\n    Patched = \"Basked_Patched\"\n}\n\n\n// Types of events triggering a change event\nexport const BASKET_CHANGE_EVENTS = [\n    BasketEventType.Loaded,\n    BasketEventType.Add,\n    BasketEventType.Delete,\n    BasketEventType.DeleteAll,\n    BasketEventType.Update,\n    BasketEventType.Rename\n];\n\n\n// CRUD Events\nexport interface BasketChangeEvent {\n    type: BasketEventType;\n    basket?: Basket;\n}\n\n\n// Model expected by the SelectBasket Modal.\n// The filter allows to filter out baskets from the complete list\nexport interface SelectBasketModel {\n    basket: Basket | undefined;\n    basketFilter?: (basket: Basket) => boolean;\n    allowNew?: boolean;\n}\n\n// Model expected by the ManageBaskets Modal.\nexport interface ManageBasketsModel {\n    baskets: Basket[];\n    auditEvents?: AuditEvent[];\n}\n\n\n/**\n * The modal types are unknown to this service.\n * The module using this service must provide these components\n * in their forRoot() method\n *\n * Example below:\n *\n *  public static forRoot(): ModuleWithProviders<BasketsModule> {\n        return {\n            ngModule: BasketsModule,\n            providers: [\n                {\n                    provide: BASKET_COMPONENTS,\n                    useValue: {\n                        selectBasketModal: SelectBasket,\n                        editBasketModal: EditBasket,\n                        manageBasketsModal: ManageBaskets\n                    }\n                },\n                BasketsService\n            ]\n        };\n    }\n */\nexport interface BasketComponents {\n    selectBasketModal: Type<any>;\n    editBasketModal: Type<any>;\n    manageBasketsModal: Type<any>;\n}\nexport const BASKET_COMPONENTS = new InjectionToken<BasketComponents>('BASKET_COMPONENTS');\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BasketsService implements OnDestroy {\n\n    private readonly _events = new Subject<BasketChangeEvent>();\n    private readonly _changes = new Subject<BasketChangeEvent>();\n\n    // An application may want to alter the action (icon, etc.)\n    public selectedRecordsAction: Action;\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        public modalService: ModalService,\n        public selectionService: SelectionService,\n        @Inject(BASKET_COMPONENTS) public basketComponents: BasketComponents\n    ){\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this._events.next({type: BasketEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(BASKET_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n        // Register a basket action onto the selection service, so that users can add/remove to/from baskets when documents are selected\n        this.selectedRecordsAction = this.buildBasketsAction();\n    }\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's baskets.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of baskets if it does not already exist.\n     */\n    public get baskets() : Basket[] {\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"baskets\"])\n            this.userSettingsService.userSettings[\"baskets\"] = [];\n        return this.userSettingsService.userSettings[\"baskets\"];\n    }\n\n    /**\n     * Triggers any event among BasketChangeEvent\n     * (use for fine-grained control of baskets workflow)\n     */\n    public get events() : Subject<BasketChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of baskets\n     * (use to refresh basket menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<BasketChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one basket\n     */\n    public get hasBasket(): boolean {\n        return this.baskets.length > 0;\n    }\n\n    /**\n     * @returns a basket with the given name or null if it does not exist\n     * @param name\n     */\n    public basket(name: string): Basket | undefined {\n        const i = this.basketIndex(name);\n        return i>= 0? this.baskets[i] : undefined;\n    }\n\n    private basketIndex(name: string): number {\n        for (let i = 0, ic = this.baskets.length; i < ic; i++) {\n            const basket = this.baskets[i];\n            if (basket && basket.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new basket unless it already exists.\n     * Emits an Basket event.\n     * Update the data on the server.\n     * @param basket the basket to create\n     * @returns true if basket was created\n     */\n    public createBasket(basket: Basket) : boolean {\n\n        if(this.basketIndex(basket.name) >= 0)\n            return false; // This basket already exists\n\n        this.baskets.unshift(basket);\n        this._events.next({type : BasketEventType.Add, basket: basket});\n        this.patchBaskets([{\n            type: BasketEventType.Add,\n            detail: {\n                basket: basket.name\n            }\n        }]);\n        return true;\n    }\n\n    /**\n     * Update the basket at the given index, unless a basket with the same name\n     * already exists in the list of baskets.\n     * Emits a Basket event.\n     * Update the data on the server.\n     * @param basket the basket to update\n     * @param index the index at which to update the basket\n     * @returns true if basket was updated\n     */\n    public updateBasket(basket: Basket, index : number) : boolean {\n\n        const prevIndex = this.basketIndex(basket.name);\n        if(prevIndex !== -1 && index !== prevIndex)\n            return false; // A basket with the same name exists at a different index\n\n        if(index >= 0 && index < this.baskets.length){\n\n            this.baskets.splice(index, 1, basket);\n            this._events.next({type : BasketEventType.Update, basket: basket});\n            this.patchBaskets([\n                {\n                    type: BasketEventType.Update,\n                    detail: {\n                        basket: basket.name\n                    }\n                }\n            ], true);\n            return true;\n\n        }\n        return false;   // This basket does not exist\n    }\n\n    /**\n     * Updates the full list of Baskets.\n     * Emits a Basket event.\n     * Update the data on the server.\n     * @param baskets the new list of baskets\n     * @param auditEvents the list of audit events to log\n     */\n    public updateBaskets(baskets: Basket[], auditEvents?: AuditEvents) : boolean {\n        Utils.arraySet(this.baskets, baskets);\n        this._events.next({type : BasketEventType.Update});\n        this.patchBaskets(auditEvents, true);\n        return true;\n    }\n\n    /**\n     * Deletes the given Basket (based on its name)\n     * Emits an Basket event.\n     * Update the data on the server.\n     * @param basket\n     * @returns true if basket was deleted\n     */\n    public deleteBasket(basket: Basket) : boolean {\n\n        const index = this.basketIndex(basket.name);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.baskets.splice(index, 1);\n        this._events.next({type : BasketEventType.Delete, basket: basket});\n        this.patchBaskets([\n            {\n                type: BasketEventType.Delete,\n                detail: {\n                    savedquery: basket.name\n                }\n            }\n        ], true);\n        return true;\n    }\n\n    /**\n     * Adds one or more documents to a basket.\n     * Emits a Basket event.\n     * Update the data on the server.\n     * @param name basket to which to add the document(s)\n     * @param ids id(s) of the document(s) to add to the basket\n     * @param skipPatch if true, will not update the data on the server (use for bulk updates)\n     * @returns true if the document was added\n     */\n    public addToBasket(name: string, ids: string | string[], skipPatch?: boolean): boolean {\n        if (!ids) {\n            return false;\n        }\n        const basket = this.basket(name);\n        if (!basket) return false;\n        if (!basket.ids) basket.ids = [];\n        if (Utils.isArray(ids)) {\n            for (let i = 0, ic = ids.length; i < ic; i++) {\n                const id = ids[i];\n                if (basket.ids.indexOf(id) === -1) {\n                    basket.ids.push(id);\n                }\n            }\n        }\n        else {\n            if (basket.ids.indexOf(<string>ids) === -1) {\n                basket.ids.push(<string>ids);\n            }\n        }\n        if(!skipPatch){\n            this._events.next({type : BasketEventType.AddDoc});\n            this.patchBaskets({\n                type: BasketEventType.AddDoc,\n                detail: {\n                    basket: name,\n                    \"doc-id\": basket.ids[0]\n                }\n            });\n        }\n        return true;\n    }\n\n    /**\n     * Removes one or more documents from a basket.\n     * Emits a Basket event.\n     * Update the data on the server.\n     * @param name basket from which to remove the document(s)\n     * @param ids id(s) of the document(s) to remove from the basket\n     * @param skipPatch if true, will not update the data on the server (use for bulk updates)\n     * @returns true if the document was removed\n     */\n    public removeFromBasket(name: string, ids: string | string[], skipPatch?: boolean): boolean {\n        if (!ids) {\n            return false;\n        }\n        const basket = this.basket(name);\n        if (!basket) return false;\n        if (!basket.ids) basket.ids = [];\n        if (Utils.isArray(ids)) {\n            for (let i = 0, ic = ids.length; i < ic; i++) {\n                const id = ids[i];\n                const index = basket.ids.indexOf(id);\n                if (index !== -1) {\n                    basket.ids.splice(index, 1);\n                }\n            }\n        }\n        else {\n            const index = basket.ids.indexOf(<string>ids);\n            if (index !== -1) {\n                basket.ids.splice(index, 1);\n            }\n        }\n        if(!skipPatch){\n            this._events.next({type : BasketEventType.RemoveDoc});\n            this.patchBaskets({\n                type: BasketEventType.RemoveDoc,\n                detail: {\n                    basket: name,\n                    \"doc-id\": basket.ids[0]\n                }\n            }, true);\n        }\n        return true;\n    }\n\n    /**\n     * Removes a document from all the baskets\n     * @param id id of the document to remove\n     */\n    public removeFromAllBaskets(id: string) : boolean {\n        const auditEvents: AuditEvent[] = [];\n        for (const basket of this.baskets) {\n            if( this.removeFromBasket(basket.name, id, true) ){\n                auditEvents.push({\n                    type: BasketEventType.RemoveDoc,\n                    detail: {\n                        basket: basket.name,\n                        \"doc-id\": id\n                    }\n                });\n            }\n        }\n        if(auditEvents.length > 0) {\n            this._events.next({type : BasketEventType.RemoveDoc});\n            this.patchBaskets(auditEvents, true);\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Updates Baskets in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchBaskets(auditEvents?: AuditEvents, updateSearch?: boolean): Observable<void> {\n        const obs = this.userSettingsService.patch({baskets: this.baskets}, auditEvents);\n        obs.subscribe(\n            next => {\n                this._events.next({type: BasketEventType.Patched});\n                if(updateSearch && this.searchService.query.basket) {\n                    this.searchService.search(); // Update search results to reflect the new basket content\n                }\n            },\n            error => {\n                console.error(\"Could not patch Baskets!\", error);\n        });\n        return obs;\n    }\n\n\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents in this basket\n     * @param basket\n     * @param path\n     * @returns the search service promise\n     */\n    public searchBasket(basket : Basket, path?: string) : Promise<boolean> {\n        const query = this.searchService.makeQuery();\n        query.basket = basket.name;\n        this.searchService.setQuery(query);\n        this._events.next({type: BasketEventType.Open, basket: basket});\n        return this.searchService.search({ path: path }, {\n            type: BasketEventType.Open,\n            detail: {\n                basket: basket.name\n            }\n        });\n    }\n\n    /**\n     * Opens a dialog allowing a user to add one (or more) document(s)\n     * to a basket.\n     * @param ids id(s) of the documents to add to a basket\n     * @param recordBaskets names of the baskets the document already belongs to\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the document was added to a basket\n     */\n    public addToBasketModal(ids: string | string[], recordBaskets?: string[])\n            : Promise<boolean> {\n        const model : SelectBasketModel = {\n            basket: undefined,\n            basketFilter: recordBaskets? b => !recordBaskets.includes(b.name) : undefined,\n            allowNew: true\n        };\n        return this.modalService\n            .open(this.basketComponents.selectBasketModal, {model: model})\n            .then(result => {\n                if (result === ModalResult.OK && model.basket) {\n                    return this.addToBasket(model.basket.name, ids);\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to remove one (or more) document(s)\n     * from a basket.\n     * @param ids id(s) of the documents to remove from a basket\n     * @param recordBaskets names of the baskets the document already belongs to\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the document was removed from a basket\n     */\n    public removeFromBasketModal(ids: string | string[], recordBaskets?: string[])\n            : Promise<boolean> {\n        const model : SelectBasketModel = {\n            basket: undefined,\n            basketFilter: recordBaskets? b => recordBaskets.includes(b.name) : undefined\n        };\n        return this.modalService\n            .open(this.basketComponents.selectBasketModal, {model: model})\n            .then(result => {\n                if (result === ModalResult.OK && model.basket) {\n                    return this.removeFromBasket(model.basket.name, ids);\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to create new basket.\n     * @param model the initial basket object model\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the basket was created.\n     */\n    public createBasketModal(model: Basket = {name: \"\"}) : Promise<boolean> {\n\n        return this.modalService.open(this.basketComponents.editBasketModal, {model: model})\n            .then((result) => {\n\n                if (result === ModalResult.OK) {\n                    const index = this.basketIndex(model.name);\n                    if (index !== -1) {\n\n                        return this.modalService.yesNo(\"msg#baskets.basketAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    return this.updateBasket(model, index);\n                                }\n                                return false;\n                            });\n\n                    }\n                    else {\n\n                        return this.createBasket(model);\n\n                    }\n                }\n\n                return false;\n            });\n    }\n\n    // Not relevant as of now\n    // public editBasketModal(basket: Basket)\n\n    /**\n     * Opens a dialog allowing a user to reorganize and edit the\n     * list of baskets.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true is the list was updated.\n     */\n    public manageBasketsModal() : Promise<boolean> {\n\n        const model: ManageBasketsModel = { baskets: Utils.copy(this.baskets) };\n\n        return this.modalService.open(this.basketComponents.manageBasketsModal, {model: model})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n                    return this.updateBaskets(model.baskets, model.auditEvents);\n                }\n                return false;\n            });\n\n    }\n\n\n    private buildBasketsAction() : Action {\n        return new Action({\n            icon: \"fas fa-shopping-basket\",\n            title: \"msg#baskets.baskets\",\n            hidden: true,\n            children: [\n                new Action({\n                    text: \"msg#baskets.addToBasket\",\n                    action: (item, $event) => {\n                        this.addToBasketModal(this.selectionService.getSelectedIds());\n                    }\n                }),\n                new Action({\n                    text: \"msg#baskets.removeFromBasket\",\n                    action: (item, $event) => {\n                        this.removeFromBasketModal(this.selectionService.getSelectedIds());\n                    }\n                })\n            ],\n            updater: (action) => {\n                action.hidden = !this.selectionService.haveSelectedRecords;\n            }\n        });\n    }\n\n    makeQuery(basket: Basket): Query {\n        const query = this.searchService.makeQuery();\n        query.basket = basket.name;\n        return query;\n    }\n\n    notifyOpenBasket(basket: Basket) {\n        this._events.next({type: BasketEventType.Open, basket});\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Basket} from \"../../baskets.service\";\n\n@Component({\n    selector: \"sq-edit-basket\",\n    templateUrl: \"./edit-basket.html\"\n})\nexport class BsEditBasket implements OnInit, OnDestroy {\n    nameControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n    buttons: ModalButton[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: Basket,\n        private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.nameControl = new FormControl(this.model.name, Validators.required);\n        this.form = this.formBuilder.group({\n            basketName: this.nameControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.name = this.nameControl.value;\n            }\n        );\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n}\n","<form name=\"manageBaskets\" novalidate>\n    <sq-modal [title]=\"'msg#manageBaskets.title'\" [buttons]=\"buttons\">\n        <div *ngIf=\"model.baskets.length\" class=\"form-group clearfix\">\n            <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"reorder()\">{{(reordering ? \"msg#manageBaskets.edit\" : \"msg#manageBaskets.reorder\") | sqMessage}}</button>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"list-group\" cdkDropList [cdkDropListData]=\"model.baskets\" [cdkDropListDisabled]=\"!reordering\" (cdkDropListDropped)=\"dropped($event)\">\n                <div *ngFor=\"let basket of model.baskets; let $index = index\" cdkDrag \n                    [ngClass]=\"['list-group-item list-group-item-action d-flex w-auto-unimportant', reordering ? 'cursor-move': '']\">\n                    <div *ngIf=\"reordering\" class=\"sq-basket-text\">{{basket.name}}</div>\n                    <sq-editable *ngIf=\"!reordering\" [value]=\"basket.name\" (valueChange)=\"setName(basket, $event)\" name=\"msg#manageBaskets.name\"\n                        [model]=\"basket\" [validators]=\"nameValidators\"></sq-editable>\n                    <div class=\"ml-auto\">\n                        <a *ngIf=\"!reordering\" class=\"ml-2\" href=\"#\" (click)=\"remove(basket, $index)\" title=\"{{'msg#manageBaskets.remove' | sqMessage}}\">\n                            <span class=\"fas fa-times sq-remove\"></span>\n                        </a>\n                        <span *ngIf=\"reordering\" class=\"ml-2 fas fa-bars sq-move\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </sq-modal>\n</form>\n","<form name=\"editBasket\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editBasket.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"basketName\">{{'msg#editBasket.name' | sqMessage}}</label>\n            <input [sqValidation]=\"form\" type=\"text\" class=\"form-control\" id=\"basketName\" formControlName=\"basketName\" spellcheck=\"off\" sqAutofocus>\n        </div>\n    </sq-modal>\n</form>","import {Component, OnInit, Inject} from \"@angular/core\";\nimport {Validators, AbstractControl} from \"@angular/forms\";\nimport {ValidatorFn} from \"@angular/forms\";\nimport {CdkDragDrop} from \"@angular/cdk/drag-drop\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvent} from \"@sinequa/core/web-services\";\nimport {Basket, BasketEventType, ManageBasketsModel} from \"../../baskets.service\";\n\n@Component({\n    selector: \"sq-manage-baskets\",\n    templateUrl: \"./manage-baskets.html\",\n    styleUrls: [\"./manage-baskets.scss\"]\n})\nexport class BsManageBaskets implements OnInit {\n    reordering: boolean;\n    buttons: ModalButton[];\n    removeAllButton: ModalButton;\n    nameValidators: ValidatorFn[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ManageBasketsModel) {\n        this.reordering = false;\n\n        this.nameValidators = [\n            Validators.required,\n            (control: AbstractControl) => {\n                const modelControl = control.root.get(\"model\");\n                if (modelControl) {\n                    for (const item of this.model.baskets) {\n                        if (modelControl.value === item) {\n                            continue;\n                        }\n                        if (control.value === item.name) {\n                            return {\n                                unique: true\n                            };\n                        }\n                    }\n                }\n                return null;\n            }\n        ];\n    }\n\n    ngOnInit() {\n        this.buttons = [\n            this.removeAllButton = new ModalButton({\n                text: \"msg#manageBaskets.removeAll\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.model.baskets.splice(0);\n                    button.visible = false;\n                    this.addAuditEvent({\n                        type: BasketEventType.DeleteAll\n                    });\n                },\n                visible: this.model.baskets.length > 0\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    addAuditEvent(auditEvent: AuditEvent) {\n        if (!this.model.auditEvents) {\n            this.model.auditEvents = [];\n        }\n        this.model.auditEvents.push(auditEvent);\n    }\n\n    reorder() {\n        this.reordering = !this.reordering;\n    }\n\n    setName(basket: Basket, name: string) {\n        if (!Utils.eqNC(basket.name, name)) {\n            this.addAuditEvent({\n                type: BasketEventType.Rename,\n                detail: {\n                    basket: name,\n                    \"old-name\": basket.name\n                }\n            });\n            basket.name = name;\n        }\n    }\n\n    remove(basket: Basket, index: number) {\n        this.model.baskets.splice(index, 1);\n        this.removeAllButton.visible = this.model.baskets.length > 0;\n        this.addAuditEvent({\n            type: BasketEventType.Delete,\n            detail: {\n                basket: basket.name\n            }\n        });\n        return false;\n    }\n\n    dropped(drop: CdkDragDrop<Basket[]>) {\n        Utils.arrayMove(this.model.baskets, drop.previousIndex, drop.currentIndex);\n    }\n}\n","<form name=\"selectBasket\" novalidate>\n    <sq-modal [title]=\"'msg#selectBasket.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group\">\n            <div class=\"list-group sq-list-group\">\n                <a *ngFor=\"let basket of baskets\" href=\"javascript:void(0)\" class=\"list-group-item list-group-item-action\" (click)=\"select(basket)\">\n                    <div>{{basket.name | sqMessage}}</div>\n                </a>\n                <a *ngIf=\"model.allowNew\" href=\"javascript:void(0)\" class=\"list-group-item list-group-item-action\" (click)=\"newBasket()\">\n                    <div><i>{{'msg#selectBasket.newBasket' | sqMessage}}</i></div>\n                </a>\n            </div>\n        </div>\n    </sq-modal>\n</form>","import {Component, OnInit, Inject} from \"@angular/core\";\nimport {MODAL_MODEL, ModalRef, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Basket, BasketsService, SelectBasketModel} from \"../../baskets.service\";\n\n@Component({\n    selector: \"sq-select-basket\",\n    templateUrl: \"./select-basket.html\"\n})\nexport class BsSelectBasket implements OnInit {\n    baskets: Basket[];\n    buttons: ModalButton[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: SelectBasketModel,\n        private basketsService: BasketsService,\n        private modalRef: ModalRef) {\n        this.baskets = this.basketsService.baskets;\n\n        if (!this.baskets) {\n            this.baskets = [];\n        }\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    ngOnInit(): void {\n        if (!!this.model.basketFilter) {\n            this.baskets = this.baskets.filter(this.model.basketFilter);\n        }\n    }\n\n    activate(model) {\n        this.model = model;\n    }\n\n    select(basket: Basket) {\n        if (basket) {\n            this.model.basket = basket;\n            this.modalRef.close(ModalResult.OK);\n        }\n    }\n\n    newBasket(){\n        const model : Basket = {name : \"\"};\n        this.basketsService.createBasketModal(model)\n            .then((result) => {\n                if(result){ // The basket was created\n                    this.select(model);\n                }\n            });\n    }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Record } from \"@sinequa/core/web-services\";\nimport { ModalService, ModalResult } from \"@sinequa/core/modal\";\nimport { BasketsService, Basket } from \"../../baskets.service\";\nimport { Action } from \"@sinequa/components/action\";\n\n/**\n * Component representing the add-to-baskets button in one item of the result list view.\n *\n */\n@Component({\n    selector: 'sq-result-baskets',\n    templateUrl: './result-baskets.html'\n})\nexport class BsResultBaskets implements OnChanges, OnDestroy {\n    @Input() record: Record;\n    @Input() rightAligned: boolean;\n\n    public basketsAction: Action;\n    private addToBasketAction: Action;\n    private removeFromBasketAction: Action;\n    private removeFromAllBasketsAction: Action;\n\n    private baskets: string[];\n    private initialized: boolean;\n    private basketsSubscription: Subscription;\n\n    constructor(\n        private modalService: ModalService,\n        private basketsService: BasketsService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.baskets = [];\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.addToBasketAction = this.buildAddToBasketAction();\n            this.removeFromBasketAction = this.buildRemoveFromBasketAction();\n            this.removeFromAllBasketsAction = this.buildRemovalFromAllBasketsAction();\n            this.basketsSubscription = this.basketsService.changes.subscribe(event => {\n                this.updateRecordBaskets();\n                this.refreshVisualization();\n            });\n        }\n        this.updateRecordBaskets();\n        this.refreshVisualization();\n    }\n\n    ngOnDestroy(): void {\n        if (this.basketsSubscription) {\n            this.basketsSubscription.unsubscribe();\n        }\n    }\n\n    public get isInBaskets(): boolean {\n        return this.baskets.length > 0;\n    }\n\n    private refreshVisualization(): void {\n        this.basketsAction = this.buildBasketsAction();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateRecordBaskets(): void {\n        const currentBaskets: Basket[] = this.basketsService.baskets;\n        this.baskets = [];\n        for (const basket of currentBaskets) {\n            if (!!basket.ids && basket.ids.includes(this.record.id)) {\n                this.baskets.push(basket.name);\n            }\n        }\n    }\n\n    private buildAddToBasketAction(): Action {\n        return new Action({\n            text: 'msg#baskets.addToBasket',\n            action: (item, $event) => {\n                this.basketsService.addToBasketModal(this.record.id, this.baskets);\n            }\n        });\n    }\n\n    private buildRemoveFromBasketAction(): Action {\n        return new Action({\n            text: 'msg#baskets.removeFromBasket',\n            action: (item, $event) => {\n                this.basketsService.removeFromBasketModal(this.record.id, this.baskets);\n            }\n        });\n    }\n\n    private buildRemovalFromAllBasketsAction(): Action {\n        return new Action({\n            text: 'msg#baskets.removeFromAllBaskets',\n            action: () => {\n                this.modalService\n                    .yesNo(\n                        'msg#baskets.removeFromAllBasketsConfirmation',\n                        {values: {baskets: this.baskets.join(', ')}})\n                    .then(result => {\n                        if (result === ModalResult.Yes) {\n                            this.basketsService.removeFromAllBaskets(this.record.id);\n                        }\n                    });\n            }\n        });\n    }\n\n    private buildBasketsAction(): Action {\n        return new Action({\n            icon: 'fas fa-shopping-basket',\n            title: 'msg#baskets.baskets',\n            children: this.isInBaskets\n                ? this.baskets.length === 1\n                    ? [this.addToBasketAction, this.removeFromBasketAction]\n                    : [this.addToBasketAction, this.removeFromBasketAction, this.removeFromAllBasketsAction]\n                : [this.addToBasketAction]\n        });\n    }\n}\n","<div class=\"btn-group {{ isInBaskets ? 'sq-document-in-baskets' : 'sq-document-not-in-baskets' }}\"\n    [sq-action-buttons]=\"{\n        items: [basketsAction],\n        autoAdjust: true,\n        rightAligned: rightAligned\n    }\"></div>\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \r\n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\r\n    [collapseBreakpoint]=\"collapseBreakpoint\"\r\n></li>\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Action } from \"@sinequa/components/action\";\r\nimport { LoginService } from \"@sinequa/core/login\";\r\nimport { BasketsService } from \"../../baskets.service\";\r\nimport {PrincipalWebService} from \"@sinequa/core/web-services\";\r\nimport {UserSettingsWebService} from \"@sinequa/core/web-services\";\r\nimport {AppWebService} from \"@sinequa/core/web-services\";\r\n\r\n@Component({\r\n  selector: \"sq-baskets-menu\",\r\n  templateUrl: \"./baskets-menu.component.html\",\r\n})\r\nexport class BsBasketsMenuComponent implements OnInit {\r\n  @Input() searchRoute: string = \"/search\";\r\n  @Input() icon: string = \"fas fa-shopping-basket\";\r\n  @Input() autoAdjust: boolean = true;\r\n  @Input() autoAdjustBreakpoint: string = \"xl\";\r\n  @Input() collapseBreakpoint: string = \"sm\";\r\n  @Input() size: string;\r\n\r\n  basketOptions: string[] = [\"Select\", \"Share\"];\r\n\r\n  menu: Action | undefined;\r\n\r\n  // Basket actions\r\n  createAction: Action;\r\n  manageAction: Action;\r\n  selectAction: Action;\r\n  shareAction: Action;\r\n  basketCustomOptions: Action[] = [];\r\n\r\n  constructor(\r\n    public loginService: LoginService,\r\n    public basketsService: BasketsService,\r\n    public principalService:PrincipalWebService,\r\n    public userSettingsService:UserSettingsWebService,\r\n    public appService: AppWebService\r\n  ) {\r\n    this.createAction = new Action({\r\n      text: \"msg#baskets.createBasket\",\r\n      title: \"msg#baskets.createBasket\",\r\n      action: (_) => {\r\n        this.basketsService.createBasketModal();\r\n      },\r\n    });\r\n\r\n    this.manageAction = new Action({\r\n      text: \"msg#baskets.manageBaskets\",\r\n      title: \"msg#baskets.manageBaskets\",\r\n      action: (_) => {\r\n        this.basketsService.manageBasketsModal();\r\n      },\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.updateMenu();\r\n    this.basketsService.changes.subscribe({\r\n      next: () => {\r\n        this.updateMenu();\r\n      },\r\n    });\r\n    this.loginService.events.subscribe((event) => {\r\n      if (event.type === \"session-changed\") {\r\n        this.updateMenu();\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMenu() {\r\n    if (!this.loginService.complete) {\r\n      this.menu = undefined;\r\n      return;\r\n    }\r\n\r\n    //Select and Share options//\r\n\r\n    const basketsActions: Action[] = [];\r\n    if (this.basketsService.hasBasket) {\r\n      this.basketsService.baskets.map((basket) =>\r\n        basketsActions.push(\r\n          new Action({\r\n            text: basket.name,\r\n            title: basket.name,\r\n            children: [\r\n              new Action({\r\n                text: \"Select\",\r\n                title: \"Select\",\r\n                action: () =>\r\n                  this.basketsService.searchBasket(basket, this.searchRoute),\r\n              }),\r\n              new Action({\r\n                text: \"Share\",\r\n                title: \"Share\",\r\n                action:()=>this.sendEmail(basket,this.searchRoute),\r\n              }),\r\n            ],\r\n          })\r\n        )\r\n      );\r\n    }\r\n    basketsActions.push(new Action({ separator: true }));\r\n    basketsActions.push(this.createAction);\r\n\r\n    if (this.basketsService.hasBasket) {\r\n      basketsActions.push(this.manageAction);\r\n    }\r\n\r\n    this.menu = new Action({\r\n      icon: this.icon,\r\n      text: \"msg#baskets.baskets\",\r\n      title: \"msg#baskets.baskets\",\r\n      children: basketsActions,\r\n    });\r\n  }\r\n\r\n  sendEmail(basket,curr)\r\n{\r\n            let mailToUrl = \"\";\r\n            let name = this.principalService?.principal?.name;\r\n            \r\n            let basketName = basket.name\r\n\t\t\t\t    var query=\"#/search?query=%7B%22name%22:%22\"+this.appService.appName+\"%22,%22basket%22:%22\"+basketName+\"%22,%22user%22:%22\"+name+\"%22,%22tab%22:%22ALL%22%7D&view=list\"+\"&user=\"+name+\"&sharedBasket=\"+basketName;\r\n                \r\n            var body = \"https://\"+window.location.host+window.location.pathname+ encodeURIComponent(query);\r\n            console.log(body);\r\n                //?query={%22name%22:%22GlobalSearch_V3.2%22,%22basket%22:%22Favorites%22,%22tab%22:%22ALL%22}&view=list&user=200035114&sharedBasket=Favorites\r\n                \r\n            mailToUrl = \"mailto:?subject=Pubmed Search Basket&body=\"+body;\r\n            console.log(mailToUrl);\r\n            window.location.href=mailToUrl;\r\n    }\r\n}\r\n\r\n\r\n","<div class=\"list-group list-group-flush\">\n    <a *ngFor=\"let basket of basketsService.baskets | slice:startIndex:endIndex\"\n        class=\"basket-item list-group-item list-group-item-action d-flex align-items-center\"\n        [routerLink]=\"[searchRoute]\" [queryParams]=\"getQueryParams(basket)\" [state]=\"getRouterState(basket)\"\n        (click)=\"openBasket(basket)\">\n        <span class=\"basket-name text-truncate mr-auto\">{{ basket.name }}</span>\n        <span *ngIf=\"basket.ids\" class=\"basket-count ml-2 text-muted small\">{{ basket.ids.length }}</span>\n        <i *ngIf=\"enableDelete\" class=\"basket-delete ml-2 fas fa-times\" [title]=\"'msg#baskets.delete' | sqMessage\" (click)=\"deleteBasket(basket, $event)\"></i>\n    </a>\n    <div *ngIf=\"basketsService.baskets.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#baskets.noBasket' | sqMessage }}\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BasketsService, Basket, BasketEventType } from '../../baskets.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\n\n@Component({\n  selector: 'sq-facet-baskets',\n  templateUrl: './facet-baskets.component.html',\n  styles: [`\n.basket-item .basket-delete{\n    opacity: 0;\n}\n\n.basket-item:hover .basket-delete{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetBasketsComponent extends AbstractFacet {\n  @Input() searchRoute: string = \"/search\";\n  @Input() maxBaskets: number = 5;\n  @Input() enableDelete: boolean = true;\n\n  page: number = 0;\n\n  createBasket: Action;\n  manageBasket: Action;\n  previousPage: Action;\n  nextPage: Action;\n\n  constructor(\n    public basketsService: BasketsService) {\n    super();\n\n    this.createBasket = new Action({\n      icon: \"fas fa-plus\",\n      title: \"msg#baskets.createBasket\",\n      action: () => {\n        this.basketsService.createBasketModal();\n      }\n    });\n\n    this.manageBasket = new Action({\n      icon: \"fas fa-cog\",\n      title: \"msg#baskets.manageBaskets\",\n      action: () => {\n        this.basketsService.manageBasketsModal();\n      }\n    });\n\n    this.previousPage = new Action({\n      icon: \"fas fa-chevron-left\",\n      title: \"msg#facet.previous\",\n      action: () => {\n        this.page--;\n      },\n      updater: (action: Action) => {\n        action.disabled = this.page <= 0;\n        action.hidden = this.maxPage === 0;\n      }\n    });\n\n    this.nextPage = new Action({\n      icon: \"fas fa-chevron-right\",\n      title: \"msg#facet.next\",\n      action: () => {\n        this.page++;\n      },\n      updater: (action: Action) => {\n        action.disabled = this.page >= this.maxPage;\n        action.hidden = this.maxPage === 0;\n      }\n    });\n  }\n\n  get maxPage(): number {\n    return Math.max(0, Math.ceil(this.basketsService.baskets.length / this.maxBaskets) - 1);\n  }\n\n  get startIndex(): number {\n    return this.page * this.maxBaskets;\n  }\n\n  get endIndex(): number {\n    return (this.page+1) * this.maxBaskets;\n  }\n\n  openBasket(basket: Basket){\n    this.basketsService.notifyOpenBasket(basket)\n    return true;\n  }\n\n  get actions(): Action[] {\n    this.previousPage.update();\n    this.nextPage.update();\n    return [this.createBasket, this.previousPage, this.nextPage, this.manageBasket];\n  }\n\n  deleteBasket(basket: Basket, event: Event){\n    event.stopPropagation();\n    this.basketsService.deleteBasket(basket);\n    this.page = Math.min(this.page, this.maxPage);\n    return false;\n  }\n\n  getQueryParams(basket: Basket) {\n    const query = this.basketsService.makeQuery(basket);\n    const queryParams = query.toJsonForQueryString();\n    return {query: queryParams};\n  }\n\n  getRouterState(basket: Basket) {\n    return {\n      audit: {\n        type: BasketEventType.Open,\n        detail: {\n          basket: basket.name\n        }\n      }\n    }\n  }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BASKET_COMPONENTS} from \"../baskets.service\";\nimport {BsEditBasket} from \"./edit-basket/edit-basket\";\nimport {BsManageBaskets} from \"./manage-baskets/manage-baskets\";\nimport {BsSelectBasket} from \"./select-basket/select-basket\";\nimport {BsResultBaskets} from \"./result-baskets/result-baskets\";\nimport {BsBasketsMenuComponent} from \"./baskets-menu/baskets-menu.component\";\nimport {BsFacetBasketsComponent} from './facet-baskets/facet-baskets.component';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n        DragDropModule,\n        RouterModule,\n\n        BsModalModule,\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsEditBasket, BsManageBaskets, BsSelectBasket,\n        BsResultBaskets, BsBasketsMenuComponent,\n        BsFacetBasketsComponent\n    ],\n    exports: [\n        BsEditBasket, BsManageBaskets, BsSelectBasket,\n        BsResultBaskets, BsBasketsMenuComponent,\n        BsFacetBasketsComponent\n    ],\n    providers: [\n        {\n            provide: BASKET_COMPONENTS,\n            useValue: {\n                selectBasketModal: BsSelectBasket,\n                editBasketModal: BsEditBasket,\n                manageBasketsModal: BsManageBaskets\n            }\n        }\n    ]\n})\nexport class BsBasketsModule {\n}\n","export default {\n    \"baskets\": {\n        \"baskets\": \"Baskets\",\n        \"addToBasket\": \"Add to basket\",\n        \"removeFromBasket\": \"Remove from basket\",\n        \"removeFromAllBaskets\": \"Remove from all baskets\",\n        \"removeFromAllBasketsConfirmation\": \"Are you sure you want to remove this result from these baskets: {baskets}?\",\n        \"basketAlreadyExists\": \"A basket with that name already exists. Would you like to replace it?\",\n        \"noBasket\": \"You have not yet added a document to a basket...\",\n        \"createBasket\": \"Create Basket\",\n        \"manageBaskets\": \"Manage Baskets\",\n        \"delete\": \"Delete this basket\"\n    },\n\n    \"editBasket\": {\n        \"title\": \"Basket\",\n        \"name\": \"Name\"\n    },\n\n    \"manageBaskets\": {\n        \"title\": \"Manage Baskets\",\n        \"edit\": \"Edit\",\n        \"reorder\": \"Reorder\",\n        \"remove\": \"Remove\",\n        \"removeAll\": \"Remove all\",\n        \"name\": \"Name\"\n    },\n\n    \"selectBasket\": {\n        \"title\": \"Select Basket\",\n        \"newBasket\": \"New basket...\"\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enSelection, frSelection, deSelection} from \"@sinequa/components/selection\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\nimport _enBaskets from \"./en\";\nimport _frBaskets from \"./fr\";\nimport _deBaskets from \"./de\";\n\nconst enBaskets = Utils.merge({}, _enBaskets, enSearch, enSelection, enModal);\nconst frBaskets = Utils.merge({}, _frBaskets, frSearch, frSelection, frModal);\nconst deBaskets = Utils.merge({}, _deBaskets, deSearch, deSelection, deModal);\n\nexport { enBaskets, frBaskets, deBaskets };","export default {\n    \"baskets\": {\n        \"baskets\": \"Paniers\",\n        \"addToBasket\": \"Ajouter au panier\",\n        \"removeFromBasket\": \"Supprimer du panier\",\n        \"removeFromAllBaskets\": \"Supprimer de tous les paniers\",\n        \"removeFromAllBasketsConfirmation\": \"Êtes-vous sûr de vouloir supprimer ce résultat de ces paniers : {baskets} ?\",\n        \"basketAlreadyExists\": \"Un panier avec ce nom existe déjà. Voulez-vous le remplacer ?\",\n        \"noBasket\": \"Vous n'avez pas encore ajouté de document à un panier...\",\n        \"createBasket\": \"Créer un panier\",\n        \"manageBaskets\": \"Gérer les paniers\",\n        \"delete\": \"Supprimer ce panier\"\n    },\n\n    \"editBasket\": {\n        \"title\": \"Panier\",\n        \"name\": \"Nom\"\n    },\n\n    \"manageBaskets\": {\n        \"title\": \"Gérer les paniers\",\n        \"edit\": \"Editer\",\n        \"reorder\": \"Réorganiser\",\n        \"remove\": \"Effacer\",\n        \"removeAll\": \"Effacer tout\",\n        \"name\": \"Nom\"\n    },\n\n    \"selectBasket\": {\n        \"title\": \"Sélectionner un panier\",\n        \"newBasket\": \"Nouveau panier...\"\n    },\n\n};\n","export default {\n    \"baskets\": {\n        \"baskets\": \"Ablagekörbe\",\n        \"addToBasket\": \"Zum Ablagekorb hinzufügen\",\n        \"removeFromBasket\": \"Aus dem Ablagekorb entfernen\",\n        \"removeFromAllBaskets\": \"Von allen Ablagekörben entfernen\",\n        \"removeFromAllBasketsConfirmation\": \"Möchten Sie dieses Eregbnis wirklich von diesen Ablagekörben entfernen: {baskets}?\",\n        \"basketAlreadyExists\": \"Es existiert bereits ein Ablagekorb mit diesem Namen. Möchten Sie ihn ersetzen?\",\n        \"noBasket\": \"Sie haben noch kein Dokument zu einem Ablagekorb hinzugefügt...\",\n        \"createBasket\": \"Ablagekorb erstellen\",\n        \"manageBaskets\": \"Ablagekörbe verwalten\",\n        \"delete\": \"Diesen Ablagekorb löschen\"\n    },\n\n    \"editBasket\": {\n        \"title\": \"Ablagekorb\",\n        \"name\": \"Name\"\n    },\n\n    \"manageBaskets\": {\n        \"title\": \"Ablagekörbe verwalten\",\n        \"edit\": \"Bearbeiten\",\n        \"reorder\": \"Neu sortieren\",\n        \"remove\": \"Entfernen\",\n        \"removeAll\": \"Alle entfernen\",\n        \"name\": \"Name\"\n    },\n\n    \"selectBasket\": {\n        \"title\": \"Ablagekorb auswählen\",\n        \"newBasket\": \"Neuer Ablagekorb...\"\n    },\n\n};\n"]}