{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../projects/components/user-settings/bootstrap/edit-user-settings/edit-user-settings.ts","../projects/components/user-settings/bootstrap/user-settings-editor/user-settings-editor.html","../projects/components/user-settings/bootstrap/edit-user-settings/edit-user-settings.html","../projects/components/user-settings/bootstrap/user-settings-editor/user-settings-editor.ts","../projects/components/user-settings/bootstrap/user-menu/user-menu.component.html","../projects/components/user-settings/bootstrap/user-menu/user-menu.component.ts","../../projects/components/user-settings/bootstrap/user-settings.module.ts","../../projects/components/user-settings/messages/en.ts","../../projects/components/user-settings/messages/index.ts","../../projects/components/user-settings/messages/fr.ts","../../projects/components/user-settings/messages/de.ts","../../../projects/components/user-settings/user-preferences.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","ValueType","InputType","JsonInfo","BsEditUserSettings","userSettingsService","intlService","formBuilder","this","visibleThreshold","prototype","ngOnInit","_this","layout","model","language","currentLocale","name","form","group","selectedLocale","buttons","ModalButton","result","primary","validation","action","_","dirty","newLocale","removeControl","Utils","eqNC","subscribe","use","response","console","log","patch_1","calculatePatch","isUndefined","isEmpty","observable","patch","userSettings","setNewValue","error","obj","newObj","_b","keys","_c","key","undefined","isObject","isDate","Date","valueOf","isRegExp","RegExp","isArray","slice","forEach","formValue","ensureType","readFormValue","paths","split","path","currentValue","readUserSetting","includedInPatch","setValue","entryInfo","inputType","type","valueType","Bool","cast","asDate","Int","Number","asNumber","String","asString","castFn","array","empty","Entry","MultiEntry","Range","array_1","array_1_1","v","push","json","nbPaths","defineProperty","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0","ɵɵdirectiveInject","i1","UserSettingsWebService","i2","IntlService","i3","FormBuilder","selectors","inputs","showUILanguageSelector","decls","vars","consts","template","rf","ctx","i0.ɵɵelement","i0.ɵɵstyleProp","BsUserSettingsEditor","appService","app","locales","locale","addControl","control","showLanguageSelector","i1$1","AppService","i0.ɵɵtemplate","ctx_r0","collapseBreakpoint","BsUserMenuComponent","principalService","authenticationService","loginService","modalService","notificationsService","changeDetectorRef","icon","autoAdjust","autoAdjustBreakpoint","loginAction","Action","text","title","login","logoutAction","logout","markForCheck","overrideAction","userOverride","copy","userName","domain","open","BsOverrideUser","then","overrideUser","revertOverrideAction","adminAction","href","adminUrl","languageAction","children","map","display","data","selected","iconAfter","item","$event","a","update","updater","resetUserSettings","confirm","message","confirmType","res","reset","notify","updateMenu","_loginSubscription","events","event","_principalSubscription","ngOnDestroy","unsubscribe","userActions","principal","userOverrideActive","isAdministrator","isDelegatedAdmin","complete","separator","menu","PrincipalWebService","i2$2","AuthenticationService","LoginService","i4","ModalService","i6$1","NotificationsService","ChangeDetectorRef","size","BsUserSettingsModule","imports","CommonModule","FormsModule","ReactiveFormsModule","IntlModule","ValidationModule","BsModalModule","BsActionModule","UtilsModule","declarations","exports","ɵangular_packages_forms_forms_y","NgControlStatusGroup","FormGroupDirective","i2$1","BsModal","enUserSettings","merge","userMenu","user","settings","revertUserOverride","administration","modalTitle","modalMessage","modalConfirmButton","successMessage","errorMessage","editUserSettings","pageSize","email","enModal","frUserSettings","frModal","deUserSettings","deModal","UserPreferences","get","property","prefs","toLowerCase","set","skipSync","sync","delete","hasOwnProperty","ɵɵinject","factory","ɵfac","providedIn"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ModalButton, ModalResult } from \"@sinequa/core/modal\";\nimport { UserSettingsWebService } from \"@sinequa/core/web-services\";\nimport { MapOf, Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { Validator } from \"@sinequa/core/validation\";\n\nexport module JsonInfo {\n    export interface Entry {\n        type: string;\n        path: string;\n        valueType: string;\n        label: string;\n        list?: string;\n        pattern?: string;\n        min?: number | Date;\n        max?: number | Date;\n        validators?: Validator[];\n    }\n\n    export enum InputType {\n        Entry = 'JsonEntryInput',\n        Range = 'JsonRangeInput',\n        MultiEntry = 'JsonMultiEntryInput',\n    }\n\n    export enum ValueType {\n        String = 'String',\n        Int = 'Int',\n        Number = 'Number',\n        Date = 'Date',\n        Bool = 'Bool',\n    }\n\n    export interface EntryInput extends Entry {\n        type: InputType.Entry;\n    }\n\n    export interface RangeInput extends Entry {\n        type: InputType.Range;\n    }\n\n    export interface MultiEntryInput extends Entry {\n        type: InputType.MultiEntry;\n        distinct?: boolean;\n        nbVisibleLines?: number;\n    }\n}\n\n/**\n * Opens a dialog to modify the user settings.\n *\n */\n@Component({\n    selector: 'sq-edit-user-settings',\n    templateUrl: './edit-user-settings.html'\n})\nexport class BsEditUserSettings implements OnInit {\n\n    @Input() visibleThreshold = 0;\n    @Input() showUILanguageSelector?: boolean;\n\n    public model: MapOf<any>;\n    public layout: MapOf<JsonInfo.Entry>;\n    public form: FormGroup;\n    public buttons: ModalButton[];\n\n    constructor(\n        private userSettingsService: UserSettingsWebService,\n        private intlService: IntlService,\n        private formBuilder: FormBuilder,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.layout = {};\n        this.model = {\n            'language': this.intlService.currentLocale.name\n        };\n        this.form = this.formBuilder.group({\n            'selectedLocale': [this.intlService.currentLocale.name]\n        });\n\n        const onOkClicked = (_) => {\n            if (this.form.dirty) {\n                // Locale is treated separately because it is not really stored in the user settings.\n                const newLocale = this.form.value['selectedLocale'];\n                this.form.removeControl('selectedLocale');\n                if (!Utils.eqNC(this.model['language'], newLocale)) {\n                    Utils.subscribe(\n                        this.intlService.use(newLocale),\n                        response => console.log('editUserSettings UI language changed.')\n                    );\n                }\n\n                const patch = this.calculatePatch();\n                if (!Utils.isUndefined(patch) && !Utils.isEmpty(patch)) {\n                    const observable = this.userSettingsService.patch(patch);\n                    Utils.subscribe(\n                        observable,\n                        response => {\n                            if (this.userSettingsService.userSettings) {\n                                this.setNewValue(this.userSettingsService.userSettings, patch);\n                            }\n                            console.log('editUserSettings saved.');\n                        },\n                        error => console.log('editUserSettings save failed: ', error)\n                    );\n                }\n            }\n        };\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form as any,\n                action: onOkClicked\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    private setNewValue(obj: MapOf<any>, newObj: MapOf<any>): void {\n        for (const key of Object.keys(newObj)) {\n            const value = newObj[key];\n            if (value === null) {\n                /* NOTE: Don't use delete obj[key] because some component may put an observer on the user settings property */\n                obj[key] = undefined;\n            }\n            else if (Utils.isObject(value)) {\n                if (Utils.isDate(value)) {\n                    obj[key] = new Date(value.valueOf());\n                }\n                else if (Utils.isRegExp(value)) {\n                    obj[key] = new RegExp(value);\n                }\n                else if (Utils.isArray(value)) {\n                    obj[key] = value.slice(0); // clone the array\n                }\n                else {\n                    if (!Utils.isObject(obj[key])) {\n                        obj[key] = Utils.isArray(value) ? [] : {};\n                    }\n                    this.setNewValue(obj[key], value);\n                }\n            }\n            else {\n                obj[key] = value;\n            }\n        }\n    }\n\n    /**\n     * Calculates the update patch for user settings.\n     *\n     * @returns the update patch.\n     */\n    private calculatePatch(): MapOf<any> {\n        const patch = {};\n        Object.keys(this.form.value).forEach(key => {\n            const formValue = this.ensureType(this.layout[key], this.readFormValue(key));\n            const paths = Utils.split(this.layout[key].path, '.');\n            const currentValue = this.userSettingsService.readUserSetting(paths);\n\n            let includedInPatch = false;\n            if (!Utils.isUndefined(currentValue)) {\n                if (formValue !== currentValue) {\n                    includedInPatch = true;\n                }\n            } else {\n                if (!Utils.isUndefined(formValue)) {\n                    includedInPatch = true;\n                }\n            }\n\n            if (includedInPatch) {\n                this.setValue(patch, paths, formValue);\n            }\n        });\n\n        return patch;\n    }\n\n    /**\n     * Ensures that the form value is of the same type as the user setting before saving it.\n     *\n     * @param entryInfo The entry information.\n     * @param value The form value.\n     * @returns The conformed value for the user setting.\n     */\n    private ensureType(entryInfo: JsonInfo.Entry, value: any): any {\n        const inputType = entryInfo.type as JsonInfo.InputType;\n        const valueType = entryInfo.valueType as JsonInfo.ValueType;\n\n        switch (valueType as JsonInfo.ValueType) {\n            case JsonInfo.ValueType.Bool:\n                // For the case of boolean, we ignore the input type because we only support having a JSON boolean\n                return !!value;\n            case JsonInfo.ValueType.Date:\n                return this.cast<Date>(inputType, value, Utils.asDate);\n            case JsonInfo.ValueType.Int:\n            case JsonInfo.ValueType.Number:\n                return this.cast<number>(inputType, value, Utils.asNumber);\n            case JsonInfo.ValueType.String:\n            default:\n                return this.cast<string>(inputType, value, Utils.asString);\n        }\n    }\n\n\n    /**\n     * Casts the value of a given type to another type.\n     * <p>\n     * If the given value is of array type, it is casted into another array containing element of the\n     * desired type.\n     *\n     * @template T The desired type after casting.\n     * @param inputType The type of form input where the value comes.\n     * @param value The value to cast.\n     * @param castFn The casting function.\n     * @returns the cast result.\n     */\n    private cast<T>(\n        inputType: JsonInfo.InputType, value: any, castFn: (params: any) => T | undefined\n    ): T | T[] | undefined {\n        if (Utils.isArray(value)) {\n            const array = value as any[];\n            const empty = array.length === 0;\n            switch (inputType) {\n                case JsonInfo.InputType.Entry:\n                    return !empty ? castFn(array[0]) : undefined;\n                case JsonInfo.InputType.MultiEntry:\n                case JsonInfo.InputType.Range:\n                    const result: T[] = [];\n                    for (const v of array) {\n                        result.push(castFn(v) as T);\n                    }\n                    return result;\n            }\n            return undefined;\n        }\n\n        return castFn(value);\n    }\n\n    /**\n     * Reads the form value for the given entry.\n     *\n     * @param key The entry key.\n     * @returns The form value.\n     */\n    private readFormValue(key: string): any {\n        const formValue = this.form.value[key];\n        if (Utils.isArray(formValue)) {\n            switch (this.layout[key].type as JsonInfo.InputType) {\n                case JsonInfo.InputType.Entry:\n                    // The entry is single-value type whereas its corresponding form control has an array value.\n                    // This should be because its form control is represented by a Select component.\n                    // The array value should be then a singleton array, we simply return the first element.\n                    const array = <any[]>formValue;\n                    if (array.length !== 1) {\n                        console.log('editUserSettings.readFormValue not a singleton array.');\n                    }\n                    return array[0];\n                case JsonInfo.InputType.MultiEntry:\n                    break;\n                case JsonInfo.InputType.Range:\n                    break;\n            }\n        }\n        return formValue;\n    }\n\n    /**\n     * Sets a JSON value.\n     *\n     * @param json The JSON to set.\n     * @param paths The path of the value in the JSON.\n     * @param value The value to set.\n     */\n    private setValue(json: MapOf<any>, paths: string[], value: any): void {\n        const nbPaths = paths.length;\n        if (nbPaths > 1) {\n            for (let i = 0; i < nbPaths - 1; ++i) {\n                const path = paths[i];\n                if (!json[path]) {\n                    json[path] = {};\n                }\n                json = json[path];\n            }\n        }\n\n        json[paths[nbPaths - 1]] = Utils.isEmpty(value) ? null : value;\n    }\n\n    /**\n     * Indicates the height of the dialog content to trigger scroll behavior when there are too many input controls.\n     *\n     * @return the height of the dialog content to trigger scroll behavior when there are too many input controls.\n     */\n    public get maxHeight(): string {\n        //If size is undefined use 5 as default\n        return (((this.visibleThreshold | 0) || 5) * 10) + \"ex\";\n    }\n}\n","<div [formGroup]=\"form\">\n    <div class=\"form-group\" style=\"margin-bottom: 0\" [hidden]=\"!showLanguageSelector()\">\n        <label for=\"locales\">{{'msg#editUserSettings.language' | sqMessage}}</label>\n        <select [sqValidation]=\"form\" class=\"form-control custom-select\" formControlName=\"selectedLocale\" id=\"selectedLocale\" sqAutofocus>\n            <option [value]=\"locale.name\" *ngFor=\"let locale of locales\">{{locale.display | sqMessage}}</option>\n        </select>\n    </div>\n    <!--sq-json-editor [form]=\"form\" [model]=\"model\" [layout]=\"layout\" [config]=\"config\"></sq-json-editor-->\n</div>\n","<form name=\"editUserSettings\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editUserSettings.title'\" [buttons]=\"buttons\">\n        <div class=\"sq-user-settings-modal-body\" [style.max-height]=\"maxHeight\">\n            <sq-user-settings-editor [form]=\"form\" [model]=\"model\" [layout]=\"layout\"></sq-user-settings-editor>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Locale, IntlService } from \"@sinequa/core/intl\";\nimport { MapOf } from \"@sinequa/core/base\";\n\nimport { JsonInfo } from \"../edit-user-settings/edit-user-settings\";\n\n\n/**\n * Editor for User settings.\n * <p>\n * This component can add form control for modifiable settings which are not shown by JsonEditor component.\n *\n */\n@Component({\n    selector: 'sq-user-settings-editor',\n    templateUrl: './user-settings-editor.html'\n})\nexport class BsUserSettingsEditor implements OnInit {\n\n    @Input() public form: FormGroup;\n    @Input() public model: MapOf<any>;\n    @Input() public layout: MapOf<JsonInfo.Entry>;\n    @Input() showUILanguageSelector: boolean;\n    public locales: Locale[];\n\n    constructor(\n        private appService: AppService,\n        private intlService: IntlService,\n        private formBuilder: FormBuilder\n    ) {\n    }\n\n    ngOnInit(): void {\n        if (!this.appService.app) {\n            return; // logout\n        }\n\n        // Locale is treated separately because it is not really stored in the user settings.\n        this.locales = [];\n        if (this.intlService.locales.length > 0) {\n            for (const locale of this.intlService.locales) {\n                this.locales.push(locale);\n            }\n        }\n\n        this.model['language'] = this.intlService.currentLocale.name;\n        this.form.addControl('selectedLocale', this.formBuilder.control(this.intlService.currentLocale.name));\n/*\n        if (this.config && this.config.items) {\n            this.config.items.forEach(item => {\n                if (item.active && JsonEditor.isInputComponent(item)) {\n                    const entry = <JsonInfo.Entry>item;\n                    const paths = Utils.split(entry.path, '.');\n                    const pathLength = paths.length;\n                    const currentValue = this.userSettingsService.readUserSetting(paths)\n                    const entryKey = paths[pathLength - 1];\n\n                    // Add model value\n                    this.setModelValue(paths, currentValue);\n\n                    // Add layout\n                    this.layout[entryKey] = entry;\n\n                    // Add form control\n                    this.form.addControl(\n                        entryKey,\n                        this.formBuilder.control(currentValue, Validators.compose(JsonEditor.makeValidatorFunctions(entry, this.validationService))));\n                }\n            });\n        }\n        */\n    }\n\n    /**\n     * Sets the current value of an entry to our JSON model.\n     *\n     * @param paths The paths to the entry in the JSON model.\n     * @param value The value to set.\n     */\n    /*private setModelValue(paths: string[], value: any): void {\n        const nbPaths = paths.length;\n        let json = this.model;\n        if (nbPaths > 1) {\n            for (let i = 0; i < nbPaths - 1; ++i) {\n                const path = paths[i];\n                if (!json[path]) {\n                    json[path] = {};\n                }\n                json = json[path];\n            }\n        }\n\n        const key = paths[nbPaths - 1];\n        json[key] = value;\n    }*/\n\n    /**\n     * Indicates if the UI language selector is shown in the User settings editor dialog.\n     * By default, returns true.\n     *\n     * @returns true if the UI language selector is shown in the User settings editor dialog.\n     */\n    public showLanguageSelector(): boolean {\n        return this.showUILanguageSelector;\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, ChangeDetectorRef, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { PrincipalWebService, UserSettingsWebService } from '@sinequa/core/web-services';\nimport { AuthenticationService, LoginService, UserOverride } from '@sinequa/core/login';\nimport { IntlService, Locale } from '@sinequa/core/intl';\nimport { Utils } from '@sinequa/core/base';\nimport { BsOverrideUser } from '@sinequa/components/modal';\nimport { ModalService, ModalResult, ConfirmType, ModalButton } from '@sinequa/core/modal';\nimport { AppService } from '@sinequa/core/app-utils';\nimport {NotificationsService, NotificationType} from '@sinequa/core/notification';\n\n@Component({\n  selector: 'sq-user-menu',\n  templateUrl: './user-menu.component.html'\n})\nexport class BsUserMenuComponent implements OnInit, OnDestroy {\n\n  @Input() icon: string = \"fas fa-user\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action;\n\n  // User actions\n  loginAction: Action;\n  logoutAction: Action;\n  overrideAction: Action;\n  revertOverrideAction: Action;\n  adminAction: Action;\n  languageAction: Action;\n  resetUserSettings: Action;\n\n  constructor(\n    public principalService: PrincipalWebService,\n    public authenticationService: AuthenticationService,\n    public intlService: IntlService,\n    public loginService: LoginService,\n    public modalService: ModalService,\n    public appService: AppService,\n    public userSettingsService: UserSettingsWebService,\n    public notificationsService: NotificationsService,\n    public changeDetectorRef: ChangeDetectorRef) {\n\n\n    // Actions objects are initialized in the constructor\n\n    // User Menu\n\n    // Login\n    this.loginAction = new Action({\n      text: \"msg#userMenu.login\",\n      title: \"msg#userMenu.login\",\n      action: () => {\n        this.loginService.login();\n      }\n    });\n\n    // Logout\n    this.logoutAction = new Action({\n      text: \"msg#userMenu.logout\",\n      title: \"msg#userMenu.logout\",\n      action: () => {\n        this.loginService.logout();\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n\n    // Override a user's identity\n    this.overrideAction = new Action({\n      text: \"msg#userMenu.overrideUser\",\n      title: \"msg#userMenu.overrideUser\",\n      action: () => {\n        let userOverride = this.authenticationService.userOverride ?\n          Utils.copy<UserOverride>(this.authenticationService.userOverride) : undefined;\n        if (!userOverride) {\n          userOverride = {\n            userName: \"\",\n            domain: \"\"\n          };\n        }\n        this.modalService.open(BsOverrideUser, {model: userOverride})\n          .then((result) => {\n            if (result === ModalResult.OK) {\n              this.loginService.overrideUser(userOverride);\n              this.changeDetectorRef.markForCheck();\n            }\n          });\n      }\n    });\n\n    // Cancel user override\n    this.revertOverrideAction = new Action({\n      text: \"msg#userMenu.revertUserOverride\",\n      title: \"msg#userMenu.revertUserOverride\",\n      action: () => {\n        this.loginService.overrideUser(undefined);\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n\n    // Link to the admin\n    this.adminAction = new Action({\n      text: \"msg#userMenu.administration\",\n      title: \"msg#userMenu.administration\",\n      href: this.appService.adminUrl\n    });\n\n    // Language menu\n    this.languageAction = new Action({\n      text: \"msg#userMenu.language\",\n      title: \"msg#userMenu.language\",\n      children: this.intlService.locales.map(locale =>\n        new Action({\n          text: locale.display,   // \"French\"\n          title: locale.display,   // \"French\"\n          data: locale,   // French locale\n          selected: locale === this.intlService.currentLocale, // Whether French is the current locale\n          iconAfter: \"sq-image sq-flag-\" + locale.name,\n          action: (item: Action, $event: UIEvent) => {    // On click, switch to this language\n            this.intlService.use((item.data as Locale).name).subscribe(\n              (value) => this.languageAction.children!.forEach(a => a.update()));\n          },\n          updater: (action) => {  // Update the status of buttons\n            action.selected = action.data === this.intlService.currentLocale;\n          }\n        })\n      )\n    });\n\n    this.resetUserSettings = new Action({\n      text: \"msg#userMenu.resetUserSettings.menu\",\n      title: \"msg#userMenu.resetUserSettings.menu\",\n      action: () => {\n        this.modalService.confirm({\n          title: \"msg#userMenu.resetUserSettings.modalTitle\",\n          message: \"msg#userMenu.resetUserSettings.modalMessage\", \n          buttons: [\n            new ModalButton({result: ModalResult.OK, text: \"msg#userMenu.resetUserSettings.modalConfirmButton\"}),\n            new ModalButton({result: ModalResult.Cancel, primary: true})\n          ],\n          confirmType: ConfirmType.Warning\n        }).then(res => {\n          if(res === ModalResult.OK) {\n            this.userSettingsService.reset().subscribe({\n              next: () => this.notificationsService.notify(NotificationType.Success, \"msg#userMenu.resetUserSettings.successMessage\"),\n              error: () => this.notificationsService.notify(NotificationType.Error, \"msg#userMenu.resetUserSettings.errorMessage\")\n            });\n          }\n        });\n      }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._loginSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._principalSubscription = this.principalService.events.subscribe(event => {\n      this.updateMenu();\n    });\n  }\n\n  private _loginSubscription: Subscription;\n  private _principalSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._loginSubscription){\n      this._loginSubscription.unsubscribe();\n    }\n    if(this._principalSubscription){\n      this._principalSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n    const userActions: Action[] = [];\n\n    if (!this.principalService.principal && !this.authenticationService.userOverrideActive) {\n      userActions.push(this.loginAction);\n    }\n    if (this.principalService.principal) {\n      userActions.push(this.logoutAction);\n    }\n    if (this.authenticationService.userOverrideActive) {\n      userActions.push(this.revertOverrideAction);\n    }\n    if (this.principalService.principal && this.principalService.principal.isAdministrator) {\n      userActions.push(this.overrideAction);\n    }\n    if (this.principalService.principal && (this.principalService.principal.isAdministrator || this.principalService.principal.isDelegatedAdmin)) {\n      userActions.push(this.adminAction);\n    }\n    if(this.loginService.complete) {\n      userActions.push(this.resetUserSettings);\n    }\n    userActions.push(new Action({separator: true}));\n    if (this.intlService.locales.length > 1) {\n      userActions.push(this.languageAction);\n    }\n\n    this.menu = new Action({\n        icon: this.icon,\n        text: this.loginService.complete && this.principalService.principal ? this.principalService.principal.name || \"msg#userMenu.user\" : \"msg#userMenu.user\",\n        children: userActions\n    });\n  }\n\n\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {UtilsModule} from \"@sinequa/components/utils\";\n\nimport {BsEditUserSettings} from \"./edit-user-settings/edit-user-settings\";\nimport {BsUserSettingsEditor} from './user-settings-editor/user-settings-editor';\nimport {BsUserMenuComponent} from './user-menu/user-menu.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n\n        IntlModule,\n        ValidationModule,\n\n        BsModalModule,\n        BsActionModule,\n        UtilsModule,\n    ],\n    declarations: [\n        BsEditUserSettings, BsUserSettingsEditor, BsUserMenuComponent\n    ],\n    exports: [\n        BsEditUserSettings, BsUserSettingsEditor, BsUserMenuComponent\n    ],\n})\nexport class BsUserSettingsModule {\n}\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"User\",\n        \"login\": \"Login\",\n        \"overrideUser\": \"Override User\",\n        \"settings\": \"Settings\",\n        \"revertUserOverride\": \"Revert User Override\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Logout\",\n\n        \"language\": \"Language\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Reset user settings\",\n            \"modalTitle\": \"Reset user settings\",\n            \"modalMessage\": \"You are about to reset ALL your user data (recent queries, collections, alerts, preferences, etc.). Do you want to continue?\",\n            \"modalConfirmButton\": \"Confirm\",\n            \"successMessage\": \"Reset user settings succefully\",\n            \"errorMessage\": \"Reset user settings failed\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Settings\",\n        \"language\": \"UI Language\",\n        \"pageSize\": \"Number of results per page\",\n        \"email\": \"Email\"\n    }\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\n\nimport _enUserSettings from \"./en\";\nimport _frUserSettings from \"./fr\";\nimport _deUserSettings from \"./de\";\n\nconst enUserSettings = Utils.merge({}, _enUserSettings, enModal);\nconst frUserSettings = Utils.merge({}, _frUserSettings, frModal);\nconst deUserSettings = Utils.merge({}, _deUserSettings, deModal);\n\nexport { enUserSettings, frUserSettings, deUserSettings };\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"Utilisateur\",\n        \"login\": \"S'identifier\",\n        \"overrideUser\": \"Surcharger l'utilisateur\",\n        \"settings\": \"Paramètres\",\n        \"revertUserOverride\": \"Revenir à l'utilisateur normal\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Se déconnecter\",\n\n        \"language\": \"Langue\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Réinitialiser les paramètres utilisateur\",\n            \"modalTitle\": \"Réinitialiser Paramètres Utilisateur\",\n            \"modalMessage\": \"Vous êtes sur le point de réinitialiser TOUTES vos données utilisateur (requêtes récentes, collections, alertes, préférences, etc.). Voulez-vous continuer ?\",\n            \"modalConfirmButton\": \"Confirmer\",\n            \"successMessage\": \"Réinitialisation des paramètres utilisateur réussie\",\n            \"errorMessage\": \"Echec de la réinitialisation des paramètres utilisateur\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Paramètres\",\n        \"language\": \"Langue de l'interface\",\n        \"pageSize\": \"Nombre de résultats par page\",\n        \"email\": \"E-mail\"\n    }\n\n};\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"Benutzer\",\n        \"login\": \"Anmeldung\",\n        \"overrideUser\": \"Benutzer wechseln\",\n        \"settings\": \"Einstellungen\",\n        \"revertUserOverride\": \"Zum Administrator zurückkehren\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Abmeldung\",\n\n        \"language\": \"Sprache\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Benutzereinstellungen zurücksetzen\",\n            \"modalTitle\": \"Benutzereinstellungen zurücksetzen\",\n            \"modalMessage\": \"Sie sind dabei, ALLE Ihre Benutzerdaten zurückzusetzen (letzte Abfragen, Sammlungen, Warnungen, Einstellungen usw.). Möchtest du fortfahren?\",\n            \"modalConfirmButton\": \"Bestätigen\",\n            \"successMessage\": \"Benutzereinstellungen erfolgreich zurücksetzen\",\n            \"errorMessage\": \"Benutzereinstellungen zurücksetzen fehlgeschlagen\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Einstellungen\",\n        \"language\": \"Sprache der Benutzeroberfläche\",\n        \"pageSize\": \"Anzahl der Ergebnisse pro Seite\",\n        \"email\": \"E-Mail\"\n    }\n\n};\n","import { Injectable } from '@angular/core';\nimport { UserSettingsWebService } from '@sinequa/core/web-services';\n\n/**\n * The role of this service is to bundle together the simple preferences of\n * the user and synchronise them with the user settings.\n *\n * Usage:\n * this.userPreferences.get(\"foo\")\n * this.userPreferences.set(\"foo\", \"bar\")\n * this.userPreferences.sync()\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserPreferences {\n\n    constructor(\n        private userSettingsService: UserSettingsWebService\n    ) {\n    }\n\n    private get prefs(): any {\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"prefs\"])\n            this.userSettingsService.userSettings[\"prefs\"] = {};\n        return this.userSettingsService.userSettings[\"prefs\"];\n    }\n\n    /**\n     * Returns the value of a property\n     * @param property the name of this property\n     */\n    public get(property: string) {\n        return this.prefs[property.toLowerCase()];\n    }\n\n    /**\n     * Sets the value of a property\n     * @param property the name of this property\n     * @param value the value\n     * @param skipSync whether we should skyp syncing (to update multiple properties for example)\n     */\n    public set(property: string, value: any, skipSync?: boolean) {\n        this.prefs[property.toLowerCase()] = value;\n        if(!skipSync){\n            this.sync();\n        }\n    }\n\n    /**\n     * Deletes a given property from the preferences\n     * @param property the name of this property\n     * @param skipSync whether we should skyp syncing (to update multiple properties for example)\n     */\n    public delete(property: string, skipSync?: boolean) {\n        if(Object.prototype.hasOwnProperty.call(this.prefs, property.toLowerCase())) {\n            this.prefs[property.toLowerCase()] = null;\n            if(!skipSync){\n                this.sync();\n            }\n        }\n    }\n\n    /**\n     * Synchronizes the user preferences with the server\n     */\n    public sync(){\n        this.userSettingsService.patch({prefs: this.prefs});\n    }\n\n}"]}