{"version":3,"file":"sinequa-components-alerts.umd.js","sources":["../../../projects/components/alerts/alerts.service.ts","../projects/components/alerts/bootstrap/alert-message/alert-message.component.ts","../projects/components/alerts/bootstrap/alert-message/alert-message.component.html","../projects/components/alerts/bootstrap/edit-alert/edit-alert.html","../projects/components/alerts/bootstrap/edit-alert/edit-alert.ts","../projects/components/alerts/bootstrap/manage-alerts/manage-alerts.html","../projects/components/alerts/bootstrap/manage-alerts/manage-alerts.ts","../projects/components/alerts/bootstrap/alerts-menu/alerts-menu.component.html","../projects/components/alerts/bootstrap/alerts-menu/alerts-menu.component.ts","../../projects/components/alerts/bootstrap/alerts.module.ts","../../projects/components/alerts/messages/en.ts","../../projects/components/alerts/messages/fr.ts","../../projects/components/alerts/messages/de.ts","../../projects/components/alerts/messages/index.ts","../../../projects/components/alerts/sinequa-components-alerts.ts"],"sourcesContent":["import {Injectable, InjectionToken, Inject, Type, OnDestroy} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents, AuditEvent} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\n\n// From core/models/usersettings\nexport namespace Alert {\n    export enum Frequency {\n        Daily,\n        Hourly,\n        Immediate,\n        Weekly,\n        Monthly\n    }\n\n    export enum Days {\n        None = 0x00,\n        Monday = 0x01,\n        Tuesday = 0x02,\n        Wednesday = 0x04,\n        Thursday = 0x08,\n        Friday = 0x10,\n        Saturday = 0x20,\n        Sunday = 0x40,\n        AllDays = (Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday),\n        WeekDays = (Monday | Tuesday | Wednesday | Thursday | Friday)\n    }\n}\n\nexport interface Alert {\n    name: string;\n    description?: string;\n    query: Query;\n    timezone: string;\n    timezoneOffset?: string;\n    frequency: Alert.Frequency;\n    days: Alert.Days;\n    interval: number; // every \"n\"...\n    index: number; // day of month\n    times: string; //times: number[]; // offsets from 00:00 in milliseconds\n    active: boolean;\n    combine: boolean;\n    respectTabSelection: boolean;\n    appQueryUrl?: string; // the URL reference the query of the Alert in the SBA.\n}\n\n// from core/models/audit\nexport const enum AlertEventType {\n    Loaded = \"Alert_Loaded\",\n    Patched = \"Alert_Patched\",\n\n    Add = \"Alert_Add\",\n    Delete = \"Alert_Delete\",\n    DeleteAll = \"Alert_DeleteAll\",\n    Update = \"Alert_Update\",\n\n    Search_AlertQuery = \"Search_AlertQuery\",\n}\n\n// Types of events triggering a change event\nexport const ALERT_CHANGE_EVENTS = [\n    AlertEventType.Loaded,\n    AlertEventType.Add,\n    AlertEventType.Delete,\n    AlertEventType.Update\n];\n\n\n// CRUD Events\nexport interface AlertChangeEvent {\n    type: AlertEventType;\n    alert?: Alert;\n}\n\n\n// Model expected by the ManageAlerts Modal.\nexport interface ManageAlertsModel {\n    alerts: Alert[];\n    auditEvents?: AuditEvent[];\n    searchRoute?: string;\n}\n\n/**\n * The modal types are unknown to this service.\n * The module using this service must provide these components\n * in their forRoot() method\n *\n * Example below:\n *\n *  public static forRoot(): ModuleWithProviders<AlertsModule> {\n        return {\n            ngModule: AlertsModule,\n            providers: [\n                {\n                    provide: ALERT_COMPONENTS,\n                    useValue: {\n                        editAlertModal: EditAlert,\n                        manageAlertsModal: ManageAlerts\n                    }\n                },\n                AlertsService\n            ]\n        };\n    }\n *\n */\nexport interface AlertComponents {\n    editAlertModal: Type<any>;\n    manageAlertsModal: Type<any>;\n}\nexport const ALERT_COMPONENTS = new InjectionToken<AlertComponents>('ALERT_COMPONENTS');\nexport const WINDOW = new InjectionToken('WindowToken');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AlertsService implements OnDestroy {\n\n    private readonly _events = new Subject<AlertChangeEvent>();\n    private readonly _changes = new Subject<AlertChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        public modalService: ModalService,\n        @Inject(ALERT_COMPONENTS) public alertComponents: AlertComponents,\n        @Inject(WINDOW) private window : Window\n    ){\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this.events.next({type: AlertEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(ALERT_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n    }\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's alerts.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of alerts if it does not already exist.\n     */\n    public get alerts() : Alert[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"alerts\"])\n            this.userSettingsService.userSettings[\"alerts\"] = [];\n        return <Alert[]> (<unknown>this.userSettingsService.userSettings[\"alerts\"]);\n    } // TODO: remove cast when UserSettings is updated\n\n    /**\n     * Triggers any event among AlertChangeEvent\n     * (use for fine-grained control of alerts workflow)\n     */\n    public get events() : Subject<AlertChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of alerts\n     * (use to refresh alert menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<AlertChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one alert\n     */\n    public get hasAlert(): boolean {\n        return this.alerts.length > 0;\n    }\n\n    /**\n     * @returns an alert with the given name or undefined if it does not exist\n     * @param name\n     */\n    public alert(name: string): Alert | undefined {\n        const i = this.alertIndex(name);\n        return i>= 0? this.alerts[i] : undefined;\n    }\n\n    private alertIndex(name: string): number {\n        for (let i = 0, ic = this.alerts.length; i < ic; i++) {\n            const alert = this.alerts[i];\n            if (alert && alert.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new alert unless it already exists.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert the alert to create\n     * @returns true if alert was created\n     */\n    public createAlert(alert: Alert) : boolean {\n\n        if(this.alertIndex(alert.name) >= 0)\n            return false; // This alert already exists\n\n        this.alerts.unshift(alert);\n        this.events.next({type : AlertEventType.Add, alert: alert});\n        this.patchAlerts([{\n            type: AlertEventType.Add,\n            detail: {\n                alert: alert.name\n            }\n        }]);\n        return true;\n    }\n\n    /**\n     * Update the alert at the given index, unless an alert with the same name\n     * already exists in the list of alerts.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert the alert to update\n     * @param index the index at which to update the alert\n     * @returns true if alert was updated\n     */\n    public updateAlert(alert: Alert, index : number) : boolean {\n\n        const prevIndex = this.alertIndex(alert.name);\n        if(prevIndex !== -1 && index !== prevIndex)\n            return false; // An alert with the same name exists at a different index\n\n        if(index >= 0 && index < this.alerts.length){\n\n            this.alerts.splice(index, 1, alert);\n            this.events.next({type : AlertEventType.Update, alert: alert});\n            this.patchAlerts([\n                {\n                    type: AlertEventType.Update,\n                    detail: {\n                        alert: alert.name\n                    }\n                }\n            ]);\n            return true;\n\n        }\n        return false;   // This alert does not exist\n    }\n\n    /**\n     * Updates the full list of alerts.\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alerts the new list of alerts\n     * @param auditEvents the list of audit events to log\n     */\n    public updateAlerts(alerts : Alert[], auditEvents?: AuditEvents) : boolean {\n        Utils.arraySet(this.alerts, alerts);\n        this.events.next({type : AlertEventType.Update});\n        this.patchAlerts(auditEvents);\n        return true;\n    }\n\n    /**\n     * Deletes the given alert (based on its name)\n     * Emits an Alert event.\n     * Update the data on the server.\n     * @param alert\n     * @returns true if alert was deleted\n     */\n    public deleteAlert(alert: Alert) : boolean {\n\n        const index = this.alertIndex(alert.name);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.alerts.splice(index, 1);\n        this.events.next({type : AlertEventType.Delete, alert: alert});\n        this.patchAlerts([\n            {\n                type: AlertEventType.Delete,\n                detail: {\n                    alert: alert.name\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Sets this alert to the current search context, using the search service\n     */\n    public setAlertToCurrentQuery(alert: Alert){\n        alert.query = Query.copy(this.searchService.query);\n    }\n\n    /**\n     * Updates Alerts in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchAlerts(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({alerts: this.alerts}, auditEvents)\n            .subscribe(\n                next => {\n                    this.events.next({type: AlertEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Alerts!\", error);\n                }\n            );\n    }\n\n\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this alert.\n     * @param alert\n     * @returns the search service promise\n     */\n    public searchAlert(alert: Alert, path?: string) : Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(alert.query)));\n        this.events.next({type: AlertEventType.Search_AlertQuery, alert: alert});\n        return this.searchService.search( {path: path}, {\n            type: AlertEventType.Search_AlertQuery,\n            detail: {\n                alert: alert.name\n            }\n        });\n    }\n\n    /**\n     * Opens a dialog allowing a user to create a new alert.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the alert was created.\n     */\n    public createAlertModal() : Promise<boolean> {\n        const alert: Alert = {\n            name: \"\",\n            description: \"\",\n            timezone: this.userSettingsService.timezone,\n            query: Query.copy(this.searchService.query),\n            frequency: Alert.Frequency.Daily,\n            days: Alert.Days.WeekDays,\n            interval: 1,\n            index: 1,\n            times: \"9:00\",\n            active: true,\n            combine: true,\n            respectTabSelection: false\n        };\n        const queryUrl = this.window.location.href;\n        return this.modalService.open(this.alertComponents.editAlertModal, {model: { alert: alert }})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n\n                    const index = this.alertIndex(alert.name);\n                    if (index !== -1) {\n\n                        return this.modalService.yesNo(\"msg#alerts.alertAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    alert.appQueryUrl = queryUrl;\n                                    return this.updateAlert(alert, index);\n                                }\n                                return false;\n                            });\n\n                    } else {\n                        alert.appQueryUrl = queryUrl;\n                        return this.createAlert(alert);\n                    }\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to edit an existing alert.\n     * @param alert: The alert to edit\n     * @param noUpdate: if true, will not update the server after the edit\n     * @param searchRoute: the route to use when replaying the alert's query\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the alert was updated.\n     */\n    public editAlertModal(alert: Alert, noUpdate?: boolean, searchRoute?: string) : Promise<boolean> {\n\n        const prevName = alert.name;\n\n        const queryUrl = this.window.location.href;\n        return this.modalService.open(this.alertComponents.editAlertModal,  {model: { alert: alert, searchRoute: searchRoute }})\n            .then((result) => {\n\n                if (result === ModalResult.OK) {\n\n                    if(noUpdate) return true;\n\n                    const prevIndex = this.alertIndex(prevName);\n                    if(prevIndex === -1) return false; // this alert did not exist\n\n                    const index = this.alertIndex(alert.name);\n                    if (index !== -1 && index !== prevIndex) {  // An alert with the same (new) name exists\n\n                        return this.modalService.yesNo(\"msg#alerts.alertAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    const prevAlert = this.alert(prevName);\n                                    if (prevAlert) {\n                                        this.deleteAlert(prevAlert); // Remove the alert with old name\n                                    }\n                                    alert.appQueryUrl = queryUrl;\n                                    return this.updateAlert(alert, this.alertIndex(alert.name)); // Update the alert with new name (index might have changed due to delete of old name)\n                                }\n                                return false;\n                            });\n\n                    } else {\n\n                        alert.appQueryUrl = queryUrl;\n                        return this.updateAlert(alert, prevIndex); // Update this alert\n\n                    }\n                }\n\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to reorganize and edit the\n     * list of alerts.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true is the list was updated.\n     */\n    public manageAlertsModal(searchRoute?: string) : Promise<boolean> {\n\n        const model: ManageAlertsModel =  { alerts: Utils.copy(this.alerts), searchRoute: searchRoute };\n\n        return this.modalService.open(this.alertComponents.manageAlertsModal, {model})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n                    return this.updateAlerts(model.alerts, model.auditEvents);\n                }\n                return false;\n            });\n\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sq-alert-message',\n  templateUrl: './alert-message.component.html'\n})\nexport class BsAlertMessageComponent {\n  @Input() message: string;\n}\n","<div class=\"alert alert-danger ml-3 mr-3 p-3 text-center\" role=\"alert\">\n  {{ message }}\n</div>","<form name=\"editAlert\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editAlert.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"alertName\">{{'msg#editAlert.name' | sqMessage}}</label>\n            <input [sqValidation]=\"form\" type=\"text\" class=\"form-control\" id=\"alertName\" formControlName=\"alertName\" autocomplete=\"off\" spellcheck=\"off\" sqAutofocus>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"alertFrequency\">{{'msg#editAlert.frequency' | sqMessage}}</label>\n            <select class=\"form-control custom-select\" id=\"alertFrequency\" formControlName=\"alertFrequency\">\n                <option *ngFor=\"let frequencyValue of frequencies\" [value]=\"frequencyValue\">{{frequency[frequencyValue] | sqMessage}}</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label>{{'msg#editAlert.days' | sqMessage}}</label>\n            <div class=\"weekdays-grid\">\n                <label *ngFor=\"let day of weekdays | keyvalue: originalOrder\" class=\"custom-control custom-control-inline custom-checkbox\">\n                    <input class=\"custom-control-input\" type=\"checkbox\" [checked]=\"dayChecked(day.value)\" (change)=\"dayChange($event, day.value)\">\n                    <span class=\"custom-control-label user-select-none cursor-pointer\">{{ 'msg#editAlert.'+day.key | sqMessage}}</span>\n                </label>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"alertTimes\">{{'msg#editAlert.times' | sqMessage}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"alertTimes\" formControlName=\"alertTimes\" autocomplete=\"off\" spellcheck=\"off\">\n        </div>\n        <div class=\"form-group\">\n            <label class=\"custom-control custom-control-inline custom-checkbox\">\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"alertActive\" formControlName=\"alertActive\">\n                <span class=\"custom-control-label user-select-none cursor-pointer\">{{'msg#editAlert.active' | sqMessage}}</span>\n            </label>\n            <label *ngIf=\"canUpdateQuery\" class=\"custom-control custom-control-inline custom-checkbox\">\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"updateQuery\" formControlName=\"updateQuery\">\n                <span class=\"custom-control-label user-select-none cursor-pointer\">{{'msg#editAlert.updateQuery' | sqMessage}}</span>\n            </label>\n        </div>\n        <sq-alert-message footer [message]=\"'msg#editAlert.lossDataMessage' | sqMessage\" *ngIf=\"showDirtyMessage\"></sq-alert-message>\n    </sq-modal>\n</form>","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {ModalRef, MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AlertsService, Alert} from \"../../alerts.service\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {KeyValue} from \"@angular/common\";\n\n@Component({\n    selector: \"sq-edit-alert\",\n    templateUrl: \"./edit-alert.html\",\n    styleUrls: [\"./edit-alert.scss\"]\n})\nexport class BsEditAlert implements OnInit, OnDestroy {\n    form: FormGroup;\n    formChanges: Subscription;\n    buttons: ModalButton[];\n    frequencies: Alert.Frequency[];\n    frequency: typeof Alert.Frequency;\n    canUpdateQuery: boolean;\n    updateQuery: boolean;\n    weekdays = {\n        'monday': Alert.Days.Monday, \n        'tuesday': Alert.Days.Tuesday,\n        'wednesday': Alert.Days.Wednesday,\n        'thursday': Alert.Days.Thursday,\n        'friday': Alert.Days.Friday,\n        'saturday': Alert.Days.Saturday,\n        'sunday': Alert.Days.Sunday\n    };\n    \n    showDirtyMessage = false;\n    \n    // Preserve original property order\n    originalOrder = (a: KeyValue<string, Alert.Days>, b: KeyValue<string, Alert.Days>): number => 0\n    \n    private alertDaysControl: FormControl;\n    private alertNameControl: FormControl;\n    private alertFrequencyControl: FormControl;\n    private alertTimesControl: FormControl;\n    private alertActiveControl: FormControl;\n    private updateQueryControl: FormControl;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: { alert: Alert, searchRoute?: string },\n        private formBuilder: FormBuilder,\n        private searchService: SearchService,\n        private alertsService: AlertsService,\n        private modalRef: ModalRef) {\n        this.frequencies = [\n            Alert.Frequency.Daily,\n            Alert.Frequency.Hourly,\n            Alert.Frequency.Immediate,\n        ];\n        this.frequency = Alert.Frequency;\n    }\n\n    get alert() {\n        return this.model.alert;\n    }\n\n    ngOnInit() {\n        if (!this.alert.days) {\n            this.alert.days = Alert.Days.None;\n        }\n        this.canUpdateQuery = (!!this.alertsService.alert(this.alert.name)) &&\n            !!this.searchService.results && !!this.searchService.results.records;\n\n        this.alertDaysControl = new FormControl(this.alert.days);\n        this.alertNameControl = new FormControl(this.alert.name, Validators.required);\n        this.alertFrequencyControl = new FormControl(this.alert.frequency);\n        this.alertTimesControl = new FormControl(this.alert.times); // TODO validator\n        this.alertActiveControl = new FormControl(this.alert.active);\n        this.updateQueryControl = new FormControl(this.updateQuery);\n        this.form = this.formBuilder.group({\n            alertName: this.alertNameControl,\n            alertFrequency: this.alertFrequencyControl,\n            alertTimes: this.alertTimesControl,\n            alertActive: this.alertActiveControl,\n            updateQuery: this.updateQueryControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.alert.name = this.alertNameControl.value;\n                this.alert.frequency = this.alertFrequencyControl.value;\n                this.alert.times = this.alertTimesControl.value;\n                this.alert.active = this.alertActiveControl.value;\n                this.alert.days = this.alertDaysControl.value;\n                this.updateQuery = this.updateQueryControl.value;\n            }\n        );\n        \n        this.createButtons();\n    }\n\n    private createButtons() {\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#editAlert.runQuery\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.runQuery();\n                    this.modalRef.close(ModalResult.Cancel); // dismiss the dialog too (?)\n                },\n                visible: !!this.alertsService.alert(this.alert.name)\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form,\n                action: (button) => {\n                    if (this.updateQuery) {\n                        this.alertsService.setAlertToCurrentQuery(this.alert);\n                    }\n                }\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n                action: (button) => {\n                    if (this.form.dirty) {\n                        button.result = ModalResult.Custom;\n                        this.showDirtyMessage = true;\n                        this.createYesNoButtons();\n                    }\n                }\n            })\n        ];\n    }\n    private createYesNoButtons() {\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.Yes,\n                primary: true,\n            }),\n            new ModalButton({\n                result: ModalResult.No,\n                action: (button) => {\n                    button.result = ModalResult.Custom;\n                    this.showDirtyMessage = false;\n                    this.createButtons();\n                }\n            })\n        ];\n    }\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    dayChecked(day: Alert.Days): boolean {\n        return (this.alert.days & day) !== 0;\n    }\n\n    dayChange(event: UIEvent, day: Alert.Days) {\n        const input = event.target as HTMLInputElement;\n        if (input.checked) {\n            this.alertDaysControl.setValue(this.alert.days |= day);\n            // this.alert.days |= day;\n        }\n        else {\n            this.alertDaysControl.setValue(this.alert.days &= ~day);\n            // this.alert.days &= ~day;\n        }\n        this.form.markAsDirty();\n    }\n\n    runQuery() {\n        this.alertsService.searchAlert(this.alert, this.model.searchRoute);\n    }\n}","<form name=\"manageAlerts\" novalidate>\n    <sq-modal [title]=\"'msg#manageAlerts.title'\" [buttons]=\"buttons\">\n        <div *ngIf=\"model.alerts.length\" class=\"form-group clearfix\">\n            <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"reorder()\">{{(reordering ? \"msg#manageAlerts.edit\" : \"msg#manageAlerts.reorder\") | sqMessage}}</button>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"list-group\" cdkDropList [cdkDropListData]=\"model.alerts\" [cdkDropListDisabled]=\"!reordering\" (cdkDropListDropped)=\"dropped($event)\">\n                <a *ngFor=\"let alert of model.alerts; let $index = index\" href=\"#\" (click)=\"editAlert(alert)\" cdkDrag \n                    [ngClass]=\"['list-group-item list-group-item-action d-flex w-auto-unimportant', reordering ? 'cursor-move': '']\">\n                    <div [ngClass]=\"{'sq-active': !reordering, 'sq-alert-text': true}\">{{alert.name}}</div>\n                    <div class=\"ml-auto\">\n                        <a *ngIf=\"!reordering\" class=\"ml-2\" href=\"#\" (click)=\"remove(alert, $index)\" title=\"{{'msg#manageAlerts.remove' | sqMessage}}\">\n                            <span class=\"fas fa-times sq-remove\"></span>\n                        </a>\n                        <span *ngIf=\"reordering\" class=\"ml-2 fas fa-bars sq-move\"></span>\n                    </div>\n                </a>\n            </div>\n        </div>\n        <sq-alert-message footer [message]=\"'msg#editAlert.lossDataMessage' | sqMessage\" *ngIf=\"showDirtyMessage\"></sq-alert-message>\n    </sq-modal>\n</form>\n","import {Component, Inject, OnInit} from \"@angular/core\";\nimport {ValidatorFn} from \"@angular/forms\";\nimport {CdkDragDrop} from \"@angular/cdk/drag-drop\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvent, AuditEventType} from \"@sinequa/core/web-services\";\nimport {AlertsService, Alert, AlertEventType, ManageAlertsModel} from \"../../alerts.service\";\n\n@Component({\n    selector: \"sq-manage-alerts\",\n    templateUrl: \"./manage-alerts.html\",\n    styleUrls: [\"./manage-alerts.scss\"]\n})\nexport class BsManageAlerts implements OnInit {\n    reordering: boolean;\n    buttons: ModalButton[];\n    removeAllButton: ModalButton;\n    nameValidators: ValidatorFn[];\n    showDirtyMessage = false;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ManageAlertsModel,\n        public alertsService: AlertsService) {\n        this.reordering = false;\n    }\n\n    ngOnInit() {\n        this.createButtons();\n    }\n\n    addAuditEvent(auditEvent: AuditEvent) {\n        if (!this.model.auditEvents) {\n            this.model.auditEvents = [];\n        }\n        this.model.auditEvents.push(auditEvent);\n    }\n\n    reorder() {\n        this.reordering = !this.reordering;\n    }\n\n    remove(alert: Alert, index: number) {\n        this.model.alerts.splice(index, 1);\n        this.removeAllButton.visible = this.model.alerts.length > 0;\n        this.addAuditEvent({\n            type: AuditEventType.Alert_Delete,\n            detail: {\n                alert: alert.name\n            }\n        });\n        return false;\n    }\n\n    editAlert(alert: Alert) {\n        if (!this.reordering) {\n            const alert1 = Utils.copy(alert);\n            this.alertsService.editAlertModal(alert1, true, this.model.searchRoute)\n                .then(result => {\n                    if (result) {\n                        Utils.copy(alert1, alert);\n                        this.addAuditEvent({\n                            type: AuditEventType.Alert_Edit,\n                            detail: {\n                                alert: alert.name\n                            }\n                        });\n                    }\n                });\n        }\n        return false;\n    }\n\n    dropped(drop: CdkDragDrop<Alert[]>) {\n        Utils.arrayMove(this.model.alerts, drop.previousIndex, drop.currentIndex);\n    }\n    \n    private createButtons() {\n        this.buttons = [\n            this.removeAllButton = new ModalButton({\n                text: \"msg#manageAlerts.removeAll\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.model.alerts.splice(0);\n                    button.visible = false;\n                    this.addAuditEvent({\n                        type: AlertEventType.DeleteAll\n                    });\n                },\n                visible: this.model.alerts.length > 0\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n                action: (button) => {\n                    if (this.model.auditEvents && this.model.auditEvents?.length > 0) {\n                        button.result = ModalResult.Custom;\n                        this.showDirtyMessage = true;\n                        this.createYesNoButtons();\n                    }\n                }\n            })\n        ];\n    }\n    \n    private createYesNoButtons() {\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.Yes,\n                primary: true,\n            }),\n            new ModalButton({\n                result: ModalResult.No,\n                action: (button) => {\n                    button.result = ModalResult.Custom;\n                    this.showDirtyMessage = false;\n                    this.createButtons();\n                }\n            })\n        ];\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Action } from '@sinequa/components/action';\nimport { LoginService } from '@sinequa/core/login';\nimport { AlertsService, Alert } from '../../alerts.service';\nimport { SearchService } from '@sinequa/components/search';\nimport { Utils } from '@sinequa/core/base';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'sq-alerts-menu',\n  templateUrl: './alerts-menu.component.html'\n})\nexport class BsAlertsMenuComponent implements OnInit, OnDestroy {\n  \n  @Input() searchRoute: string = \"/search\";\n  @Input() icon: string = \"fas fa-bell\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action | undefined;\n\n  // Alerts actions\n  createAction: Action;\n  manageAction: Action;\n\n  constructor(\n    public loginService: LoginService,\n    public alertsService: AlertsService,\n    public searchService: SearchService\n  ) {\n\n    this.createAction = new Action({\n      text: \"msg#alerts.createAlert\",\n      title: \"msg#alerts.createAlert\",\n      action: () => { this.alertsService.createAlertModal(); }\n    });\n\n    this.manageAction = new Action({\n      text: \"msg#alerts.manageAlerts\",\n      title: \"msg#alerts.manageAlerts\",\n      action: () => { this.alertsService.manageAlertsModal(this.searchRoute); }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._alertsServiceSubscription = this.alertsService.changes.subscribe({\n      next: () => { this.updateMenu(); }\n    });\n    this._loginServiceSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._searchServiceSubscription = this.searchService.resultsStream.subscribe(results => {\n      this.updateMenu();\n    });\n  }\n\n  private _alertsServiceSubscription: Subscription;\n  private _loginServiceSubscription: Subscription;\n  private _searchServiceSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._alertsServiceSubscription){\n      this._alertsServiceSubscription.unsubscribe();\n    }\n    if(this._loginServiceSubscription){\n      this._loginServiceSubscription.unsubscribe();\n    }\n    if(this._searchServiceSubscription){\n      this._searchServiceSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n\n    if (!this.loginService.complete) {\n      this.menu = undefined;\n      return;\n    }\n\n    const alertsActions: Action[] = [];\n\n    if (this.alertsService.hasAlert) {\n        const scrollGroup = new Action({\n            scrollGroup: true,\n            children: this.alertsService.alerts.map(alert => new Action({\n              text: alert.name,\n              data: alert,\n              action: (item: Action) => {\n                const alert: Alert = Utils.copy(item.data);\n                this.alertsService.editAlertModal(alert, undefined, this.searchRoute);\n              }\n          }))\n        });\n        alertsActions.push(scrollGroup);\n    }\n\n    if (!!this.searchService.results) {\n        alertsActions.push(this.createAction);\n    }\n\n    if (this.alertsService.hasAlert) {\n        alertsActions.push(this.manageAction);\n    }\n\n    this.menu = new Action({\n      icon: this.icon,\n      text: \"msg#alerts.alerts\",\n      children: alertsActions\n    });\n  }\n\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\n\nimport {ALERT_COMPONENTS, WINDOW} from \"../alerts.service\";\nimport {BsEditAlert} from \"./edit-alert/edit-alert\";\nimport {BsManageAlerts} from \"./manage-alerts/manage-alerts\";\nimport {BsAlertsMenuComponent} from \"./alerts-menu/alerts-menu.component\";\nimport {BsAlertMessageComponent} from \"./alert-message/alert-message.component\";\n\nfunction windowFactory() {\n    return window;\n}\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n        DragDropModule,\n\n        BsModalModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsEditAlert, BsManageAlerts, BsAlertsMenuComponent, BsAlertMessageComponent\n    ],\n    exports: [\n        BsEditAlert, BsManageAlerts, BsAlertsMenuComponent\n    ],\n    providers: [\n        {\n            provide: ALERT_COMPONENTS,\n            useValue: {\n                editAlertModal: BsEditAlert,\n                manageAlertsModal: BsManageAlerts\n            }\n        },\n        {\n            provide: WINDOW,\n            useFactory: windowFactory\n        }\n    ]\n})\nexport class BsAlertsModule {\n}\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alerts\",\n        \"createAlert\": \"Create Alert\",\n        \"manageAlerts\": \"Manage Alerts\",\n        \"alertAlreadyExists\": \"An alert with that name already exists. Would you like to replace it?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alert\",\n        \"name\": \"Name\",\n        \"frequency\": \"Frequency\",\n        \"days\": \"Days\",\n        \"monday\": \"Monday\",\n        \"tuesday\": \"Tuesday\",\n        \"wednesday\": \"Wednesday\",\n        \"thursday\": \"Thursday\",\n        \"friday\": \"Friday\",\n        \"saturday\": \"Saturday\",\n        \"sunday\": \"Sunday\",\n        \"times\": \"Times\",\n        \"active\": \"Active\",\n        \"updateQuery\": \"Update Query\",\n        \"runQuery\": \"Run Query\",\n        \"lossDataMessage\": \"Do you want to leave without saving your modifications?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Manage Alerts\",\n        \"edit\": \"Edit\",\n        \"reorder\": \"Reorder\",\n        \"remove\": \"Remove\",\n        \"removeAll\": \"Remove all\"\n    },\n\n};\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alertes\",\n        \"createAlert\": \"Créer une alerte\",\n        \"manageAlerts\": \"Gérer les alertes\",\n        \"alertAlreadyExists\": \"Une alerte avec ce nom existe déjà. Voulez-vous la remplacer ?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alerte\",\n        \"name\": \"Nom\",\n        \"frequency\": \"Fréquence\",\n        \"days\": \"Jours\",\n        \"monday\": \"lundi\",\n        \"tuesday\": \"mardi\",\n        \"wednesday\": \"mercredi\",\n        \"thursday\": \"jeudi\",\n        \"friday\": \"vendredi\",\n        \"saturday\": \"samedi\",\n        \"sunday\": \"dimanche\",\n        \"times\": \"Horaires\",\n        \"active\": \"Active\",\n        \"updateQuery\": \"Mettre à jour la requête\",\n        \"runQuery\": \"Exécuter la requête\",\n        \"lossDataMessage\": \"Voulez-vous quitter sans sauvegarder vos modifications ?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Gérer les alertes\",\n        \"edit\": \"Editer\",\n        \"reorder\": \"Réorganiser\",\n        \"remove\": \"Effacer\",\n        \"removeAll\": \"Effacer tout\"\n    },\n\n};\n","export default {\n    \"alerts\": {\n        \"alerts\": \"Alarme\",\n        \"createAlert\": \"Alarm erstellen\",\n        \"manageAlerts\": \"Alarme verwalten\",\n        \"alertAlreadyExists\": \"Ein Alarm mit diesem Namen existiert bereits. Möchten Sie ihn ersetzen?\"\n    },\n\n    \"editAlert\": {\n        \"title\": \"Alarm\",\n        \"name\": \"Name\",\n        \"frequency\": \"Häufigkeit\",\n        \"days\": \"Tage\",\n        \"monday\": \"Montag\",\n        \"tuesday\": \"Dienstag\",\n        \"wednesday\": \"Mittwoch\",\n        \"thursday\": \"Donnerstag\",\n        \"friday\": \"Freitag\",\n        \"saturday\": \"Samstag\",\n        \"sunday\": \"Sonntag\",\n        \"times\": \"Uhrzeitangaben\",\n        \"active\": \"Aktiv\",\n        \"updateQuery\": \"Aktualisiere Suchanfrage\",\n        \"runQuery\": \"Führe Suchanfrage aus\",\n        \"lossDataMessage\": \"Möchten Sie gehen, ohne Ihre Änderungen zu speichern?\"\n    },\n\n    \"manageAlerts\": {\n        \"title\": \"Alarme verwalten\",\n        \"edit\": \"Bearbeiten\",\n        \"reorder\": \"Neu sortieren\",\n        \"remove\": \"Entfernen\",\n        \"removeAll\": \"Alle entfernen\"\n    },\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\nimport _enAlerts from \"./en\";\nimport _frAlerts from \"./fr\";\nimport _deAlerts from \"./de\";\n\nconst enAlerts = Utils.merge({}, _enAlerts, enSearch, enModal);\nconst frAlerts = Utils.merge({}, _frAlerts, frSearch, frModal);\nconst deAlerts = Utils.merge({}, _deAlerts, deSearch, deModal);\n\nexport { enAlerts, frAlerts, deAlerts };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["Alert","InjectionToken","Subject","Utils","Query","Injectable","Inject","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","Component","Input","i0.ɵɵproperty","i0.ɵɵtextInterpolate","i0.ɵɵlistener","i0.ɵɵelement","FormControl","Validators","ModalButton","MODAL_MODEL","i0.ɵɵtemplate","i0.ɵɵpropertyInterpolate","Action","CommonModule","FormsModule","ReactiveFormsModule","DragDropModule","BsModalModule","IntlModule","ValidationModule","UtilsModule","BsActionModule","NgModule","enSearch","enModal","frSearch","frModal","deSearch","deModal"],"mappings":"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"}