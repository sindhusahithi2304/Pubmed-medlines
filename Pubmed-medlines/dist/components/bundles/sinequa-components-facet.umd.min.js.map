{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/components/facet/facet.service.ts","../../../projects/components/facet/abstract-facet.ts","../projects/components/facet/bootstrap/facet-card/facet-card.html","../projects/components/facet/bootstrap/facet-card/facet-card.ts","../projects/components/facet/bootstrap/facet-list/facet-list.html","../projects/components/facet/bootstrap/facet-list/facet-list.ts","../projects/components/facet/bootstrap/facet-tree/facet-tree.html","../projects/components/facet/bootstrap/facet-tree/facet-tree.ts","../projects/components/facet/bootstrap/facet-bar/facet-bar.html","../projects/components/facet/bootstrap/facet-bar/facet-bar.ts","../projects/components/facet/bootstrap/facet-filters/facet-filters.html","../projects/components/facet/bootstrap/facet-filters/facet-filters.ts","../projects/components/facet/bootstrap/facet-refine/facet-refine.html","../projects/components/facet/bootstrap/facet-refine/facet-refine.ts","../projects/components/facet/bootstrap/facet-mysearch/facet-mysearch.html","../projects/components/facet/bootstrap/facet-mysearch/facet-mysearch.ts","../projects/components/facet/bootstrap/facet-range/facet-range.ts","../projects/components/facet/bootstrap/facet-range/facet-range.html","../projects/components/facet/bootstrap/facet-multi/facet-multi.component.html","../projects/components/facet/bootstrap/facet-multi/facet-multi.component.ts","../projects/components/facet/bootstrap/facet-tag-cloud/facet-tag-cloud.html","../projects/components/facet/bootstrap/facet-tag-cloud/facet-tag-cloud.ts","../../projects/components/facet/bootstrap/facet.module.ts","../../projects/components/facet/messages/en.ts","../../projects/components/facet/messages/index.ts","../../projects/components/facet/messages/fr.ts","../../projects/components/facet/messages/de.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","FACET_CHANGE_EVENTS","ALL_FACETS","InjectionToken","DEFAULT_FACETS","FacetService","userSettingsService","searchService","suggestService","appService","intlService","formatService","exprBuilder","allFacets","defaultFacets","_this","_events","Subject","_changes","findAggregationItemIndex","arr","item","index","findIndex","it","display","trimAllWhitespace","replace","events","subscribe","event","type","indexOf","changes","defineProperty","userSettings","_e","apply","patchFacets","facet","name","facetIndex","facets","undefined","getFacets","position","filter","f","map","find","_f","isFacetOpened","facetName","ic","addFacet","detail","removeFacet","splice","addAllFacet","removeAllFacet","auditEvents","patch","console","addFilterSearch","aggregation","items","options","addFilter","search","query","lastSelect","itembox","itemcolumn","column","isitemexclude","not","from-result-id","_c","results","id","Promise","resolve","breadcrumbs","replaceCurrent","removeSelect","isTree","activeSelects","expr_1","findSelect","select","expr","parent","same","isArray","and","_items","operands","exprToAggregationItem","valuesAreExpressions","forEach","$excluded","_expr","makeAggregationExpr","makeNotExpr","replaceSelect","expression","addSelect","clearFilters","all","clearFiltersSearch","removeFilter","stringExpr","filterExpr","findItemFilter","parseExpr","expr_2","toString","selects","removeFilterSearch","queryId","loadData","skip","count","searchInactive","Utils","copy","action","aggregations","getResults","pipe","data","a","eqNC","setColumn","suggest","text","field","suggestQuery","suggestQueries","get","formatValue","formatMessage","formatFieldValue","$column","hasFiltered","findFilter","getAggregation","aggregationName","treeAggregationOptions","agg","expandPaths","getValues","initTreeNodes","levelCallback","getTreeAggregation","getAggregationCount","getCCAggregation","open","$path","Query","makeExpr","addOpen","source","getAggregationNode","target","itemFiltered","exprText","toSqlValue","ret","Expr","expr2","root","children","rootLevel","getColumn","traverse","_nodes","path","level","_nodes_1","_nodes_1_1","_node_1","_node","$level","$opened","$filtered","expandPath","hasChildren","column_1","splitTreepath","trim","substr","split","treepathLast","parts","nodes","node","_i","_a","toLocaleLowerCase","_j","_b","fn","eType","isTrue","_d","callback","getBreadcrumbsItems","getAggregationItemsFiltered","items_1","items_1_1","flattenExpr","suggestionToAggregationItem","normalized","frequency","category","suggestionsToTreeAggregationNodes","suggests","searchTerm","suggestions","path2node_1","Map","searchPattern_1","RegExp","column_2","match","exec","addNode","path2node","parentPath","matchend","nextChild","currentPath","substring","set","hasData","filteredIndex","indx","value_1","assign","i0","ɵɵinject","i1","UserSettingsWebService","i2","SearchService","i3","SuggestService","i4","AppService","i4$1","IntlService","FormatService","ExprBuilder","factory","ɵfac","providedIn","AbstractFacet","actionsChanged","EventEmitter","onCollapse","collapsed","onExpand","expanded","onOpenSettings","settingsOpened","isHidden","selectors","viewQuery","rf","ctx","TemplateRef","i0.ɵɵelement","i0.ɵɵclassMapInterpolate1","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵelementContainer","i0.ɵɵproperty","i0.ɵɵprojection","i0.ɵɵtemplate","BsFacetCard","changeDetectorRef","actions","actionsFirst","actionsSize","collapsible","startCollapsed","hideActionsCollapsed","expandable","startExpanded","startSettingsOpened","facetExpanded","facetCollapsed","collapseAction","Action","_collapsed","facetComponent","update","updater","icon","title","expandAction","_expanded","settingsAction","_settingsOpened","ngOnInit","ngAfterContentInit","actionChangedSubscription","allActions","markForCheck","warn","ngOnDestroy","unsubscribe","hasSettings","settingsTpl","ɵɵdirectiveInject","ChangeDetectorRef","contentQueries","dirIndex","i0.ɵɵlistener","ɵɵpipeBind1","i0.ɵɵpropertyInterpolate","i0.ɵɵstyleProp","ctx_r25","isSelected","item_r27","BsFacetList","facetService","_super","showCount","searchable","allowExclude","allowOr","allowAnd","displayEmptyDistributionIntervals","displayActions","showProgressBar","data$","BehaviorSubject","items$","getValue","subscriptions","filtering","suggestDelay","noResults","searchActive","suggestions$","selected","hiddenSelected","filtered","loadingMore","suggest$","text$","debounceTime","distinctUntilChanged","switchMap","term","of","catchError","err","log","slice","isFiltered","myGroup","FormGroup","searchQuery","FormControl","valueChanges","values","refreshHiddenSelected","filterItemsOr","getName","filterItemsAnd","excludeItems","searchItems","clearSearch","stopPropagation","setValue","ngOnChanges","nonFilteredItems","refreshFiltered","isDistribution","sumOfCount","reduce","acc","subscription","hasSuggestions","filterItem","preventDefault","selectItem","updateSelected","resultsLength","loadMore","skip_1","getPercent","inputs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","decls","vars","consts","template","ctx_r0","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","item_r16","ctx_r15","i0.ɵɵtextInterpolate1","BsFacetTree","expandedLevel","forceMaxHeight","Set","initNodes","add","originalItems","getSelectedItems","clear","size","has","from","delete","ctx_r2","f_r1","ctx_r3","i0.ɵɵclassMap","BsFacetBar","containerIndex","autoAdjust","autoAdjustBreakpoint","collapseBreakpoint","rightAligned","ngContentSelectors","BsFacetFilters","enableCustomization","filters","hidden","facetStatus","remove","view","buildFilters","filteredFacets","component","componentInputs","disabled","styles","addFacetMenu","outFacets","userFacets","hasFacetSelected","this_1","userFacet","add_action","new_facets","this_2","this_3","BsRefine","formBuilder","doRefine","searchControl","searchRefine","form","group","lastRefineText","setError","parseResult","inputErrorMessage","i4$2","FormBuilder","autocompleteEnabled","$event","_r0","BsMySearch","allowDeletion","displayFieldNames","useBadges","ignoreText","excludedFacets","fields","clearAction","isStructured","includes","getField","getFields","join","removeItem","removeBreadcrumbsItem","isEmpty","RoundTarget","RoundType","ɵɵrestoreView","_r5_1","ɵɵnextContext","highValue","onUserChangeEnd","manualRefresh","BsFacetRange","uiService","advancedService","translate","label","value1","roundNearest","format","isDate","date","Date","moment","time","getTime","weekDay","weekday","week","weekYear","onResize","emit","clearFiltersAction","clearRange","applyFiltersAction","applyRange","roundAdjustment","multiple","roundType","up","down","nearest","adjustUp","adjustDown","Math","abs","_roundNumberUp","step","ceil","floor","_roundNumberDown","_roundNumber","_getNearestDate","upper","lower","_getNearestTargetDate","year","getFullYear","month","getMonth","day","getDate","_round","getHours","getMinutes","getSeconds","getMilliseconds","getDay","adjust","_date","round","roundTarget","roundMultiple","roundDown","roundUp","fixDate","dateStr","secondsSep","lastIndexOf","seconds","toInt","initMinMax","min","max","operatorResults","isString","fromSysDateStr","isNumber","parseValue","_value","parser","str","toNumber","isUndefined","toDuration","toSize","initStep","stepDefs","stepDef","thisStep","active","minRange","getRoundTarget","roundTarget_1","roundMultiple_1","oneDay","_g","number","init","draggableRange","enforceStep","sliderActive","getRange","to","rangeActive","rangeSelected","startValue","startHighValue","initDone","localeChange","ngAfterViewInit","addElementResizeListener","slider","nativeElement","removeElementResizeListener","changeContext","operator","val","castAdvancedValue","setRange","valFrom","valTo","makeRangeExpr","makeNumericalExpr","i5","UIService","i6","AdvancedService","ctx_r12","openedFacet","ctx_r13","BsFacetMultiComponent","backAction","detectChanges","clearAllFiltersAction","facetsWithFiltered","$hasFiltered","some","facetActions","openFacet","clearFacetFilters","getFacetCount","aggItemCounter","$count","$hasData","i0.ɵɵattribute","proportionalWeight","data_r1","weight","BsFacetTagCloud","limit","uniformRepartition","countThreshold","shuffleData","isolateFacetFilters","aggregationsData","tagCloudData","defaultWeight","tagCloudFacetPrefix","getTagCloudData","getAggregationsData","tmp_1","end","sort","elem","notFiltered","scaleItemWeight","shuffle","tagCloudItem","isFiltering","j","random","aux","BsFacetModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","FormsModule","ReactiveFormsModule","IntlModule","UtilsModule","CollapseModule","BsActionModule","BsSearchModule","BsAutocompleteModule","Ng5SliderModule","declarations","exports","enFacet","merge","showFacetTextView","showFacetChartView","itemExclude","applyFilters","showMore","showLess","displayed","removeAll","searchPlaceholder","itemSelect","itemUnselect","filterItems","clearSelects","searchNoResult","openItem","closeItem","authors","concepts","company","docformat","doctype","documentlanguages","fileext","filename","geo","matchingpartnames","modified","person","refine","input","buttonTitle","placeholder","tagcloud","treepath","recentQueries","recentQueriesPublic","mySearch","itemRemove","showSearchForm","hideSearchForm","range","monthYear","unavailable","addAll","moreFilters","showFilters","hideFilters","back","selectedFilters","customizeFacets","selectedValue","previous","filterItemCountTooltip","facetCard","expand","collapse","enlarge","openSettings","saveSettings","enSearch","enSelection","enCollapse","frFacet","frSearch","frSelection","frCollapse","deFacet","show_text_view","show_chart_view","deSearch","deSelection","deCollapse"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {Injectable, Inject, Optional, InjectionToken} from \"@angular/core\";\nimport {UserSettingsWebService, UserSettings, Suggestion,\n    Results, Aggregation, AggregationItem, TreeAggregation, TreeAggregationNode,\n    AuditEvents, EngineType, Select, CCColumn\n} from \"@sinequa/core/web-services\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {Query, AppService, FormatService, ExprBuilder, Expr} from \"@sinequa/core/app-utils\";\nimport {FieldValue, Utils} from \"@sinequa/core/base\";\nimport {Subject, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SearchService, BreadcrumbsItem, Breadcrumbs} from \"@sinequa/components/search\";\nimport {SuggestService} from \"@sinequa/components/autocomplete\";\n\n// Facet interface (from models/UserSettings)\nexport interface FacetState {\n    name: string;\n    position: number; // eg 0 = left, 1 = right\n    expanded: boolean;\n    hidden: boolean;\n    view: string;\n}\n\n/**\n * Options for the [[FacetService.AddFilter]] and [[FacetService.AddFilterSearch]] methods\n *\n * and: If multiple items are filtered, determines whether they are filtered as AND or OR\n * not: Whether this is an exlusion of the filtered item\n * replaceCurrent: if true, the current filter is replaced\n */\nexport interface AddFilterOptions {\n    and?: boolean;\n    not?: boolean;\n    replaceCurrent?: boolean;\n}\n\n// Audit Events (from models/Audit)\nexport const enum FacetEventType {\n    Loaded = \"Facet_Loaded\",\n    Add = \"Facet_Added\",\n    AddAll = \"Facets_Added\",\n    Remove = \"Facet_Removed\",\n    RemoveAll = \"Facets_Removed\",\n\n    Patched = \"Facet_Patched\",\n    ClearFilters = \"Facet_ClearFilters\",\n    AddFilter = \"Facet_AddFilter\",\n    RemoveFilter = \"Facet_RemoveFilter\",\n    Open = \"Facet_TreeOpen\"\n}\n\n// Types of events triggering a change event\nexport const FACET_CHANGE_EVENTS = [\n    FacetEventType.Loaded,\n    FacetEventType.Add,\n    FacetEventType.Remove\n];\n\n\n// CRUD Events\nexport interface FacetChangeEvent {\n    type: FacetEventType;\n    facet?: FacetState;\n}\n\nexport const ALL_FACETS = new InjectionToken<any[]>('ALL_FACETS');\nexport const DEFAULT_FACETS = new InjectionToken<FacetState[]>('DEFAULT_FACETS');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FacetService {\n\n    protected readonly _events = new Subject<FacetChangeEvent>();\n    protected readonly _changes = new Subject<FacetChangeEvent>();\n\n    constructor(\n        protected userSettingsService: UserSettingsWebService,\n        protected searchService: SearchService,\n        protected suggestService: SuggestService,\n        protected appService: AppService,\n        protected intlService: IntlService,\n        protected formatService: FormatService,\n        protected exprBuilder: ExprBuilder,\n        @Optional() @Inject(ALL_FACETS) public allFacets: any[],\n        @Optional() @Inject(DEFAULT_FACETS) public defaultFacets: FacetState[]){\n\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this.events.next({type: FacetEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(FACET_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n    }\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's facets.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of facets if it does not already exist.\n     */\n    public get facets() : FacetState[] {\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"facets\"]) {\n            this.userSettingsService.userSettings[\"facets\"] = [];\n            if(!!this.defaultFacets){\n                this.userSettingsService.userSettings[\"facets\"].push(...this.defaultFacets);\n                this.patchFacets();\n            }\n        }\n        return this.userSettingsService.userSettings[\"facets\"];\n    }\n\n    /**\n     * @returns a facet with the given name or undefined if it does not exist\n     * @param name\n     */\n    public facet(name: string): FacetState | undefined {\n        const i = this.facetIndex(name);\n        return i>= 0? this.facets[i] : undefined;\n    }\n\n    /**\n     * Returns the list of facet config in the given container (position)\n     * @param position (default to 0 if there is a single container)\n     */\n    public getFacets(position: number = 0) : any[] {\n        if (!this.allFacets) {\n            return [];\n        }\n        return this.facets.filter(f => f.position === position)\n            .map(f => this.allFacets.find(_f => _f.name === f.name));\n    }\n\n    /**\n     * Returns true if this facet is opened (in any container)\n     * @param facetName\n     */\n    public isFacetOpened(facetName): boolean {\n        return !!this.facets.find(f => f.name === facetName);\n    }\n\n    protected facetIndex(name: string): number {\n        for (let i = 0, ic = this.facets.length; i < ic; i++) {\n            const facet = this.facets[i];\n            if (facet && facet.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Triggers any events regarding the facets\n     */\n    public get events(): Subject<FacetChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of facets\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<FacetChangeEvent> {\n        return this._changes;\n    }\n\n\n    public addFacet(facet: FacetState){\n        this.facets.push(facet);\n        this.events.next({type : FacetEventType.Add, facet: facet});\n        this.patchFacets([{\n            type: FacetEventType.Add,\n            detail: {\n                facet: facet.name\n            }\n        }]);\n    }\n\n    public removeFacet(facet: FacetState){\n        const i = this.facetIndex(facet.name);\n        if(i !== -1){\n            this.facets.splice(i,1);\n            this.events.next({type : FacetEventType.Remove, facet: facet});\n            this.patchFacets([{\n                type: FacetEventType.Remove,\n                detail: {\n                    facet: facet.name\n                }\n            }]);\n        }\n    }\n\n    public addAllFacet() {\n        this.facets.splice(0,this.facets.length);\n        if(!!this.defaultFacets) this.facets.push(...this.defaultFacets);\n        this.events.next({type : FacetEventType.AddAll});\n        this.patchFacets([{\n            type: FacetEventType.AddAll\n        }]);\n    }\n\n    public removeAllFacet() {\n        this.facets.splice(0,this.facets.length);\n        this.events.next({type : FacetEventType.RemoveAll});\n        this.patchFacets([{\n            type: FacetEventType.RemoveAll\n        }]);\n    }\n\n    /**\n     * Updates facets in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    protected patchFacets(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({facets: this.facets} as UserSettings, auditEvents)\n            .subscribe(\n                next => {\n                    this.events.next({type: FacetEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Facets!\", error);\n            });\n    }\n\n    /**\n     * Filter/Exclude an item in a facet and launch a search.\n     * Triggers an internal event and an Audit Event\n     * @param facetName\n     * @param aggregation\n     * @param items\n     * @param options\n     */\n    public addFilterSearch(\n        facetName: string,\n        aggregation: Aggregation,\n        items: AggregationItem | AggregationItem[],\n        options: AddFilterOptions = {}): Promise<boolean> {\n\n        const success = this.addFilter(facetName, aggregation, items, options);\n        if(success) {\n            this.events.next({ type: FacetEventType.AddFilter, facet: this.facet(facetName) });\n            return this.searchService.search(undefined, {\n                type: FacetEventType.AddFilter,\n                detail: {\n                    item: <any>this.searchService.query.lastSelect(),\n                    itembox: facetName,\n                    itemcolumn: aggregation.column,\n                    isitemexclude: options.not,\n                    \"from-result-id\": this.searchService.results?.id\n                }\n            });\n        }\n        return Promise.resolve(false);\n    }\n\n\n    /**\n     * Filter/Exclude one or more item(s) in a facet (without launching a search)\n     * @param facetName\n     * @param aggregation\n     * @param items\n     * @param options\n     * @param query the query on which to add the filter (defaults to search service query)\n     * @param breadcrumbs breadcrumbs in which to look for selected items (defaults  to search service breadcrumbs)\n     */\n    public addFilter(\n        facetName: string,\n        aggregation: Aggregation,\n        items: AggregationItem | AggregationItem[],\n        options: AddFilterOptions = {},\n        query = this.searchService.query,\n        breadcrumbs = this.searchService.breadcrumbs): boolean {\n\n        if (!items) {\n            return false;\n        }\n        if (options.replaceCurrent) {\n            query.removeSelect(facetName);\n        }\n\n        if (!aggregation.isTree && breadcrumbs?.activeSelects.length && !options.replaceCurrent) {\n            const expr = breadcrumbs.findSelect(facetName);\n            const index = breadcrumbs.activeSelects.findIndex(select => select.facet === facetName && (select.expr === expr || select.expr === expr?.parent));\n            const same = (!Array.isArray(items)) ? true : (options.and ? \"AND\" : \"OR\") === (expr?.and ? \"AND\" : \"OR\") && (options.not ? \"YES\" : \"NO\") === (expr?.not ? \"YES\" : \"NO\");\n\n            if (expr && same && index !== -1){\n                let _items: AggregationItem[];\n                if (expr?.operands) {\n                    _items = this.exprToAggregationItem(expr.operands, aggregation.valuesAreExpressions).concat(items);\n                } else {\n                    // previous selection is a single value\n                    _items = this.exprToAggregationItem(expr as Expr, aggregation.valuesAreExpressions).concat(items);\n                }\n                // MUST reset $excluded property otherwise expression is misunderstood\n                _items.forEach(item => item.$excluded = undefined);\n                // overrides options settings with expression if any\n                let _expr = this.exprBuilder.makeAggregationExpr(aggregation, _items, options.and || expr.and);\n                if (options.not || expr.not) {\n                    _expr = this.exprBuilder.makeNotExpr(_expr);\n                }\n                if (_expr) {\n                    query.replaceSelect(index, {expression: _expr, facet: facetName});\n                    return true;\n                }\n            }\n        }\n        let expr = this.exprBuilder.makeAggregationExpr(aggregation, items, options.and);\n        if (options.not) {\n            expr = this.exprBuilder.makeNotExpr(expr);\n        }\n        if (expr) {\n            query.addSelect(expr, facetName);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Clears the query from the current selection on the given facet\n     * @param facetName\n     * @param all\n     * @param query the query to clear from the facet selection (defaults to search service query)\n     */\n    public clearFilters(facetName: string, all?: boolean, query = this.searchService.query) {\n        query.removeSelect(facetName, all);\n    }\n\n    /**\n     * Clears the query from the current selection on the given facet and perform a search\n     * @param facetName\n     * @param all\n     */\n    public clearFiltersSearch(facetName: string | string[], all?: boolean): Promise<boolean> {\n        [].concat(facetName as []).forEach(name => {\n            this.clearFilters(name, all);\n            this._events.next({type: FacetEventType.ClearFilters, facet: this.facet(name)});\n        });\n\n        return this.searchService.search(undefined, {\n                type: FacetEventType.ClearFilters,\n                detail: {\n                    itembox: facetName,\n                    \"from-result-id\": this.searchService.results?.id\n                }\n            });\n    }\n\n    /**\n     * Remove a filter and update the appropriate Select if it was previously included in a selection\n     * @param facetName the facet that removes the filter\n     * @param aggregation the aggregation that contains the item to remove\n     * @param item the aggregation item to remove from the query\n     * @param query the query on which to remove the filter (defaults to search service query)\n     * @param breadcrumbs breadcrumbs in which to look for selected items (defaults  to search service breadcrumbs)\n     */\n    public removeFilter(\n        facetName: string,\n        aggregation: Aggregation,\n        item: AggregationItem,\n        query = this.searchService.query,\n        breadcrumbs = this.searchService.breadcrumbs): Select | undefined {\n\n        if (breadcrumbs) {\n            // if item is excluded, makeAggregation() should returns a NOT expression\n            const stringExpr = item.$excluded ? this.exprBuilder.makeNotExpr(this.exprBuilder.makeAggregationExpr(aggregation, item)) : this.exprBuilder.makeAggregationExpr(aggregation, item);\n            const filterExpr = this.findItemFilter(facetName, aggregation, item, breadcrumbs) || this.appService.parseExpr(stringExpr);\n            const expr = breadcrumbs.findSelect(facetName, filterExpr);\n            const i = breadcrumbs.activeSelects.findIndex(select => select.facet === facetName && (select.expr === expr || select.expr === expr?.parent));\n\n            // 'Select' can't be created when aggregation is a tree map, so, avoid aggregation tree\n            // and remove whole breadcrumbs\n            if (!aggregation.isTree && expr && expr.parent && expr.parent.operands.length > 1) {\n                // create a new Expr from parent and replaces Select by this new one\n                // so, breadcrumbs stay ordered\n                const filterByValuesAreExpression = (it: AggregationItem) => it.value.toString().replace(/ /g, \"\") !== item.value.toString().replace(/ /g, \"\");\n                const filterByValue = (it: AggregationItem) => it.value !== item.value\n                const filter = (aggregation.valuesAreExpressions) ? filterByValuesAreExpression : filterByValue;\n\n                const items: AggregationItem[] = this.exprToAggregationItem(expr.parent.operands, aggregation.valuesAreExpressions).filter(filter);\n                // MUST reset $excluded property otherwise expression is misunderstood (mainly NOT expressions)\n                items.forEach(item => item.$excluded = undefined);\n                const {not, and} = breadcrumbs.selects[i].expr || {};\n                let _expr = this.exprBuilder.makeAggregationExpr(aggregation, items, and);\n                if (not) {\n                    _expr = this.exprBuilder.makeNotExpr(_expr);\n                }\n                if (_expr) {\n                    query.replaceSelect(i, {expression: _expr, facet: facetName});\n                    return {expression: this.exprBuilder.makeAggregationExpr(aggregation, item), facet: facetName};\n                }\n            } else {\n                // filter is a single value... remove it\n                const select = query.select ? query.select[i] : undefined;\n                query.removeSelect(i);\n                return select;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes the aggregation from the search service query and refresh the search\n     * @param facetName\n     * @param aggregation\n     * @param item\n     */\n    public removeFilterSearch(facetName: string, aggregation: Aggregation, item: AggregationItem): Promise<boolean>{\n        const select = this.removeFilter(facetName, aggregation, item);\n        if(select) {\n            this._events.next({type: FacetEventType.RemoveFilter, facet: this.facet(facetName || \"\")});\n            delete this.searchService.query.queryId; // SBA-154\n            return this.searchService.search(undefined, {\n                type: FacetEventType.RemoveFilter,\n                detail: {\n                    item: {expression: select?.expression, facet: select?.facet},\n                    itembox: facetName,\n                    itemcolumn: aggregation.column,\n                    \"from-result-id\": !!this.searchService.results ? this.searchService.results.id : null\n                }\n            });\n        }\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Queries the server for data for this aggregation\n     * @param aggregation\n     * @param skip\n     * @param count\n     * @param query the query to use to fetch the data (default to search service query)\n     */\n    public loadData(\n        aggregation: string,\n        skip: number = 0,\n        count: number = 10,\n        query = this.searchService.query,\n        searchInactive = true): Observable<Aggregation | undefined> {\n\n        query = Utils.copy(query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        query.aggregations[aggregation] = {skip: skip, count: count};\n        return this.searchService.getResults(query, undefined, {searchInactive}).pipe(\n            map((results: Results) => {\n                const data = results.aggregations.find(a => Utils.eqNC(a.name, aggregation));\n                if (data) {\n                    this.setColumn(data);   // Useful for formatting and i18n\n                }\n                return data;\n            })\n        );\n    }\n\n    /**\n     * Get suggestions given a text and a field name, using the Suggest service\n     * @param text\n     * @param field\n     * @param suggestQuery\n     */\n    public suggest(text: string, field: string, suggestQuery = this.appService.suggestQueries[0]): Observable<Suggestion[]> {\n        return this.suggestService.get(suggestQuery, text, [field], this.searchService.query);\n    }\n\n    /**\n     * Format the given result item, using field formatter and/or i18n service\n     * @param item\n     */\n    formatValue(item: AggregationItem): string {\n        return this.intlService.formatMessage(\n            this.formatService.formatFieldValue(item, item.$column));\n    }\n\n    /**\n     * Returns true if this facet has at least one active selection\n     * filtering the search\n     * @param facetName\n     * @param breadcrumbs breadcrumbs in which to look for selected items (defaults to search service breadcrumbs)\n     */\n    public hasFiltered(facetName: string, breadcrumbs = this.searchService.breadcrumbs) : boolean {\n        return !!this.findFilter(facetName, breadcrumbs);\n    }\n\n    /**\n     * Returns an active selection of this facet filtering the search\n     * Returns it as an expression\n     * @param facetName\n     * @param breadcrumbs breadcrumbs in which to look for selected items (defaults to search service breadcrumbs)\n     */\n    public findFilter(facetName: string, breadcrumbs = this.searchService.breadcrumbs) : Expr | undefined {\n        return breadcrumbs?.findSelect(facetName);\n    }\n\n    /**\n     * Look for an aggregation with the given name in the search results and returns it.\n     * Takes care of initializing the aggregation items to insert their $column property.\n     * @param aggregationName\n     * @param results The search results can be provided explicitly or taken from the SearchService implicitly.\n     */\n    getAggregation(\n        aggregationName: string,\n        results = this.searchService.results,\n        treeAggregationOptions?: {\n            facetName: string,\n            levelCallback?: (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => void\n        }\n    ): Aggregation | TreeAggregation | undefined {\n\n        if (results?.aggregations) {\n            const aggregation = results.aggregations.find(agg => Utils.eqNC(agg.name, aggregationName))\n            if (aggregation) {\n                this.setColumn(aggregation);    // Useful for formatting and i18n\n                if (aggregation.isTree && treeAggregationOptions) {\n                    const expr = this.findFilter(treeAggregationOptions.facetName);\n                    const expandPaths = expr ? expr.getValues(aggregation.column) : [];\n                    this.initTreeNodes(treeAggregationOptions.facetName, aggregation, \"/\", aggregation.items as TreeAggregationNode[], expandPaths, treeAggregationOptions.levelCallback);\n\n                    return aggregation as TreeAggregation;\n                }\n                return aggregation;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Look for a Tree aggregation with the given name in the search results and returns it.\n     * Takes care of initializing the Node aggregation items to insert their properties ($column, $path, $opened, $level)\n     * @deprecated use getAggregation() instead\n     * @param facetName\n     * @param aggregationName\n     * @param results The search results can be provided explicitly or taken from the SearchService implicitly.\n     * @param levelCallback A callback method called at every level of the tree.\n     * Can be used to read or alter the properties of the nodes (opening, closing), or node list (sorting)\n     */\n    getTreeAggregation(\n        facetName: string,\n        aggregationName: string,\n        results = this.searchService.results,\n        levelCallback?: (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => void\n    ): TreeAggregation | undefined {\n\n        const agg = this.getAggregation(aggregationName, results);\n        if(agg?.isTree){\n            const expr = this.findFilter(facetName);\n            const expandPaths = expr ? expr.getValues(agg.column) : [];\n            this.initTreeNodes(facetName, agg, \"/\", agg.items as TreeAggregationNode[], expandPaths, levelCallback);\n\n            return agg as TreeAggregation;\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the count parameter of the given aggregation (default is 10)\n     * @param aggregationName\n     */\n    getAggregationCount(aggregationName: string) : number {\n        return this.appService.getCCAggregation(aggregationName)?.count || 10;\n    }\n\n    /**\n     * Opens a Tree node of the given tree facet by querying data from the server\n     * Takes care of initializing the Node aggregation items to insert their properties ($column, $path, $opened, $level)\n     * @param facetName\n     * @param aggregation\n     * @param item\n     * @param levelCallback A callback method called at every level of the tree.\n     * Can be used to read or alter the properties of the nodes (opening, closing), or node list (sorting)\n     */\n    open(\n        facetName: string,\n        aggregation: TreeAggregation,\n        item: TreeAggregationNode,\n        levelCallback?: (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => void,\n        query = this.searchService.query,\n        searchInactive = true\n    ): Observable<Results> {\n\n        const value = item.$path + \"*\";\n        query = Query.copy(query);\n        query.action = \"open\";\n        const expr = this.exprBuilder.makeExpr(aggregation.column, value);\n        query.addOpen(expr, aggregation.name);\n\n        this.events.next({type: FacetEventType.Open, facet: this.facet(facetName)});\n        return this.searchService.getResults(query, undefined, {searchInactive}).pipe(\n            map((results: Results) => {\n                if (item.$path) {\n                    const source = FacetService.getAggregationNode(results.aggregations[0].items as TreeAggregationNode[], item.$path);\n                    const target = FacetService.getAggregationNode(aggregation.items as TreeAggregationNode[], item.$path);\n                    if (source && target) {\n                        target.items = source.items;    // Insert the new data (source) into the original (target)\n                    }\n                    if (target && target.items) {\n                        this.initTreeNodes(facetName, aggregation, item.$path, target.items, undefined, levelCallback);\n                    }\n                }\n                return results;\n            })\n        );\n    }\n\n    /**\n     * Returns true if a given aggregation item is currently actively filtering the search\n     * @param facetName\n     * @param aggregation\n     * @param item\n     * @param breadcrumbs breadcrumbs in which to look for selected items (default to search service breadcrumbs)\n     */\n    itemFiltered(facetName: string, aggregation: Aggregation, item: AggregationItem, breadcrumbs = this.searchService.breadcrumbs): boolean {\n        return !!this.findItemFilter(facetName, aggregation, item, breadcrumbs);\n    }\n\n    protected findItemFilter(facetName: string, aggregation: Aggregation, item: AggregationItem, breadcrumbs: Breadcrumbs | undefined) : Expr | undefined {\n        let expr: Expr | undefined;\n        let exprText: string;\n        if (!aggregation.valuesAreExpressions) {\n            let value: string;\n            if (aggregation.isTree) {\n                value = Utils.toSqlValue((<TreeAggregationNode>item).$path + \"*\");\n            }\n            else {\n                value = Utils.toSqlValue(item.value);\n            }\n            exprText = this.exprBuilder.makeExpr(aggregation.column, value);\n        }\n        else {\n            exprText = item.value as string;\n        }\n        const ret = this.appService.parseExpr(exprText);\n        if (ret instanceof Expr) {\n            expr = <Expr>ret;\n        }\n        if (expr) {\n            const expr2 = breadcrumbs?.findSelect(facetName, expr);\n            if(!!expr2 && (!expr2.parent || !expr2.parent.parent)){\n                return expr2;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Initializes the nodes of a tree (private, with a callback)\n     * @param facetName\n     * @param aggregation\n     * @param root\n     * @param children\n     * @param expandPaths\n     * @param levelCallback\n     */\n    protected initTreeNodes(\n        facetName: string,\n        aggregation: Aggregation,\n        root: string,\n        children: TreeAggregationNode[],\n        expandPaths?: string[],\n        levelCallback?: (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => void\n    ) {\n        if (!children) {\n            return;\n        }\n        let rootLevel: number;\n        if (root) {\n            rootLevel = Utils.count(root, \"/\", false) - 1;\n        }\n        else {\n            root = \"/\";\n            rootLevel = 0;\n        }\n        const column = this.appService.getColumn(aggregation.column);\n        Utils.traverse(children, (_nodes) => {\n            if (!_nodes) {\n                return false;\n            }\n            let path = root;\n            let level = rootLevel;\n            for (const _node of _nodes) {\n                path = path + _node.value + \"/\";\n                level++;\n            }\n            // console.log(path);\n            const _node = _nodes[_nodes.length - 1];\n            _node.$path = path;\n            _node.$column = column;\n            _node.$level = level;\n            _node.$opened = false;\n            _node.$filtered = this.itemFiltered(facetName, aggregation, _node)\n            expandPaths?.forEach(expandPath => {\n                if (expandPath.indexOf(path) === 0) {\n                    const count = !!_node.items ? _node.items.length : _node.hasChildren ? -1 : 0;\n                    if (count > 0) {\n                        _node.$opened = true;\n                    }\n                }\n            });\n            if (levelCallback) {\n                levelCallback(_nodes, level, _node);\n            }\n            return false; // don't stop\n        });\n    }\n\n    protected setColumn(aggregation: Aggregation){\n        if(!aggregation.isTree && aggregation.items){\n            const column = this.appService.getColumn(aggregation.column);\n            aggregation.items.forEach((value) => value.$column = column);\n        }\n    }\n\n\n\n    // static methods\n\n    protected static splitTreepath(path: string): string[] {\n        if (!path) return [];\n        path = path.trim();\n        if (path.length > 0 && path[0] === \"/\") {\n            path = path.substr(1);\n        }\n        if (path.length > 0 && path[path.length - 1] === \"/\") {\n            path = path.substr(0, path.length - 1);\n        }\n        if (path.length === 0) {\n            return [];\n        }\n        return path.split(\"/\");\n    }\n\n\n    public static treepathLast(path: string): string {\n        const parts = FacetService.splitTreepath(path);\n        if (!parts || parts.length === 0) {\n            return \"\";\n        }\n        return parts[parts.length - 1];\n    }\n\n    protected static getAggregationNode(nodes: TreeAggregationNode[], path: string): TreeAggregationNode | undefined {\n        if (!nodes || nodes.length === 0) {\n            return undefined;\n        }\n        const names = FacetService.splitTreepath(path);\n        let node: TreeAggregationNode | undefined;\n        for (let _i = 0, _a = names; _i < _a.length; _i++) {\n            if (!nodes || nodes.length === 0) {\n                return undefined;\n            }\n            const name = _a[_i].toLocaleLowerCase();\n            node = undefined;\n            for (let _j = 0, _b = nodes; _j < _b.length; _j++) {\n                const _node = _b[_j];\n                if ((<string>_node.value).toLocaleLowerCase() === name) {\n                    node = _node;\n                    break;\n                }\n            }\n            if (!node) {\n                return undefined;\n            }\n            nodes = node.items;\n        }\n        return node;\n    }\n\n\n    /**\n     * Convert an Expression object or an Expression Array to their AggregationItem equivalent\n     *\n     * @param expr Expression object or Expression Array\n     * @param valuesAreExpressions when true values should be converted to string otherwise no\n     *\n     * @returns AggregationItem array with converted expression or an empty array\n     */\n    exprToAggregationItem(expr: Expr[] | Expr, valuesAreExpressions: boolean = false): AggregationItem[] {\n        const fn = [\n            (item: Expr) => {\n                let value: FieldValue = item.value as string;\n                if (item.column?.eType === EngineType.bool) {\n                    value = Utils.isTrue(item.value);\n                }\n                return ({count: 0, value, display: item.display, $column: item.column, $excluded: (item?.not || item?.parent?.not)} as AggregationItem);\n            },\n            (item: Expr) => ({count: 0, value: item.toString((item.value) ? true : false), display: item.display, $column: item.column, $excluded: (item?.not || item?.parent?.not)} as AggregationItem)\n        ];\n\n        const callback = valuesAreExpressions ? fn[1] : fn[0];\n        return [].concat(expr as []).map(callback) as AggregationItem[];\n    }\n\n    /**\n     * Get all Breadcrumbs items from a specific facet\n     *\n     * @param facetName facet name where to extract all breadcrumbs\n     * @param breadcrumbs breadcrumbs in which to look for selected items\n     */\n    getBreadcrumbsItems(facetName: string, breadcrumbs: Breadcrumbs | undefined): BreadcrumbsItem[] {\n        return breadcrumbs?.items.filter(item => item.facet === facetName) || [];\n    }\n\n    /**\n     * Get all Aggregation items from a facet, currently filtered\n     *\n     * @param facetName facet name where to inspect\n     * @param valuesAreExpressions when true, some transformations should be done\n     * @param breadcrumbs breadcrumbs in which to look for selected items (default to search service breadcrumbs)\n     */\n    getAggregationItemsFiltered(facetName: string, valuesAreExpressions: boolean = false, breadcrumbs = this.searchService.breadcrumbs): AggregationItem[] {\n        const items = this.getBreadcrumbsItems(facetName, breadcrumbs);\n\n        // aggregation items are constructed from nested expressions\n        const expr = [] as Expr[][];\n        for (const item of items) {\n            const value = (item.expr?.display === undefined) ? item.expr?.operands as Expr[] || item.expr : item.expr;\n            if (value) {\n                expr.push(value as Expr[]);\n            }\n        }\n        // faltten results\n        const flattenExpr = [].concat.apply([], expr);\n\n        return this.exprToAggregationItem(flattenExpr, valuesAreExpressions);\n    }\n\n    /**\n     * Convert Suggestion to AggregationItem\n     * @param suggest a Suggestion object\n     *\n     * @returns AggregationItem object with is `$column` property defined.\n     * On boolean type, convert `value` property to boolean\n     */\n    suggestionToAggregationItem(suggest: Suggestion): AggregationItem {\n        const item: AggregationItem = {\n            value: suggest.normalized || suggest.display,\n            display: suggest.display,\n            count: +(suggest.frequency || 0),\n            $column: this.appService.getColumn(suggest.category)\n        };\n        if (item.$column?.eType === EngineType.bool) {\n            item.value = Utils.isTrue(item.value);\n        }\n        return item;\n    }\n\n    /**\n     * Converts a list of suggestions into a structure of TreeAggregationNodes\n     * @param suggests Suggestions to convert\n     * @param searchTerm The searched term in the suggestions\n     * @param aggregation The tree aggregations\n     */\n    suggestionsToTreeAggregationNodes(suggests: Suggestion[], searchTerm: string, aggregation: Aggregation | undefined): TreeAggregationNode[] {\n        const suggestions: TreeAggregationNode[] = [];\n        if(suggests.length > 0) {\n            const path2node = new Map<string,TreeAggregationNode>();\n            const searchPattern = new RegExp(`\\\\b${searchTerm}`, 'i');\n            const column = this.appService.getColumn(aggregation?.column);\n            suggests.forEach(suggest => {\n                if(suggest.display.length > 1) {\n                    const match = searchPattern.exec(suggest.display);\n                    this.addNode(suggestions, path2node, \"/\", suggest.display, +(suggest.frequency || 0), 1, (match?.index || 0)+searchTerm.length, column);\n                }\n            });\n        }\n        return suggestions;\n    }\n\n    /**\n     * Utility recursive function to generate a tree aggregation structure from\n     * a list of suggestions\n     */\n    protected addNode(items: TreeAggregationNode[],\n            path2node: Map<string,TreeAggregationNode>,\n            parentPath: string,\n            path: string,\n            count: number,\n            level: number,\n            matchend: number,\n            column: CCColumn | undefined) {\n\n        const nextChild = path.indexOf(\"/\", parentPath.length); // path = /Cities/Paris/17e/   parentPath = /Cities/\n        const currentPath = path.substring(0, nextChild+1); // => currentPath = /Cities/Paris/\n        let node = path2node.get(currentPath);\n\n        if(!node) {\n            const value = path.substring(parentPath.length, nextChild);\n            node = {\n                value,\n                count,\n                items: [],\n                hasChildren: false,\n                $column: column,\n                $level: level,\n                $opened: matchend >= currentPath.length,\n                $path: currentPath\n            };\n            path2node.set(currentPath, node);\n            items.push(node);\n        }\n\n        if(currentPath.length < path.length) {\n            node.hasChildren = true;\n            this.addNode(node.items, path2node, currentPath, path, count, level+1, matchend, column);\n        }\n    }\n\n\n    /**\n     * Check if a facet contains items\n     * @param aggregation aggregation name\n     * @param results search results\n     *\n     * @returns true if the facet contains a least one item otherwise false\n     */\n    hasData(aggregation: string, results: Results): boolean {\n        // Avoid calling getAggregation() which is costly\n        return !!results.aggregations.find(agg => Utils.eqNC(agg.name, aggregation))?.items?.length;\n    }\n\n    /**\n     * Returns the index of the first element in the supplied array\n     * corresponding to `item.value` or -1 when not found.\n     * A fallback to `item.display` is done before returning -1\n     * @param item item to find\n     */\n    filteredIndex(data: Aggregation | undefined, arr: Array<AggregationItem>, item: AggregationItem): number {\n        let indx = -1;\n        // specific to Values Are Expressions where expression are not well formatted by Expression Parser\n        // eg: when values is : \"> 0\", Expression Parser returns : \">0\" without space between operator and value\n        if (data?.valuesAreExpressions) {\n            const value = this.trimAllWhitespace(item.value);\n            const normalizedArr = arr.map(item => ({...item, value: this.trimAllWhitespace(item.value)})) || [];\n            indx = normalizedArr.findIndex(it => it.value === value);\n        } else {\n            indx = this.findAggregationItemIndex(arr, item);\n        }\n        return indx;\n    }\n\n    /**\n     * Utility function to returns aggregation item's index in supplied array with fallback to `display` comparison.\n     * Otherwise -1, indicating that no element passed the test.\n     * @param arr The array findIndex() was called upon\n     * @param value The value to be test\n     */\n    public findAggregationItemIndex = (arr: Array<AggregationItem>, item: AggregationItem) => {\n        let index = arr.findIndex(it => it.value === item.value);\n        if (index === -1 && item.display) {\n            // fallback to display comparison\n            index = arr.findIndex(it => it.display === item.display);\n        }\n        return index;\n    };\n\n    private trimAllWhitespace = (value: FieldValue | undefined): FieldValue | undefined => {\n        switch (typeof value) {\n            case \"string\":\n                return value.replace(/\\s/g, '');\n            default:\n                return value;\n        }\n    };\n}\n","import {Component, Output, TemplateRef, EventEmitter, ViewChild} from \"@angular/core\";\nimport {Action} from \"@sinequa/components/action\";\n\n/**\n * This interface should be implemented by facet components, which expose\n * a list of actions and event listeners\n */\n@Component({\n    template: \"\"\n})\nexport abstract class AbstractFacet {\n\n    /**\n     * List of custom actions of this facet\n     */\n    public get actions(): Action[] { return []; }\n\n    /**\n     * Event emitter triggered when the list of action changes\n     */\n    @Output() public actionsChanged = new EventEmitter<Action[]>();\n\n    /**\n     * Template for the settings editor of this facet, if any\n     */\n    @ViewChild(\"settingsTpl\", {static: true, read: TemplateRef}) public settingsTpl?: TemplateRef<any>;\n\n    /**\n     * Template for header of this facet, if any\n     */\n    @ViewChild(\"headerTpl\", {static: true, read: TemplateRef}) public headerTpl?: TemplateRef<any>;\n\n    /**\n     * Template for a sub-header of this facet, if any. This appears below the header\n     */\n    @ViewChild(\"subHeaderTpl\", {static: true, read: TemplateRef}) public subHeaderTpl?: TemplateRef<any>;\n\n    /**\n     * Template for footer of this facet, if any\n     */\n    @ViewChild(\"footerTpl\", {static: true, read: TemplateRef}) public footerTpl?: TemplateRef<any>;\n\n    /**\n     * Method called when a facet is collapsed\n     */\n    public onCollapse(collapsed: boolean){}\n\n    /**\n     * Method called when a facet is resized via an action (not accounting for window resizing)\n     */\n    public onExpand(expanded: boolean){}\n\n    /**\n     * Method called when the settings of this facet are opened\n     */\n    public onOpenSettings(settingsOpened: boolean){}\n\n    /**\n     * Method enabling the facet component to be hidden (if, for example there is no data to display)\n     */\n    public isHidden(): boolean {\n        return false;\n    }\n\n}","<div class=\"card\">    \n    <div class=\"card-header cursor-default pl-3 pr-2 py-1\">\n        <div class=\"d-flex\">\n            <div class=\"d-flex align-items-center text-truncate mr-auto\" [title]=\"(tooltip || title) | sqMessage\">\n                <div *ngIf=\"!!icon\" class=\"card-icon {{icon}} mr-2\" aria-hidden=\"true\"></div>\n                <div *ngIf=\"title\" class=\"card-title text-truncate mb-0 py-1 mr-auto\">{{title | sqMessage }}</div>\n            </div>\n            <ng-container *ngIf=\"facetComponent && facetComponent.headerTpl\" [ngTemplateOutlet]=\"facetComponent.headerTpl\">\n            </ng-container>\n            <div class=\"btn-group\" [sq-action-buttons]=\"{items: allActions, style: buttonsStyle, size: actionsSize, rightAligned: true}\"></div>\n        </div>\n        <ng-container *ngIf=\"facetComponent && facetComponent.subHeaderTpl\" [ngTemplateOutlet]=\"facetComponent.subHeaderTpl\"></ng-container>\n    </div>\n    <sq-collapse [collapsed]=\"_collapsed\" *ngIf=\"!_settingsOpened\">\n        <ng-template>\n            <ng-content>\n            </ng-content>\n        </ng-template>\n    </sq-collapse>\n    <ng-container *ngIf=\"hasSettings && _settingsOpened\" [ngTemplateOutlet]=\"facetComponent.settingsTpl\"></ng-container>\n    <ng-container class=\"card-footer\" *ngIf=\"facetComponent && facetComponent.footerTpl\" [ngTemplateOutlet]=\"facetComponent.footerTpl\"></ng-container>\n</div>","import {Component, Input, Output, OnInit, OnDestroy, EventEmitter, ContentChild, HostBinding, AfterContentInit, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Action} from \"@sinequa/components/action\";\nimport {AbstractFacet} from \"../../abstract-facet\";\n\n@Component({\n    selector: \"sq-facet-card\",\n    templateUrl: \"./facet-card.html\",\n    styles: [`\n        .cursor-default {cursor: default;}\n    `]\n})\nexport class BsFacetCard implements OnInit, OnDestroy, AfterContentInit {\n\n    /**\n     * Title of this facet (optional)\n     */\n    @Input() title: string;\n\n    /**\n     * Tooltip of this facet (defaults to title)\n     */\n    @Input() tooltip: string;\n\n    /**\n     * Icon of this facet, in a form of a span class name (optional)\n     */\n    @Input() icon: string;\n\n    /**\n     * Bootstrap theme name (light, dark...)\n     */\n    @Input() buttonsStyle: string;\n\n    /**\n     * List of custom actions for this facet (optional)\n     */\n    @Input() actions: Action[] = [];\n\n    /**\n     * Whether the [actions]=\"...\" passed by binding should be displayed before or after\n     * the actions from the inner facet component\n     */\n    @Input() actionsFirst = true;\n\n    /**\n     * Size of the custom actions\n     */\n    @Input() actionsSize = \"sm\";\n\n    /**\n     * Whether the facet can be collapsed (default: true)\n     */\n    @Input() collapsible: boolean = true;\n\n    /**\n     * Whether the facet starts collapsed (if collapsible / default: false)\n     */\n    @Input() startCollapsed: boolean = false;\n\n    /**\n     * Whether other actions should be hidden when the facet is collapsed (default: true)\n     */\n    @Input() hideActionsCollapsed: boolean = true;\n\n    /**\n     * Whether the facet can be expanded (default: false)\n     */\n    @Input() expandable: boolean = false;\n\n    /**\n     * Whether the facet starts expanded (if expandable / default: false)\n     */\n    @Input() startExpanded: boolean = false;\n\n    /**\n     * Whether the facet starts with opened settings (default: false)\n     */\n    @Input() startSettingsOpened: boolean = false;\n\n    /**\n     * Event triggered when the facet gets expanded or reduced\n     */\n    @Output() facetExpanded = new EventEmitter<\"expanded\"|\"reduced\">();\n\n    /**\n     * Event triggered when the facet gets expanded or reduced\n     */\n    @Output() facetCollapsed = new EventEmitter<\"collapsed\"|\"expanded\">();\n\n    /**\n     * Event triggered when the facet gets expanded or reduced\n     */\n    @Output() settingsOpened = new EventEmitter<\"opened\"|\"saved\"|\"canceled\">();\n\n    /**\n     * Reference to the child facet inserted by transclusion (ng-content)\n     */\n    @ContentChild(\"facet\", {static: false}) public facetComponent: AbstractFacet;\n\n    @HostBinding('class.collapsed') _collapsed: boolean;\n    @HostBinding('class.expanded') _expanded: boolean;\n    @HostBinding('class.settings-opened') _settingsOpened: boolean;\n\n    @HostBinding('hidden') get hidden(): boolean {\n        return !!this.facetComponent && !!this.facetComponent.isHidden && this.facetComponent.isHidden();\n    }\n\n    private readonly collapseAction;\n    private readonly expandAction;\n    private readonly settingsAction;\n\n    private actionChangedSubscription: Subscription;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef\n    ){\n\n        this.collapseAction = new Action({\n            action: (action) => {\n                this._collapsed = !this._collapsed;\n                this.facetCollapsed.next(this._collapsed ? \"collapsed\" : \"expanded\");\n                if(!!this.facetComponent){\n                    this.facetComponent.onCollapse(this._collapsed);\n                }\n                action.update();\n            },\n            updater: (action) => {\n                action.icon = this._collapsed ? \"fas fa-chevron-down\" : \"fas fa-chevron-up\";\n                action.title = this._collapsed ? 'msg#facetCard.expand' : 'msg#facetCard.collapse';\n            }\n        });\n\n        this.expandAction = new Action({\n            action: (action) => {\n                this._expanded = !this._expanded;\n                this.facetExpanded.next(this._expanded ? \"expanded\" : \"reduced\");\n                if(!!this.facetComponent){\n                    this.facetComponent.onExpand(this._expanded);\n                }\n                action.update();\n            },\n            updater: (action) => {\n                action.icon = this._expanded ? \"fas fa-compress\" : \"fas fa-expand\";\n                action.title = this._expanded ? \"msg#facetCard.reduce\" : \"msg#facetCard.enlarge\";\n            }\n        });\n\n        this.settingsAction = new Action({\n            action: (action) => {\n                this._settingsOpened = !this._settingsOpened;\n                this.settingsOpened.next(this._settingsOpened? \"opened\" : \"saved\");\n                if(!!this.facetComponent){\n                    this.facetComponent.onOpenSettings(this._settingsOpened);\n                }\n                action.update();\n            },\n            updater: (action) => {\n                action.icon = this._settingsOpened ? \"far fa-save\" : \"fas fa-cog\";\n                action.title = this._settingsOpened ? \"msg#facetCard.saveSettings\" : \"msg#facetCard.openSettings\";\n            }\n        });\n\n    }\n\n    ngOnInit(){\n        // Initialize actions\n        this._collapsed = this.startCollapsed;\n        this._expanded = this.startExpanded;\n        this._settingsOpened = this.startSettingsOpened;\n\n        this.collapseAction.update();\n        this.expandAction.update();\n        this.settingsAction.update();\n    }\n\n    ngAfterContentInit(){\n        if(this.facetComponent) {\n            this.actionChangedSubscription = this.facetComponent.actionsChanged.subscribe((actions) => {\n                this.allActions.forEach(action => action.update());\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n        else {\n            console.warn(\"No #facet component is defined in this facet card: \", this.title);\n        }\n    }\n\n    ngOnDestroy(){\n        if(this.actionChangedSubscription){\n            this.actionChangedSubscription.unsubscribe();\n        }\n    }\n\n    public get allActions() : Action[] {\n        if(this.hideActionsCollapsed && this._collapsed) return [this.collapseAction]; // Hide other actions if collapsed\n        let actions = [] as Action[];\n        if(this.actionsFirst) {\n            actions.push(...this.actions);\n        }\n        if(this.facetComponent) actions = actions.concat(this.facetComponent.actions);\n        if(this.hasSettings) actions.push(this.settingsAction);\n        if(this.expandable) actions.push(this.expandAction);\n        if(this.collapsible) actions.push(this.collapseAction);\n        if(!this.actionsFirst) {\n            actions.push(...this.actions);\n        }\n        return actions;\n    }\n\n    public get hasSettings(){\n        return !!this.facetComponent && !!this.facetComponent.settingsTpl;\n    }\n}\n","<div *ngIf=\"!isHidden()\" class=\"list-group list-group-flush\">\n    <div *ngIf=\"displayActions && actions\" class=\"d-flex pb-2 pr-2\">\n        <div class=\"btn-group ml-auto\"\n            [sq-action-buttons]=\"{items: actions, size: 'sm'}\">\n        </div>\n    </div>\n\n    <div *ngIf=\"searchItems.selected\" class=\"position-relative\" [formGroup]=\"myGroup\">\n        <div class=\"p-1\">\n            <input class=\"form-control\" sqAutofocus\n                formControlName=\"searchQuery\"\n                [placeholder]=\"'msg#facet.searchPlaceholder' | sqMessage\">\n        </div>\n        <sq-loading-bar [active]=\"searchActive\"></sq-loading-bar>\n    </div>\n\n    <!-- filtered items -->\n    <div  *ngFor=\"let item of filtered\"\n        class=\"d-flex flex-row align-items-center list-group-item list-group-item-action list-group-item-success text-truncate border-0 px-3 py-1 facet-row cursor-pointer\"\n        [ngClass]=\"{'list-group-item-success': !item.$excluded, 'list-group-item-secondary': item.$excluded}\"\n        [title]=\"'msg#facet.selectedValue' | sqMessage\"\n        (click)=\"filterItem(item, $event)\">\n\n        <a href=\"#\" class=\"text-truncate mr-auto\">{{item | sqValue:item.$column}}</a>\n\n        <span *ngIf=\"showCount && item.count\" class=\"ml-2 text-muted small\">{{item.count | sqNumber}}</span>\n        <span class=\"fa-stack cursor-pointer\">\n            <i class=\"ml-2 far fa-minus-square fa-stack-1x icons icon-hover rotate\"></i>\n            <i class=\"ml-2 far fa-check-square fa-stack-1x icons icon-default rotate\"></i>\n        </span>\n\n    </div>\n\n    <!-- hidden selected items -->\n    <div  *ngFor=\"let item of hiddenSelected\"\n        class=\"d-flex flex-row align-items-center list-group-item list-group-item-primary text-truncate border-0 px-3 py-1 facet-row cursor-pointer\"\n        [title]=\"'msg#facet.itemUnselect' | sqMessage\"\n        (click)=\"selectItem(item, $event)\">\n\n        <a  href=\"#\" (click)=\"filterItem(item, $event)\"\n            [title]=\"'msg#facet.filterItem' | sqMessage:{'terme':(item | sqValue:item.$column)}\"\n            class=\"text-truncate mr-auto\">{{item | sqValue:item.$column}}</a>\n        \n        <span *ngIf=\"showCount && item.count\" class=\"ml-2 text-muted small\">{{item.count | sqNumber}}</span>\n    </div>\n\n    <!--- suggestions items -->\n    <div *ngFor=\"let suggest of suggestions$ | async\"\n        class=\"d-flex flex-row align-items-center list-group-item list-group-item-action text-truncate border-0 px-3 py-1 facet-row cursor-pointer\"\n        [ngClass]=\"{'list-group-item-primary': isSelected(suggest)}\"\n        (click)=\"selectItem(suggest, $event)\">\n        \n        <a  href=\"#\" (click)=\"filterItem(suggest, $event)\"\n            role=\"button\" \n            title=\"{{ 'msg#facet.filterItem' | sqMessage:{'terme':(suggest | sqValue:suggest.$column)} }}\"\n            class=\"text-truncate mr-auto\">{{suggest | sqValue:suggest.$column}}</a>                \n\n        <span *ngIf=\"showCount && suggest.count\" class=\"ml-2 text-muted small\" style=\"z-index: 1;\">{{suggest.count | sqNumber}}</span>\n    \n    </div>\n    <span *ngIf=\"noResults\" class=\"d-block text-center text-muted small py-1\"><i>{{'msg#facet.searchNoResult' | sqMessage}}</i></span>\n\n    <div *ngIf=\"!hasSuggestions()\" class=\"facet-results-scrollable\">\n        <!--- aggregation items without filtered -->\n        <div *ngFor=\"let item of items$ | async\"\n            class=\"position-relative list-group-item list-group-item-action border-0 px-3 py-1 facet-row cursor-pointer\"\n            [ngClass]=\"{ 'list-group-item-primary': isSelected(item) }\"\n            [title]=\"(isSelected(item) ? 'msg#facet.itemUnselect' : 'msg#facet.itemSelect') | sqMessage\"\n            (click)=\"selectItem(item, $event)\">\n\n            <div *ngIf=\"showProgressBar && resultsLength > 1\" class=\"position-absolute progress-bar progress-color\" [style.--count]=\"getPercent(item.count)\"></div>\n            <div class=\"d-flex justify-content-between align-items-baseline\">\n                <a  href=\"#\" (click)=\"filterItem(item, $event)\" style=\"z-index: 1;\"\n                    [title]=\"'msg#facet.filterItem' | sqMessage:{'terme':(item | sqValue:item.$column)}\"\n                    class=\"text-truncate mr-auto\">{{item | sqValue:item.$column}}</a>\n\n                <span *ngIf=\"showCount && item.count\" class=\"ml-2 text-muted small\" style=\"z-index: 1;\">{{item.count | sqNumber}}</span>\n            </div>\n        </div>\n\n        <a *ngIf=\"hasMore\" class=\"d-block border-0 px-3 py-1 text-center\" (click)=\"loadMore($event)\" href=\"#\">\n            <span *ngIf=\"loadingMore\" class=\"fas fa-sync fa-fw fa-spin\"></span>\n            <small *ngIf=\"!loadingMore\">{{'msg#facet.loadMore' | sqMessage}}</small>\n        </a>\n    </div>\n\n</div>","import {Component, Input, OnChanges, SimpleChanges, ChangeDetectorRef, ChangeDetectionStrategy, OnInit, OnDestroy} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {FacetService} from \"../../facet.service\";\nimport {Action} from \"@sinequa/components/action\";\nimport {AbstractFacet} from \"../../abstract-facet\";\nimport {BehaviorSubject, Observable, of, Subscription} from 'rxjs';\nimport {catchError, debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n    selector: \"sq-facet-list\",\n    templateUrl: \"./facet-list.html\",\n    styleUrls: [\"./facet-list.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BsFacetList extends AbstractFacet implements OnChanges, OnInit, OnDestroy {\n    @Input() name: string; // If ommited, the aggregation name is used\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() searchable: boolean = true; // Allow to search for items in the facet\n    @Input() allowExclude: boolean = true; // Allow to exclude selected items\n    @Input() allowOr: boolean = true; // Allow to search various items in OR mode\n    @Input() allowAnd: boolean = true; // Allow to search various items in AND mode\n    @Input() displayEmptyDistributionIntervals: boolean = false; // If the aggregration is a distribution, then this property controls whether empty distribution intervals will be displayed\n    @Input() displayActions = false;\n    @Input() showProgressBar = false;    // Allow to display item count as progress bar\n\n    // Aggregation from the Results object\n    data$ = new BehaviorSubject<Aggregation | undefined>(undefined)\n    items$ = new BehaviorSubject<AggregationItem[]>([]);\n    data = () => this.data$.getValue();\n    subscriptions: Subscription[] = [];\n\n    filtering: boolean = false;\n\n    // Search\n    myGroup: FormGroup;\n    searchQuery: FormControl; // ngModel for textarea\n    suggestDelay = 200;\n    noResults = false;\n    searchActive = false;\n    suggestions$: BehaviorSubject<AggregationItem[]> = new BehaviorSubject<AggregationItem[]>([]);\n    \n    /** Sum of all items count value */\n    sumOfCount: number;\n\n    /** List of selected items */\n    selected: AggregationItem[] = [];\n\n    /** Selected items that are not visible in the current aggregation (or suggestions in search mode) */\n    hiddenSelected: AggregationItem[] = [];\n    \n    /** List of excluded/filtered items */\n    filtered: AggregationItem[] = [];\n\n\n    // Loading more data\n    private skip = 0;\n    /** num of items currently displayed in the facet */\n    private count = 0;\n    /** Does facet has more items to display ? */\n    loadingMore = false;\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly filterItemsOr: Action;\n    private readonly filterItemsAnd: Action;\n    private readonly excludeItems: Action;\n    private readonly clearFilters: Action;\n    public readonly searchItems: Action;\n\n    constructor(\n        private facetService: FacetService,\n        private changeDetectorRef: ChangeDetectorRef) {\n        super();\n\n        this.myGroup = new FormGroup({\n            searchQuery: new FormControl()\n        });\n\n        this.searchQuery = this.myGroup.get(\"searchQuery\") as FormControl;\n        this.subscriptions[\"suggest\"] = this.suggest$(this.searchQuery.valueChanges)\n            .subscribe(values => {\n                this.suggestions$.next(values);\n                // Refresh hiddenSelected list when the list of items is updated\n                this.refreshHiddenSelected();\n                this.searchActive = false;\n                this.changeDetectorRef.markForCheck();\n            });\n\n        // Keep documents with ANY of the selected items\n        this.filterItemsOr = new Action({\n            icon: \"fas fa-filter\",\n            title: \"msg#facet.filterItems\",\n            action: () => {\n                if (this.data()) {\n                    this.facetService.addFilterSearch(this.getName(), this.data() as Aggregation, this.selected);\n                }\n            }\n        });\n\n        // Keep documents with ALL the selected items\n        this.filterItemsAnd = new Action({\n            icon: \"fas fa-bullseye\",\n            title: \"msg#facet.filterItemsAnd\",\n            action: () => {\n                if (this.data()) {\n                    this.facetService.addFilterSearch(this.getName(), this.data() as Aggregation, this.selected, {and: true});\n                }\n            }\n        });\n\n        // Exclude document with selected items\n        this.excludeItems = new Action({\n            icon: \"fas fa-times\",\n            title: \"msg#facet.excludeItems\",\n            action: () => {\n                if (this.data()) {\n                    this.facetService.addFilterSearch(this.getName(), this.data() as Aggregation, this.selected, {not: true});\n                }\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        // Search for a value in this list\n        this.searchItems = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#facet.searchItems\",\n            action: (item, event) => {\n                item.selected = !item.selected;\n                if(!item.selected){\n                    this.clearSearch();\n                }\n                event.stopPropagation();\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    clearSearch() {\n        this.searchQuery.setValue(\"\"); // Remove suggestions if some remain\n        this.noResults = false;\n        this.suggestions$.next([]);\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.name || this.aggregation;\n    }\n\n    /**\n     * OnChanges listener awaits new results from the search service\n     * This completely resets the display\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.showCount === undefined) this.showCount = true;\n        if (this.searchable === undefined) this.searchable = true;\n        if (this.allowExclude === undefined) this.allowExclude = true;\n        if (this.allowOr === undefined) this.allowOr = true;\n        if (this.allowAnd === undefined) this.allowAnd = true;\n\n        if (!!changes[\"results\"]) {     // New data from the search service\n            if(!this.count){\n                this.count = this.facetService.getAggregationCount(this.aggregation);\n            }\n            this.filtered.length = 0;\n            this.selected.length = 0;\n            this.hiddenSelected.length = 0;\n            this.skip = 0;\n            this.searchItems.selected = false;\n            this.clearSearch();\n            this.data$.next(this.facetService.getAggregation(this.aggregation, this.results));\n        }\n    }\n\n    ngOnInit() {\n        this.subscriptions[\"data\"] = this.data$.pipe(\n            map(data => {\n                const nonFilteredItems = this.refreshFiltered(data);\n\n                return !data?.isDistribution || this.displayEmptyDistributionIntervals?\n                    nonFilteredItems : nonFilteredItems.filter(item => item.count > 0);\n            }),\n        ).subscribe(items => {\n            this.sumOfCount = items.length > 0 ? items.map(item => item.count).reduce((acc, value) => acc += value) / 100 : 0;\n            this.items$.next(items);\n            // Refresh hiddenSelected list when the list of items is updated\n            this.refreshHiddenSelected();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n\n        const actions: Action[] = [];\n\n        if (this.selected.length > 0) {\n            if(this.allowOr){\n                actions.push(this.filterItemsOr);\n            }\n            if(this.allowAnd && this.selected.length > 1){\n                actions.push(this.filterItemsAnd);\n            }\n            if(this.allowExclude){\n                actions.push(this.excludeItems);\n            }\n        }\n\n        if(!this.hasSuggestions() && this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n\n        if(this.searchable){\n            actions.push(this.searchItems);\n        }\n\n        return actions;\n    }\n\n\n    // Filtered items\n\n    /**\n     * Actualize the state of filtered items (note that excluded terms are not in the distribution, so the equivalent cannot be done)\n     */\n    refreshFiltered(data: Aggregation | undefined): AggregationItem[] {\n        // refresh filters from breadcrumbs\n        const items = this.facetService.getAggregationItemsFiltered(this.getName(), data?.valuesAreExpressions);\n        items.forEach(item => {\n            if (!this.isFiltered(data, item)) {\n                this.filtered.push(item);\n            }\n        });\n\n        const nonFilteredItems: AggregationItem[] = [];\n        data?.items?.forEach(item => {\n            const indx = this.facetService.filteredIndex(data, this.filtered, item);\n            if (this.facetService.itemFiltered(this.getName(), data, item)) {\n                if (!this.isFiltered(data, item)) {\n                    this.filtered.push(item);\n                } else {\n                    this.filtered[indx].count = item.count;\n                }\n            } else {\n                // sometime facetService.itemFiltered() could returns false but item is present in breadcrumbs\n                if (indx !== -1) {\n                    this.filtered[indx].count = item.count;\n                } else {\n                    nonFilteredItems.push(item);\n                }\n            }\n        });\n        return nonFilteredItems;\n    }\n\n    refreshHiddenSelected() {\n        this.hiddenSelected = this.selected.filter(item => {\n            const idx = this.hasSuggestions()\n                ? this.facetService.findAggregationItemIndex(this.suggestions$.getValue(), item)\n                : this.facetService.findAggregationItemIndex(this.items$.getValue() || [], item);\n            return idx === -1;\n        });\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(data: Aggregation | undefined, item: AggregationItem): boolean {\n        return this.facetService.filteredIndex(data, this.filtered, item) !== -1;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Called when clicking on a facet item text\n     * @param item\n     * @param event\n     */\n    filterItem(item: AggregationItem, event) {\n        const data = this.data();\n        if (data) {\n            this.filtering = true;\n            if (!this.isFiltered(data, item)) {\n                this.facetService.addFilterSearch(this.getName(), data, item);\n            }\n            else {\n                this.facetService.removeFilterSearch(this.getName(), data, item);\n            }\n        }\n        event.preventDefault();\n    }\n\n\n    // Selected items\n\n    /**\n     * Returns true if the given AggregationItem is selected\n     * @param item\n     */\n    isSelected(item: AggregationItem) : boolean {\n        return this.facetService.findAggregationItemIndex(this.selected, item) !== -1;\n    }\n\n\n    /**\n     * Called when selecting/unselecting an item in the facet\n     * @param item\n     */\n    selectItem(item: AggregationItem, e: Event) {\n        e.preventDefault();\n        if(!this.filtering) {\n            this.updateSelected(item);\n            e.stopPropagation();\n        }\n        this.filtering = false;\n    }\n\n    private updateSelected(item: AggregationItem) {\n        if (!this.isFiltered(this.data(), item)) {\n            const index = this.facetService.findAggregationItemIndex(this.selected, item);\n            if (index === -1) {\n                this.selected.push(item);\n            } else {\n                this.selected.splice(index, 1);\n            }\n            this.refreshHiddenSelected();\n        }\n    }\n\n\n    // Loading more items\n\n    /**\n     * Returns true if this facet can get more data from the server\n     * (The only way to guess is to check if the facet is \"full\", it capacity being the (skip+)count)\n     */\n    get hasMore(): boolean {\n        return this.resultsLength >= this.skip + this.count;\n    }\n\n    get resultsLength() {\n        return this.items$.getValue().length + this.filtered.length\n    }\n\n    /**\n     * Called on loadMore button click\n     */\n    loadMore(e: Event) {\n        e.stopPropagation();\n        if (this.data()) {\n            const skip = this.resultsLength;    // avoid hasMore() to return false when fetching data\n            this.loadingMore = true;\n            this.changeDetectorRef.markForCheck();\n\n            Utils.subscribe(this.facetService.loadData(this.aggregation, skip, this.count),\n                agg => {\n                    this.skip = skip;\n                    if (agg?.items && this.data()) {\n                        agg.items = this.items$.getValue().concat(agg.items);\n                        this.data$.next(agg);\n                    }\n                },\n                undefined,\n                () => {\n                    this.loadingMore = false;\n                    this.changeDetectorRef.markForCheck();\n                });\n        }\n        return false; // Avoids following href\n    }\n\n\n    // Suggest / Search\n\n    /**\n     * Returns true if the search mode is active (ie. there are suggestions to display in place of the aggregation)\n     */\n    hasSuggestions(): boolean {\n        return this.suggestions$.getValue().length > 0 || this.noResults;\n    }\n\n    /**\n     * Called on NgModel change (searchQuery)\n     * Uses the suggestfield API to retrieve suggestions from the server\n     * The suggestions \"override\" the data from the distribution (until search results are cleared)\n     */\n    suggest$ = (text$: Observable<string>) => text$.pipe(\n        debounceTime(this.suggestDelay),\n        distinctUntilChanged(),\n        switchMap(term => {\n            if (term.trim() === \"\") {\n                this.noResults = false;\n                return of([]);\n            }\n            this.searchActive = true;\n            this.changeDetectorRef.markForCheck();\n            return this.facetService.suggest(term, this.data()?.column || '').pipe(\n                catchError(err => {\n                    console.log(err);\n                    this.noResults = false;\n                    return of([]);\n                }),\n                map(items => {\n                    const suggestions = items.slice(0, this.count)\n                        .map(item => this.facetService.suggestionToAggregationItem(item))\n                        .filter(item => !this.isFiltered(this.data(), item));\n\n                    this.noResults = suggestions.length === 0 && term.trim() !== \"\";\n                    return suggestions;\n                })\n            )\n        })\n    )\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        return !this.data();\n    }\n    \n    /**\n     * Convert facet item count to percentage width\n     * @param count item count\n     * @returns a % string representation\n     */\n    getPercent(count: number): string {\n        return `${100 - (count / this.sumOfCount)}%`;\n    }\n}\n","<div *ngIf=\"!isHidden()\" class=\"list-group list-group-flush\" [ngClass]=\"{'scrollable': forceMaxHeight }\">\n    <div *ngIf=\"displayActions && actions\" class=\"d-flex pb-2 pr-2\">\n        <div class=\"btn-group ml-auto\"\n            [sq-action-buttons]=\"{items: actions, size: 'sm'}\">\n        </div>\n    </div>\n    \n    <div *ngIf=\"searchItems.selected\" class=\"position-relative\" [formGroup]=\"myGroup\">\n        <div class=\"p-1\">\n            <input class=\"form-control\" sqAutofocus\n                formControlName=\"searchQuery\"\n                [placeholder]=\"'msg#facet.searchPlaceholder' | sqMessage\">\n        </div>\n        <sq-loading-bar [active]=\"searchActive\"></sq-loading-bar>\n    </div>\n    \n    <!-- hidden selected items -->\n    <div *ngFor=\"let item of hiddenSelected\"\n        class=\"d-flex flex-row align-items-center list-group-item list-group-item-primary border-0 px-3 py-1 facet-row cursor-pointer\"\n        [title]=\"'msg#facet.itemUnselect' | sqMessage\"\n        (click)=\"selectItem(item)\">\n\n        <a href=\"#\" (click)=\"filterItem(item, $event)\"\n            [title]=\"'msg#facet.filterItem' | sqMessage:{'terme':(item.$path | slice:1:-1)}\"\n            class=\"text-truncate mr-auto\">{{item.$path | slice:1:-1}}</a>\n        \n        <span *ngIf=\"showCount && item.count\" class=\"ml-2 text-muted small\">{{item.count | sqNumber}}</span>\n    </div>\n\n    <span *ngIf=\"noResults\" class=\"d-block text-center text-muted small py-1\"><i>{{'msg#facet.searchNoResult' | sqMessage}}</i></span>\n\n    <ng-container *ngTemplateOutlet=\"itemsTpl; context:data\"></ng-container>\n\n</div>\n\n<ng-template #itemsTpl let-items=\"items\">\n    <ng-container *ngFor=\"let item of items\">\n\n        <a  class=\"d-flex flex-row align-items-center list-group-item border-0 pl-1 pr-3 py-1\"\n            [ngClass]=\"{'list-group-item-primary':isSelected(item),'list-group-item-success':isFiltered(item),'list-group-item-action':!isFiltered(item), 'filtered':isFiltered(item) }\" \n            [title]=\"(isFiltered(item)? 'msg#facet.selectedValue' : 'msg#facet.itemSelect') | sqMessage\" \n            (click)=\"selectItem(item)\" href=\"#\">\n    \n            <span class=\"mr-auto text-truncate\" [ngStyle]=\"{'margin-left.rem' : item['$level'] - 1}\">\n\n                <a *ngIf=\"item['hasChildren']\" class=\"item-opener\" href=\"#\" (click)=\"open(item, $event)\" [title]=\"(item['$opened'] ? 'msg#facet.closeItem' : 'msg#facet.openItem') | sqMessage\">\n                    <span *ngIf=\"item['$opening']\" class=\"fas fa-sync fa-fw fa-spin\"></span>\n                    <span *ngIf=\"!item['$opening'] && item['$opened']\" class=\"fas fa-caret-down fa-fw\"></span>\n                    <span *ngIf=\"!item['$opening'] && !item['$opened']\" class=\"fas fa-caret-right fa-fw\"></span>\n                </a>\n                <span *ngIf=\"!item['hasChildren']\" class=\"fas fa-fw\"></span>\n    \n                <a  href=\"#\" (click)=\"filterItem(item, $event)\" \n                    role=\"button\" [title]=\"item | sqValue:item.$column\"\n                    class=\"text-truncate\"> {{item | sqValue:item.$column}}</a>\n\n            </span>\n            \n            <i class=\"ml-2 far fa-check-square\" *ngIf=\"isFiltered(item)\"></i>\n\n            <span *ngIf=\"showCount && item.count\" class=\"ml-2 text-muted small\">{{item.count | sqNumber}}</span>\n    \n        </a>\n\n        <ng-container *ngIf=\"item['$opened']\">\n\n            <ng-container *ngTemplateOutlet=\"itemsTpl; context:item\"></ng-container>\n\n        </ng-container>\n\n    </ng-container>\n\n</ng-template>\n","import {Component, Input, OnChanges, SimpleChanges, ChangeDetectorRef, ChangeDetectionStrategy} from \"@angular/core\";\nimport {Results, TreeAggregation, AggregationItem, TreeAggregationNode} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {FacetService} from \"../../facet.service\";\nimport {Action} from \"@sinequa/components/action\";\nimport {AbstractFacet} from \"../../abstract-facet\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Observable, of, Subscription } from \"rxjs\";\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap } from \"rxjs/operators\";\n\n@Component({\n    selector: \"sq-facet-tree\",\n    templateUrl: \"./facet-tree.html\",\n    styleUrls: [\"./facet-tree.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BsFacetTree extends AbstractFacet implements OnChanges {\n    @Input() name: string; // If ommited, the aggregation name is used\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() allowExclude: boolean = true; // Allow to exclude selected items\n    @Input() allowOr: boolean = true; // Allow to search various items in OR mode\n    @Input() searchable: boolean = true; // Allow to search for items in the facet\n    @Input() expandedLevel: number = 2;\n    @Input() forceMaxHeight: boolean = true; // Allow to display a scrollbar automatically on long list items\n    @Input() displayActions = false;\n\n    // Aggregation from the Results object\n    data: TreeAggregation | undefined;\n    originalItems: AggregationItem[] | undefined;\n    \n    private readonly subscriptions: Subscription[] = [];\n\n    // Sets to keep track of selected/excluded/filtered items\n    private readonly filtered = new Set<AggregationItem>();\n    \n    readonly selected = new Map<string,TreeAggregationNode>();\n\n    hiddenSelected: TreeAggregationNode[] = [];\n    // TODO keep track of excluded terms and display them with specific color private\n    // readonly filtered = new Set<AggregationItem>();\n\n    // Search\n    myGroup: FormGroup;\n    searchQuery: FormControl; // ngModel for textarea\n    suggestDelay = 200;\n    searchActive = false;\n    noResults = false;\n    \n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly filterItemsOr: Action;\n    private readonly excludeItems: Action;\n    private readonly clearFilters: Action;\n    public readonly searchItems: Action;\n\n\n    constructor(\n        private facetService: FacetService,\n        private changeDetectorRef: ChangeDetectorRef){\n            super();\n\n            this.myGroup = new FormGroup({\n                searchQuery: new FormControl()\n            });\n    \n            this.searchQuery = this.myGroup.get(\"searchQuery\") as FormControl;\n            this.subscriptions[\"suggest\"] = this.suggest$(this.searchQuery.valueChanges)\n                .subscribe(values => {\n                    if(this.data) {\n                        let items = this.searchQuery.value? values : this.originalItems;\n                        this.data = {\n                            column: this.data.column,\n                            name: this.data.name,\n                            isTree: true,\n                            items\n                        }\n                        // Refresh hiddenSelected list when the list of items is updated\n                        this.refreshHiddenSelected();\n                        this.searchActive = false;\n                        this.changeDetectorRef.markForCheck();\n                    }\n                });\n    \n            // Keep documents with ANY of the selected items\n            this.filterItemsOr = new Action({\n                icon: \"fas fa-filter\",\n                title: \"msg#facet.filterItems\",\n                action: () => {\n                    if (this.data) {\n                        this.facetService.addFilterSearch(this.getName(), this.data, this.getSelectedItems());\n                    }\n                }\n            });\n\n            // Exclude document with selected items\n            this.excludeItems = new Action({\n                icon: \"fas fa-times\",\n                title: \"msg#facet.excludeItems\",\n                action: () => {\n                    if (this.data) {\n                        this.facetService.addFilterSearch(this.getName(), this.data, this.getSelectedItems(), {not: true});\n                    }\n                }\n            });\n\n            // Clear the current filters\n            this.clearFilters = new Action({\n                icon: \"far fa-minus-square\",\n                title: \"msg#facet.clearSelects\",\n                action: () => {\n                    this.facetService.clearFiltersSearch(this.getName(), true);\n                }\n            });\n\n            // Search for a value in this list\n            this.searchItems = new Action({\n                icon: \"fas fa-search\",\n                title: \"msg#facet.searchItems\",\n                action: (item, event) => {\n                    item.selected = !item.selected;\n                    if(!item.selected){\n                        this.clearSearch();\n                    }\n                    event.stopPropagation();\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.name || this.aggregation;\n    }\n\n    /**\n     * OnChanges listener awaits new results from the search service\n     * This completely resets the display\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.showCount === undefined) this.showCount = true;\n        if (this.searchable === undefined) this.searchable = true;\n        if (this.allowExclude === undefined) this.allowExclude = true;\n        if (this.allowOr === undefined) this.allowOr = true;\n\n        if (!!changes[\"results\"]) {     // New data from the search service\n            this.filtered.clear();\n            this.selected.clear();\n            this.hiddenSelected.length = 0;\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {\n                facetName: this.getName(),\n                levelCallback: this.initNodes\n            });\n            this.originalItems = this.data?.items;\n            this.searchItems.selected = false;\n            this.clearSearch();\n        }\n    }\n\n    // For each new node, set up properties necessary for display\n    // This callback could also be used to filter or sorts nodes, etc.\n    @Input()\n    initNodes = (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => {\n        if(node.$filtered){\n            this.filtered.add(node);\n        }\n        if(node.hasChildren && !node.$opened && node.items && node.items.length >= 0 && level <= this.expandedLevel){\n            node.$opened = true;\n        }\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n\n        const actions: Action[] = [];\n\n        if(this.selected.size > 0) {\n            if(this.allowOr){\n                actions.push(this.filterItemsOr);\n            }\n            if(this.allowExclude){\n                actions.push(this.excludeItems);\n            }\n        }\n\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        \n        if(this.searchable){\n            actions.push(this.searchItems);\n        }\n\n        return actions;\n    }\n\n\n    // Filtered items\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return this.filtered.has(item);\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Called when clicking on a facet item text\n     * @param item\n     * @param event\n     */\n    filterItem(item: AggregationItem, event) : boolean {\n        if (this.data) {\n            if(!this.isFiltered(item)) {\n                this.facetService.addFilterSearch(this.getName(), this.data, item);\n            }\n            else {\n                this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        return false;   // Stop the propagation of the event (link inside link)\n    }\n\n\n    // Selected items\n\n    /**\n     * Returns true if the given AggregationItem is selected\n     * @param item\n     */\n    isSelected(item: TreeAggregationNode) : boolean {\n        return this.selected.has(item.$path!);\n    }\n\n    /**\n     * Returns all the selected items\n     */\n    getSelectedItems(): TreeAggregationNode[] {\n        return Array.from(this.selected.values());\n    }\n\n    /**\n     * Called when selecting/unselecting an item in the facet\n     * @param item\n     */\n    selectItem(item: TreeAggregationNode) : boolean {\n        if(!this.isFiltered(item)){\n            if(this.selected.has(item.$path!)) {\n                this.selected.delete(item.$path!);\n            }\n            else {\n                this.selected.set(item.$path!, item);\n            }\n            this.refreshHiddenSelected();\n        }\n        return false;\n    }\n\n    refreshHiddenSelected() {\n        this.hiddenSelected = this.getSelectedItems()\n            .filter(item => !this.find(this.data?.items as TreeAggregationNode[], item));\n    }\n\n    find(items: TreeAggregationNode[] | undefined, item: TreeAggregationNode) {\n        if(items) {\n            for(let i of items) {\n                if(i.$path === item.$path || (i.$opened && this.find(i.items, item))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Expand/Collapse a Tree node (the data may need to downloaded from the server)\n     * @param item\n     */\n    open(item: TreeAggregationNode, event: Event){\n        if (item.hasChildren) {\n            item.$opened = !item.$opened;\n            if (!item.items || item.items.length === 0) {\n                item['$opening'] = true;\n                if (this.data) {\n                    Utils.subscribe(this.facetService.open(this.getName(), this.data, item, this.initNodes),\n                        (results) => {\n                            item['$opening']= false;\n                            this.refreshHiddenSelected();\n                            this.changeDetectorRef.markForCheck();\n                        });\n                }\n            }\n            this.refreshHiddenSelected();\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        return false; // Prevent default action\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        return !this.data;\n    }\n\n\n    // Search    \n\n    clearSearch() {\n        this.searchQuery.setValue(\"\"); // Remove suggestions if some remain\n        this.noResults = false;\n    }\n    \n    /**\n     * Called on NgModel change (searchQuery)\n     * Uses the suggestfield API to retrieve suggestions from the server\n     * The suggestions \"override\" the data from the distribution (until search results are cleared)\n     */\n    suggest$ = (text$: Observable<string>) => text$.pipe(\n        debounceTime(this.suggestDelay),\n        distinctUntilChanged(),\n        switchMap(term => {\n            if (term.trim() === \"\") {\n                this.noResults = false;\n                return of([]);\n            }\n            this.changeDetectorRef.markForCheck();\n            this.searchActive = true;\n            return this.facetService.suggest(term, this.data?.column || '').pipe(\n                catchError(err => {\n                    console.log(err);\n                    this.noResults = false;\n                    return of([]);\n                }),\n                map(suggests => {\n                    const items = this.facetService.suggestionsToTreeAggregationNodes(suggests, term, this.data);\n                    this.noResults = items.length === 0 && term.trim() !== \"\";\n                    return items;\n                })\n            )\n        })\n    )\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n}","<div class=\"container-fluid\">\n    <div class=\"row\">\n        <ng-content></ng-content>\n        <ng-container *ngFor=\"let f of facets\">\n            <sq-facet-card [ngSwitch]=\"f.type\" class=\"{{f['className']}}\" [title]=\"f.title\">\n                <sq-facet-list #facet *ngSwitchCase=\"'list'\" [name]=\"f.name\" [results]=\"results\" [aggregation]=\"f.aggregations\"></sq-facet-list>\n                <sq-facet-tree #facet *ngSwitchCase=\"'tree'\" [name]=\"f.name\" [results]=\"results\" [aggregation]=\"f.aggregations\"></sq-facet-tree>\n                <!-- Note: Removing the support for charts, but could be enabled back via a more generic ng-template approach (get all ng-template passed by transclusion and map them to a facet type) -->\n            </sq-facet-card>\n        </ng-container> \n    </div>\n</div>","import {Component, Input} from \"@angular/core\";\nimport {Results} from \"@sinequa/core/web-services\";\nimport {FacetService} from \"../../facet.service\";\n\n@Component({\n    selector: \"sq-facet-bar\",\n    templateUrl: \"./facet-bar.html\"\n})\nexport class BsFacetBar {\n    @Input() results: Results;\n    @Input() containerIndex: number = 0; // There could be various facet bars (but only one service and storage array)\n\n    constructor(\n        private facetService: FacetService) {\n    }\n\n    get facets(): any[] { // Which facets are actually displayed in this facet bar\n        const facets = this.facetService.getFacets(this.containerIndex);\n        return facets;\n    }\n\n}","<div class=\"facet-filters-bar\" *ngIf=\"!hidden\">\n    <sq-action-menu\n        [items]=\"filters\"\n        [autoAdjust]=\"autoAdjust\"\n        [autoAdjustBreakpoint]=\"autoAdjustBreakpoint\"\n        [collapseBreakpoint]=\"collapseBreakpoint\"\n        [right]=\"rightAligned\"\n        [size]=\"size\">\n    </sq-action-menu>\n</div>\n","import {Component, Input, OnChanges, OnInit} from \"@angular/core\";\nimport {Results} from \"@sinequa/core/web-services\";\nimport {FacetService} from \"../../facet.service\";\nimport {Action} from \"@sinequa/components/action\";\nimport {FacetConfig} from '../facet-multi/facet-multi.component';\nimport {BsFacetList} from '../facet-list/facet-list';\nimport {BsFacetTree} from '../facet-tree/facet-tree';\n\n@Component({\n    selector: \"sq-facet-filters\",\n    templateUrl: \"./facet-filters.html\",\n    styleUrls: [\"./facet-filters.css\"]\n})\nexport class BsFacetFilters implements OnInit, OnChanges {\n    @Input() results: Results;\n    @Input() facets: FacetConfig[];\n    @Input() enableCustomization = false;\n\n    @Input() autoAdjust: boolean = true;\n    @Input() autoAdjustBreakpoint: string = 'xl';\n    @Input() collapseBreakpoint: string = 'sm';\n    @Input() rightAligned: boolean = false;\n    @Input() size: string;\n\n    filters: Action[] = [];\n    hidden: boolean = false;\n\n    facetStatus = {\n        add: {\n            title: \"msg#facet.filters.add\",\n            icon: \"fas fa-plus\"\n        },\n        remove: {\n            title: \"msg#facet.filters.remove\",\n            icon: \"fas fa-minus\"\n        }\n    };\n\n    constructor(\n        private facetService: FacetService\n    ) {\n        this.hidden = false;\n        this.filters = [];\n    }\n\n    ngOnInit() {\n        if (!this.enableCustomization) return;\n\n        if (!this.facetService.defaultFacets) {\n            this.facetService.defaultFacets = [];\n            for (let facet of this.facets) this.facetService.defaultFacets.push({name: facet.name, position: 0, hidden: false, expanded: true, view: \"\"});\n        }\n\n        if (!this.facetService.allFacets) this.facetService.allFacets = this.facets;\n    }\n\n    ngOnChanges() {\n        if(!!this.results)\n            this.buildFilters();\n\n        if(!this.results)\n            this.hidden=true;\n    }\n\n    /**\n     * Build filters bar actions\n     */\n    private buildFilters() {\n\n        // For each facet\n        this.filters = this.filteredFacets.map((facet: FacetConfig) => {\n\n            const children = [\n                new Action({\n                    component: (facet.type === 'list') ? BsFacetList : BsFacetTree,\n                    componentInputs: {results: this.results, name: facet.name, aggregation: facet.aggregation, searchable: facet.searchable, displayActions: true}\n                })\n            ];\n\n            return new Action({\n                name: facet.name,\n                text: facet.title,\n                title: facet.title,\n                icon: facet.icon,\n                disabled: !this.hasData(facet),\n                styles: this.hasFiltered(facet.name) ? \"ml-2 font-weight-bold\" : \"ml-2\",\n                children: children\n            });\n        });\n\n        if (this.enableCustomization) this.addFacetMenu();\n    }\n\n    /**\n     * Use to outline facet when filters are sets\n     * @param facetName facet name\n     *\n     * @returns true if filters are sets otherwise false\n     */\n    private hasFiltered(facetName): boolean {\n        return this.facetService.hasFiltered(facetName);\n    }\n\n    /**\n     * Use to disable menu item when no items in a facet\n     * @param facet facet to check\n     *\n     * @returns true if facet contains at least one item otherwise false\n     */\n    private hasData(facet: FacetConfig): boolean {\n        return this.facetService.hasData(facet.aggregation, this.results);\n    }\n\n    private addFacetMenu() {\n        let outFacets: Action[] = [];\n\n        outFacets.push(new Action({\n            name: `add_remove_all`,\n            text: this.userFacets.length < this.facets.length ? \"msg#facet.filters.addAll\" : \"msg#facet.filters.removeAll\",\n            icon: this.hasFacetSelected ? \n                    (this.userFacets.length < this.facets.length ? \"far fa-minus-square mr-1\" : \"far fa-check-square mr-1\")\n                    : \"far fa-square mr-1\",\n            title: this.userFacets.length < this.facets.length ? \"msg#facet.filters.addAll\" : \"msg#facet.filters.removeAll\",\n            action: () => {\n                if (this.hasFacetSelected && this.userFacets.length === this.facets.length) this.facetService.removeAllFacet();\n                else this.facetService.addAllFacet();\n                this.buildFilters();\n            }\n        }));\n\n        for (let facet of this.facets) {\n            outFacets.push(new Action({\n                name: `add_remove_${facet.name}`,\n                text: facet.title,\n                icon: facet.icon,\n                selected: !!this.userFacets?.find(userFacet => userFacet.name === facet.name),\n                title: !!this.userFacets?.find(userFacet => userFacet.name === facet.name) ? \"msg#facet.filters.add\" : \"msg#facet.filters.remove\",\n                action: () => {\n                    if (this.userFacets?.find(userFacet => userFacet.name === facet.name)) this.facetService.removeFacet({name: facet.name, position: 0, hidden: false, expanded: true, view: \"\"})\n                    else this.facetService.addFacet({name: facet.name, position: 0, hidden: false, expanded: true, view: \"\"});\n                    this.buildFilters();\n                }\n            }));\n        }\n\n        let add_action = new Action({\n            name: \"facets_config\",\n            icon: \"fas fa-cog\",\n            title: \"msg#facet.filters.customizeFacets\",\n            children: outFacets\n        });\n        this.filters = [add_action, ...this.filters]; \n    }\n\n    get filteredFacets() {\n        if (!this.enableCustomization) return this.facets;\n        let new_facets: FacetConfig[] = [];\n\n        if (this.userFacets) {\n            for (let facet of this.facets) {\n                let pos = this.userFacets.findIndex((userFacet) => userFacet.name === facet.name);\n                if (pos >= 0) new_facets.push(facet);\n            }\n        }\n        return new_facets;\n    }\n\n    get userFacets() {\n        return this.facetService.facets;\n    }\n\n    get hasFacetSelected() {\n        if (this.userFacets.length === 0) return false;\n        for (let facet of this.facets) {\n            if (this.userFacets.find(userFacet => userFacet.name === facet.name)) return true;\n        }\n        return false;\n    }\n}\n","<div class=\"card-body\">\n    <form role=\"search\" novalidate [formGroup]=\"form\">\n        \n        <div class=\"d-flex flex-column flex-grow-1 position-relative\">        \n            <div class=\"input-group\">\n                <label class=\"sr-only\">{{'msg#facet.refine.input.label' | sqMessage}}</label>\n                \n                <input type=\"text\"\n                    formControlName=\"search\" \n                    class=\"form-control {{inputErrorMessage ? 'is-invalid' : ''}}\"\n                    spellcheck=\"false\"\n                    autocomplete=\"off\"\n                    [title]=\"inputErrorMessage\"\n\n                    sqAutocomplete\n                    [placeholder]=\"'msg#facet.refine.input.placeholder' | sqMessage\"\n                    [dropdown]=\"dropdown\" \n                    [suggestQuery]=\"suggestQuery\"\n                    [off]=\"!autocompleteEnabled\"\n                    [suggestDelay]=\"suggestDelay\"                    \n\n                    (submit)=\"doRefine()\"\n                    (parse)=\"setError($event)\">\n    \n                <div class=\"input-group-append\">\n                    <button class=\"btn btn-light\" type=\"button\" (click)=\"doRefine()\" title=\"{{'msg#facet.refine.input.buttonTitle' | sqMessage}}\">\n                        <i class=\"fas fa-search\"></i>\n                    </button>\n                </div>\n            </div>\n    \n            <sq-autocomplete-list #dropdown>\n                <ng-template #itemTpl let-item>\n                    <div class=\"py-2\" style=\"padding-left:0.75rem;\">{{item.display}}\n                        <small *ngIf=\"item.category\" class=\"ml-2 text-muted\">{{(item.label || item.category) | sqMessage}}</small>\n                    </div>\n                </ng-template>\n            </sq-autocomplete-list>\n        </div>\n    </form>    \n    <sq-did-you-mean [results]=\"results\" [context]=\"'refine'\"></sq-did-you-mean>\n</div>","import {Component, Input, OnChanges, SimpleChanges, ChangeDetectorRef} from \"@angular/core\";\nimport {FormGroup, FormBuilder, AbstractControl} from \"@angular/forms\";\nimport {Results} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {AbstractFacet} from \"../../abstract-facet\";\nimport {ParseResult} from '@sinequa/components/autocomplete';\n\n@Component({\n    selector: \"sq-refine\",\n    templateUrl: \"./facet-refine.html\"\n})\nexport class BsRefine extends AbstractFacet implements OnChanges {\n\n    /**\n     * Results of the search page associated to this refine\n     */\n    @Input() results: Results;\n\n    /**\n     * Whether or not to enable autocompletion\n     */\n    @Input() autocompleteEnabled: boolean;\n\n    /**\n     * Suggest query with which to perform autocompletion\n     */\n    @Input() suggestQuery: string;\n\n    /**\n     * Minimum delay (in ms) between suggest queries\n     */\n    @Input() suggestDelay: number = 200;\n\n    form: FormGroup;\n    searchControl: AbstractControl | null;\n\n    inputErrorMessage: string;\n\n    constructor(\n        public formBuilder: FormBuilder,\n        public searchService: SearchService,\n        private changeDetectorRef: ChangeDetectorRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.form) {\n            this.form = this.formBuilder.group({\n                \"search\": \"\"\n            });\n            this.searchControl = this.form.get(\"search\");\n        }\n        if (!!changes[\"results\"] && this.searchControl) {\n            this.searchControl.setValue(this.searchService.lastRefineText);\n        }\n    }\n\n    doRefine = () => {\n        if (this.searchControl) {\n            const text = Utils.trim(this.searchControl.value);\n            if (text) {\n                this.searchService.searchRefine(text);\n            }\n        }\n    }\n\n    setError(parseResult: ParseResult = {}){\n        if(parseResult.error !== this.inputErrorMessage){\n            this.inputErrorMessage = parseResult.error || \"\";\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n}","<div class=\"my-search d-flex flex-row align-items-center flex-wrap\" [ngClass]=\"collapsed ? 'collapsed-view' : 'expanded-view'\">\n    <ng-container *ngFor=\"let item of items; index as i\">\n        <div *ngIf=\"!item.hidden\"\n            class=\"px-1 ml-1 mb-1 sq-metadata-item sq-metadata-color-{{fields[i]}}\"\n            [ngClass]=\"{'sq-metadata-border': useBadges}\">\n            <span\n                [innerHTML]=\"item.display | sqExpr:{withFields: displayFieldNames, asHTML: true}\"\n                title=\"{{fields[i]}}\">\n            </span>\n            <span\n                *ngIf=\"allowDeletion\"\n                class=\"far fa-times-circle pl-1\"\n                role=\"button\"\n                (click)=\"removeItem(item)\"\n                title=\"{{'msg#facet.mySearch.itemRemove' | sqMessage}}\">\n            </span>\n        </div>\n    </ng-container>\n</div>\n<div *ngIf=\"collapsible && !isEmpty\">\n    <hr>\n    <i class=\"fas fa-chevron-circle-{{collapsed ? 'down' : 'up'}}\" (click)=\"collapsed = !collapsed;\"></i>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { Results } from \"@sinequa/core/web-services\";\nimport { SearchService, BreadcrumbsItem } from \"@sinequa/components/search\";\nimport { AbstractFacet } from \"../../abstract-facet\";\nimport { Action } from \"@sinequa/components/action\";\n\n@Component({\n    selector: \"sq-facet-mysearch\",\n    templateUrl: \"./facet-mysearch.html\",\n    styleUrls: [\"./facet-mysearch.scss\"],\n})\nexport class BsMySearch extends AbstractFacet implements OnChanges {\n    @Input() results: Results;\n    /** Display icon to delete items */\n    @Input() allowDeletion: boolean = true;\n    /** Display each item's field */\n    @Input() displayFieldNames: boolean = false;\n    /** Make the div collapsible */\n    @Input() collapsible: boolean = false;\n    /** Add a badge likely style to items */\n    @Input() useBadges: boolean = false;\n    /** Wether we Ignore text and fielded search */\n    @Input() ignoreText: boolean = true;\n    /** Items of those facets will be excluded  */\n    @Input() excludedFacets: (string | undefined)[] = [\"search-form\"];\n\n\n    collapsed = false;\n    clearAction: Action;\n    items: BreadcrumbsItem[] = [];\n    fields: string[] = [];\n\n    constructor(public searchService: SearchService) {\n        super();\n\n        this.clearAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => this.clear(),\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!!changes[\"results\"]) {\n            /** Initialize items based on input values */\n            this.items = this.ignoreText\n                ? this.searchService.breadcrumbs?.items.filter(\n                        (item: BreadcrumbsItem) =>\n                            item.expr && !(item.expr && !item.expr.field && !item.expr.isStructured) && !this.excludedFacets.includes(item.facet)\n                    ) || []\n                : this.searchService.breadcrumbs?.items || [];\n\n            /** Retrieve the field name of each item */\n            this.fields = [];\n            for (const item of this.items) {\n                this.fields.push(this.getField(item))\n            }\n\n        }\n    }\n\n    protected getField(item: BreadcrumbsItem): string {\n        if (item.expr) {\n            if (item.expr.field) {\n                return item.expr.field;\n            } else {\n                if (!item.expr.isStructured) {\n                    return \"text\";\n                } else {\n                    const fields = item.expr.getFields();\n                    return fields.join(\"-\");\n                }\n            }\n        }\n        return \"unknown\";\n    }\n\n    removeItem(item: BreadcrumbsItem) {\n        this.searchService.removeBreadcrumbsItem(item);\n    }\n\n    get isEmpty() {\n        return this.items.length === 0;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if (!this.isEmpty && this.allowDeletion) {\n            actions.push(this.clearAction);\n        }\n        return actions;\n    }\n\n    protected clear() {\n        for (const item of this.items) {\n            this.searchService.removeBreadcrumbsItem(item);\n        }\n    }\n}\n","import {Component, Input, OnChanges, SimpleChanges, AfterViewInit, OnDestroy, ViewChild, ElementRef, EventEmitter} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AppService, FormatService, Expr, ExprOperator, ExprBuilder} from \"@sinequa/core/app-utils\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {CCColumn, Results, Aggregation} from \"@sinequa/core/web-services\";\nimport {Options, LabelType, ChangeContext} from \"ng5-slider\";\nimport moment from \"moment\";\nimport {FacetService} from \"../../facet.service\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {UIService} from \"@sinequa/components/utils\";\nimport {AbstractFacet} from \"../../abstract-facet\";\nimport {AdvancedService} from \"@sinequa/components/advanced\";\nimport { Action } from '@sinequa/components/action';\n\nexport enum RoundTarget {\n    number,\n    year,\n    month,\n    week, // ISO\n    day\n}\n\nexport enum RoundType {\n    up,\n    down,\n    nearest\n}\n\nexport interface StepDef {\n    step: string;\n    format: string;\n    minRange: string;\n    active: boolean;\n}\n\n@Component({\n    selector: \"sq-facet-range\",\n    templateUrl: \"./facet-range.html\"\n})\nexport class BsFacetRange extends AbstractFacet implements OnChanges, AfterViewInit, OnDestroy {\n    @Input() name: string; // If ommited, the aggregation name is used\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() min : string;\n    @Input() max : string;\n    @Input() stepDefs: StepDef[];\n    @ViewChild(\"slider\", {static: false}) slider: ElementRef;\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    options: Options;\n    value: number;\n    highValue: number;\n    startValue: number;\n    startHighValue: number;\n    sliderActive: boolean;\n    rangeActive: boolean;\n    rangeSelected: boolean;\n    manualRefresh = new EventEmitter<void>();\n    initDone: boolean;\n    protected column: CCColumn | undefined;\n    protected roundTarget: RoundTarget;\n    protected roundMultiple: number;\n    protected localeChange: Subscription;\n    protected format: string;\n\n    clearFiltersAction: Action;\n    applyFiltersAction: Action;\n    constructor(\n        private facetService: FacetService,\n        protected appService: AppService,\n        protected searchService: SearchService,\n        protected formatService: FormatService,\n        protected intlService: IntlService,\n        protected uiService: UIService,\n        protected advancedService: AdvancedService,\n        protected exprBuilder: ExprBuilder) {\n\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.range.clear\",\n            action: () => this.clearRange()\n        });\n\n        this.applyFiltersAction = new Action({\n            icon: \"fas fa-filter\",\n            title: \"msg#facet.range.apply\",\n            action: () => this.applyRange()\n        });\n    }\n\n    protected translate = (value: number, label: LabelType): string => {\n        const value1 = this.roundNearest(value); // to accommodate fractional steps generated for years/months\n\n        if (this.format) {\n            if (this.column && AppService.isDate(this.column)) {\n                const date = new Date(value1);\n                const m = moment(date);\n                return this.intlService.formatMessage(this.format, {date: date, time: Utils.getTime(date), weekDay: m.weekday(), week: m.week(), weekYear: m.weekYear()});\n            }\n            else {\n                return this.intlService.formatMessage(this.format, {value: value1});\n            }\n        }\n        return this.formatService.formatFieldValue(this.column && AppService.isDate(this.column) ? new Date(value1) : value1, this.column);\n    }\n\n    protected roundAdjustment(value: number, multiple: number, roundType: RoundType): number {\n        switch (roundType) {\n            case RoundType.up:\n                return multiple - value % multiple;\n            default:\n            case RoundType.down:\n                return -(value % multiple);\n            case RoundType.nearest: {\n                const adjustUp = multiple - value % multiple;\n                const adjustDown = -(value % multiple);\n                return Math.abs(adjustUp) <= Math.abs(adjustDown) ? adjustUp : adjustDown;\n            }\n        }\n    }\n\n    protected _roundNumberUp(value: number, step: number): number {\n        return (value >= 0 ? Math.ceil(value / step) : Math.floor(value / step)) * step;\n    }\n\n    protected _roundNumberDown(value: number, step: number): number {\n        return (value >= 0 ? Math.floor(value / step) : Math.ceil(value / step)) * step;\n    }\n\n    protected _roundNumber(value: number, step: number, roundType: RoundType): number {\n        switch (roundType) {\n            case RoundType.up:\n                return this._roundNumberUp(value, step);\n            default:\n            case RoundType.down:\n                return this._roundNumberDown(value, step);\n            case RoundType.nearest: {\n                const up = this._roundNumberUp(value, step);\n                const down = this._roundNumberDown(value, step);\n                return Math.abs(up - value) <= Math.abs(down - value) ? up : down;\n            }\n        }\n    }\n\n    protected _getNearestDate(date: Date, upper: Date, lower: Date): Date {\n        return Math.abs(upper.getTime() - date.getTime()) <= Math.abs(lower.getTime() - date.getTime()) ? upper : lower;\n    }\n\n    protected _getNearestTargetDate(date: Date, target: RoundTarget): Date {\n        switch (target) {\n            case RoundTarget.year: {\n                return this._getNearestDate(date, new Date(date.getFullYear() + 1, 0), new Date(date.getFullYear(), 0));\n            }\n            case RoundTarget.month: {\n                return this._getNearestDate(date, new Date(date.getFullYear(), date.getMonth() + 1), new Date(date.getFullYear(), date.getMonth()));\n            }\n            default:\n            case RoundTarget.week:\n            case RoundTarget.day: {\n                return this._getNearestDate(date, new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1), new Date(date.getFullYear(), date.getMonth(), date.getDate()));\n            }\n        }\n    }\n\n    protected _round(value: number, step: number, target: RoundTarget, multiple: number,  roundType = RoundType.down): number {\n        if (this.column && AppService.isDate(this.column)) {\n            let date = new Date(value);\n            if (roundType === RoundType.nearest) {\n                // round to the nearest target year, month or day to adjust for the linear step size and leap years\n                date = this._getNearestTargetDate(date, target);\n            }\n            switch (target) {\n                case RoundTarget.year: {\n                    const year = date.getFullYear();\n                    if (year % multiple !== 0 || date.getMonth() !== 0 || date.getDate() !== 1 ||\n                        date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0 || date.getMilliseconds() !== 0) {\n                        date = new Date(year + this.roundAdjustment(year, multiple, roundType), 0);\n                    }\n                    break;\n                }\n                case RoundTarget.month: {\n                    const month = date.getMonth();\n                    if (month % multiple !== 0 || date.getDate() !== 1 ||\n                        date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0 || date.getMilliseconds() !== 0) {\n                        date = new Date(date.getFullYear(), month + this.roundAdjustment(month, multiple, roundType));\n                    }\n                    break;\n                }\n                case RoundTarget.week: {\n                    const day = date.getDay();\n                    // First, round to Monday\n                    if (day !== 1/*Monday*/ ||\n                        date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0 || date.getMilliseconds() !== 0) {\n                        let adjust: number;\n                        const up = 7 - (day - 1);\n                        const down = -(day - 1);\n                        switch (roundType) {\n                            case RoundType.up:\n                                adjust = up;\n                                break;\n                            default:\n                            case RoundType.down:\n                                adjust = down;\n                                break;\n                            case RoundType.nearest:\n                                adjust = Math.abs(up) >= Math.abs(down) ? up : down;\n                                break;\n                        }\n                        date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + adjust);\n                    }\n                    // Then, round to week number\n                    const m = moment(date);\n                    const week = m.week();\n                    if (week % multiple !== 0) {\n                        date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + (this.roundAdjustment(week, multiple, roundType) * 7));\n                    }\n                    break;\n                }\n                case RoundTarget.day: {\n                    const _date = date.getDate();\n                    if (date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0 || date.getMilliseconds() !== 0) {\n                        date = new Date(date.getFullYear(), date.getMonth(), _date + this.roundAdjustment(_date, multiple, roundType));\n                    }\n                    break;\n                }\n            }\n            return date.getTime();\n        }\n        else {\n            return this._roundNumber(value, step, roundType);\n        }\n    }\n\n    protected round(value: number, roundType = RoundType.down): number {\n        return this._round(value, this.options.step || 1, this.roundTarget, this.roundMultiple, roundType);\n    }\n\n    protected roundDown(value: number): number {\n        return this.round(value, RoundType.down);\n    }\n\n    protected roundUp(value: number): number {\n        return this.round(value, RoundType.up);\n    }\n\n    protected roundNearest(value: number): number {\n        return this.round(value, RoundType.nearest);\n    }\n\n    //TODO - remove fix engine hack\n    private fixDate(dateStr: string): string {\n        if (dateStr) {\n            const secondsSep = dateStr.lastIndexOf(\":\");\n            if (secondsSep > 0) {\n                let seconds = Utils.toInt(dateStr.substr(secondsSep + 1));\n                if (seconds < 0) {\n                    seconds = 0;\n                }\n                else if (seconds > 59) {\n                    seconds = 59;\n                }\n                dateStr = dateStr.substr(0, secondsSep + 1) + seconds;\n            }\n        }\n        return dateStr;\n    }\n\n    protected initMinMax() {\n        let min = 0;\n        let max = 0;\n        if (!Utils.isEmpty(this.min) && (!Utils.isEmpty(this.max))) {\n            min = this.parseValue(!!new Date(this.min).getDate()? new Date(this.min) : this.min);\n            max = this.parseValue(!!new Date(this.max).getDate()? new Date(this.max) : this.max);\n        }\n        else {\n            if (this.data?.items) {\n                const item = this.data.items[0];\n                if (item && item.operatorResults) {\n                    if (this.column && AppService.isDate(this.column)) {\n                        //TODO - remove fix engine hack\n                        if (Utils.isString(item.operatorResults.min)) {\n                            const date = Utils.fromSysDateStr(this.fixDate(item.operatorResults.min));\n                            if (Utils.isDate(date)) {\n                                item.operatorResults.min = date;\n                            }\n                        }\n                        if (Utils.isString(item.operatorResults.max)) {\n                            const date = Utils.fromSysDateStr(this.fixDate(item.operatorResults.max));\n                            if (Utils.isDate(date)) {\n                                item.operatorResults.max = date;\n                            }\n                        }\n                        min = Utils.isDate(item.operatorResults.min) ? item.operatorResults.min.getTime() : 0;\n                        max = Utils.isDate(item.operatorResults.max) ? item.operatorResults.max.getTime() : 0;\n                    }\n                    else {\n                        min = Utils.isNumber(item.operatorResults.min) ? item.operatorResults.min : 0;\n                        max = Utils.isNumber(item.operatorResults.max) ? item.operatorResults.max : 0;\n                    }\n                }\n            }\n        }\n        this.options.floor = min;\n        this.options.ceil = max;\n    }\n\n    protected parseValue(value: string | Date): number {\n        if (Utils.isDate(value)) {\n            return value.getTime();\n        }\n        if (!Utils.isString(value)) {\n            return 0;\n        }\n        let _value: number | undefined;\n        if (this.column && this.column.parser) {\n            const str = this.formatService.parseValue(value, this.column.parser);\n            _value = Utils.toNumber(str);\n        }\n        if (Utils.isUndefined(_value)) {\n            _value = this.column && AppService.isDate(this.column) ?\n                Utils.toDuration(value) :\n                Utils.toSize(value);\n        }\n        return _value;\n    }\n\n    protected initStep() {\n        // Select the first step definition where the range >= stepDef.minRange\n        let format: string | undefined;\n        let step: number | undefined;\n        if (this.stepDefs) {\n            for (const stepDef of this.stepDefs) {\n                if (stepDef.step) {\n                    const thisStep = this.parseValue(stepDef.step);\n                    if (thisStep && stepDef.active) {\n                        if (!stepDef.minRange) {\n                            step = thisStep;\n                            format = stepDef.format;\n                            break;\n                        }\n                        else {\n                            // Round min/max for thisStep\n                            const {roundTarget, roundMultiple} = this.getRoundTarget(thisStep);\n                            const min = this._round(this.options.floor || 0, thisStep, roundTarget, roundMultiple, RoundType.down);\n                            const max = this._round(this.options.ceil || 0, thisStep, roundTarget, roundMultiple, RoundType.up);\n                            const range = max - min;\n                            const minRange = this.parseValue(stepDef.minRange);\n                            if (range >= minRange) {\n                                step = thisStep;\n                                format = stepDef.format;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!step) {\n            // Default step, default formatting\n            step = this.column && AppService.isDate(this.column) ? Utils.oneDay : 1;\n        }\n        // Adjust step for year/month rounding (we assume daylight savings will balance out over the year)\n        const {roundTarget, roundMultiple} = this.getRoundTarget(step);\n        switch (roundTarget) {\n            case RoundTarget.year:\n                step = roundMultiple * 365.25 * Utils.oneDay;\n                break;\n            case RoundTarget.month:\n                step = roundMultiple * 365.25 * Utils.oneDay / 12;\n                break;\n        }\n        this.roundTarget = roundTarget;\n        this.roundMultiple = roundMultiple;\n        // Set default format based on roundTarget\n        if (!format) {\n            switch (this.roundTarget) {\n                case RoundTarget.year:\n                    format = \"msg#facet.range.year\";\n                    break;\n                case RoundTarget.month:\n                    format = \"msg#facet.range.monthYear\";\n                    break;\n                case RoundTarget.week:\n                    format = \"msg#facet.range.weekYear\";\n                    break;\n                default:\n                    format = \"\";\n                    break;\n            }\n        }\n        this.options.step = step;\n        this.format = format;\n    }\n\n    protected getRoundTarget(step: number): { roundTarget: RoundTarget, roundMultiple: number } {\n        const ret = {\n            roundTarget: RoundTarget.number,\n            roundMultiple: 1\n        };\n        if (this.column && AppService.isDate(this.column)) {\n            if (step % (365 * Utils.oneDay) === 0) {\n                ret.roundTarget = RoundTarget.year;\n                ret.roundMultiple = step / (365 * Utils.oneDay);\n            }\n            else if (step % (30 * Utils.oneDay) === 0) {\n                ret.roundTarget = RoundTarget.month;\n                ret.roundMultiple = step / (30 * Utils.oneDay);\n            }\n            else if (step % (7 * Utils.oneDay) === 0) {\n                ret.roundTarget = RoundTarget.week;\n                ret.roundMultiple = step / (7 * Utils.oneDay);\n            }\n            else if (step % Utils.oneDay === 0) {\n                ret.roundTarget = RoundTarget.day;\n                ret.roundMultiple = step / Utils.oneDay;\n            }\n        }\n        return ret;\n    }\n\n    protected init() {\n        this.options = {\n            draggableRange: true,\n            enforceStep: false,\n            translate: this.translate\n        };\n        this.initMinMax();\n        this.initStep();\n        let ceil = this.options.ceil || 0;\n        let floor = this.options.floor || 0;\n        this.sliderActive = ceil > floor;\n        if (ceil > floor) {\n            floor = this.options.floor = this.roundDown(floor);\n            ceil = this.options.ceil = this.roundUp(ceil);\n        }\n        const [from, to] = this.getRange();\n        this.rangeActive = !Utils.isUndefined(from) || !Utils.isUndefined(to);\n        this.rangeSelected = false;\n        this.value = this.startValue = Math.max(from || floor, floor);\n        this.highValue = this.startHighValue = Math.min(to || ceil, ceil);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.initDone) {\n            this.initDone = true;\n            this.localeChange = Utils.subscribe(this.intlService.events,\n                (value) => {\n                    this.manualRefresh.emit();\n                });\n        }\n        if (!!changes[\"results\"]) {\n            this.data = this.facetService.getAggregation(this.aggregation, this.results);\n            this.column = this.data && this.appService.getColumn(this.data.column);\n            this.init();\n        }\n    }\n\n    protected onResize = () => {\n        this.manualRefresh.emit();\n    }\n\n    ngAfterViewInit() {\n        this.uiService.addElementResizeListener(this.slider.nativeElement, this.onResize);\n    }\n\n    ngOnDestroy() {\n        if(this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n        if(this.uiService && this.slider) {\n            this.uiService.removeElementResizeListener(this.slider.nativeElement, this.onResize);\n        }\n    }\n\n    onUserChangeEnd(changeContext: ChangeContext) {\n        this.rangeSelected = this.value !== this.startValue || this.highValue !== this.startHighValue;\n    }\n\n    getRange(): number[] | undefined[] {\n        if (this.column) {\n            let expr: Expr | string;\n            let value;\n            const expression = this.searchService.query?.findSelect(this.column.name)?.expression;\n            if (expression) {\n                expr = this.appService.parseExpr(expression);\n                if (expr instanceof Expr) {\n                    if (expr.values && expr.values.length > 1) {\n                        value = expr.values;\n                    } else {\n                        value = expr.value;\n                    }\n                    if (!Utils.isArray(value)) {\n                        if (expr.operator === ExprOperator.gte) {\n                            value = [value, undefined];\n                        } else if (expr.operator === ExprOperator.lte) {\n                            value = [undefined, value];\n                        }\n                    }\n                    value =  value.map(\n                        (val) => val ? this.advancedService.castAdvancedValue(val, this.column) : val\n                    );\n                    if (AppService.isDate(this.column)) {\n                        value =  value.map(\n                            (val) => val ? new Date(val).getTime() : val\n                        );\n                    }\n                    return value;\n                }\n            }\n        }\n        return [undefined, undefined]\n    }\n\n    setRange(from: number | undefined, to: number | undefined) {\n        let valFrom;\n        let valTo;\n        let expression: string | undefined;\n        if (this.column) {\n            valFrom = AppService.isDate(this.column) && Utils.isNumber(from) ? new Date(from) : from;\n            valTo = AppService.isDate(this.column) && Utils.isNumber(to) ? new Date(to) : to;\n            if (!!valFrom && !!valTo) {\n                expression = this.exprBuilder.makeRangeExpr(this.column.name, valFrom, valTo);\n            } else if (!!valFrom) {\n                expression = this.exprBuilder.makeNumericalExpr(this.column.name, '>=', valFrom);\n            } else if (!!valTo) {\n                expression = this.exprBuilder.makeNumericalExpr(this.column.name, '<=', valTo);\n            }\n            this.searchService.query?.removeSelect(this.column.name);\n            if (expression) {\n                this.searchService.query?.addSelect(\n                    expression,\n                    this.column.name\n                );\n            }\n        }\n    }\n\n    applyRange() {\n        this.setRange(this.roundNearest(this.value), this.roundNearest(this.highValue));\n        this.searchService.search();\n    }\n\n    clearRange() {\n        this.setRange(undefined, undefined);\n        this.searchService.search();\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.rangeSelected){\n            actions.push(this.applyFiltersAction);\n        }\n        if(this.rangeActive){\n          actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n}\n","<ng-container *ngIf=\"data\">\n    <div #slider class=\"card-body\">\n        <ng5-slider\n            *ngIf=\"sliderActive\"\n            [(value)]=\"value\"\n            [(highValue)]=\"highValue\"\n            [options]=\"options\"\n            [manualRefresh]=\"manualRefresh\"\n            (userChangeEnd)=\"onUserChangeEnd($event)\">\n        </ng5-slider>\n        <span *ngIf=\"!sliderActive\">{{'msg#facet.range.unavailable' | sqMessage}}</span>\n    </div>\n</ng-container>\n","<div *ngIf=\"!openedFacet\" class=\"list-group list-group-flush\">\n    <div *ngFor=\"let facet of facets\" (click)=\"openFacet(facet)\"\n        class=\"open-facet d-flex flex-row list-group-item border-0 list-group-item-action px-3 py-1 align-items-center\"\n        [ngClass]=\"{'list-group-item-success':facet.$hasFiltered, 'disabled':!facet.$hasData }\">\n        <span class=\"flex-grow-1\">{{ facet.title | sqMessage }}</span>\n        <span class=\"fa-stack icons-group\" sqTooltip=\"{{ 'msg#facet.filters.clear' | sqMessage }}\" (click)=\"clearFacetFilters(facet, $event)\" *ngIf=\"facet.$hasFiltered\">\n            <i class=\"ml-2 far fa-minus-square fa-stack-1x icons icon-hover\"></i>\n            <i class=\"ml-2 far fa-check-square fa-stack-1x icons icon-default\"></i>\n        </span>\n        <span\n            *ngIf=\"showCount\"\n            class=\"mx-2 text-muted small\"\n            title=\"{{ 'msg#facet.filterItemCountTooltip' | sqMessage:{ values: { count: facet.$count } } }}\"\n        >\n            {{ facet.$count | sqNumber }}\n        </span>\n        <i class=\"fas fa-caret-right\"></i>\n    </div>\n</div>\n\n<ng-container *ngIf=\"openedFacet\">\n    <sq-facet-list #facet *ngIf=\"openedFacet.type==='list'\"\n        [name]=\"openedFacet.name\"\n        [results]=\"results\"\n        [aggregation]=\"openedFacet.aggregation\"\n        [showCount]=\"openedFacet.showCount\"\n        [searchable]=\"openedFacet.searchable\"\n        [allowExclude]=\"openedFacet.allowExclude\"\n        [allowOr]=\"openedFacet.allowOr\"\n        [allowAnd]=\"openedFacet.allowAnd\"\n        [displayEmptyDistributionIntervals]=\"openedFacet.displayEmptyDistributionIntervals\"\n        [showProgressBar]=\"showProgressBar\"\n    >\n    </sq-facet-list>\n\n    <sq-facet-tree #facet *ngIf=\"openedFacet.type==='tree'\"\n        [name]=\"openedFacet.name\"\n        [results]=\"results\"\n        [aggregation]=\"openedFacet.aggregation\"\n        [showCount]=\"openedFacet.showCount\"\n        [allowExclude]=\"openedFacet.allowExclude\"\n        [allowOr]=\"openedFacet.allowOr\">\n    </sq-facet-tree>\n</ng-container>\n","import { Component, OnChanges, Input, Output, ViewChild, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { Results } from '@sinequa/core/web-services';\nimport { AbstractFacet } from '../../abstract-facet';\nimport { Action } from '@sinequa/components/action';\nimport { FacetService } from '../../facet.service';\nimport { Utils } from '@sinequa/core/base';\n\nexport interface FacetConfig {\n  name: string;\n  type: 'list' | 'tree';\n  title: string;\n  icon?: string;\n  aggregation: string;\n  showCount?: boolean;\n  searchable?: boolean;\n  allowExclude?: boolean;\n  allowOr?: boolean;\n  allowAnd?: boolean;\n  displayEmptyDistributionIntervals?: boolean;\n\n  // Parameters set by the component\n  $count?: string;\n  $hasData?: boolean;\n  $hasFiltered?: boolean;\n}\n\n@Component({\n  selector: 'sq-facet-multi',\n  templateUrl: './facet-multi.component.html',\n  styleUrls: ['./facet-multi.component.scss']\n})\nexport class BsFacetMultiComponent extends AbstractFacet implements OnChanges {\n\n  @Input() results: Results;\n  @Input() facets: FacetConfig[];\n  @Input() showCount: boolean = true;\n  @Input() showProgressBar = false;    // will display or not item count as progress bar\n\n  @Output() events = new EventEmitter<FacetConfig>();\n  @ViewChild(\"facet\", {static: false}) public facetComponent: AbstractFacet;\n\n  /**\n   * The facet configuration to open\n   */\n  openedFacet: FacetConfig | undefined;\n\n  /**\n   * Action to switch back from an opened facet to the facet multi view\n   */\n  backAction: Action;\n  clearAllFiltersAction: Action;\n\n  constructor(\n    public facetService: FacetService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n\n    super();\n\n    this.backAction = new Action({\n      name: \"back\",\n      icon: \"fas fa-arrow-left\",\n      title: \"msg#facet.filters.back\",\n      action: () => {\n        this.openedFacet = undefined;\n        this.events.next(undefined);\n        this.changeDetectorRef.detectChanges();\n      }\n    });\n\n    this.clearAllFiltersAction = new Action({\n      icon: \"far fa-minus-square\",\n      title: \"msg#facet.filters.clear\",\n      action: () => {\n        const facetsWithFiltered = this.facets.filter((facet) => facet.$hasFiltered).map(facet => facet.name);\n        this.facetService.clearFiltersSearch(facetsWithFiltered, true);\n      }\n    });\n\n  }\n\n  /**\n   * If a sub-facet is opened, add a Back button and forward\n   * the actions of the facet.\n   */\n  get actions(): Action[] {\n    const actions: Action[] = [];\n    if(this.openedFacet){\n      actions.push(this.backAction);\n    } else {\n      const hasFiltered = this.facets.some(facet => facet.$hasFiltered);\n      if (hasFiltered) actions.push(this.clearAllFiltersAction);\n    }\n    if(this.facetComponent){\n      actions.push(...this.facetActions);\n    }\n    return actions;\n  }\n\n  /**\n   * Return the actions of the child facet\n   */\n  get facetActions(): Action[] {\n    if(this.facetComponent){\n      return this.facetComponent.actions;\n    }\n    return [];\n  }\n\n  /**\n   * Open this sub facet\n   * @param facet\n   */\n  openFacet(facet: FacetConfig){\n    this.openedFacet = facet;\n    this.events.next(facet);\n    this.changeDetectorRef.detectChanges();\n  }\n\n  clearFacetFilters(facet: FacetConfig, e:Event) {\n    e.stopPropagation();\n    this.facetService.clearFiltersSearch(facet.name, true);\n    return false;\n  }\n\n  /**\n   * Return the number of items to display for a given facet\n   * @param facet\n   */\n  private getFacetCount(facet: FacetConfig): string {\n    const agg = this.results.aggregations.find(agg => Utils.eqNC(agg.name, facet.aggregation)); // avoid calling getAggregation() which is costly for trees\n    if (!agg?.items)\n      return \"\";\n    const count = this.facetService.getAggregationCount(facet.aggregation); // configured count (default: 10)\n    const aggItemCounter = (!agg.isDistribution || facet.displayEmptyDistributionIntervals)\n      ? agg.items.length\n      : agg.items.filter(item => item.count > 0).length;\n    return aggItemCounter >= count ? `${count}+` : `${aggItemCounter}`;\n  }\n\n  /**\n   * Return whether a given facet has been used in the current context\n   * @param facet\n   */\n  private hasFiltered(facet: FacetConfig): boolean {\n    return this.facetService.hasFiltered(facet.name);\n  }\n\n  /**\n   * When the results change, actualize count, hasData and hasFiltered\n   * which are displayed in the template.\n   */\n  ngOnChanges() {\n    this.facets.forEach(facet => {\n      facet.$count = this.getFacetCount(facet);\n      facet.$hasData = this.facetService.hasData(facet.aggregation, this.results);\n      facet.$hasFiltered = this.hasFiltered(facet);\n    });\n    this.changeDetectorRef.detectChanges();\n  }\n\n}\n","<ul class=\"cloud\" [attr.data-show-count]=\"showCount ? '' : null\">\n    <li *ngFor=\"let data of tagCloudData\">\n        <a\n            href=\"#\"\n            [attr.data-count]=\"data.item.count\"\n            [attr.data-weight]=\"proportionalWeight ? data.weight : null\"\n            class=\"sq-metadata-color-{{data.aggregation.column}}\"\n            (click)=\"filterItem(data, $event)\">\n            <i class=\"far fa-check-circle filtered\" *ngIf=\"data.item.$filtered\"></i>\n            {{data.item | sqValue:data.item.$column}}\n        </a>\n    </li>\n</ul>\n","import { Component, Input, SimpleChanges, OnChanges } from \"@angular/core\";\nimport { AbstractFacet } from \"../../abstract-facet\";\nimport {\n    Results,\n    AggregationItem,\n    Aggregation,\n} from \"@sinequa/core/web-services\";\nimport { Action } from \"@sinequa/components/action\";\nimport { FacetService } from \"../../facet.service\";\nimport { Utils } from \"@sinequa/core/base\";\n\nexport interface TagCloudItem {\n    aggregation: Aggregation;\n    item: AggregationItem;\n    weight: number;\n}\n\n@Component({\n    selector: \"sq-facet-tag-cloud\",\n    templateUrl: \"./facet-tag-cloud.html\",\n    styleUrls: [\"./facet-tag-cloud.scss\"],\n})\nexport class BsFacetTagCloud extends AbstractFacet implements OnChanges {\n    /** search results */\n    @Input() results: Results;\n    /** list of aggregations to be considered in collecting tag-cloud data */\n    @Input() aggregations: string | string[];\n    /** maximum number of data to be displayed in tag-cloud */\n    @Input() limit = 50;\n    /** the way data are collected from given aggregations: equal repartition between them or most relevant among all of them */\n    @Input() uniformRepartition = false;\n    /** show/hide number of occurrences of each item*/\n    @Input() showCount = false;\n    /** define the size of each displayed item: common size for all or proportional size based on their count */\n    @Input() proportionalWeight = true;\n    /** lowest count under which items will not be taken into account in tag-cloud data */\n    @Input() countThreshold = 0;\n    /** wether data are rendered following their count sorting or randomly */\n    @Input() shuffleData = false;\n    /** Isolate filtering results from other facets available in the app */\n    @Input() isolateFacetFilters = false;\n\n    aggregationsData: Aggregation[] = [];\n    tagCloudData: TagCloudItem[] = [];\n    private filtered: AggregationItem[] = [];\n\n    // Actions enabled within the facet\n    private readonly clearFilters: Action;\n    // Default weight to be applied if proportionalWeight = false\n    private readonly defaultWeight = 2;\n    // Prefix for tag-cloud facet name to be used if isolateFacetFilters = true\n    private readonly tagCloudFacetPrefix = \"tag-cloud_\";\n\n    constructor(private facetService: FacetService) {\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                if (Utils.isArray(this.aggregations)) {\n                    for (const aggregation of this.aggregations) this.facetService.clearFiltersSearch(this.getName(aggregation), true);\n                } else { \n                    this.facetService.clearFiltersSearch(this.getName(this.aggregations), true);\n                }\n            },\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!!changes[\"results\"]) {\n            /* reset filtered items */\n            this.filtered = [];\n\n            /* update tag-cloud data */\n            this.tagCloudData = this.getTagCloudData();\n        }\n    }\n\n    /**\n     * Defines the tag-cloud data according to given inputs\n     */\n    getTagCloudData(): TagCloudItem[] {\n        const aggregationsData = this.getAggregationsData();\n\n        if (aggregationsData.length === 0) {\n            return [];\n        } else {\n            let tmp: TagCloudItem[] = [];\n\n            if (this.uniformRepartition) {\n                aggregationsData.forEach((data: Aggregation) => {\n                    const end = Math.floor(this.limit / aggregationsData.length);\n                    // Firstly, take filtered items\n                    tmp.push(\n                        ...data\n                            .items!.filter((item) => item.$filtered)\n                            .sort((a, b) => b.count - a.count)\n                            .slice(0, end)\n                            .map(\n                                (item: AggregationItem) =>\n                                    ({\n                                        aggregation: data,\n                                        item: item,\n                                        weight: this.proportionalWeight\n                                            ? item.count\n                                            : this.defaultWeight,\n                                    } as TagCloudItem)\n                            )\n                    );\n                    // add most relevant items if threshold not attenuated\n                    if (tmp.length < end) {\n                        tmp.push(\n                            ...data\n                                .items!.filter(\n                                    (item) => item.count > this.countThreshold && !item.$filtered\n                                )\n                                .sort((a, b) => b.count - a.count)\n                                .slice(0, end - tmp.length)\n                                .map(\n                                    (item: AggregationItem) =>\n                                        ({\n                                            aggregation: data,\n                                            item: item,\n                                            weight: this.proportionalWeight\n                                                ? item.count\n                                                : this.defaultWeight,\n                                        } as TagCloudItem)\n                                )\n                        );\n                    }\n                });\n                tmp = tmp.sort((a, b) => b.item.count - a.item.count);\n            } else {\n                aggregationsData.forEach((data: Aggregation) => {\n                    tmp.push(\n                        ...data\n                            .items!.filter(\n                                (item) =>\n                                    item.count > this.countThreshold || item.$filtered\n                            )\n                            .map(\n                                (item: AggregationItem) =>\n                                    ({\n                                        aggregation: data,\n                                        item: item,\n                                        weight: this.proportionalWeight\n                                            ? item.count\n                                            : this.defaultWeight,\n                                    } as TagCloudItem)\n                            )\n                    );\n                });\n                const filtered = tmp.filter((elem) => elem.item.$filtered);\n                if (filtered.length < this.limit) {\n                    const notFiltered = tmp\n                        .filter((elem) => !elem.item.$filtered)\n                        .sort((a, b) => b.item.count - a.item.count);\n                    tmp = [...filtered];\n                    tmp.push(\n                        ...notFiltered.slice(0, this.limit - filtered.length)\n                    );\n                } else {\n                    tmp = filtered.slice(0, this.limit);\n                }\n            }\n\n            // By default, sort the whole array with respect to its counts and update its elements weight value\n            tmp = tmp\n                .sort((a, b) => b.item.count - a.item.count)\n                .map(\n                    (elem: TagCloudItem) =>\n                        ({\n                            ...elem,\n                            weight: this.proportionalWeight\n                                ? this.scaleItemWeight(tmp, elem.item.count)\n                                : this.defaultWeight,\n                        } as TagCloudItem)\n                );\n\n            // Shuffle the array\n            if (this.shuffleData) {\n                tmp = this.shuffle(tmp);\n            }\n\n            return tmp;\n        }\n    }\n\n    /**\n     * Invoked on click on an item in order to update the query\n     * @param tagCloudItem\n     * @param event\n     */\n    filterItem(tagCloudItem: TagCloudItem, event) {\n        const name = this.getName(tagCloudItem.aggregation.name);\n        const aggregation = tagCloudItem.aggregation;\n        const item = tagCloudItem.item;\n        if (!this.isFiltered(aggregation, item)) {\n            this.facetService.addFilterSearch(name, aggregation, item);\n        } else {\n            this.facetService.removeFilterSearch(name, aggregation, item);\n        }\n        event.preventDefault();\n    }\n\n    /**\n     * Define the possible actions according to the actual context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.isFiltering()) {\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    /**\n     * Map the initial aggregations names to a list of Aggregation\n     */\n    protected getAggregationsData(): Aggregation[] {\n        return []\n            .concat(this.aggregations as [])\n            .filter((agg: string) =>\n                this.facetService.hasData(agg, this.results)\n            )\n            .map(\n                (agg: string) =>\n                    this.facetService.getAggregation(\n                        agg,\n                        this.results\n                    ) as Aggregation\n            )\n            .map((data: Aggregation) => this.refreshFiltered(data));\n    }\n\n    /**\n     * Update aggregation's data with respect to active filters in the query & breadcrumbs\n     * @param data\n     */\n    protected refreshFiltered(data: Aggregation): Aggregation {\n        const facetName = this.getName(data.name);\n        if (this.facetService.hasFiltered(facetName)) {\n            // refresh filters from breadcrumbs\n            const items = this.facetService.getAggregationItemsFiltered(facetName, data.valuesAreExpressions);\n            items.forEach((item) => {\n                if (!this.isFiltered(data, item)) {\n                    item.$filtered = true;\n                    this.filtered.push(item);\n                }\n            });\n\n            // double check filters from query and breadcrumb\n            data.items!.forEach((item) => {\n                const indx = this.facetService.filteredIndex(data, this.filtered, item);\n                if (this.facetService.itemFiltered(facetName, data, item)) {\n                    item.$filtered = true;\n                    if (!this.isFiltered(data, item)) {\n                        this.filtered.push(item);\n                    }\n                } else if (indx !== -1) {\n                    // sometime facetService.itemFiltered() could returns false but item is present in breadcrumbs\n                    item.$filtered = true;\n                }\n            });\n        }\n        return data;\n    }\n\n    /**\n     * Returns facets names to be used according to @input() isolateFacetFilters\n     * @param aggregationName\n     */\n    private getName(aggregationName: string): string {\n        if (!this.isolateFacetFilters) {\n            return aggregationName;\n        }\n        return this.tagCloudFacetPrefix + aggregationName;\n    }\n\n    /**\n     * Linearly map the original weight to a discrete scale from 1 to 10\n     * @param weight original weight\n     */\n    private scaleItemWeight(tagCloudData: TagCloudItem[], weight: number): number {\n        return (\n            Math.round(\n                ((weight - tagCloudData[tagCloudData.length - 1].weight) /\n                    (tagCloudData[0].weight -\n                        tagCloudData[tagCloudData.length - 1].weight)) *\n                    9.0\n            ) + 1\n        );\n    }\n\n    /**\n     * Returns true if the supplied item within the given aggregation is filtering the query\n     * @param data\n     * @param item\n     */\n    private isFiltered(data: Aggregation, item: AggregationItem): boolean {\n        return this.facetService.filteredIndex(data, this.filtered, item) !== -1;\n    }\n\n    /**\n     * Shuffle items of the supplied array\n     * @param arr\n     */\n    private shuffle(arr: TagCloudItem[]): TagCloudItem[] {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const aux = arr[i];\n            arr[i] = arr[j];\n            arr[j] = aux;\n        }\n        return arr;\n    }\n\n    /**\n     * Returns true if there is at least one active filter in the tag-cloud facet\n     */\n    private isFiltering(): boolean {\n        return []\n                .concat(this.aggregations as [])\n                .some((aggregationName: string) =>\n                    this.facetService.hasFiltered(this.getName(aggregationName))\n                );\n    }\n}\n","import {NgModule, ModuleWithProviders} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {Ng5SliderModule} from \"ng5-slider\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {CollapseModule} from \"@sinequa/components/collapse\";\nimport {BsActionModule} from \"@sinequa/components/action\";   // needed for sq-action-button\nimport {BsSearchModule} from \"@sinequa/components/search\";   // needed for refine facet / didyoumean\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";  // needed for refine facet\n\nimport {FacetState, ALL_FACETS, DEFAULT_FACETS} from \"../facet.service\";\nimport {BsRefine} from \"./facet-refine/facet-refine\";\nimport {BsFacetBar} from \"./facet-bar/facet-bar\";\nimport {BsMySearch} from \"./facet-mysearch/facet-mysearch\";\nimport {BsFacetRange} from \"./facet-range/facet-range\";\nimport {BsFacetCard} from \"./facet-card/facet-card\";\nimport {BsFacetList} from \"./facet-list/facet-list\";\nimport {BsFacetTree} from \"./facet-tree/facet-tree\";\nimport {BsFacetFilters} from \"./facet-filters/facet-filters\";\nimport {BsFacetMultiComponent} from \"./facet-multi/facet-multi.component\";\nimport { BsFacetTagCloud } from './facet-tag-cloud/facet-tag-cloud';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        IntlModule,\n\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsSearchModule,\n        BsAutocompleteModule,\n\n        Ng5SliderModule\n    ],\n    declarations: [\n        BsFacetCard, BsFacetList, BsFacetTree,\n        BsFacetFilters,\n        BsRefine,\n        BsFacetRange, BsMySearch, BsFacetBar,\n        BsFacetMultiComponent,\n        BsFacetTagCloud\n    ],\n    exports: [\n        BsFacetCard, BsFacetList, BsFacetTree,\n        BsFacetFilters,\n        BsRefine,\n        BsFacetRange, BsMySearch, BsFacetBar,\n        BsFacetMultiComponent,\n        BsFacetTagCloud\n    ],\n})\nexport class BsFacetModule {\n    public static forRoot(allFacets: any[]|undefined = undefined, defaultFacets: FacetState[]|undefined = undefined): ModuleWithProviders<BsFacetModule> {\n        return {\n            ngModule: BsFacetModule,\n            providers: [\n                {\n                    provide: ALL_FACETS,\n                    useValue: allFacets\n                },\n                {\n                    provide: DEFAULT_FACETS,\n                    useValue: defaultFacets\n                },\n            ]\n        };\n    }\n}\n","export default {\n    \"facet\": {\n        \"showFacetTextView\": \"Show text\",\n        \"showFacetChartView\": \"Show chart\",\n        \"itemExclude\": \"Exclude\",\n        \"applyFilters\": \"{selections, plural, one {Apply filter} other {Apply filters}}\",\n        \"clearFilters\": \"{selected, plural, one {Clear filter} other {Clear filters}}\",\n        \"loadMore\": \"Load more\",\n        \"showMore\": \"Show more\",\n        \"showLess\": \"Show less\",\n        \"displayed\": \"Displayed\",\n        \"removeAll\": \"Remove all\",\n        \"searchPlaceholder\": \"Search...\",\n        \"itemSelect\": \"Select this value\",\n        \"itemUnselect\": \"Unselect this value\",\n        \"filterItem\": \"Keep documents with {terme}\",\n        \"filterItems\" : \"Keep documents with ANY of the selected items\",\n        \"filterItemsAnd\": \"Keep documents with ALL the selected items\",\n        \"excludeItems\" : \"Exclude document with selected items\",\n        \"clearSelects\" : \"Clear the current filters\",\n        \"searchItems\" : \"Search for a value in this list\",\n        \"searchNoResult\": \"No results\",\n        \"openItem\": \"Open\",\n        \"closeItem\": \"Close\",\n        \"authors\": {\n            \"title\": \"Authors\"\n        },\n        \"concepts\": {\n            \"title\": \"Concepts\"\n        },\n        \"company\": {\n            \"title\": \"Companies\"\n        },\n        \"docformat\": {\n            \"title\": \"Formats\"\n        },\n        \"doctype\": {\n            \"title\": \"Document Types\"\n        },\n        \"documentlanguages\": {\n            \"title\": \"Languages\"\n        },\n        \"fileext\": {\n            \"title\": \"File Extensions\"\n        },\n        \"filename\": {\n            \"title\": \"Filenames\"\n        },\n        \"geo\": {\n            \"title\": \"Places\"\n        },\n        \"matchingpartnames\": {\n            \"title\": \"Matching Partnames\"\n        },\n        \"modified\": {\n            \"title\": \"Dates\"\n        },\n        \"person\": {\n            \"title\": \"People\"\n        },\n        \"refine\": {\n            \"title\": \"Refine Search\",\n            \"input\": {\n                \"label\": \"Refine\",\n                \"buttonTitle\": \"Refine\",\n                \"placeholder\": \"Refine by...\"\n            }\n        },\n        \"size\": {\n            \"title\": \"Sizes\"\n        },\n        \"tagcloud\": {\n            \"title\": \"Tag Cloud\"\n        },\n        \"title\": {\n            \"title\": \"Titles\"\n        },\n        \"treepath\": {\n            \"title\": \"Sources\"\n        },\n        \"recentQueries\": {\n            \"title\": \"Recent queries\"\n        },\n        \"recentQueriesPublic\": {\n            \"title\": \"Public recent queries\"\n        },\n        \"mySearch\": {\n            \"title\": \"My Search\",\n            \"itemRemove\": \"Remove\"\n        },\n        \"search\": {\n            \"label\": \"Search\",\n            \"buttonTitle\": \"Search\",\n            \"placeholder\": \"Search...\",\n            \"showSearchForm\": \"Show search form\",\n            \"hideSearchForm\": \"Hide search form\"\n        },\n        \"range\": {\n            \"year\": \"{date, date, sqYear}\",\n            \"monthYear\": \"{date, date, sqMonthYear}\",\n            \"weekYear\": \"W{week, number, sqWeek} {weekYear, number, sqYear}\",\n            \"apply\": \"Apply\",\n            \"clear\": \"Clear\",\n            \"unavailable\": \"No available range\"\n        },\n\n        \"filters\":{\n            \"add\":\"Add facet\",\n            \"addAll\": \"Add all facets\",\n            \"remove\":\"Remove facet\",\n            \"removeAll\": \"Remove all facets\",\n            \"clear\":\"Clear filter\",\n            \"moreFilters\":\"\",\n            \"showFilters\":\"Show filters\",\n            \"hideFilters\":\"Hide filters\",\n\n            \"back\": \"Back to filters\",\n            \"selectedFilters\": \"This filter is active in the current query\",\n\n            \"customizeFacets\": \"Select facets to display or hide\"\n        },\n\n        \"selectedValue\": \"This value is selected in the current query\",\n        \"previous\": \"Previous\",\n        \"next\": \"Next\",\n        \"filterItemCountTooltip\": \"{count} possible values for this filter\",\n    },\n\n    \"facetCard\": {\n        \"expand\": \"Expand\",\n        \"collapse\": \"Collapse\",\n        \"enlarge\": \"Enlarge\",\n        \"reduce\": \"Reduce\",\n        \"openSettings\": \"Open settings\",\n        \"saveSettings\": \"Save settings\"\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enSelection, frSelection, deSelection} from \"@sinequa/components/selection\";\nimport {enCollapse, frCollapse, deCollapse} from \"@sinequa/components/collapse\";\nimport _enFacet from \"./en\";\nimport _frFacet from \"./fr\";\nimport _deFacet from \"./de\";\n\nconst enFacet = Utils.merge({}, _enFacet, enSearch, enSelection, enCollapse);\nconst frFacet = Utils.merge({}, _frFacet, frSearch, frSelection, frCollapse);\nconst deFacet = Utils.merge({}, _deFacet, deSearch, deSelection, deCollapse);\n\nexport {enFacet, frFacet, deFacet};\n\n","export default {\n    \"facet\": {\n        \"showFacetTextView\": \"Afficher le texte\",\n        \"showFacetChartView\": \"Afficher le graphique\",\n        \"itemExclude\": \"Exclure\",\n        \"applyFilters\": \"{selections, plural, one {Appliquer le filtre} other {Appliquer les filtres}}\",\n        \"clearFilters\": \"{selected, plural, one {Effacer le filtre} other {Effacer les filtres}}\",\n        \"loadMore\": \"Charger plus\",\n        \"showMore\": \"Afficher plus\",\n        \"showLess\": \"Afficher moins\",\n        \"displayed\": \"Affiché\",\n        \"removeAll\": \"Supprimer tout\",\n        \"searchPlaceholder\": \"Rechercher...\",\n        \"itemSelect\": \"Sélectionner cette valeur\",\n        \"itemUnselect\": \"Désélectionner cette valeur\",\n        \"filterItem\": \"Garder les documents qui contiennent {terme}\",\n        \"filterItems\" : \"Garder les documents qui contiennent n'importe lequel de ces termes\",\n        \"filterItemsAnd\": \"Garder les documents qui contiennent tous ces termes\",\n        \"excludeItems\" : \"Exclure les documents contenant un de ces termes\",\n        \"clearSelects\" : \"Enlever les filtres\",\n        \"searchItems\" : \"Rechercher une valeur dans cette liste\",\n        \"searchNoResult\": \"Pas de résultat\",\n        \"openItem\": \"Ouvrir\",\n        \"closeItem\": \"Refermer\",\n        \"authors\": {\n            \"title\": \"Auteurs\"\n        },\n        \"concepts\": {\n            \"title\": \"Concepts\"\n        },\n        \"company\": {\n            \"title\": \"Sociétés\"\n        },\n        \"docformat\": {\n            \"title\": \"Formats\"\n        },\n        \"doctype\": {\n            \"title\": \"Types de document\"\n        },\n        \"documentlanguages\": {\n            \"title\": \"Langues\"\n        },\n        \"fileext\": {\n            \"title\": \"Extensions de fichiers\"\n        },\n        \"filename\": {\n            \"title\": \"Noms de fichiers\"\n        },\n        \"geo\": {\n            \"title\": \"Lieux\"\n        },\n        \"matchingpartnames\": {\n            \"title\": \"Partnames\"\n        },\n        \"modified\": {\n            \"title\": \"Dates\"\n        },\n        \"person\": {\n            \"title\": \"Personnes\"\n        },\n        \"refine\": {\n            \"title\": \"Affiner la recherche\",\n            \"input\": {\n                \"label\": \"Affiner\",\n                \"buttonTitle\": \"Affiner\",\n                \"placeholder\": \"Affiner par ...\"\n            }\n        },\n        \"size\": {\n            \"title\": \"Tailles\"\n        },\n        \"tagcloud\": {\n            \"title\": \"Nuage de mots\"\n        },\n        \"title\": {\n            \"title\": \"Titres\"\n        },\n        \"treepath\": {\n            \"title\": \"Sources\"\n        },\n        \"recentQueries\": {\n            \"title\": \"Requêtes récentes\"\n        },\n        \"recentQueriesPublic\": {\n            \"title\": \"Requêtes publiques récentes\"\n        },\n        \"mySearch\": {\n            \"title\": \"Ma recherche\",\n            \"itemRemove\": \"Supprimer\"\n        },\n        \"search\": {\n            \"label\": \"Rechercher\",\n            \"buttonTitle\": \"Rechercher\",\n            \"placeholder\": \"Rechercher ...\",\n            \"showSearchForm\": \"Afficher le formulaire de recherche\",\n            \"hideSearchForm\": \"Masquer le formulaire de recherche\"\n        },\n        \"range\": {\n            \"year\": \"{date, date, sqYear}\",\n            \"monthYear\": \"{date, date, sqMonthYear}\",\n            \"weekYear\": \"s{week, number, sqWeek} {weekYear, number, sqYear}\",\n            \"apply\": \"Appliquer\",\n            \"clear\": \"Effacer\",\n            \"unavailable\": \"Aucune plage disponible\"\n        },\n\n        \"filters\":{\n            \"add\":\"Ajouter la facette\",\n            \"addAll\": \"Ajouter toutes les facettes\",\n            \"remove\":\"Retirer la facette\",\n            \"removeAll\": \"Retirer toutes les facettes\",\n            \"clear\":\"Réinitialiser\",\n            \"moreFilters\":\"\",\n            \"showFilters\":\"Montrer les filtres\",\n            \"hideFilters\":\"Cacher les filtres\",\n\n            \"back\": \"Retour aux filtres\",\n            \"selectedFilters\": \"Ce filtre est utilisé dans la recherche actuelle\",\n\n            \"customizeFacets\": \"Sélectionnez les facettes à montrer ou cacher\"\n        },\n\n        \"selectedValue\": \"Cette valeur est sélectionnée dans la recherche actuelle\",\n        \"previous\": \"Précédent\",\n        \"next\": \"Suivant\",\n        \"filterItemCountTooltip\": \"{count} valeurs possibles pour ce filtre\",\n    },\n\n    \"facetCard\": {\n        \"expand\": \"Déplier\",\n        \"collapse\": \"Replier\",\n        \"enlarge\": \"Agrandir\",\n        \"reduce\": \"Réduire\",\n        \"openSettings\": \"Ouvrir les paramètres\",\n        \"saveSettings\": \"Enregistrer les paramètres\"\n    }\n};\n","export default {\n    \"facet\": {\n        \"show_text_view\": \"Text anzeigen\",\n        \"show_chart_view\": \"Chart anzeigen\",\n        \"itemExclude\": \"Exkludieren\",\n        \"applyFilters\": \"{selections, plural, one {Filter anwenden} other {Filter anwenden}}\",\n        \"clearFilters\": \"{selected, plural, one {Filter löschen} other {Filter löschen}}\",\n        \"loadMore\": \"Mehr laden\",\n        \"showMore\": \"Mehr anzeigen\",\n        \"showLess\": \"Weniger anzeigen\",\n        \"displayed\": \"Angezeigt\",\n        \"removeAll\": \"Alle entfernen\",\n        \"searchPlaceholder\": \"Suche...\",\n        \"itemSelect\": \"Diesen Wert auswählen\",\n        \"filterItems\" : \"Behalte Dokumente mit MINDESTENS EINEM der ausgewählten Werte\",\n        \"filterItemsAnd\": \"Behalte Dokumente mit ALLEN ausgewählten Werten\",\n        \"excludeItems\" : \"Exckludiere Dokumente mit den ausgewählten Werten\",\n        \"clearSelects\" : \"Entferne die aktuellen Filter\",\n        \"searchItems\" : \"Suche nach eniem Wert in dieser Liste\",\n        \"searchNoResult\": \"Keine Ergebnisse\",\n        \"openItem\": \"Öffnen\",\n        \"closeItem\": \"Schließen\",\n        \"authors\": {\n            \"title\": \"Autoren\"\n        },\n        \"concepts\": {\n            \"title\": \"Konzepte\"\n        },\n        \"company\": {\n            \"title\": \"Firmen\"\n        },\n        \"docformat\": {\n            \"title\": \"Formate\"\n        },\n        \"doctype\": {\n            \"title\": \"Dokumenttypen\"\n        },\n        \"documentlanguages\": {\n            \"title\": \"Sprachen\"\n        },\n        \"fileext\": {\n            \"title\": \"Dateierweiterungen\"\n        },\n        \"filename\": {\n            \"title\": \"Dateinamen\"\n        },\n        \"geo\": {\n            \"title\": \"Orte\"\n        },\n        \"matchingpartnames\": {\n            \"title\": \"Übereinstimmende Partnames\"\n        },\n        \"modified\": {\n            \"title\": \"Datumsangaben\"\n        },\n        \"person\": {\n            \"title\": \"Personen\"\n        },\n        \"refine\": {\n            \"title\": \"Suche verfeinern\",\n            \"input\": {\n                \"label\": \"Verfeinern\",\n                \"buttonTitle\": \"Verfeinern\",\n                \"placeholder\": \"Verfeinern nach...\"\n            }\n        },\n        \"size\": {\n            \"title\": \"Größen\"\n        },\n        \"tagcloud\": {\n            \"title\": \"Wortwolke\"\n        },\n        \"title\": {\n            \"title\": \"Titel\"\n        },\n        \"treepath\": {\n            \"title\": \"Quellen\"\n        },\n        \"recentQueries\": {\n            \"title\": \"Kürzliche Suchanfragen\"\n        },\n        \"recentQueriesPublic\": {\n            \"title\": \"Kürzliche öffentliche Suchanfragen\"\n        },\n        \"mySearch\": {\n            \"title\": \"Meine Suche\",\n            \"itemRemove\": \"Entfernen\"\n        },\n        \"search\": {\n            \"label\": \"Suche\",\n            \"buttonTitle\": \"Suche\",\n            \"placeholder\": \"Suche...\",\n            \"showSearchForm\": \"Suchmaske einblenden\",\n            \"hideSearchForm\": \"Suchmaske ausblenden\"\n        },\n        \"range\": {\n            \"year\": \"{date, date, sqYear}\",\n            \"monthYear\": \"{date, date, sqMonthYear}\",\n            \"weekYear\": \"W{week, number, sqWeek} {weekYear, number, sqYear}\",\n            \"apply\": \"Anwenden\",\n            \"clear\": \"Löschen\",\n            \"unavailable\": \"Kein Bereich verfügbar\"\n        },\n\n        \"filters\":{\n            \"add\":\"Filter hinzufügen\",\n            \"addAll\": \"Alle Facetten hinzufügen\",\n            \"remove\":\"Filter entfernen\",\n            \"removeAll\": \"Alle Facetten entfernen\",\n            \"clear\":\"Filter löschen\",\n            \"moreFilters\":\"\",\n            \"showFilters\":\"Filter einblenden\",\n            \"hideFilters\":\"Filter ausblenden\",\n\n            \"back\": \"Zurück zu den Filtern\",\n            \"selectedFilters\": \"Dieser Filter ist in der aktuellen Suchanfrage aktiv\",\n\n            \"customizeFacets\": \"Facetten zum Anzeigen oder Ausblenden auswählen\"\n        },\n\n        \"selectedValue\": \"Dieser Wert ist in der aktuellen Anfrage ausgewählt.\",\n        \"previous\": \"Zurück\",\n        \"next\": \"Weiter\",\n        \"filterItemCountTooltip\": \"{count} mögliche Werte für diesen Filter\",\n    },\n\n    \"facetCard\": {\n        \"expand\": \"Erweitern\",\n        \"collapse\": \"Reduzieren\",\n        \"enlarge\": \"Vergrößern\",\n        \"reduce\": \"Reduzieren\",\n        \"openSettings\": \"Einstellungen öffnen\",\n        \"saveSettings\": \"Einstellungen speichern\"\n    }\n};\n"]}