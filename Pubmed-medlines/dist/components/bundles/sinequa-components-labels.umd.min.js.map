{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/components/labels/labels.service.ts","../../../projects/components/labels/label.pipe.ts","../../../projects/components/labels/labels.component.html","../../../projects/components/labels/labels.component.ts","../../../projects/components/labels/result-labels.component.html","../../../projects/components/labels/result-labels.component.ts","../../../projects/components/labels/labels-autocomplete.directive.ts","../../../projects/components/labels/labels.module.ts","../projects/components/labels/bootstrap/labels-autocomplete/labels-autocomplete.component.html","../projects/components/labels/bootstrap/labels-autocomplete/labels-autocomplete.component.ts","../projects/components/labels/bootstrap/rename-label/rename-label.html","../projects/components/labels/bootstrap/rename-label/rename-label.ts","../projects/components/labels/bootstrap/labels-menu/labels-menu.component.html","../projects/components/labels/bootstrap/labels-menu/labels-menu.component.ts","../projects/components/labels/bootstrap/delete-label/delete-label.html","../projects/components/labels/bootstrap/delete-label/delete-label.ts","../projects/components/labels/bootstrap/add-label/add-label.html","../projects/components/labels/bootstrap/add-label/add-label.ts","../projects/components/labels/bootstrap/edit-label/edit-label.html","../projects/components/labels/bootstrap/edit-label/edit-label.ts","../../projects/components/labels/bootstrap/labels.module.ts","../../projects/components/labels/messages/en.ts","../../projects/components/labels/messages/index.ts","../../projects/components/labels/messages/fr.ts","../../projects/components/labels/messages/de.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","LABELS_COMPONENTS","InjectionToken","LabelsService","labelsWebService","appService","searchService","modalService","principalWebService","intlService","notificationService","selectionService","labelsComponents","_this","events","subscribe","event","type","_privateLabelsPrefix","undefined","labelsRights","labelsRightsSubscription","defineProperty","cclabels","publicLabelsField","privateLabelsField","labelsAutoSuggestWildcard","allowPublicLabelsCreation","allowPublicLabelsModification","rights","defaultLabelsRights","observable","getUserRights","Utils","response","ngOnDestroy","unsubscribe","renameLabelModal","data","oldValues","newValue","properties","_modalProperties","open","renameModal","model","deleteLabelModal","values","deleteModal","bulkAddLabelModal","addModal","bulkRemoveLabelModal","action","radioButtonsConf","allowManagePublicLabels","allowPublicLabelsManagement","userLabelsRights","canManagePublicLabels","allowEditPublicLabels","allowPublicLabelsEdition","canEditPublicLabels","allowNewLabels","_getModalRadioButtonsConf","assign","publicRight","isPublic","disableAutocomplete","radioButtons","publicRadioButton","id","name","disabled","checked","privateRadioButton","public","buildSelectionAction","Action","icon","title","editLabelModal","updater","hidden","haveSelectedRecords","valuesToBeAdded","valuesToBeRemoved","editModal","addLabels","labels","ids","_public","add","of","removeLabels","remove","selectLabels","field","Promise","resolve","items","selectedLabels","getSelectedLabels","labels_1","labels_1_1","label","display","addPrivatePrefix","indexOf","addFieldSelect","search","detail","toString","_a","breadcrumbs","activeSelects","_c","_d","select","expr","getValues","forEach","renameLabels","newLabel","rename","success","deleteLabels","delete","bulkAddLabels","bulkAdd","query","bulkRemoveLabels","bulkRemove","principal","isTree","addUrl","replace","userId","sort","a","removePrivatePrefix","formatMessage","localeCompare","split","trim","filter","_addPrivatePrefix","privateLabelsPrefix","ic","_removePrivatePrefix","slice","i0","ɵɵinject","i1","LabelsWebService","i2","AppService","i3","SearchService","i2$1","ModalService","PrincipalWebService","i5","IntlService","i6","NotificationsService","i7","SelectionService","factory","ɵfac","providedIn","LabelPipe","labelsService","changeDetectorRef","_super","updateValue","AbstractIntlPipe","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵpropertyInterpolate","ɵɵdirectiveInject","ɵɵinjectPipeChangeDetectorRef","pure","i0.ɵɵtext","i0.ɵɵtemplate","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtextInterpolate","Labels","enableDelete","ngOnChanges","labelsField","resolveColumnAlias","showLabels","makeLabels","record","isArray","index","canRemove","selectors","hostVars","hostBindings","rf","ctx","ResultLabels","inputs","caption","decls","vars","consts","template","i0.ɵɵelement","LabelsAutocomplete","elementRef","suggestService","uiService","itemsUpdate","EventEmitter","labelsItems","_suggestions","ngOnInit","_dropdownSubscription","dropdown","clicked","item","start","changes","updatePlaceholder","off","init","firstChange","newInitLabels","currentValue","inputElement","blur","setInputValue","getSuggests","getInputValue","position","getInputPosition","val","_getLabelsSuggestions","list","getState","AutocompleteState","ACTIVE","OPENED","find","update","map","category","hasItems","active","setAutocompleteItem","startOrActive","keydown","keyCode","Keys","backspace","pop","enter","_manageSetAutocompleteItem","focus","inputChanged","suggest","START","SELECTED","INIT","_placeholder","placeholder","Autocomplete","ElementRef","i1$1","SuggestService","i3$1","UIService","$event","LabelsModule","imports","FormsModule","ReactiveFormsModule","CommonModule","IntlModule","ValidationModule","UtilsModule","BsModalModule","BsAutocompleteModule","declarations","exports","i0.ɵɵtextInterpolate1","BsLabelsAutocompleteComponent","labelsUpdate","initLabels","removeItem","splice","onLabelsItemsChanged","getDropdownItem","current","nativeElement","classList","contains","parentElement","tab","dropdownItem","preventDefault","keypress","outputs","features","ɵɵNgOnChangesFeature","i0.ɵɵclassProp","ɵɵpipeBind1","_r1","item_r1","ɵɵpureFunction2","_c0$2","BsRenameLabel","formBuilder","modalRef","isProcessing","labelControl","FormControl","Validators","required","form","group","formChanges","valueChanges","buttons","ModalButton","text","primary","validation","result","anchor","markForCheck","close","updateLabelsNature","nature","onLabelsChanged","MODAL_MODEL","i1$2","FormBuilder","ChangeDetectorRef","ModalRef","ctx_r0","collapseBreakpoint","BsLabelsMenuComponent","loginService","autoAdjust","autoAdjustBreakpoint","renameAction","deleteAction","bulkAddAction","bulkDeleteAction","_loginServiceSubscription","updateMenu","results","complete","labelsActions","records","menu","children","i1$3","LoginService","size","_c0$4","BsDeleteLabel","btnText","alert","_action","item_r2","_c0$5","BsAddLabel","item_r4","_c0$6","ctx_r2","initialLabels","ctx_r3","BsEditLabel","selectedRecordsIds","getSelectedIds","getRecordFromId","_getInitialRecordLabels","onLabelsToBeAddedChanged","onLabelsToBeRemovedChanged","defaultLabelComponents","labelsAutocompleteComponent","BsLabelsModule","providers","provide","useValue","BsSelectionModule","BsActionModule","enLabels","merge","publicLabels","privateLabels","private","selectLabel","deleteLabelAreYouSure","bulkAddLabelAreYouSure","bulkRemoveLabelAreYouSure","addPublicLabelText","removePublicLabelText","addPublicLabelTitle","selectPublicLabelTitle","removePublicLabelTitle","addPrivateLabelText","removePrivateLabelText","addPrivateLabelTitle","selectPrivateLabelTitle","removePrivateLabelTitle","renameLabel","btnRename","oldLabels","alertText","successFeedback","errorFeedback","deleteLabel","btnDelete","bulkRemoveLabel","btnBulkRemove","bulkAddLabel","btnBulkAdd","infoText","editLabel","btnEdit","labelsToBeRemoved","labelsToBeAdded","enSearch","enModal","frLabels","frSearch","frModal","deLabels","deSearch","deModal"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n    Injectable,\n    Inject,\n    InjectionToken,\n    Type,\n    OnDestroy,\n} from \"@angular/core\";\nimport { Observable, of, Subscription } from \"rxjs\";\nimport {\n    PrincipalWebService,\n    LabelsWebService,\n    AuditEventType,\n    LabelsRights,\n} from \"@sinequa/core/web-services\";\nimport { AppService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ModalService, ModalResult } from \"@sinequa/core/modal\";\nimport { Action } from \"@sinequa/components/action\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\nimport { SelectionService } from \"@sinequa/components/selection\";\n\nexport interface LabelsComponents {\n    renameModal: Type<any>;\n    labelsAutocompleteComponent: Type<any>;\n    deleteModal: Type<any>;\n    addModal: Type<any>;\n    editModal: Type<any>;\n}\n\nexport interface ModalProperties {\n    public: boolean;\n    allowEditPublicLabels: boolean;\n    allowManagePublicLabels: boolean;\n    allowNewLabels: boolean;\n    disableAutocomplete: boolean;\n    action: number;\n    radioButtons: any[];\n}\n\nexport const enum UpdateLabelsAction {\n    add,\n    remove,\n    rename,\n    delete,\n    bulkAdd,\n    bulkRemove,\n    edit,\n}\n\nexport const LABELS_COMPONENTS = new InjectionToken<LabelsComponents>(\n    \"LABELS_COMPONENTS\"\n);\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class LabelsService implements OnDestroy {\n    private _privateLabelsPrefix: string | undefined;\n    private static readonly defaultLabelsRights: LabelsRights = {\n        canManagePublicLabels: true,\n        canEditPublicLabels: true,\n    };\n    private labelsRightsSubscription: Subscription | undefined;\n    private labelsRights: LabelsRights | undefined;\n\n    constructor(\n        private labelsWebService: LabelsWebService,\n        private appService: AppService,\n        private searchService: SearchService,\n        private modalService: ModalService,\n        private principalWebService: PrincipalWebService,\n        private intlService: IntlService,\n        private notificationService: NotificationsService,\n        private selectionService: SelectionService,\n        @Inject(LABELS_COMPONENTS) public labelsComponents: LabelsComponents\n    ) {\n        this.principalWebService.events.subscribe((event) => {\n            switch (event.type) {\n                case \"changed\":\n                    this._privateLabelsPrefix = undefined;\n                    this.labelsRights = undefined;\n                    this.labelsRightsSubscription = undefined;\n                    break;\n            }\n        });\n    }\n\n    public get publicLabelsField(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.publicLabelsField\n            : undefined;\n    }\n\n    public get privateLabelsField(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.privateLabelsField\n            : undefined;\n    }\n\n    public get labelsAutoSuggestWildcard(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.labelsAutoSuggestWildcard\n            : undefined;\n    }\n\n    public get allowPublicLabelsManagement(): boolean {\n        return this.appService.cclabels\n            ? this.appService.cclabels.allowPublicLabelsCreation\n            : false;\n    }\n\n    public get allowPublicLabelsEdition(): boolean {\n        return this.appService.cclabels\n            ? this.appService.cclabels.allowPublicLabelsModification\n            : false;\n    }\n\n    public get userLabelsRights(): LabelsRights {\n        let rights: LabelsRights | undefined;\n        if (!this.labelsRights) {\n            if (!this.labelsRightsSubscription) {\n                const observable = this.labelsWebService.getUserRights();\n                this.labelsRightsSubscription = Utils.subscribe(\n                    observable,\n                    (response) => (rights = response)\n                );\n            } else {\n                rights = LabelsService.defaultLabelsRights;\n            }\n            this.labelsRights = !!rights\n                ? rights\n                : LabelsService.defaultLabelsRights;\n        }\n        return this.labelsRights;\n    }\n\n    ngOnDestroy() {\n        if (this.labelsRightsSubscription) {\n            this.labelsRightsSubscription.unsubscribe();\n        }\n    }\n\n    /** From navbar */\n    public renameLabelModal(): Promise<ModalResult> {\n        const data = {\n            oldValues: [],\n            newValue: \"\",\n            properties: this._modalProperties(UpdateLabelsAction.rename),\n        };\n        return this.modalService.open(this.labelsComponents.renameModal, {\n            model: data,\n        });\n    }\n\n    public deleteLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.delete),\n        };\n        return this.modalService.open(this.labelsComponents.deleteModal, {\n            model: data,\n        });\n    }\n\n    public bulkAddLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.bulkAdd),\n        };\n        return this.modalService.open(this.labelsComponents.addModal, {\n            model: data,\n        });\n    }\n\n    public bulkRemoveLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.bulkRemove),\n        };\n        return this.modalService.open(this.labelsComponents.deleteModal, {\n            model: data,\n        });\n    }\n\n    private _modalProperties(action: number): ModalProperties {\n        const allowManagePublicLabels: boolean =\n            this.allowPublicLabelsManagement &&\n            this.userLabelsRights &&\n            this.userLabelsRights.canManagePublicLabels;\n        const allowEditPublicLabels: boolean =\n            this.allowPublicLabelsEdition &&\n            this.userLabelsRights &&\n            this.userLabelsRights.canEditPublicLabels;\n        let allowNewLabels: boolean = false;\n        let radioButtonsConf: any;\n\n        switch (action) {\n            case UpdateLabelsAction.rename:\n            case UpdateLabelsAction.remove:\n            case UpdateLabelsAction.delete:\n            case UpdateLabelsAction.bulkRemove:\n                allowNewLabels = false;\n                break;\n            case UpdateLabelsAction.add:\n            case UpdateLabelsAction.bulkAdd:\n            case UpdateLabelsAction.edit:\n                allowNewLabels = true;\n                break;\n            default:\n                break;\n        }\n\n        switch (action) {\n            case UpdateLabelsAction.rename:\n            case UpdateLabelsAction.delete:\n                radioButtonsConf = this._getModalRadioButtonsConf(\n                    allowManagePublicLabels\n                );\n                break;\n            case UpdateLabelsAction.add:\n            case UpdateLabelsAction.bulkAdd:\n            case UpdateLabelsAction.remove:\n            case UpdateLabelsAction.bulkRemove:\n            case UpdateLabelsAction.edit:\n                radioButtonsConf = this._getModalRadioButtonsConf(\n                    allowManagePublicLabels || allowEditPublicLabels\n                );\n                break;\n            default:\n                break;\n        }\n\n        return {\n            allowEditPublicLabels: allowEditPublicLabels,\n            allowManagePublicLabels: allowManagePublicLabels,\n            allowNewLabels: allowNewLabels,\n            action: action,\n            ...radioButtonsConf,\n        };\n    }\n\n    private _getModalRadioButtonsConf(publicRight: boolean): any {\n        let isPublic: boolean = true;\n        let disableAutocomplete: boolean = false;\n        let radioButtons: any[] = [];\n        let publicRadioButton = {\n            id: \"publicLabel\",\n            name: \"msg#labels.public\",\n            value: true,\n            disabled: false,\n            checked: true,\n        };\n        let privateRadioButton = {\n            id: \"privateLabel\",\n            name: \"msg#labels.private\",\n            value: false,\n            disabled: false,\n            checked: false,\n        };\n        if (!!this.publicLabelsField && !!this.privateLabelsField) {\n            if (publicRight) {\n                isPublic = true;\n                radioButtons = [publicRadioButton, privateRadioButton];\n            } else {\n                isPublic = false;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: false,\n                };\n                privateRadioButton = {\n                    ...privateRadioButton,\n                    disabled: true,\n                    checked: true,\n                };\n                radioButtons = [publicRadioButton, privateRadioButton];\n            }\n        } else if (!!this.publicLabelsField) {\n            if (publicRight) {\n                isPublic = true;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: true,\n                };\n                radioButtons = [publicRadioButton];\n            } else {\n                isPublic = false;\n                disableAutocomplete = true;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: false,\n                };\n                radioButtons = [publicRadioButton];\n            }\n        } else if (!!this.privateLabelsField) {\n            isPublic = false;\n            privateRadioButton = {\n                ...privateRadioButton,\n                disabled: true,\n                checked: true,\n            };\n            radioButtons = [privateRadioButton];\n        }\n\n        return {\n            public: isPublic,\n            disableAutocomplete: disableAutocomplete,\n            radioButtons: radioButtons,\n        };\n    }\n    /** END From navbar */\n\n    /** From result selector */\n    public buildSelectionAction(): Action | undefined {\n        if (!this.publicLabelsField && !this.privateLabelsField) {\n            return undefined;\n        }\n        const action = new Action({\n            icon: \"fas fa-tags\",\n            title: \"msg#labels.labels\",\n            action: () => {\n                this.editLabelModal();\n            },\n        });\n        if (action) {\n            action.updater = (action) => {\n                action.hidden = !this.selectionService.haveSelectedRecords;\n            };\n            action.hidden = true;\n        }\n        return action;\n    }\n\n    public editLabelModal(): Promise<ModalResult> {\n        const data = {\n            valuesToBeAdded: [],\n            valuesToBeRemoved: [],\n            properties: this._modalProperties(UpdateLabelsAction.edit),\n        };\n        return this.modalService.open(this.labelsComponents.editModal, {\n            model: data,\n        });\n    }\n    /** END result selector */\n\n\n    addLabels(\n        labels: string[],\n        ids: string[],\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0 || !ids || ids.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.add(labels, ids, _public);\n        return observable;\n    }\n\n    removeLabels(\n        labels: string[],\n        ids: string[],\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0 || !ids || ids.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.remove(labels, ids, _public);\n        return observable;\n    }\n\n    selectLabels(labels: string[], _public: boolean): Promise<boolean> {\n        const field =\n            this.appService.cclabels &&\n            (_public\n                ? this.appService.cclabels.publicLabelsField\n                : this.appService.cclabels.privateLabelsField);\n        if (!field) {\n            return Promise.resolve(false);\n        }\n        const items: ValueItem[] = [];\n        const selectedLabels: string[] = this.getSelectedLabels(field);\n        for (let label of labels) {\n            const display = label;\n            if (!_public) {\n                label = <string>this.addPrivatePrefix(label);\n            }\n            if (selectedLabels.indexOf(label) === -1) {\n                items.push({\n                    value: label,\n                    display: display,\n                });\n            }\n        }\n\n        this.searchService.addFieldSelect(field, items);\n        return this.searchService.search(undefined, {\n            type: AuditEventType.Label_Open,\n            detail: {\n                label: !!labels ? labels.toString() : null,\n                public: _public,\n            },\n        });\n    }\n\n    /**\n     * Retrieves the labels that are not in the current filters of breadcrumbs\n     *\n     * @param field The column index containing the labels.\n     * @returns The selected labels\n     */\n    private getSelectedLabels(field: string): string[] {\n        const labels: string[] = [];\n        if (field && this.searchService.breadcrumbs?.activeSelects) {\n            for (const select of this.searchService.breadcrumbs.activeSelects) {\n                if (select.expr) {\n                    const values = select.expr.getValues(field);\n                    values.forEach((value) => {\n                        if (labels.indexOf(value) === -1) {\n                            labels.push(value);\n                        }\n                    });\n                }\n            }\n        }\n        return labels;\n    }\n\n    renameLabels(\n        labels: string[],\n        newLabel: string,\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.rename(\n            labels,\n            newLabel,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\"msg#renameLabel.errorFeedback\");\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#renameLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    deleteLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.delete(labels, _public);\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\"msg#deleteLabel.errorFeedback\");\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#deleteLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    bulkAddLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.bulkAdd(\n            labels,\n            this.searchService.query,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\n                    \"msg#bulkAddLabel.errorFeedback\"\n                );\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#bulkAddLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    bulkRemoveLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.bulkRemove(\n            labels,\n            this.searchService.query,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\n                    \"msg#bulkRemoveLabel.errorFeedback\"\n                );\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#bulkRemoveLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    get privateLabelsPrefix(): string {\n        if (!this.principalWebService.principal) {\n            return \"\";\n        }\n        if (!this._privateLabelsPrefix && this.appService.cclabels) {\n            if (\n                this.appService.isTree(\n                    this.appService.cclabels.privateLabelsField\n                )\n            ) {\n                this._privateLabelsPrefix = Utils.addUrl(\n                    \"/\",\n                    Utils.replace(\n                        this.principalWebService.principal.userId,\n                        \"|\",\n                        \"/\"\n                    ),\n                    \"/\"\n                );\n            } else {\n                this._privateLabelsPrefix =\n                    this.principalWebService.principal.userId + \"|\";\n            }\n        }\n        return this._privateLabelsPrefix || \"\";\n    }\n\n    sort(labels: string[], _public: boolean): string[] {\n        if (!labels) return labels;\n        return labels.sort((a, b) => {\n            if (!a) return -1;\n            if (!b) return 1;\n            if (!_public) {\n                a = <string>this.removePrivatePrefix(a);\n                b = <string>this.removePrivatePrefix(b);\n            }\n            a = this.intlService.formatMessage(a);\n            b = this.intlService.formatMessage(b);\n            return a.localeCompare(b);\n        });\n    }\n\n    split(labels: string): string[] {\n        if (!labels) {\n            return [];\n        }\n        return labels\n            .trim()\n            .split(/\\s*;\\s*/)\n            .filter((value) => {\n                return value !== \"\";\n            });\n    }\n\n    private _addPrivatePrefix(label: string): string {\n        if (\n            this.appService.cclabels &&\n            this.appService.isTree(this.appService.cclabels.privateLabelsField)\n        ) {\n            return Utils.addUrl(this.privateLabelsPrefix, label);\n        } else {\n            return this.privateLabelsPrefix + label;\n        }\n    }\n\n    addPrivatePrefix(labels: string | string[]): string | string[] {\n        if (typeof labels === \"string\") {\n            return this._addPrivatePrefix(labels);\n        } else {\n            for (let i = 0, ic = labels.length; i < ic; i++) {\n                labels[i] = this._addPrivatePrefix(labels[i]);\n            }\n            return labels;\n        }\n    }\n\n    private _removePrivatePrefix(label: string): string {\n        if (label.indexOf(this.privateLabelsPrefix) === 0) {\n            if (\n                this.appService.cclabels &&\n                this.appService.isTree(\n                    this.appService.cclabels.privateLabelsField\n                )\n            ) {\n                return label.slice(this.privateLabelsPrefix.length - 1);\n            } else {\n                return label.slice(this.privateLabelsPrefix.length);\n            }\n        }\n        return label;\n    }\n\n    removePrivatePrefix(labels: string | string[]): string | string[] {\n        if (typeof labels === \"string\") {\n            return this._removePrivatePrefix(labels);\n        } else {\n            for (let i = 0, ic = labels.length; i < ic; i++) {\n                labels[i] = this._removePrivatePrefix(labels[i]);\n            }\n            return labels;\n        }\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {AbstractIntlPipe, IntlService} from \"@sinequa/core/intl\";\nimport {LabelsService} from \"./labels.service\";\n\n@Pipe({name: \"sqLabel\", pure: false})\nexport class LabelPipe extends AbstractIntlPipe {\n    constructor(\n        protected labelsService: LabelsService,\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef) {\n        super(intlService, changeDetectorRef);\n    }\n\n    updateValue(value: string, _public?: boolean): void {\n        super.updateValue(value, _public);\n        this.value = value;\n        if (!_public) {\n            this.value = <string>this.labelsService.removePrivatePrefix(this.value);\n        }\n        this.value = this.intlService.formatMessage(this.value);\n    }\n}","<div *ngIf=\"showLabels\" class=\"d-inline\">\n    <span *ngFor=\"let label of labels; let $index = index\" class=\"d-inline\">\n        <div class=\"badge badge-pill badge-info align-self-center mr-1 d-inline\" [ngClass]=\"{'sq-labels-public': public, 'sq-labels-private': !public}\"\n            title=\"{{(public ? 'msg#labels.selectPublicLabelTitle' : 'msg#labels.selectPrivateLabelTitle') | sqMessage}}\">\n            <span (click)=\"select(label)\">{{label | sqLabel:public}}</span>\n            <i class=\"sq-label-remove fas fa-times-circle clickable\" (click)=\"remove($index)\" *ngIf=\"canRemove()\"\n                title=\"{{(public ? 'msg#labels.removePublicLabelTitle' : 'msg#labels.removePrivateLabelTitle') | sqMessage}}\">\n            </i>\n        </div>\n    </span>\n</div>\n","import { Component, Input, OnChanges, HostBinding } from \"@angular/core\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Record } from \"@sinequa/core/web-services\";\nimport { LabelsService } from \"./labels.service\";\nimport { AppService } from \"@sinequa/core/app-utils\";\n\n@Component({\n    selector: \"sq-labels\",\n    // We need the two spans to get whitespace between each label\n    // change size by adding h1-6 class to .sq-label div (default is h5)\n    templateUrl: \"./labels.component.html\",\n    styles: [\n        `\n            .sq-labels-public {\n                background-color: #4fc3f7;\n            }\n            .sq-labels-private {\n                background-color: #7283a7;\n            }\n            .sq-label-remove {\n                margin-left: 3px;\n            }\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class Labels implements OnChanges {\n    @Input() record: Record;\n    @Input() public: boolean;\n    @Input() enableDelete: boolean = false; /** Display the delete button in the label tag */\n\n    protected labelsField: string;\n    showLabels: boolean;\n    labels: string[];\n\n    @HostBinding(\"class\") hostClasses;\n\n    constructor(\n        private appService: AppService,\n        private labelsService: LabelsService\n    ) {}\n\n    ngOnChanges() {\n        const field = this.public\n            ? this.labelsService.publicLabelsField\n            : this.labelsService.privateLabelsField;\n        this.labelsField = this.appService.resolveColumnAlias(field);\n        this.showLabels = !!this.labelsField;\n        this.makeLabels();\n    }\n\n    private makeLabels() {\n        if (!this.showLabels) {\n            this.labels = [];\n            return;\n        }\n        const labels = this.record[this.labelsField];\n        if (Utils.isArray(labels)) {\n            this.labels = this.labelsService.sort(labels.slice(), this.public);\n        } else {\n            this.labels = [];\n        }\n    }\n\n    select(label: string) {\n        if (!this.public) {\n            label = <string>this.labelsService.removePrivatePrefix(label);\n        }\n        this.labelsService.selectLabels([label], this.public);\n    }\n\n    remove(index: number) {\n        if (this.canRemove()) {\n            let label = this.labels[index];\n            if (!this.public) {\n                label = <string>this.labelsService.removePrivatePrefix(label);\n            }\n            this.labelsService.removeLabels(\n                [label],\n                [this.record.id],\n                this.public\n            );\n        }\n    }\n\n    canRemove(): boolean {\n        return this.public\n            ? this.enableDelete &&\n                this.labelsService.allowPublicLabelsManagement &&\n                this.labelsService.userLabelsRights &&\n                this.labelsService.userLabelsRights.canManagePublicLabels\n            : this.enableDelete && true;\n    }\n}\n","<span *ngIf=\"caption\" class=\"sq-text\">{{caption | sqMessage}}</span>\n<sq-labels [record]=\"record\" [public]=\"public\"></sq-labels>\n","import {Component, Input} from \"@angular/core\";\nimport {Record} from \"@sinequa/core/web-services\";\n\n@Component({\n    selector: \"sq-result-labels\",\n    templateUrl: \"./result-labels.component.html\"\n})\nexport class ResultLabels {\n    @Input() record: Record;\n    @Input() caption: string;\n    @Input() public: boolean;\n}\n","import {\n    Directive,\n    ElementRef,\n    Input,\n    EventEmitter,\n    SimpleChanges,\n    Output,\n    HostListener,\n    OnInit,\n    OnChanges,\n} from \"@angular/core\";\nimport {\n    Autocomplete,\n    SuggestService,\n    AutocompleteState,\n    AutocompleteItem,\n} from \"@sinequa/components/autocomplete\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { LabelsWebService, Labels } from \"@sinequa/core/web-services\";\nimport { Keys } from \"@sinequa/core/base\";\nimport { LabelsService } from \"./labels.service\";\n\n@Directive({\n    selector: \"[sqAutocompleteLabels]\",\n})\nexport class LabelsAutocomplete extends Autocomplete implements OnInit, OnChanges {\n    /** Event synchronizing the list of selected labels in the parent component */\n    @Output() itemsUpdate = new EventEmitter<AutocompleteItem[]>();\n\n    /** Whether the labels are public or not */\n    @Input() public: boolean;\n\n    /** Enable adding new labels in labelsItems or not */\n    @Input() allowNewLabels: boolean = false;\n\n    /** Define the right of adding new labels in labelsItems or not */\n    @Input() allowManagePublicLabels: boolean = false;\n\n    /** Stores the selected labels items selected via Tab */\n    @Input() labelsItems: AutocompleteItem[] = [];\n\n    /** Stores the suggestions retrieved by th server in order to perform checks on key.enter events */\n    private _suggestions: string[] = [];\n\n    constructor(\n        elementRef: ElementRef,\n        suggestService: SuggestService,\n        appService: AppService,\n        uiService: UIService,\n        private labelsWebService: LabelsWebService,\n        private labelsService: LabelsService\n    ) {\n        super(elementRef, suggestService, appService, uiService);\n    }\n\n    /**\n     * The ngOnInit() method from the original directive is overriden\n     * On initialization, we listen to the autocomplete component for\n     * selection events\n     */\n    ngOnInit() {\n        this._dropdownSubscription = this.dropdown.clicked.subscribe((item) => {\n            this.select(item, true); // An item was selected from the autocomplete => take the value\n        });\n        this.start();\n    }\n\n    /**\n     * If the inputs changes state, react accordingly\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"labelsItems\"]) {\n            this.updatePlaceholder();\n        }\n\n        // Override start() by using init() instead, so that no double queries are generated and autocomplete dropdown is shown only on focus\n        if (changes[\"off\"] && !this.off) {\n            this.init();\n        }\n\n        // If labels category changes, we must remove the selected labels items and reinitialize the autocomplete\n        if (changes[\"public\"] && !changes[\"public\"].firstChange) {\n            const newInitLabels = [...changes[\"labelsItems\"].currentValue];\n            this.inputElement.blur();\n            /** Reset the input Value*/\n            this.setInputValue(\"\");\n            /** initialize the input needed specially for labels edit cases */\n            this.updatePlaceholder();\n            this.itemsUpdate.next(newInitLabels);\n        }\n    }\n\n    /**\n     * The getSuggests() method from the original directive is overriden to\n     * use the labelsService rather than suggest service.\n     */\n    protected getSuggests() {\n        const value = this.getInputValue();\n\n        if (value) {\n            // parse\n            const labels = value.split(\";\");\n\n            // find label at caret location\n            const position = this.getInputPosition();\n            let length = 0;\n            let val:\n                | { value: string, start: number, length: number }\n                | undefined;\n            for (const label of labels) {\n                if (position >= length && position <= length + label.length) {\n                    val = {\n                        value: label,\n                        start: length,\n                        length: label.length,\n                    };\n                    break;\n                }\n                length += label.length + 1;\n            }\n\n            // Get suggestions from web service\n            if (val) {\n                this._getLabelsSuggestions(val.value);\n            }\n        } else {\n            if (!!this.labelsService.labelsAutoSuggestWildcard) {\n                this._getLabelsSuggestions(\n                    this.labelsService.labelsAutoSuggestWildcard\n                );\n            } else {\n                this.start();\n            }\n        }\n    }\n\n    private _getLabelsSuggestions(val: string) {\n        this.labelsWebService.list(val, this.public).subscribe(\n            (labels: Labels) => {\n                if (\n                    this.getState() === AutocompleteState.ACTIVE ||\n                    this.getState() === AutocompleteState.OPENED\n                ) {\n                    /** Eliminate suggestions that are already selected */\n                    labels.labels = labels.labels.filter(\n                        (label) =>\n                            !this.labelsItems.find(\n                                (item) => item.display === label\n                            )\n                    );\n\n                    /** update the local list of suggestions */\n                    this._suggestions = labels.labels;\n\n                    /** limit the suggestions to be displayed to 10  */\n                    labels.labels = labels.labels.slice(0, 10);\n\n                    this.dropdown.update(\n                        true,\n                        labels.labels.map((label) => {\n                            return {\n                                display: label,\n                                category: \"\",\n                            };\n                        })\n                    );\n                }\n            },\n            () => {\n                this.dropdown.update(false);\n            },\n            () => {\n                if (\n                    this.dropdown.hasItems &&\n                    this.getState() === AutocompleteState.ACTIVE\n                ) {\n                    this.open(); // Switch from ACTIVE to OPENED (if not already)\n                } else if (\n                    !this.dropdown.hasItems &&\n                    this.getState() === AutocompleteState.OPENED\n                ) {\n                    // No data\n                    this.active(); // Switch from OPENED to ACTIVE (if not already)\n                }\n            }\n        );\n    }\n\n    /**\n     * The setAutocompleteItem() method from the original directive is overriden to\n     * Sets the content of the <input> based on the given\n     * Autocomplete Item.\n     * @returns false since labels items don't need to be searched\n     */\n    protected setAutocompleteItem(item: AutocompleteItem): boolean {\n        if (item) {\n            // Store the autocomplete items that will be used to create a selection\n            this.labelsItems.push(item);\n            this.updatePlaceholder();\n            this.itemsUpdate.next(this.labelsItems);\n            this.setInputValue(\"\");\n        }\n        return false;\n    }\n\n    /**\n     * The startOrActive() method from the original directive is overriden to\n     * immediately switch to ACTIVE if it is not the case\n     */\n    protected startOrActive(): void {\n        if (\n            this.getState() !== AutocompleteState.ACTIVE &&\n            this.getState() !== AutocompleteState.OPENED\n        ) {\n            // Avoid flickering\n            this.start();\n            this.active();\n        }\n    }\n\n    /**\n     * Listen to user's keyboard actions in the <input>, in order to navigate\n     * and select the autocomplete suggestions.\n     * Overrides the parent keydown method, adds the management of the backspace key\n     * to remove labels items, enhance the enter key to support adding new labels.\n     * @param event the keyboard\n     */\n    keydown(event: KeyboardEvent) {\n        const keydown = super.keydown(event);\n\n        if (keydown === undefined) {\n            //We can remove selections by typing <backspace> when the input is empty\n            if (event.keyCode === Keys.backspace) {\n                if (this.getInputValue() === \"\") {\n                    this.labelsItems.pop();\n                    this.updatePlaceholder();\n                    this.itemsUpdate.next(this.labelsItems);\n                }\n            }\n            /** Allow the selection one of new labels that not exists in the list */\n            if (event.keyCode === Keys.enter) {\n                this._manageSetAutocompleteItem();\n            }\n        }\n        return keydown;\n    }\n\n    /**\n     * Listens to focus events on the <input> host and overrides the parent focus events in order to launch the autocomplete\n     * If empty input :\n     * - display top relevent labels if the auto-suggest wildcard is configured\n     * - restart the autocomplete if no auto-suggest wildcard is found\n     * If not empty input :\n     * retrieve suggestions based on this input text\n     */\n    @HostListener(\"focus\") focus() {\n        this.start();\n        this.active();\n    }\n\n    /**\n     * Listens to blur events (out of focus) on the <input> host and overrides the parent blur events\n     */\n    @HostListener(\"blur\", [\"$event\"]) blur(event: FocusEvent) {\n        this._manageSetAutocompleteItem();\n        this.init();\n    }\n\n    /**\n     * Overrides the parent inputChanged method, so that it is possible to reinitialize the autocomplete\n     * @param event\n     */\n    @HostListener(\"input\", [\"$event\"]) inputChanged(event: Event) {\n        switch (this.getState()) {\n            case AutocompleteState.OPENED:\n                this.suggest(); // Just request more data, but no state change\n                break;\n            case AutocompleteState.START:\n            case AutocompleteState.ACTIVE:\n                this.active(); // get more data, and change state if not already ACTIVE\n                break;\n            case AutocompleteState.SELECTED:\n                this.start(); // The model changed because we selected a value ==> we restart in case the user keeps typing\n                this.active();\n                break;\n            case AutocompleteState.INIT:\n                break;\n        }\n    }\n\n    /**\n     * Updates the <input>'s placeholder to avoid displaying something\n     * when there are labelsItems displayed to the left.\n     */\n    updatePlaceholder() {\n        this._placeholder = this.labelsItems.length > 0 ? \"\" : this.placeholder;\n    }\n\n    private _manageSetAutocompleteItem(): void {\n        /** Always consider if there is text in the <input> and that it is not yet added in the labelsItems  */\n        if (!!this.getInputValue() && this.getInputValue() !== \"\") {\n            if (this.allowNewLabels) {\n                /** When it is an add Labels action ==> check the privilege to create new label */\n                if (\n                    !this.public ||\n                    (this.public && this.allowManagePublicLabels)\n                ) {\n                    this.setAutocompleteItem({\n                        display: this.getInputValue(),\n                        category: \"\",\n                    });\n                }\n            } else {\n                /** For all other actions on the labels, check if the typed text equals an existing label in the _suggestions  */\n                if (this._suggestions.indexOf(this.getInputValue()) > -1) {\n                    this.setAutocompleteItem({\n                        display: this.getInputValue(),\n                        category: \"\",\n                    });\n                }\n            }\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {UtilsModule} from \"@sinequa/components/utils\";\n\nimport {BsModalModule} from \"@sinequa/components/modal\";\n\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";\n\nimport {LabelPipe} from \"./label.pipe\";\nimport {Labels} from \"./labels.component\";\nimport {ResultLabels} from \"./result-labels.component\";\nimport {LabelsAutocomplete} from \"./labels-autocomplete.directive\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsModalModule,\n        BsAutocompleteModule,\n    ],\n    declarations: [\n        LabelPipe, Labels, ResultLabels, LabelsAutocomplete\n    ],\n    exports: [\n        LabelPipe, Labels, ResultLabels, LabelsAutocomplete\n    ],\n})\nexport class LabelsModule {\n}\n","<form name=\"labelsForm\" class=\"d-inline\">\n    <section class=\"sq-dropdown-form\">\n        <div class=\"form-control\">\n            <span\n                *ngFor=\"let item of labelsItems\"\n                class=\"badge badge-pill badge-info align-self-center\"\n                [ngClass]=\"{'label-public': public, 'label-private': !public}\">\n                {{ item.display }}\n                <span class=\"fas fa-times-circle clickable\" (click)=\"removeItem(item)\"></span>\n            </span>\n            <input type=\"text\"\n                class=\"input-autocomplete flex-grow-1\"\n                name=\"labelName\"\n                spellcheck=\"false\"\n                autocomplete=\"off\"\n                sqAutocompleteLabels\n                [public]=\"public\"\n                [placeholder]=\"'msg#labels.selectLabel' | sqMessage\"\n                [dropdown]=\"dropdown\"\n                [allowNewLabels]=\"allowNewLabels\"\n                [allowManagePublicLabels]=\"allowManagePublicLabels\"\n                (keydown)=\"keydown($event)\"\n                (keypress)=\"keypress($event)\"\n                (itemsUpdate)=\"onLabelsItemsChanged($event)\"\n                [disabled]=\"disableAutocomplete\"\n                [off]=\"disableAutocomplete\"\n                [class.disabled]=\"disableAutocomplete\"\n                [labelsItems]=\"labelsItems\">\n        </div>\n        <sq-autocomplete-list #dropdown>\n            <ng-template #itemTpl let-item>\n                <div class=\"autocomplete-item p-2\">{{item.display}}\n                </div>\n            </ng-template>\n        </sq-autocomplete-list>\n    </section>\n</form>\n\n\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from \"@angular/core\";\nimport { Keys } from \"@sinequa/core/base\";\nimport { AutocompleteItem } from \"@sinequa/components/autocomplete\";\n\n/**\n * Component containing a form and autocomplete to search\n * through the list labels according to a specific type (public/private) and select one(s) of them\n *\n * The component can be used as custom component in the Action\n * menu's modals.\n */\n\n@Component({\n    selector: \"sq-labels-autocomplete\",\n    templateUrl: \"./labels-autocomplete.component.html\",\n    styles: [\n        `\n            .sq-dropdown-form {\n                min-width: 13rem;\n                display: inline;\n            }\n            .disabled {\n                cursor: not-allowed;\n            }\n            :host ::ng-deep .sq-autocomplete-list {\n                width: 50% !important;\n            }\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n            .label-public {\n                background-color: #4fc3f7;\n                margin: 2px;\n            }\n            .label-private {\n                background-color: #7283a7;\n                margin: 2px;\n            }\n\n            :host div {\n                width: 100%;\n                display: flex;\n                flex-wrap: wrap;\n                align-items: center;\n                height: unset !important;\n            }\n            :host input {\n                border: none;\n                flex-grow: 1;\n                flex-basis: 100px;\n                min-width: 100px;\n            }\n            :host input:focus {\n                outline: none;\n            }\n        `,\n    ],\n})\nexport class BsLabelsAutocompleteComponent implements OnChanges {\n    /** Event synchronizing the list of selected labels and label's type in the parent component */\n    @Output() labelsUpdate = new EventEmitter<string[]>();\n\n    @Input() public: boolean; /** Whether labels are public/private */\n    @Input() disableAutocomplete: boolean = false /** Whether the autocomplete input is disabled or not */;\n    @Input() allowNewLabels: boolean; /** Whether enable adding new labels or not */\n    @Input() allowManagePublicLabels: boolean; /** Define the right of adding new labels */\n    @Input() initLabels: string[] = []; /** Initial labels to be displayed in the labelsAutocomplete input*/\n\n    labelsItems: AutocompleteItem[] = []; /** List of assigned labels to selected record(s) */\n\n    constructor(private elementRef: ElementRef) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.public) {\n            this.labelsItems = [];\n        }\n        if (changes.initLabels) {\n            this.labelsItems = this.initLabels.map((label) => {\n                return {\n                    display: label,\n                    category: \"\",\n                };\n            });\n        }\n    }\n\n    removeItem(item: AutocompleteItem) {\n        this.labelsItems.splice(this.labelsItems.indexOf(item), 1);\n        this.labelsItems = [\n            ...this.labelsItems,\n        ]; /** Need to programmatically update this.labelsItems object in order to fire ngOnChanges hook in sqAutocompleteLabels */\n        this.labelsUpdate.next(this.labelsItems.map((item) => item.display));\n    }\n\n    onLabelsItemsChanged(labelsItems: AutocompleteItem[]) {\n        this.labelsItems = labelsItems; /** Need to Programmatically update this.labelsItems to catch updates happening in the sqAutocompleteLabels  */\n        this.labelsUpdate.next(labelsItems.map((item) => item.display));\n    }\n\n    private getDropdownItem(): HTMLElement | null {\n        if (this.elementRef) {\n            let current: HTMLElement | null = this.elementRef\n                .nativeElement as HTMLElement;\n            while (current && !current.classList.contains(\"dropdown-item\")) {\n                current = current.parentElement;\n            }\n            return current;\n        }\n        return null;\n    }\n\n    keydown(event: KeyboardEvent) {\n        // Intercept tab and set focus to surrounding dropdown-item\n        if (event.keyCode === Keys.tab) {\n            const dropdownItem = this.getDropdownItem();\n            if (dropdownItem) {\n                dropdownItem.focus();\n                event.preventDefault();\n                return false;\n            }\n        }\n        return undefined;\n    }\n\n    keypress(event: KeyboardEvent) {\n        if (event.keyCode === Keys.enter) {\n            // Stop click event firing on surrounding anchor (Firefox)\n            event.preventDefault();\n            return false;\n        }\n        return undefined;\n    }\n}\n","<form name=\"renameLabel\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#renameLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-danger\" role=\"alert\">\n                {{'msg#renameLabel.alertText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#renameLabel.oldLabels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n            <b><label for=\"label\">{{'msg#renameLabel.newLabel' | sqMessage}}</label></b>\n            <input\n                [sqValidation]=\"form\"\n                type=\"text\"\n                class=\"form-control\"\n                id=\"label\"\n                formControlName=\"label\"\n                autocomplete=\"off\"\n                spellcheck=\"off\"\n                placeholder=\"{{'msg#renameLabel.newLabel' | sqMessage}}\">\n        </div>\n    </sq-modal>\n</form>\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Inject,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport {\n    FormBuilder,\n    FormGroup,\n    FormControl,\n    Validators,\n} from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\n\n@Component({\n    selector: \"sq-rename-label\",\n    templateUrl: \"./rename-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsRenameLabel implements OnInit, OnDestroy {\n    public labelControl: FormControl;\n    public form: FormGroup;\n    public formChanges: Subscription;\n    public buttons: ModalButton[];\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            oldValues: string[],\n            newValue: string,\n            properties: ModalProperties\n        },\n        private formBuilder: FormBuilder,\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.labelControl = new FormControl(\n            this.model.newValue,\n            Validators.required\n        );\n        this.form = this.formBuilder.group({\n            label: this.labelControl,\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges, () => {\n            this.model.newValue = this.labelControl.value;\n        });\n\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#renameLabel.btnRename\",\n                primary: true,\n                validation: this.form,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.renameLabels(\n                        this.model.oldValues,\n                        this.model.newValue,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.oldValues = values;\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    OnDestroy,\n} from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { LoginService } from \"@sinequa/core/login\";\nimport { LabelsService } from \"../../labels.service\";\nimport { Results } from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"sq-labels-menu\",\n    templateUrl: \"./labels-menu.component.html\",\n})\nexport class BsLabelsMenuComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() icon: string = \"fas fa-tags\";\n    @Input() autoAdjust: boolean = true;\n    @Input() autoAdjustBreakpoint: string = \"xl\";\n    @Input() collapseBreakpoint: string = \"sm\";\n    @Input() size: string;\n\n    menu: Action | undefined;\n\n    // Labels  actions\n    renameAction: Action;\n    deleteAction: Action;\n    bulkAddAction: Action;\n    bulkDeleteAction: Action;\n\n    private _loginServiceSubscription: Subscription;\n\n    constructor(\n        public loginService: LoginService,\n        public labelsService: LabelsService\n    ) {\n        this.renameAction = new Action({\n            text: \"msg#renameLabel.title\",\n            title: \"msg#renameLabel.title\",\n            action: () => {\n                this.labelsService.renameLabelModal();\n            },\n        });\n\n        this.deleteAction = new Action({\n            text: \"msg#deleteLabel.title\",\n            title: \"msg#deleteLabel.title\",\n            action: () => {\n                this.labelsService.deleteLabelModal();\n            },\n        });\n\n        this.bulkAddAction = new Action({\n            text: \"msg#bulkAddLabel.title\",\n            title: \"msg#bulkAddLabel.title\",\n            action: () => {\n                this.labelsService.bulkAddLabelModal();\n            },\n        });\n\n        this.bulkDeleteAction = new Action({\n            text: \"msg#bulkRemoveLabel.title\",\n            title: \"msg#bulkRemoveLabel.title\",\n            action: () => {\n                this.labelsService.bulkRemoveLabelModal();\n            },\n        });\n    }\n\n    ngOnInit() {\n        this._loginServiceSubscription = this.loginService.events.subscribe(\n            (event) => {\n                if (event.type === \"session-changed\") {\n                    this.updateMenu();\n                }\n            }\n        );\n    }\n\n    ngOnDestroy() {\n        if (this._loginServiceSubscription) {\n            this._loginServiceSubscription.unsubscribe();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.updateMenu();\n        }\n    }\n\n    updateMenu() {\n        if (!this.loginService.complete) {\n            this.menu = undefined;\n            return;\n        }\n\n        if (\n            !this.labelsService.publicLabelsField &&\n            !this.labelsService.privateLabelsField\n        ) {\n            this.menu = undefined;\n            return;\n        }\n\n        const labelsActions: Action[] = [this.renameAction, this.deleteAction];\n\n        /** Allow Bulk actions only if there are some results */\n        if (!!this.results && !!this.results.records) {\n            labelsActions.push(this.bulkAddAction);\n            labelsActions.push(this.bulkDeleteAction);\n        }\n\n        this.menu = new Action({\n            icon: this.icon,\n            text: \"msg#labels.labels\",\n            children: labelsActions,\n        });\n    }\n}\n","<form name=\"deleteLabel\" novalidate>\n    <sq-modal [title]=\"title\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert\" [ngClass]=\"{'alert-danger': model.properties.action === 3, 'alert-warning': model.properties.action === 5}\" role=\"alert\">\n                {{alert | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport {\n    UpdateLabelsAction,\n    ModalProperties,\n    LabelsService,\n} from \"../../labels.service\";\nimport { Utils } from \"@sinequa/core/base\";\n\n@Component({\n    selector: \"sq-delete-label\",\n    templateUrl: \"./delete-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsDeleteLabel implements OnInit {\n    public buttons: ModalButton[];\n    public title: string;\n    public alert: string;\n    public btnText: string;\n    public isProcessing: boolean = false;\n\n    private _action: () => void;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            values: string[],\n            properties: ModalProperties\n        },\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        switch (this.model.properties.action) {\n            case UpdateLabelsAction.delete:\n                this.title = \"msg#deleteLabel.title\";\n                this.btnText = \"msg#deleteLabel.btnDelete\";\n                this.alert = \"msg#deleteLabel.alertText\";\n                this._action = () => {\n                    const observable = this.labelsService.deleteLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                };\n                break;\n            case UpdateLabelsAction.bulkRemove:\n                this.title = \"msg#bulkRemoveLabel.title\";\n                this.btnText = \"msg#bulkRemoveLabel.btnBulkRemove\";\n                this.alert = \"msg#bulkRemoveLabel.alertText\";\n                this._action = () => {\n                    const observable = this.labelsService.bulkRemoveLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                };\n                break;\n            default:\n                this.title = \"\";\n                this.btnText = \"\";\n                this.alert = \"\";\n                break;\n        }\n\n        this.buttons = [\n            new ModalButton({\n                text: this.btnText,\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: this._action,\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.values = values;\n    }\n}\n","<form name=\"addLabel\" novalidate>\n    <sq-modal [title]=\"'msg#bulkAddLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-warning\" role=\"alert\">\n                {{'msg#bulkAddLabel.alertText' | sqMessage}}\n            </div>\n            <div *ngIf=\"model.properties.allowManagePublicLabels || !model.properties.public \" class=\"alert alert-info\" role=\"alert\">\n                {{'msg#bulkAddLabel.infoText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\nimport { Utils } from \"@sinequa/core/base\";\n\n@Component({\n    selector: \"sq-add-label\",\n    templateUrl: \"./add-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsAddLabel implements OnInit {\n    public buttons: ModalButton[];\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            values: string[],\n            properties: ModalProperties\n        },\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#bulkAddLabel.btnBulkAdd\",\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.bulkAddLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.values = values;\n    }\n}\n","<form name=\"editLabel\" novalidate>\n    <sq-modal [title]=\"'msg#editLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-warning\" role=\"alert\">\n                {{'msg#editLabel.alertText' | sqMessage}}\n            </div>\n            <div *ngIf=\"model.properties.allowManagePublicLabels || !model.properties.public \" class=\"alert alert-info\" role=\"alert\">\n                {{'msg#editLabel.infoText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n\n            <section *ngIf=\"record\">\n                <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\"\n                    [initLabels]=\"initialLabels\">\n                </sq-labels-autocomplete>\n            </section>\n\n            <section *ngIf=\"!record\">\n                <b><label for=\"label\">{{'msg#editLabel.labelsToBeAdded' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsToBeAddedChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n                </sq-labels-autocomplete>\n                <b><label for=\"label\">{{'msg#editLabel.labelsToBeRemoved' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsToBeRemovedChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n                </sq-labels-autocomplete>\n            </section>\n\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Record } from \"@sinequa/core/web-services\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\n\n@Component({\n    selector: \"sq-edit-label\",\n    templateUrl: \"./edit-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsEditLabel implements OnInit {\n    public selectedRecordsIds: string[];\n    public buttons: ModalButton[];\n    /** Initial labels list assigned to a record */\n    public initialLabels: string[] = [];\n    public record: Record | undefined;\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            valuesToBeAdded: string[],\n            valuesToBeRemoved: string[],\n            properties: ModalProperties\n        },\n        private appService: AppService,\n        private selectionService: SelectionService,\n        private labelsService: LabelsService,\n        private searchService: SearchService,\n        private notificationService: NotificationsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.selectedRecordsIds = !!this.selectionService.getSelectedIds()\n            ? this.selectionService.getSelectedIds()\n            : [];\n        if (this.selectedRecordsIds.length === 1) {\n            this.record = this.searchService.getRecordFromId(\n                this.selectedRecordsIds[0]\n            );\n            this.initialLabels = this._getInitialRecordLabels();\n        }\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#editLabel.btnEdit\",\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.addLabels(\n                        this.model.valuesToBeAdded,\n                        this.selectionService.getSelectedIds(),\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.notificationService.error(\n                                    \"msg#editLabel.errorFeedback\"\n                                );\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.labelsService\n                                    .removeLabels(\n                                        this.model.valuesToBeRemoved,\n                                        this.selectionService.getSelectedIds(),\n                                        this.model.properties.public\n                                    )\n                                    .subscribe(\n                                        () => {},\n                                        (error) => {\n                                            this.notificationService.error(\n                                                \"msg#editLabel.errorFeedback\"\n                                            );\n                                            this.modalRef.close(error);\n                                        },\n                                        () => {\n                                            this.isProcessing = false;\n                                            this.modalRef.close(ModalResult.OK);\n                                            this.notificationService.success(\n                                                \"msg#editLabel.successFeedback\"\n                                            );\n                                            this.searchService.search(); /** Update the display immediately in the components and facets*/\n                                        }\n                                    );\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n        this.model.valuesToBeRemoved = [];\n        this.model.valuesToBeAdded = [];\n        if (this.selectedRecordsIds.length === 1) {\n            this.initialLabels = this._getInitialRecordLabels(); /** update initial labels */\n        }\n    }\n\n    onLabelsChanged(values: string[]) {\n        if (!!this.initialLabels) {\n            this.model.valuesToBeAdded = values.filter(\n                (value) => !this.initialLabels.find((label) => label === value)\n            );\n            this.model.valuesToBeRemoved = this.initialLabels.filter(\n                (label) => !values.find((value) => value === label)\n            );\n        } else {\n            this.model.valuesToBeAdded = values;\n            this.model.valuesToBeRemoved = [];\n        }\n    }\n\n    onLabelsToBeAddedChanged(values: string[]) {\n        this.model.valuesToBeAdded = values;\n    }\n\n    onLabelsToBeRemovedChanged(values: string[]) {\n        this.model.valuesToBeRemoved = values;\n    }\n\n    /**\n     * Return the list of labels already assigned to the selected record\n     */\n    private _getInitialRecordLabels(): string[] {\n        if (!!this.record) {\n            const field = this.model.properties.public\n                ? this.labelsService.publicLabelsField\n                : this.labelsService.privateLabelsField;\n            const labelsField = this.appService.resolveColumnAlias(field);\n            if (!this.model.properties.public) {\n                return !!this.record[labelsField]\n                    ? (this.labelsService.removePrivatePrefix(\n                          this.record[labelsField]\n                      ) as string[])\n                    : ([] as string[]);\n            }\n            return this.record[labelsField] || [];\n        } else {\n            return [];\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";\nimport {LabelsModule} from \"../labels.module\";\n\nimport {BsRenameLabel} from \"./rename-label/rename-label\";\nimport {BsLabelsMenuComponent} from \"./labels-menu/labels-menu.component\";\n\nimport {LABELS_COMPONENTS, LabelsComponents} from \"../labels.service\";\nimport { BsDeleteLabel } from './delete-label/delete-label';\nimport { BsAddLabel } from './add-label/add-label';\nimport { BsLabelsAutocompleteComponent } from './labels-autocomplete/labels-autocomplete.component';\nimport { BsEditLabel } from './edit-label/edit-label';\n\nexport const defaultLabelComponents: LabelsComponents = {\n    labelsAutocompleteComponent: BsLabelsAutocompleteComponent,\n    renameModal: BsRenameLabel,\n    deleteModal: BsDeleteLabel,\n    addModal: BsAddLabel,\n    editModal: BsEditLabel\n};\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsModalModule,\n        BsAutocompleteModule,\n        BsActionModule,\n        LabelsModule\n    ],\n    declarations: [\n        BsLabelsAutocompleteComponent,\n        BsRenameLabel,\n        BsLabelsMenuComponent,\n        BsDeleteLabel,\n        BsAddLabel,\n        BsEditLabel\n    ],\n    exports: [\n        LabelsModule,\n        BsLabelsAutocompleteComponent,\n        BsRenameLabel,\n        BsLabelsMenuComponent,\n        BsDeleteLabel,\n        BsAddLabel,\n        BsEditLabel\n    ],\n    providers: [\n        {provide: LABELS_COMPONENTS, useValue: defaultLabelComponents},\n    ]\n})\nexport class BsLabelsModule {\n}\n","export default {\n    \"labels\": {\n        \"labels\": \"Labels\",\n        \"publicLabels\": \"Public Labels\",\n        \"privateLabels\": \"Private Labels\",\n        \"public\": \"Public\",\n        \"private\": \"Private\",\n        \"selectLabel\": \"Select label(s)\",\n        \"deleteLabelAreYouSure\": \"Are you sure you want to remove the label: {name}?\",\n        \"bulkAddLabelAreYouSure\": \"Are you sure you want to bulk add the label: {name} to the results of the current query?\",\n        \"bulkRemoveLabelAreYouSure\": \"Are you sure you want to bulk remove the label: {name} to the results of the current query?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Add public label\",\n        \"selectPublicLabelTitle\": \"Select public label\",\n        \"removePublicLabelTitle\": \"Remove public label\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Add private label\",\n        \"selectPrivateLabelTitle\": \"Select private label\",\n        \"removePrivateLabelTitle\": \"Remove private label\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Rename Label(s) globally\",\n        \"btnRename\": \"Rename\",\n        \"newLabel\": \"New Label\",\n        \"oldLabels\": \"Old label(s)\",\n        \"alertText\": \"This action renames the label(s) in the index and is irreversible\",\n        \"successFeedback\": \"Label(s) renamed in the index\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Delete label(s) globally\",\n        \"btnDelete\": \"Delete\",\n        \"alertText\": \"This action deletes the selected label(s) from the index and is irreversible\",\n        \"successFeedback\": \"Label(s) deleted from the index\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Remove label(s) from the current results\",\n        \"btnBulkRemove\": \"Remove\",\n        \"alertText\": \"This action removes the selected label(s) from all results reported by the engine (not only from the first page)\",\n        \"successFeedback\": \"Label(s) removed from all results reported by the engine\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Add label(s) to the current results\",\n        \"btnBulkAdd\": \"Add\",\n        \"alertText\": \"This action assigns the selected label(s) to all results reported by the engine (not only to the first page)\",\n        \"infoText\": \"Press 'Enter' to add a new label that does not exist in the suggestions\",\n        \"successFeedback\": \"Label(s) assigned to all results reported by the engine\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Edit the label(s) of the selected result(s)\",\n        \"btnEdit\": \"Save\",\n        \"alertText\": \"This action edits the label(s) of the selected result(s)\",\n        \"infoText\": \"Press 'Enter' to add a new label that does not exist in the suggestions\",\n        \"labelsToBeRemoved\": \"Label(s) to be removed\",\n        \"labelsToBeAdded\": \"Label(s) to be added\",\n        \"successFeedback\": \"Label(s) of the selected result(s) edited\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    }\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\nimport _enLabels from \"./en\";\nimport _frLabels from \"./fr\";\nimport _deLabels from \"./de\";\n\nconst enLabels = Utils.merge({}, _enLabels, enSearch, enModal);\nconst frLabels = Utils.merge({}, _frLabels, frSearch, frModal);\nconst deLabels = Utils.merge({}, _deLabels, deSearch, deModal);\n\nexport { enLabels, frLabels, deLabels };\n","export default {\n    \"labels\": {\n        \"labels\": \"Libellés\",\n        \"publicLabels\": \"Libellés publics\",\n        \"privateLabels\": \"Libellés privés\",\n        \"public\": \"Public\",\n        \"private\": \"Privé\",\n        \"selectLabel\": \"Sélectionner le(s) libellé(s)\",\n        \"deleteLabelAreYouSure\": \"Etes-vous sûr de vouloir effacer le libellé: {name} ?\",\n        \"bulkAddLabelAreYouSure\": \"Etes-vous sûr de vouloir ajouter en lot le libellé: {name} aux résultats de la requête courante ? \",\n        \"bulkRemoveLabelAreYouSure\": \"Etes-vous sûr de vouloir enlever en lot le libellé: {name} aux résultats de la requête courante ?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Ajouter un libellé public\",\n        \"selectPublicLabelTitle\": \"Sélectionner le libellé public\",\n        \"removePublicLabelTitle\": \"Supprimer le libellé public\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Ajouter un libellé privé\",\n        \"selectPrivateLabelTitle\": \"Sélectionner le libellé privé\",\n        \"removePrivateLabelTitle\": \"Supprimer le libellé privé\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Renommer le(s) libellé(s) globalement\",\n        \"btnRename\": \"Renommer\",\n        \"newLabel\": \"Nouveau Libellé\",\n        \"oldLabels\": \"Ancien(s) libellé(s)\",\n        \"alertText\": \"Cette action renomme le(s) libellé(s) sélectionné(s) dans l'index et est irréversible\",\n        \"successFeedback\": \"Libellé(s) renommé(s) dans l'index\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Supprimer le(s) libellé(s) globalement\",\n        \"btnDelete\": \"Supprimer\",\n        \"alertText\": \"Cette action supprime le(s) libellé(s) sélectionné(s) de l'index et est irréversible\",\n        \"successFeedback\": \"Libellé(s) supprimé(s) de l'index\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Enlever le(s) libellé des résultats courants\",\n        \"btnBulkRemove\": \"Enlever\",\n        \"alertText\": \"Cette action enlève le(s) libellé(s) sélectionné(s) de tous les résultats remontés par le moteur (pas seulement de la première page)\",\n        \"successFeedback\": \"Libellé(s) enlevé(s) de tous les résultats remontés par le moteur\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Ajouter le(s) libellé(s) aux résultats courants\",\n        \"btnBulkAdd\": \"Ajouter\",\n        \"alertText\": \"Cette action ajoute le(s) libellé(s) sélectionné(s) à tous les résultats remontés par le moteur (pas seulement à la première page)\",\n        \"infoText\": \"Appuyez sur 'Entrée' pour ajouter un nouveau libellé qui n'existe pas dans les suggestions\",\n        \"successFeedback\": \"Libellé(s) ajouté(s) à tous les résultats remontés par le moteur\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Editer le(s) libellé(s) de(s) résultat(s) sélectionné(s)\",\n        \"btnEdit\": \"Sauvegarder\",\n        \"alertText\": \"Cette action édite le(s) libellé(s) de(s) résultat(s) sélectionné(s)\",\n        \"infoText\": \"Appuyez sur 'Entrée' pour ajouter un nouveau libellé qui n'existe pas dans les suggestions\",\n        \"labelsToBeRemoved\": \"Libellé(s) à enlever\",\n        \"labelsToBeAdded\": \"Libellé(s) à ajouter\",\n        \"successFeedback\": \"Libellé(s) de(s) résultat(s) sélectionné(s) édité(s)\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    }\n};\n","export default {\n    \"labels\": {\n        \"labels\": \"Etiketten\",\n        \"publicLabels\": \"Öffentliche Etiketten\",\n        \"privateLabels\": \"Private Etiketten\",\n        \"public\": \"Öffentliche\",\n        \"private\": \"Private\",\n        \"selectLabel\": \"Etikett(en) auswählen\",\n        \"deleteLabelAreYouSure\": \"Möchten Sie dieses Etikett wirklich löschen: {name}?\",\n        \"bulkAddLabelAreYouSure\": \"Möchten Sie wirklich das Etikett {name} zu allen Ergebnissen der aktuellen Suche hinzufügen?\",\n        \"bulkRemoveLabelAreYouSure\": \"Möchten Sie wirklich das Etikett {name} von allen Ergebnissen der aktuellen Suche entfernen?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Öffentliches Etikett hinzufügen\",\n        \"selectPublicLabelTitle\": \"Öffentliches Etikett auswählen\",\n        \"removePublicLabelTitle\": \"Öffentliches Etikett entfernen\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Privates Etikett hinzufügen\",\n        \"selectPrivateLabelTitle\": \"Privates Etikett auswählen\",\n        \"removePrivateLabelTitle\": \"Privates Etikett entfernen\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Etikett(en) unbenennen\",\n        \"btnRename\": \"Umbennen\",\n        \"newLabel\": \"Neuen Etikett\",\n        \"oldLabels\": \"Altes Etikett(en)\",\n        \"alertText\": \"Diese Aktion benennt das (die) ausgewählte(n) Etikett(en) im Index um und ist unwiderruflich\",\n        \"successFeedback\": \"Etikett(en), das (die) im Index umbenannt wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Etikett(en) global entfernen\",\n        \"btnDelete\": \"Löschen\",\n        \"alertText\": \"Diese Aktion löscht das (die) ausgewählte(n) Etikett(en) aus dem Index und ist unwiderruflich\",\n        \"successFeedback\": \"Etikett(en), das (die) aus dem Index gelöscht wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Etikett(en) von aktuellen Ergebnissen entfernen\",\n        \"btnBulkRemove\": \"Entfernen\",\n        \"alertText\": \"Diese Aktion löscht das (die) ausgewählte(n) Etikett(en) aus allen gefundenen Ergebnisse (nicht nur die der ersten Seite)\",\n        \"successFeedback\": \"Etikett(en), das (die) aus allen gefundenen Ergebnissen gelöscht wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Etikett(en) zu aktuellen Ergebnissen hinzufügen\",\n        \"btnBulkAdd\": \"Hinzufügen\",\n        \"alertText\": \"Diese Aktion fügt das (die) ausgewählte(n) Etikett(en) zu allen gefundenen Ergebnissen (nicht nur denen der ersten Seite) hinzu\",\n        \"infoText\": \"klicken Sie auf 'Enter', um ein neues Etikett, das nicht in den Vorschlägen existiert, hinzuzufügen\",\n        \"successFeedback\": \"Etikett(en), das (die) allen gefundenen Ergebnissen hinzugefügt wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Bearbeiten des (der) Etikett(en) aus dem (den) ausgewählten Ergebnis(sen)\",\n        \"btnEdit\": \"speichern\",\n        \"alertText\": \"Diese Aktion bearbeitet das (die) Etikett(en) des (der) ausgewählten Ergebnisse(s)\",\n        \"infoText\": \"klicken Sie auf 'Enter', um ein neues Etikett, das nicht in den Vorschlägen existiert, hinzuzufügen\",\n        \"labelsToBeRemoved\": \"Zu löschende(s) Etikett(en)\",\n        \"labelsToBeAdded\": \"Hinzuzufügende(s) Etikett(en)\",\n        \"successFeedback\": \"Etikett(en), das (die) zu dem (den) ausgewählten Ergebnis(sen) bearbeit(en)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    }\n};\n"]}