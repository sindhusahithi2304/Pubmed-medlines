{"version":3,"file":"sinequa-components-saved-queries.js","sources":["../../../projects/components/saved-queries/saved-queries.service.ts","../../../projects/components/saved-queries/recent-queries.service.ts","../../../projects/components/saved-queries/recent-documents.service.ts","../projects/components/saved-queries/bootstrap/edit-saved-query/edit-saved-query.ts","../projects/components/saved-queries/bootstrap/edit-saved-query/edit-saved-query.html","../projects/components/saved-queries/bootstrap/export-query/export-query.html","../projects/components/saved-queries/bootstrap/export-query/export-query.ts","../projects/components/saved-queries/bootstrap/manage-saved-queries/manage-saved-queries.html","../projects/components/saved-queries/bootstrap/manage-saved-queries/manage-saved-queries.ts","../projects/components/saved-queries/bootstrap/query-exporter/query-exporter.ts","../projects/components/saved-queries/bootstrap/query-exporter/query-exporter.html","../projects/components/saved-queries/bootstrap/saved-queries-menu/saved-queries-menu.component.html","../projects/components/saved-queries/bootstrap/saved-queries-menu/saved-queries-menu.component.ts","../projects/components/saved-queries/bootstrap/facet-saved-queries/facet-saved-queries.html","../projects/components/saved-queries/bootstrap/facet-saved-queries/facet-saved-queries.ts","../projects/components/saved-queries/bootstrap/facet-recent-queries/facet-recent-queries.html","../projects/components/saved-queries/bootstrap/facet-recent-queries/facet-recent-queries.ts","../projects/components/saved-queries/bootstrap/facet-recent-documents/facet-recent-documents.html","../projects/components/saved-queries/bootstrap/facet-recent-documents/facet-recent-documents.ts","../../projects/components/saved-queries/bootstrap/saved-queries.module.ts","../../projects/components/saved-queries/messages/en.ts","../../projects/components/saved-queries/messages/fr.ts","../../projects/components/saved-queries/messages/de.ts","../../projects/components/saved-queries/messages/index.ts","../../../projects/components/saved-queries/sinequa-components-saved-queries.ts"],"sourcesContent":["import {Injectable, InjectionToken, Inject, Type, OnDestroy} from \"@angular/core\";\nimport { HttpResponse } from '@angular/common/http';\nimport {Subject, Observable, throwError} from \"rxjs\";\nimport {UserSettingsWebService, QueryExportWebService, ExportSourceType, ExportOutputFormat,\n    DownloadWebService, AuditEvents, AuditEvent} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {AppService, Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Action} from '@sinequa/components/action';\n\n\nexport interface SavedQuery {\n    name: string;\n    description?: string;\n    query: Query;\n}\n\n// from core/models/audit\nexport const enum SavedQueryEventType {\n    Loaded = \"SavedQuery_Loaded\",\n    Patched = \"SavedQuery_Patched\",\n\n    Add = \"SavedQuery_Add\",\n    Delete = \"SavedQuery_Delete\",\n    DeleteAll = \"SavedQuery_DeleteAll\",\n    Rename = \"SavedQuery_Rename\",\n    Update = \"SavedQuery_Update\",\n\n    Search = \"Search_SavedQuery\"\n}\n\n// Types of events triggering a change event\nexport const SAVED_QUERIES_CHANGE_EVENTS = [\n    SavedQueryEventType.Add,\n    SavedQueryEventType.Delete,\n    SavedQueryEventType.DeleteAll,\n    SavedQueryEventType.Rename,\n    SavedQueryEventType.Update\n];\n\n\n// CRUD Events\nexport interface SavedQueryChangeEvent {\n    type: SavedQueryEventType;\n    savedquery?: SavedQuery;\n}\n\n\n// Model expected by the ManageSavedQueries Modal.\nexport interface ManageSavedQueriesModel {\n    savedQueries: SavedQuery[];\n    auditEvents?: AuditEvent[];\n}\n\n// Data model of the Export dialog.\nexport interface ExportQueryModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n    exportedColumns?: string[];\n}\n\n/**\n * The modal types are unknown to this service.\n * The module using this service must provide these components\n * in their forRoot() method\n *\n * Example below:\n *\n *     public static forRoot(): ModuleWithProviders<SavedQueriesModule> {\n        return {\n            ngModule: SavedQueriesModule,\n            providers: [\n                {\n                    provide: SAVEDQUERY_COMPONENTS,\n                    useValue: {\n                        editSavedQueryModal: EditSavedQuery,\n                        manageSavedQueriesModal: ManageSavedQueries,\n                        exportSavedQueryModal: ExportQuery\n                    }\n                },\n                SavedQueriesService,\n                SelectionService\n            ]\n        };\n    }\n *\n */\nexport interface SavedQueryComponents {\n    editSavedQueryModal: Type<any>;\n    manageSavedQueriesModal: Type<any>;\n    exportSavedQueryModal: Type<any>;\n}\nexport const SAVEDQUERY_COMPONENTS = new InjectionToken<SavedQueryComponents>('SAVEDQUERY_COMPONENTS');\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SavedQueriesService implements OnDestroy {\n\n    private readonly _events = new Subject<SavedQueryChangeEvent>();\n    private readonly _changes = new Subject<SavedQueryChangeEvent>();\n\n    // An application may want to alter the action (icon, etc.)\n    public selectedRecordsAction: Action;\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        public modalService: ModalService,\n        public appService: AppService,\n        public queryExportService: QueryExportWebService,\n        public downloadService: DownloadWebService,\n        public selectionService: SelectionService,\n        @Inject(SAVEDQUERY_COMPONENTS) public savedQueryComponents: SavedQueryComponents\n    ){\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Menus need to be rebuilt\n            this._events.next({type: SavedQueryEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(SAVED_QUERIES_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n        // Initialize selection action\n        this.selectedRecordsAction = new Action({\n            icon: 'fas fa-download',\n            title: 'msg#exportQuery.btnTitle',\n            action: (_item: Action, _event: Event) => {\n                this.exportModal(this.selectionService.haveSelectedRecords\n                    ? ExportSourceType.Selection\n                    : ExportSourceType.Result);\n            },\n        });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's saved queries.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of saved queries if it does not already exist.\n     */\n    public get savedqueries() : SavedQuery[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"savedQueries\"])\n            this.userSettingsService.userSettings[\"savedQueries\"] = [];\n        return this.userSettingsService.userSettings[\"savedQueries\"];\n    }\n\n    /**\n     * Triggers any event among SavedQueryChangeEvent\n     * (use for fine-grained control of saved queries workflow)\n     */\n    public get events() : Subject<SavedQueryChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of saved queries\n     * (use to refresh saved queries menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<SavedQueryChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one saved query\n     */\n    public get hasSavedQuery(): boolean {\n        return this.savedqueries.length > 0;\n    }\n\n    /**\n     * @returns a saved query with the given name or null if it does not exist\n     * @param name\n     */\n    public savedquery(name: string): SavedQuery | undefined {\n        const i = this.savedqueryIndex(name);\n        return i>= 0? this.savedqueries[i] : undefined;\n    }\n\n    private savedqueryIndex(name: string): number {\n        for (let i = 0, ic = this.savedqueries.length; i < ic; i++) {\n            const savedquery = this.savedqueries[i];\n            if (savedquery && savedquery.name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n\n    // CRUD\n\n    /**\n     * Creates a new saved query unless it already exists.\n     * Emits an savedquery event.\n     * Update the data on the server.\n     * @param savedquery the savedquery to create\n     * @returns true if savedquery was created\n     */\n    public createSavedQuery(savedquery: SavedQuery) : boolean {\n\n        if(this.savedqueryIndex(savedquery.name) >= 0)\n            return false; // This savedquery already exists\n\n        this.savedqueries.unshift(savedquery);\n        this._events.next({type : SavedQueryEventType.Add, savedquery});\n        this.patchSavedQueries([{\n            type: SavedQueryEventType.Add,\n            detail: {\n                savedquery: savedquery.name\n            }\n        }]);\n        return true;\n    }\n\n    /**\n     * Update the saved query at the given index, unless a saved query with the same name\n     * already exists in the list of saved queries.\n     * Emits an Saved Query event.\n     * Update the data on the server.\n     * @param savedquery the saved query to update\n     * @param index the index at which to update the saved query\n     * @returns true if saved query was updated\n     */\n    public updateSavedQuery(savedquery: SavedQuery, index : number) : boolean {\n\n        const prevIndex = this.savedqueryIndex(savedquery.name);\n        if(prevIndex !== -1 && index !== prevIndex)\n            return false; // A saved query with the same name exists at a different index\n\n        if(index >= 0 && index < this.savedqueries.length){\n\n            this.savedqueries.splice(index, 1, savedquery);\n            this._events.next({type : SavedQueryEventType.Update, savedquery});\n            this.patchSavedQueries([\n                {\n                    type: SavedQueryEventType.Update,\n                    detail: {\n                        savedquery: savedquery.name\n                    }\n                }\n            ]);\n            return true;\n\n        }\n        return false;   // This saved query does not exist\n    }\n\n    /**\n     * Updates the full list of saved queries.\n     * Emits an SavedQuery event.\n     * Update the data on the server.\n     * @param savedqueries the new list of saved queries\n     * @param auditEvents the list of audit events to log\n     */\n    public updateSavedQueries(savedqueries : SavedQuery[], auditEvents?: AuditEvents) : boolean {\n        Utils.arraySet(this.savedqueries, savedqueries);\n        this._events.next({type : SavedQueryEventType.Update});\n        this.patchSavedQueries(auditEvents);\n        return true;\n    }\n\n    /**\n     * Deletes the given SavedQuery (based on its name)\n     * Emits an SavedQuery event.\n     * Update the data on the server.\n     * @param savedquery\n     * @returns true if saved query was deleted\n     */\n    public deleteSavedQuery(savedquery: SavedQuery) : boolean {\n\n        const index = this.savedqueryIndex(savedquery.name);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.savedqueries.splice(index, 1);\n        this._events.next({type : SavedQueryEventType.Delete, savedquery});\n        this.patchSavedQueries([\n            {\n                type: SavedQueryEventType.Delete,\n                detail: {\n                    savedquery: savedquery.name\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Sets this saved query to the current search context, using the search service\n     */\n    public setSavedQueryToCurrentQuery(savedquery: SavedQuery){\n        savedquery.query = Query.copy(this.searchService.query);\n    }\n\n    /**\n     * Updates Saved Queries in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchSavedQueries(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({savedQueries: this.savedqueries}, auditEvents)\n            .subscribe(\n                next => {\n                    this._events.next({type: SavedQueryEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Saved queries!\", error);\n                }\n            );\n    }\n\n\n    public rssHref(item: SavedQuery) {\n        return Utils.addSearchParams(this.appService.appWebService.makeUrl(\"query.rss\"),\n            {\n                app: this.appService.appName,\n                name: item.name\n            });\n    }\n\n\n    public hasRssEnabled(): boolean {\n        return !!this.appService.app && !!this.appService.app.queryRssEnabled;\n    }\n\n\n    /**\n     * Checks if there is a configuration for the export web service.\n     *\n     * @returns true if there is a configuration for the export web service.\n     */\n    public hasExportConfig(): boolean {\n        return !!this.appService.app && !!this.appService.app.queryExport;\n    }\n\n\n    public download(model : ExportQueryModel): Observable<HttpResponse<Blob>> {\n        return this.downloadService.download(this.requestExport(model));\n    }\n\n    private requestExport(model: ExportQueryModel): Observable<HttpResponse<Blob>> {\n        switch (model.export) {\n            case ExportSourceType.Result:\n                return this.queryExportService.exportResult(\n                    model.webService,\n                    this.searchService.query,\n                    this.searchService.results,\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            case ExportSourceType.Selection:\n                return this.queryExportService.exportSelection(\n                    model.webService,\n                    this.searchService.query,\n                    this.searchService.results,\n                    this.selectionService.getSelectedIds(),\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            case ExportSourceType.SavedQuery:\n                return this.queryExportService.exportSavedQuery(\n                    model.webService,\n                    model.queryName || \"\",\n                    model.format,\n                    model.maxCount,\n                    model.exportedColumns,\n                );\n            default:\n                console.log(\n                    'QueryExporter.export unexpected export type: ',\n                    ExportSourceType[model.export]);\n                return throwError('QueryExporter.export unexpected export type: ');\n        }\n    }\n\n\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this saved query.\n     * @param saved query\n     * @returns the search service promise\n     */\n    searchSavedQuery(savedquery: SavedQuery, path?: string): Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(savedquery.query)));\n        this._events.next({type: SavedQueryEventType.Search, savedquery});\n        return this.searchService.search({ path: path }, {\n            type: SavedQueryEventType.Search,\n            detail: {\n                \"saved-query\": savedquery.name\n            }\n        });\n    }\n\n    /**\n     * Opens a dialog allowing a user to save the current query.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true if the query was saved.\n     */\n    createSavedQueryModal(query: Query = this.searchService.query) : Promise<boolean> {\n        const savedQuery: SavedQuery = {\n            name: query.text || \"\",\n            query: Query.copy(query)\n        };\n        return this.modalService.open(this.savedQueryComponents.editSavedQueryModal, {model: savedQuery})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n\n                    const index = this.savedqueryIndex(savedQuery.name);\n                    if (index !== -1) {\n\n                        return this.modalService.yesNo(\"msg#savedQueries.savedQueryAlreadyExists\")\n                            .then((result) => {\n                                if (result === ModalResult.Yes) {\n                                    return this.updateSavedQuery(savedQuery, index);\n                                }\n                                return false;\n                            });\n\n                    } else {\n                        return this.createSavedQuery(savedQuery);\n                    }\n                }\n                return false;\n            });\n    }\n\n    /**\n     * Opens a dialog allowing a user to reorganize and edit the\n     * list of saved queries.\n     * @returns a boolean promise resolved when the user closes the dialog\n     * the result is true is the list was updated.\n     */\n    public manageSavedQueriesModal() : Promise<boolean> {\n\n        const model: ManageSavedQueriesModel = { savedQueries: Utils.copy(this.savedqueries) };\n\n        return this.modalService.open(this.savedQueryComponents.manageSavedQueriesModal, {model})\n            .then((result) => {\n                if (result === ModalResult.OK) {\n                    return this.updateSavedQueries(model.savedQueries, model.auditEvents);\n                }\n                return false;\n            });\n\n    }\n\n    /**\n     * Exports a query via a modal dialog.\n     *\n     * @param exportType type of export to perform (selection, saved query, results)\n     * @param savedQuery The saved query\n     */\n    public exportModal(exportType: ExportSourceType, savedQuery?: SavedQuery)\n            : Promise<ModalResult> {\n\n        if (!this.hasExportConfig() || !this.appService.app) {\n            return Promise.resolve(ModalResult.Cancel);\n        }\n\n        const model: ExportQueryModel = {\n            format: ExportOutputFormat.Csv,\n            export: exportType,\n            webService: this.appService.app.queryExport\n        };\n\n        if (savedQuery && exportType === ExportSourceType.SavedQuery) {\n            model.queryName = savedQuery.name;\n        }\n\n        return this.modalService.open(this.savedQueryComponents.exportSavedQueryModal, {model});\n    }\n\n    notifyOpenSavedQuery(savedquery: SavedQuery) {\n        this._events.next({type: SavedQueryEventType.Search, savedquery});\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import {Injectable, Optional, OnDestroy, Inject, InjectionToken} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents} from \"@sinequa/core/web-services\";\nimport {Query} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\n\n\nexport interface RecentQuery {\n    query: Query;\n    date: Date;\n}\n\n\n// from core/models/audit\nexport const enum RecentQueryEventType {\n    Loaded = \"RecentQuery_Loaded\",\n    Patched = \"RecentQuery_Patched\",\n    Add = \"RecentQuery_Add\",\n    Update = \"RecentQuery_Update\",\n    Delete = \"RecentQuery_Delete\",\n    Search = \"Search_RecentQuery\"\n}\n\n// Types of events triggering a change event\nexport const RECENT_QUERIES_CHANGE_EVENTS = [\n    RecentQueryEventType.Add,\n    RecentQueryEventType.Update,\n    RecentQueryEventType.Delete,\n];\n\n\n// CRUD Events\nexport interface RecentQueryChangeEvent {\n    type: RecentQueryEventType;\n    recentquery?: RecentQuery;\n}\n\nexport const MAX_QUERIES = new InjectionToken(\"MAX_QUERIES\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RecentQueriesService implements OnDestroy {\n\n    private readonly _events = new Subject<RecentQueryChangeEvent>();\n    private readonly _changes = new Subject<RecentQueryChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        @Optional() @Inject(MAX_QUERIES) private maxQueries: number,\n    ){\n        if(!this.maxQueries){\n            this.maxQueries = 20;\n        }\n\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Revive dates\n            this.recentqueries.forEach(rq => {\n                if (Utils.isString(rq.date)) {\n                    const date = Utils.toDate(rq.date);\n                    if (date) {\n                        rq.date = date;\n                    }\n                }\n            });\n            // ==> Menus need to be rebuilt\n            this._events.next({type: RecentQueryEventType.Loaded});\n        });\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(RECENT_QUERIES_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n        // Listen to search service and store queries\n        this.searchService.queryStream.subscribe((query) => {\n                if (query) {\n                    this.addRecentQuery({query: query.copy(), date: new Date()});\n                }\n            });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's recent queries.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of recent queries if it does not already exist.\n     */\n    public get recentqueries() : RecentQuery[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"recentQueries\"])\n            this.userSettingsService.userSettings[\"recentQueries\"] = [];\n        return this.userSettingsService.userSettings[\"recentQueries\"];\n    }\n\n    /**\n     * Triggers any event among RecentQueryChangeEvent\n     * (use for fine-grained control of recent queries workflow)\n     */\n    public get events() : Subject<RecentQueryChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of recent queries\n     * (use to refresh recent queries menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<RecentQueryChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one recent query\n     */\n    public get hasRecentQuery(): boolean {\n        return this.recentqueries.length > 0;\n    }\n\n    /**\n     * @returns a recent query with the given name or undefined if it does not exist\n     * @param name\n     */\n    public recentquery(text: string): RecentQuery | undefined {\n        const i = this.recentqueryIndex(text);\n        return i>= 0? this.recentqueries[i] : undefined;\n    }\n\n    private recentqueryIndex(text: string): number {\n        for (let i = 0, ic = this.recentqueries.length; i < ic; i++) {\n            const recentquery = this.recentqueries[i];\n            if (recentquery && recentquery.query.text && recentquery.query.text.toLowerCase() === text.toLowerCase()) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private comparator(q1: RecentQuery, q2: RecentQuery){\n        return q2.date.getTime() - q1.date.getTime();\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new recent query unless it already exists, in which case the existing query is updated.\n     * Emits an recentquery event.\n     * Update the data on the server.\n     * @param recentquery the recentquery to create\n     * @returns true if recentquery was created\n     */\n    public addRecentQuery(recentquery: RecentQuery) : boolean {\n\n        if(!recentquery.query || !recentquery.query.text || recentquery.query.text.trim() === ''){\n            return false;\n        }\n\n        const i = this.recentqueryIndex(recentquery.query.text); // If the query already exists\n        if(i >= 0){\n            // Ignore identical queries issued within a certain time window (1s)\n            // to avoid flooding the server. NB the request flooding mitigation in\n            // SqHttpClient will not work in this case as the request payload includes\n            // a timestamp\n            if (Math.abs(recentquery.date.getTime() - this.recentqueries[i].date.getTime()) < 1000) {\n                if (Utils.equals(this.recentqueries[i].query, recentquery.query)) {\n                    return false;\n                }\n            }\n            this.recentqueries[i].date = recentquery.date; // Update the date of the existing query\n            this.recentqueries[i].query = recentquery.query;\n            this._events.next({type : RecentQueryEventType.Update, recentquery: this.recentqueries[i]});\n        }\n        else {\n            this.recentqueries.push(recentquery);\n            this._events.next({type : RecentQueryEventType.Add, recentquery});\n        }\n\n        // Sort the list\n        this.recentqueries.sort(this.comparator);\n\n        // Truncate the list\n        if(this.maxQueries >=0 )\n            this.recentqueries.splice(this.maxQueries);\n\n        this.patchRecentQueries(); // No need to emit an \"Add\" audit event, since it is redundant with the main search API\n        return true;\n    }\n\n    /**\n     * Deletes the given RecentQuery (based on its name)\n     * Emits an RecentQuery event.\n     * Update the data on the server.\n     * @param recentquery\n     * @returns true if recent query was deleted\n     */\n    public deleteRecentQuery(recentquery: RecentQuery) : boolean {\n\n        const index = this.recentqueryIndex(recentquery.query.text || \"\");\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.recentqueries.splice(index, 1);\n        this._events.next({type : RecentQueryEventType.Delete, recentquery});\n        this.patchRecentQueries([\n            {\n                type: RecentQueryEventType.Delete,\n                detail: {\n                    recentquery: recentquery.query.text\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Updates Recent Queries in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchRecentQueries(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({recentQueries: this.recentqueries}, auditEvents)\n            .subscribe(\n                next => {\n                    this._events.next({type: RecentQueryEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Recent queries!\", error);\n                }\n            );\n    }\n\n\n    // EVENT HANDLERS (Menus)\n\n    /**\n     * Uses the SearchService to perform a search returning all\n     * the documents matching this recent query.\n     * @param recentquery\n     * @returns the search service promise\n     */\n    searchRecentQuery(recentquery: RecentQuery, path?: string): Promise<boolean> {\n        this.searchService.setQuery(Utils.extend(this.searchService.makeQuery(), Utils.copy(recentquery.query)));\n        this._events.next({type: RecentQueryEventType.Search, recentquery});\n        return this.searchService.search({ path: path }, {\n            type: RecentQueryEventType.Search,\n            detail: {\n                recentquery: recentquery.query.text\n            }\n        });\n    }\n\n    notifyOpenRecentQuery(recentquery: RecentQuery): void {\n        this._events.next({type: RecentQueryEventType.Search, recentquery});\n    }\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}\n","import {Injectable, Optional, OnDestroy, Inject, InjectionToken} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {UserSettingsWebService, AuditEvents, Record} from \"@sinequa/core/web-services\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Utils} from \"@sinequa/core/base\";\n\n\nexport interface RecentDocument {\n    /**\n     * Fields from Record that we want to store/display/index for recent documents\n     */\n    id: string;\n    title: string;\n    url1: string;\n    treepath: string[];\n    docformat: string;\n    authors: string[];\n\n    /**\n     * Date at which the document was last opened\n     */\n    date: Date;\n\n    /**\n     * Store whether the doc was opened in the preview or directly via url\n     */\n    original: boolean;\n}\n\n\n// from core/models/audit\nexport const enum RecentDocumentEventType {\n    Loaded = \"RecentDocument_Loaded\",\n    Patched = \"RecentDocument_Patched\",\n    Add = \"RecentDocument_Add\",\n    Update = \"RecentDocument_Update\",\n    Delete = \"RecentDocument_Delete\",\n    Search = \"Search_RecentDocument\"\n}\n\n// Types of events triggering a change event\nexport const RECENT_DOCUMENTS_CHANGE_EVENTS = [\n    RecentDocumentEventType.Add,\n    RecentDocumentEventType.Update,\n    RecentDocumentEventType.Delete,\n];\n\n\n// CRUD Events\nexport interface RecentDocumentChangeEvent {\n    type: RecentDocumentEventType;\n    recentdocument?: RecentDocument;\n}\n\nexport const MAX_DOCUMENTS = new InjectionToken(\"MAX_DOCUMENTS\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RecentDocumentsService implements OnDestroy {\n\n    private readonly _events = new Subject<RecentDocumentChangeEvent>();\n    private readonly _changes = new Subject<RecentDocumentChangeEvent>();\n\n    constructor(\n        public userSettingsService: UserSettingsWebService,\n        public searchService: SearchService,\n        @Optional() @Inject(MAX_DOCUMENTS) private maxDocuments: number,\n    ){\n        if(!this.maxDocuments){\n            this.maxDocuments = 20;\n        }\n\n        // Listen to the user settings\n        this.userSettingsService.events.subscribe(event => {\n            // E.g. new login occurs\n            // ==> Revive dates\n            this.recentdocuments.forEach(rd => {\n                if (Utils.isString(rd.date)) {\n                    const date = Utils.toDate(rd.date);\n                    if (date) {\n                        rd.date = date;\n                    }\n                }\n            });\n            // ==> Menus need to be rebuilt\n            this.events.next({type: RecentDocumentEventType.Loaded});\n        });\n\n        // Listen to own events, to trigger change events\n        this._events.subscribe(event => {\n            if(RECENT_DOCUMENTS_CHANGE_EVENTS.indexOf(event.type) !== -1){\n                this.changes.next(event);\n            }\n        });\n\n        /**\n         * Subscribe to the search service to capture \"open-original-document\" event\n         * and add documents to this service\n         */\n        this.searchService.events.subscribe(event => {\n            if(event.type === \"open-original-document\" && event.record){\n                this.addDocument(event.record, true);\n            }\n        });\n    }\n\n\n    // GETTERS\n\n    /**\n     * Returns the list of this user's recent documents.\n     * The list is stored in the user settings (this is a redirection).\n     * Using this service creates the list of recent documents if it does not already exist.\n     */\n    public get recentdocuments() : RecentDocument[]{\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"recentDocuments\"])\n            this.userSettingsService.userSettings[\"recentDocuments\"] = [];\n        return this.userSettingsService.userSettings[\"recentDocuments\"];\n    }\n\n    /**\n     * Triggers any event among RecentDocumentChangeEvent\n     * (use for fine-grained control of recent documents workflow)\n     */\n    public get events() : Subject<RecentDocumentChangeEvent> {\n        return this._events;\n    }\n\n    /**\n     * Triggers when events affect the list of recent documents\n     * (use to refresh recent documents menus)\n     * Cf. CHANGE_EVENTS list\n     */\n    public get changes() : Subject<RecentDocumentChangeEvent> {\n        return this._changes;\n    }\n\n    /**\n     * @returns true if there is at least one recent document\n     */\n    public get hasRecentDocument(): boolean {\n        return this.recentdocuments.length > 0;\n    }\n\n    /**\n     * @returns a recent document with the given name or null if it does not exist\n     * @param name\n     */\n    public recentdocument(text: string): RecentDocument | undefined {\n        const i = this.recentdocumentIndex(text);\n        return i>= 0? this.recentdocuments[i] : undefined;\n    }\n\n    private recentdocumentIndex(id: string): number {\n        for (let i = 0, ic = this.recentdocuments.length; i < ic; i++) {\n            const recentdocument = this.recentdocuments[i];\n            if (recentdocument && recentdocument.id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private comparator(q1: RecentDocument, q2: RecentDocument){\n        return q2.date.getTime() - q1.date.getTime();\n    }\n\n\n    // CRUD\n\n    /**\n     * Creates a new recent document unless it already exists, in which case the existing document is updated.\n     * Emits an recentdocument event.\n     * Update the data on the server.\n     * @param record Record to add to the service\n     * @param original Whether the original doc was opened or the preview\n     * @returns true if recentdocument was created\n     */\n    public addDocument(record: Record, original: boolean) {\n        if(record){\n            return this.addRecentDocument({\n                id: record.id,\n                title: record.title,\n                url1: record.url1,\n                treepath: record.treepath,\n                docformat: record.docformat,\n                authors: record.authors,\n\n                date: new Date(),\n                original: original\n            });\n        }\n        return false;\n    }\n\n    /**\n     * Creates a new recent document unless it already exists, in which case the existing document is updated.\n     * Emits an recentdocument event.\n     * Update the data on the server.\n     * @param recentdocument the recentdocument to create\n     * @returns true if recentdocument was created\n     */\n    public addRecentDocument(recentdocument: RecentDocument) : boolean {\n\n        if(!recentdocument.id){\n            return false;\n        }\n\n        const i = this.recentdocumentIndex(recentdocument.id); // If the document already exists\n        if(i >= 0){\n            this.recentdocuments[i].date = recentdocument.date; // Update the date of the existing document\n            this.events.next({type : RecentDocumentEventType.Update, recentdocument: this.recentdocuments[i]});\n        }\n        else {\n            this.recentdocuments.push(recentdocument);\n            this.events.next({type : RecentDocumentEventType.Add, recentdocument: recentdocument});\n        }\n\n        // Sort the list\n        this.recentdocuments.sort(this.comparator);\n\n        // Truncate the list\n        if(this.maxDocuments >=0 )\n            this.recentdocuments.splice(this.maxDocuments);\n\n        this.patchRecentDocuments(); // No need to emit an \"Add\" audit event, since it is redundant with the main search API\n        return true;\n    }\n\n    /**\n     * Deletes the given RecentDocument (based on its name)\n     * Emits an RecentDocument event.\n     * Update the data on the server.\n     * @param recentdocument\n     * @returns true if recent document was deleted\n     */\n    public deleteRecentDocument(recentdocument: RecentDocument) : boolean {\n\n        const index = this.recentdocumentIndex(recentdocument.id);\n\n        if(index === -1)\n            return false; // Nothing to delete\n\n        this.recentdocuments.splice(index, 1);\n        this.events.next({type : RecentDocumentEventType.Delete, recentdocument: recentdocument});\n        this.patchRecentDocuments([\n            {\n                type: RecentDocumentEventType.Delete,\n                detail: {\n                    recentdocument: recentdocument.id\n                }\n            }\n        ]);\n        return true;\n    }\n\n    /**\n     * Updates Recent Documents in User settings.\n     * @param auditEvents : Audit Events to be triggered\n     * @returns an Observable which can be used to trigger further events\n     */\n    private patchRecentDocuments(auditEvents?: AuditEvents) {\n        return this.userSettingsService.patch({recentDocuments: this.recentdocuments}, auditEvents)\n            .subscribe(\n                next => {\n                    this.events.next({type: RecentDocumentEventType.Patched});\n                },\n                error => {\n                    console.error(\"Could not patch Recent documents!\", error);\n                }\n            );\n    }\n\n\n    ngOnDestroy() {\n        this.events.complete();\n        this.changes.complete();\n    }\n}","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SavedQuery} from \"../../saved-queries.service\";\n\n@Component({\n    selector: \"sq-edit-saved-query\",\n    templateUrl: \"./edit-saved-query.html\"\n})\nexport class BsEditSavedQuery implements OnInit, OnDestroy {\n    nameControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n    buttons: ModalButton[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: SavedQuery,\n        private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.nameControl = new FormControl(this.model.name, Validators.required);\n        this.form = this.formBuilder.group({\n            savedQueryName: this.nameControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.name = this.nameControl.value;\n            }\n        );\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n}\n","<form name=\"editSavedQuery\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editSavedQuery.title'\" [buttons]=\"buttons\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"savedQueryName\">{{'msg#editSavedQuery.name' | sqMessage}}</label>\n            <input [sqValidation]=\"form\" type=\"text\" class=\"form-control\" id=\"savedQueryName\" formControlName=\"savedQueryName\" spellcheck=\"off\" sqAutofocus>\n        </div>\n    </sq-modal>\n</form>","<form name=\"exportQuery\" novalidate [formGroup]=\"form\">\n    <sq-modal\n        [title]=\"'msg#exportQuery.dialogTitle'\"\n        [buttons]=\"buttons\"\n        [isProcessingState]=\"isDownloading\">\n        <div class=\"form-group sq-form-group\">\n            <label for=\"format\">{{ 'msg#exportQuery.dialogOutputFormat' | sqMessage }}</label>\n            <select [sqValidation]=\"form\" class=\"form-control custom-select\" formControlName=\"format\" id=\"format\" sqAutofocus>\n                <option [value]=\"format\" *ngFor=\"let format of supportedFormats\">{{ outputFormats[format].toUpperCase() }}</option>\n            </select>\n        </div>\n        <div class=\"form-group sq-form-group\">\n            <label\n                for=\"exportedColumns\"\n                title=\"{{ 'msg#exportQuery.exportedColumnsLabelTooltip' | sqMessage }}\"\n            >\n                {{ 'msg#exportQuery.exportedColumns' | sqMessage }}&nbsp;&#9432;\n            </label>\n            <select\n                id=\"exportedColumns\"\n                formControlName=\"exportedColumns\"\n                [sqValidation]=\"form\"\n                class=\"form-control custom-select\"\n                sqAutofocus multiple\n            >\n                <option [value]=\"column\" *ngFor=\"let column of exportableColumns\">{{ column }}</option>\n            </select>\n        </div>\n        <div class=\"form-group sq-form-group\">\n            <label \n                for=\"maxCount\"\n                title=\"{{ 'msg#exportQuery.dialogMaxCountTooltip' | sqMessage:{values: {count: maxCount} } }}\"\n            >{{ 'msg#exportQuery.dialogMaxCount' | sqMessage }}&nbsp;&#9432;</label>\n            <input [sqValidation]=\"form\" type=\"number\" class=\"form-control\" id=\"maxCount\" formControlName=\"maxCount\" autocomplete=\"off\" spellcheck=\"off\">\n        </div>\n        <div class=\"form-group sq-form-group\" *ngIf=\"showSourceChooser()\">\n            <label for=\"export\">{{ 'msg#exportQuery.dialogSourceType' | sqMessage }}</label>\n            <div>\n                <div class=\"form-check form-check-inline\">\n                    <label class=\"form-check-label\">\n                        <input class=\"form-check-input\" type=\"radio\" [checked]=\"sourceChosen(sourceTypes.Result)\" (change)=\"sourceChanged($event, sourceTypes.Result)\" >\n                        {{ 'msg#exportQuery.dialogResult' | sqMessage }}\n                    </label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                    <label class=\"form-check-label\">\n                        <input class=\"form-check-input\" type=\"radio\" [checked]=\"sourceChosen(sourceTypes.Selection)\" (change)=\"sourceChanged($event, sourceTypes.Selection)\"\n                        [disabled]=\"!hasSelectedRecords()\" >\n                        {{ 'msg#exportQuery.dialogSelection' | sqMessage }}\n                    </label>\n                </div>\n            </div>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, OnDestroy, Inject, ChangeDetectorRef} from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ValidationService } from \"@sinequa/core/validation\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { ModalRef, ModalButton, ModalResult, MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { ExportSourceType, ExportOutputFormat, CCWebService, CCApp} from \"@sinequa/core/web-services\";\nimport {SavedQueriesService, ExportQueryModel} from \"../../saved-queries.service\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport { AppService } from '@sinequa/core/app-utils';\n\n/**\n * Component representing the Export dialog where user can customize the query export action.\n *\n */\n@Component({\n    selector: 'sq-export-query',\n    templateUrl: './export-query.html'\n})\nexport class BsExportQuery implements OnInit, OnDestroy {\n\n    public readonly supportedFormats: ExportOutputFormat[] = [\n        ExportOutputFormat.Csv,\n        ExportOutputFormat.Xlsx,\n        ExportOutputFormat.Json\n    ];\n    public readonly outputFormats: typeof ExportOutputFormat = ExportOutputFormat;\n    public readonly sourceTypes: typeof ExportSourceType = ExportSourceType;\n\n    public form: FormGroup;\n    public savedQueries: string[];\n    public buttons: ModalButton[];\n    public isDownloading: boolean;\n    public exportableColumns: string[];\n\n    private formChanges: Subscription;\n\n    maxCount = 1000; // Default max count hard coded in web service\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ExportQueryModel,\n        private formBuilder: FormBuilder,\n        private appService: AppService,\n        private selectionService: SelectionService,\n        private savedQueriesService: SavedQueriesService,\n        private validationService: ValidationService,\n        private notificationsService: NotificationsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        public modalRef: ModalRef) { }\n\n    ngOnInit(): void {\n        this.savedQueries = [];\n        for (const query of this.savedQueriesService.savedqueries) {\n            this.savedQueries.push(query.name);\n        }\n\n        this.exportableColumns = [];\n\n        if (this.appService.app) {\n            const queryExportConfig = this.getDefaultQueryExportConfig(this.appService.app);\n            const columns = (queryExportConfig.columns && queryExportConfig.columns['column$']) || [];\n            for (const column of columns) {\n                this.exportableColumns.push(column.title);\n            }\n            if(queryExportConfig.maxCount && Utils.isNumber(queryExportConfig.maxCount)) {\n                this.maxCount = queryExportConfig.maxCount;\n            }\n        }\n\n        this.form = this.formBuilder.group({\n            'format': [this.supportedFormats[0]],\n            'exportedColumns': [this.model.exportedColumns],\n            'export': [this.model.export, Validators.required],\n            'maxCount': [this.model.maxCount, Validators.compose([\n                this.validationService.integerValidator(),\n                this.validationService.minValidator(1)\n            ])],\n        });\n\n        this.isDownloading = false;\n\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#exportQuery.btnDownload\",\n                result: ModalResult.Custom,\n                anchor: true,\n                primary: true,\n                action: (_button) => {\n                    const observable = this.savedQueriesService.download(this.model);\n                    if (observable) {\n                        Utils.subscribe(observable,\n                            (response: HttpResponse<Blob>) => {\n                                console.log('exportQuery.download done.');\n                                this.notificationsService.info('msg#exportQuery.successNotification');\n                                this.modalRef.close(ModalResult.OK);\n                                return response;\n                            },\n                            (error) => {\n                                console.log('exportQuery.download failure - error: ', error);\n                                this.modalRef.close(error);\n                            });\n\n                        this.isDownloading = true;\n                        this.changeDetectorRef.markForCheck();\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            })\n        ];\n\n        const onFormChanged = () => {\n            const newFormat = this.form.value['format'];\n            const newMaxCount = this.form.value['maxCount'];\n            const newExportedColumns = this.form.value['exportedColumns'];\n\n            if (this.model.format !== newFormat) {\n                this.model.format = newFormat;\n            }\n\n            if (this.model.maxCount !== newMaxCount) {\n                this.model.maxCount = newMaxCount;\n            }\n\n            this.model.exportedColumns = newExportedColumns;\n        };\n\n        this.formChanges = Utils.subscribe(this.form.valueChanges, onFormChanged);\n    }\n\n    ngOnDestroy(): void {\n        if (this.formChanges) {\n            this.formChanges.unsubscribe();\n        }\n    }\n\n    private getDefaultQueryExportConfig(app: CCApp): CCQueryExport {\n        let queryExport = app.queryExport;\n        if (queryExport.indexOf(',') !== -1) {\n            queryExport = queryExport.substring(0, queryExport.indexOf(','));\n        }\n        return <CCQueryExport>Utils.getField(app.webServices, queryExport);\n    }\n\n    /**\n     * Check if the client has selected some records.\n     *\n     * @returns true if the client has selected some records.\n     */\n    public hasSelectedRecords(): boolean {\n        return this.selectionService.haveSelectedRecords;\n    }\n\n    /**\n     * Checks if the user chosen export source is the same as the given one.\n     * <p>\n     * Used to control the radio button state.\n     *\n     * @param type The source to check.\n     * @returns true if the user chosen export source is the same as the given one.\n     */\n    public sourceChosen(type: ExportSourceType): boolean {\n        return (this.model.export & type) !== 0;\n    }\n\n    /**\n     * Callback called when user chooses a new export source.\n     *\n     * @param event The related UI event.\n     * @param type The new chosen source.\n     */\n    public sourceChanged(event: UIEvent, type: ExportSourceType): void {\n        const input = <HTMLInputElement>event.target;\n        if (input.checked) {\n            this.model.export = type;\n        }\n    }\n\n    /**\n     * Checks if the dialog allows user to choose export source.\n     * Generally, it returns false when the input model export type is already saved query.\n     *\n     * @returns true if the dialog allows user to choose export source.\n     */\n    public showSourceChooser(): boolean {\n        return !this.sourceChosen(ExportSourceType.SavedQuery);\n    }\n}\n\ninterface CCQueryExportColumnDef {\n    title: string;\n    pattern: string;\n    selectionQuery?: string;\n}\n\ninterface CCQueryExport extends CCWebService {\n    webServiceType: \"queryexport\";\n    columns?: CCQueryExportColumnDef[];\n    linksFilterDuplicateUrls?: boolean;\n    linksGlobalRelevance?: string;\n    linksMaxCount?: number;\n    linksSortByOrder?: boolean;\n    maxCount?: number;\n    separator?: string;\n}\n","<form name=\"manageSavedQueries\" novalidate>\n    <sq-modal [title]=\"'msg#manageSavedQueries.title'\" [buttons]=\"buttons\">\n        <div *ngIf=\"model.savedQueries.length\" class=\"form-group clearfix\">\n            <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"reorder()\">{{(reordering ? \"msg#manageSavedQueries.edit\" : \"msg#manageSavedQueries.reorder\") | sqMessage}}</button>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"list-group\" cdkDropList [cdkDropListData]=\"model.savedQueries\" [cdkDropListDisabled]=\"!reordering\" (cdkDropListDropped)=\"dropped($event)\">\n                <div *ngFor=\"let savedQuery of model.savedQueries; let $index = index\" cdkDrag \n                    [ngClass]=\"['list-group-item list-group-item-action d-flex w-auto-unimportant', reordering ? 'cursor-move': '']\">\n                    <div *ngIf=\"reordering\" class=\"sq-saved-query-text\">{{savedQuery.name}}</div>\n                    <sq-editable *ngIf=\"!reordering\" [value]=\"savedQuery.name\" (valueChange)=\"setName(savedQuery, $event)\" name=\"msg#manageSavedQueries.name\" [model]=\"savedQuery\" [validators]=\"nameValidators\"></sq-editable>\n                    <div class=\"ml-auto\">\n                        <a *ngIf=\"!reordering && savedQueriesService.hasExportConfig()\" class=\"ml-2\" href=\"#\" (click)=\"export(savedQuery)\" title=\"{{'msg#manageSavedQueries.export' | sqMessage}}\">\n                            <span class=\"fas fa-download sq-export\"></span>\n                        </a>\n                        <a *ngIf=\"!reordering && savedQueriesService.hasRssEnabled()\" class=\"ml-2\" href=\"{{savedQueriesService.rssHref(savedQuery)}}\" target=\"_blank\" title=\"{{'msg#manageSavedQueries.rss' | sqMessage}}\">\n                            <span class=\"fas fa-rss sq-rss\"></span>\n                        </a>\n                        <a *ngIf=\"!reordering\" href=\"#\" (click)=\"remove(savedQuery, $index)\" class=\"ml-2\" title=\"{{'msg#manageSavedQueries.remove' | sqMessage}}\">\n                            <span class=\"fas fa-times sq-remove\"></span>\n                        </a>\n                        <span *ngIf=\"reordering\" class=\"ml-2 fas fa-bars sq-move\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </sq-modal>\n</form>\n","import {Component, Inject, OnInit} from \"@angular/core\";\nimport {Validators, AbstractControl} from \"@angular/forms\";\nimport {ValidatorFn} from \"@angular/forms\";\nimport {CdkDragDrop} from \"@angular/cdk/drag-drop\";\nimport {MODAL_MODEL, ModalButton, ModalResult} from \"@sinequa/core/modal\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ExportSourceType, AuditEvent} from \"@sinequa/core/web-services\";\nimport {SavedQueriesService, SavedQuery, SavedQueryEventType, ManageSavedQueriesModel} from \"../../saved-queries.service\";\n\n@Component({\n    selector: \"sq-manage-saved-queries\",\n    templateUrl: \"./manage-saved-queries.html\",\n    styleUrls: [\"./manage-saved-queries.scss\"]\n})\nexport class BsManageSavedQueries implements OnInit {\n    reordering: boolean;\n    buttons: ModalButton[];\n    removeAllButton: ModalButton;\n    nameValidators: ValidatorFn[];\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: ManageSavedQueriesModel,\n        public savedQueriesService: SavedQueriesService) {\n        this.reordering = false;\n\n        this.nameValidators = [\n            Validators.required,\n            (control: AbstractControl) => {\n                const modelControl = control.root.get(\"model\");\n                if (modelControl) {\n                    for (const item of this.model.savedQueries) {\n                        if (modelControl.value === item) {\n                            continue;\n                        }\n                        if (control.value === item.name) {\n                            return {\n                                unique: true\n                            };\n                        }\n                    }\n                }\n                return null;\n            }\n        ];\n    }\n\n    ngOnInit() {\n        this.buttons = [\n            this.removeAllButton = new ModalButton({\n                text: \"msg#manageSavedQueries.removeAll\",\n                result: ModalResult.Custom,\n                action: (button) => {\n                    this.model.savedQueries.splice(0);\n                    button.visible = false;\n                    this.addAuditEvent({\n                        type: SavedQueryEventType.DeleteAll\n                    });\n                },\n                visible: this.model.savedQueries.length > 0\n            }),\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    addAuditEvent(auditEvent: AuditEvent) {\n        if (!this.model.auditEvents) {\n            this.model.auditEvents = [];\n        }\n        this.model.auditEvents.push(auditEvent);\n    }\n\n    reorder() {\n        this.reordering = !this.reordering;\n    }\n\n    setName(savedQuery: SavedQuery, name: string) {\n        if (!Utils.eqNC(savedQuery.name, name)) {\n            this.addAuditEvent({\n                type: SavedQueryEventType.Rename,\n                detail: {\n                    query: name,\n                    \"old-name\": savedQuery.name\n                }\n            });\n            savedQuery.name = name;\n        }\n    }\n\n    remove(savedQuery: SavedQuery, index: number) {\n        this.model.savedQueries.splice(index, 1);\n        this.removeAllButton.visible = this.model.savedQueries.length > 0;\n        this.addAuditEvent({\n            type: SavedQueryEventType.Delete,\n            detail: {\n                query: savedQuery.name\n            }\n        });\n        return false;\n    }\n\n    export(savedQuery: SavedQuery) {\n        this.savedQueriesService.exportModal(ExportSourceType.SavedQuery, savedQuery);\n        return false;\n    }\n\n    dropped(drop: CdkDragDrop<SavedQuery[]>) {\n        Utils.arrayMove(this.model.savedQueries, drop.previousIndex, drop.currentIndex);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Results, ExportSourceType } from \"@sinequa/core/web-services\";\nimport { SavedQueriesService } from \"../../saved-queries.service\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { Action } from \"@sinequa/components/action\";\n\n\n\n/**\n * Toolbar component for Export query feature.\n *\n */\n@Component({\n    selector: 'sq-query-exporter',\n    templateUrl: './query-exporter.html'\n})\nexport class BsQueryExporter {\n\n    @Input() results: Results;\n    @Input() rightAligned: boolean;\n\n    public exportAction: Action;\n\n    constructor(\n        private selectionService: SelectionService,\n        private savedQueriesService: SavedQueriesService\n    ) {\n        this.exportAction = new Action({\n            icon: 'fas fa-download',\n            title: 'msg#exportQuery.btnTitle',\n            action: (item: Action, event: Event) => {\n                this.export();\n            }\n        });\n    }\n\n    /**\n     * Check if the client has selected some records.\n     *\n     * @returns true if the client has selected some records.\n     */\n    public hasSelectedRecords(): boolean {\n        return this.selectionService.haveSelectedRecords;\n    }\n\n    /**\n     * Generic export function.\n     * <p>\n     * Opens up a dialog to let user choose the export source, export format and other parameters.\n     *\n     * @memberof QueryExporter\n     */\n    public export(): void {\n\n        this.savedQueriesService.exportModal(\n            this.hasSelectedRecords() ? ExportSourceType.Selection : ExportSourceType.Result);\n\n    }\n\n}\n","<div [sq-action-buttons]=\"{\n        items: [exportAction],\n        autoAdjust: true,\n        rightAligned: rightAligned\n    }\">\n</div>","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Action } from '@sinequa/components/action';\nimport { LoginService } from '@sinequa/core/login';\nimport { SearchService } from '@sinequa/components/search';\nimport { SavedQueriesService } from '../../saved-queries.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'sq-saved-queries-menu',\n  templateUrl: './saved-queries-menu.component.html'\n})\nexport class BsSavedQueriesMenuComponent implements OnInit, OnDestroy {\n  @Input() searchRoute: string = \"/search\";\n  @Input() icon: string = \"far fa-save\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action | undefined;\n\n  // Saved queries actions\n  manageAction: Action;\n  saveAction: Action;\n\n  constructor(\n    public loginService: LoginService,\n    public savedQueriesService: SavedQueriesService,\n    public searchService: SearchService) {\n\n    this.saveAction = new Action({\n      text: \"msg#savedQueries.saveCurrentQuery\",\n      title: \"msg#savedQueries.saveCurrentQuery\",\n      action: () => { this.savedQueriesService.createSavedQueryModal(); }\n    });\n\n    this.manageAction = new Action({\n      text: \"msg#savedQueries.manageSavedQueries\",\n      title: \"msg#savedQueries.manageSavedQueries\",\n      action: () => { this.savedQueriesService.manageSavedQueriesModal(); }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._savedQueriesSubscription = this.savedQueriesService.changes.subscribe({\n      next: () => { this.updateMenu(); }\n    });\n    this._loginSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._searchSubscription = this.searchService.resultsStream.subscribe(results => {\n      this.updateMenu();\n    });\n  }\n\n  private _savedQueriesSubscription: Subscription;\n  private _loginSubscription: Subscription;\n  private _searchSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._savedQueriesSubscription){\n      this._savedQueriesSubscription.unsubscribe();\n    }\n    if(this._loginSubscription){\n      this._loginSubscription.unsubscribe();\n    }\n    if(this._searchSubscription){\n      this._searchSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n\n    if (!this.loginService.complete) {\n      this.menu = undefined;\n      return;\n    }\n\n    const savedQueriesActions: Action[] = [];\n\n    if (this.savedQueriesService.hasSavedQuery) {\n        const scrollGroup = new Action({\n            scrollGroup: true,\n            children: this.savedQueriesService.savedqueries.map(savedQuery => new Action({\n              text: savedQuery.name,\n              title: savedQuery.name,\n              data: savedQuery,\n              action: item => this.savedQueriesService.searchSavedQuery(item.data, this.searchRoute)\n          }))\n        });\n        savedQueriesActions.push(scrollGroup);\n    }\n\n    if (!!this.searchService.results) {\n      savedQueriesActions.push(this.saveAction);\n    }\n\n    if (this.savedQueriesService.hasSavedQuery) {\n      savedQueriesActions.push(this.manageAction);\n    }\n\n    this.menu = new Action({\n        icon: this.icon,\n        text: \"msg#savedQueries.savedQueries\",\n        children: savedQueriesActions\n    });\n  }\n}\n","<div class=\"list-group list-group-flush\">\n    <a *ngFor=\"let query of savedQueriesService.savedqueries | slice:startIndex:endIndex\"\n        class=\"saved-query-item list-group-item list-group-item-action d-flex align-items-center\"\n        [routerLink]=\"[searchRoute]\" [queryParams]=\"getQueryParams(query)\" [state]=\"getRouterState(query)\"\n        (click)=\"openSavedQuery(query)\">\n        <span class=\"query-name mr-auto text-truncate\" [title]=\"query.name\">{{ query.name }}</span>\n        <span *ngIf=\"query.query.text\" class=\"query-text text-muted small font-italic text-right text-truncate ml-2\">\"{{ query.query.text }}\"</span>\n        <i *ngIf=\"enableDelete\" class=\"query-delete ml-2 fas fa-times\" [title]=\"'msg#savedQueries.delete' | sqMessage\" (click)=\"deleteQuery(query, $event)\"></i>\n    </a>\n    <div *ngIf=\"savedQueriesService.savedqueries.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#savedQueries.noSavedQuery' | sqMessage }}\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { SavedQueriesService, SavedQuery, SavedQueryEventType } from '../../saved-queries.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\n\n@Component({\n  selector: 'sq-facet-saved-queries',\n  templateUrl: './facet-saved-queries.html',\n  styles: [`\n.saved-query-item .query-delete{\n    opacity: 0;\n}\n\n.saved-query-item:hover .query-delete{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetSavedQueries extends AbstractFacet  {\n    @Input() searchRoute: string = \"/search\";\n    @Input() maxQueries: number = 5;\n    @Input() enableDelete: boolean = true;\n\n    page: number = 0;\n\n    manageSavedQueries: Action;\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public savedQueriesService: SavedQueriesService) {\n        super();\n\n        this.manageSavedQueries = new Action({\n            icon: \"fas fa-cog\",\n            title: \"msg#savedQueries.manageSavedQueries\",\n            action: () => {\n                this.savedQueriesService.manageSavedQueriesModal();\n            }\n        });\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.savedQueriesService.savedqueries.length / this.maxQueries) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxQueries;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxQueries;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage, this.manageSavedQueries];\n    }\n\n    openSavedQuery(query: SavedQuery){\n        this.savedQueriesService.notifyOpenSavedQuery(query)\n        return true;\n    }\n\n    deleteQuery(query: SavedQuery, event: Event){\n        event.stopPropagation();\n        this.savedQueriesService.deleteSavedQuery(query);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    getQueryParams(savedQuery: SavedQuery) {\n        const query = this.savedQueriesService.searchService.makeQuery(savedQuery.query);\n        const queryParams = query.toJsonForQueryString();\n        return {query: queryParams};\n    }\n\n    getRouterState(savedQuery: SavedQuery) {\n        return {\n            audit: {\n                type: SavedQueryEventType.Search,\n                detail: {\n                    \"saved-query\": savedQuery.name\n                }\n            }\n        }\n    }\n}\n","<div class=\"list-group list-group-flush\">\n    <a *ngFor=\"let query of recentQueriesService.recentqueries | slice:startIndex:endIndex\" \n        class=\"recent-query-item list-group-item list-group-item-action d-flex align-items-center\"\n        [routerLink]=\"[searchRoute]\" [queryParams]=\"getQueryParams(query.query)\" [state]=\"getRouterState(query.query)\"\n        (click)=\"openRecentQuery(query)\">\n        <span class=\"query-text mr-auto text-truncate\" title=\"{{ query.query.text }}\">{{ query.query.text }}</span>\n        <span *ngIf=\"query.date\" class=\"query-date ml-2 text-muted small text-right\">{{ query.date | sqDate }}</span>\n        <i *ngIf=\"enableSave\" class=\"query-save ml-2 far fa-save\" [title]=\"'msg#recentQueries.save' | sqMessage\" (click)=\"saveQuery(query, $event)\"></i>\n        <i *ngIf=\"enableDelete\"class=\"query-delete ml-2 fas fa-times\" [title]=\"'msg#recentQueries.delete' | sqMessage\" (click)=\"deleteQuery(query, $event)\"></i>\n    </a>\n    <div *ngIf=\"recentQueriesService.recentqueries.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#recentQueries.noRecentQuery' | sqMessage }}\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { SearchService } from '@sinequa/components/search';\nimport { RecentQueriesService, RecentQuery, RecentQueryEventType } from '../../recent-queries.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SavedQueriesService } from '../../saved-queries.service';\nimport { Utils } from '@sinequa/core/base';\nimport { Query } from '@sinequa/core/app-utils';\n\n@Component({\n  selector: 'sq-facet-recent-queries',\n  templateUrl: './facet-recent-queries.html',\n  styles: [`\n.recent-query-item .query-delete, .recent-query-item .query-save{\n    opacity: 0;\n}\n\n.recent-query-item:hover .query-delete, .recent-query-item:hover .query-save{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetRecentQueries extends AbstractFacet  {\n    @Input() searchRoute: string = \"/search\";\n    @Input() maxQueries: number = 5;\n    @Input() enableDelete: boolean = true;\n    @Input() enableSave: boolean = true;\n\n    page: number = 0;\n\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public searchService: SearchService,\n        public recentQueriesService: RecentQueriesService,\n        public savedQueriesService: SavedQueriesService) {\n        super();\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.recentQueriesService.recentqueries.length / this.maxQueries) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxQueries;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxQueries;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage];\n    }\n\n    openRecentQuery(query: RecentQuery){\n        this.recentQueriesService.notifyOpenRecentQuery(query);\n        return true;\n    }\n\n    deleteQuery(query: RecentQuery, event: Event){\n        event.stopPropagation();\n        this.recentQueriesService.deleteRecentQuery(query);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    saveQuery(query: RecentQuery, event: Event){\n        event.stopPropagation();\n        const q = Utils.extend(this.searchService.makeQuery(), Utils.copy(query.query));\n        this.savedQueriesService.createSavedQueryModal(q);\n        return false;\n    }\n\n    getQueryParams(recentQuery: Query) {\n        const query = this.searchService.makeQuery(recentQuery);\n        const queryParams = query.toJsonForQueryString();\n        return {query: queryParams};\n    }\n\n    getRouterState(recentQuery: Query) {\n        return {\n            audit: {\n                type: RecentQueryEventType.Search,\n                detail: {\n                    recentquery: recentQuery.text\n                }\n            }\n        }\n    }\n}\n","<div class=\"list-group list-group-flush\">\n    <ng-container *ngFor=\"let document of recentDocumentsService.recentdocuments | slice:startIndex:endIndex\">\n        <a *ngIf=\"openOriginal && document.url1; else internalLink\"\n            class=\"recent-document-item list-group-item list-group-item-action d-flex align-items-center\"\n            [attr.href]=\"document.url1\" target=\"_blank\" rel=\"noopener\"\n            (click)=\"openRecentDocument(document)\">\n            <span class=\"document-text mr-auto text-truncate\" title=\"{{ document.title }}\">{{ document.title }}</span>\n            <span *ngIf=\"document.date\" class=\"document-date ml-2 text-muted small text-right\">{{ document.date | sqDate }}</span>\n            <i *ngIf=\"enableDelete\" class=\"document-delete ml-2 fas fa-times\" [title]=\"'msg#recentDocuments.delete' | sqMessage\" (click)=\"deleteDocument(document, $event)\"></i>\n        </a>\n        <ng-template #internalLink>\n        <a class=\"recent-document-item list-group-item list-group-item-action d-flex align-items-center\"\n            [routerLink]=\"searchRoute\" [queryParams]=\"getQueryParams(document)\"\n            (click)=\"openRecentDocument(document)\">\n            <span class=\"document-text mr-auto text-truncate\" title=\"{{ document.title }}\">{{ document.title }}</span>\n            <span *ngIf=\"document.date\" class=\"document-date ml-2 text-muted small text-right\">{{ document.date | sqDate }}</span>\n            <i *ngIf=\"enableDelete\" class=\"document-delete ml-2 fas fa-times\" [title]=\"'msg#recentDocuments.delete' | sqMessage\" (click)=\"deleteDocument(document, $event)\"></i>\n        </a>\n        </ng-template>\n    </ng-container>\n    <div *ngIf=\"recentDocumentsService.recentdocuments.length == 0\" class=\"list-group-item text-center text-muted font-italic small py-5\">\n        {{ 'msg#recentDocuments.noRecentDocument' | sqMessage }}\n    </div>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { RecentDocumentsService, RecentDocument } from '../../recent-documents.service';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\n@Component({\n  selector: 'sq-facet-recent-documents',\n  templateUrl: './facet-recent-documents.html',\n  styles: [`\n.recent-document-item .document-delete{\n    opacity: 0;\n}\n\n.recent-document-item:hover .document-delete{\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n}\n  `]\n})\nexport class BsFacetRecentDocuments extends AbstractFacet  {\n    @Input() searchRoute: string = \"/preview\";\n    @Input() maxDocuments: number = 5;\n    @Input() enableDelete: boolean = true;\n    @Input() openOriginal: boolean = false;\n    @Output() documentOpened = new EventEmitter<RecentDocument>();\n\n    page: number = 0;\n\n    previousPage: Action;\n    nextPage: Action;\n\n    constructor(\n        public recentDocumentsService: RecentDocumentsService,\n        public searchService: SearchService) {\n        super();\n\n        this.previousPage = new Action({\n            icon: \"fas fa-chevron-left\",\n            title: \"msg#facet.previous\",\n            action: () => {\n                this.page--;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page <= 0;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n        this.nextPage = new Action({\n            icon: \"fas fa-chevron-right\",\n            title: \"msg#facet.next\",\n            action: () => {\n                this.page++;\n            },\n            updater: (action: Action) => {\n                action.disabled = this.page >= this.maxPage;\n                action.hidden = this.maxPage === 0;\n            }\n        });\n    }\n\n    get maxPage(): number {\n        return Math.max(0, Math.ceil(this.recentDocumentsService.recentdocuments.length / this.maxDocuments) - 1);\n    }\n\n    get startIndex(): number {\n        return this.page * this.maxDocuments;\n    }\n\n    get endIndex(): number {\n        return (this.page+1) * this.maxDocuments;\n    }\n\n    get actions(): Action[] {\n        this.previousPage.update();\n        this.nextPage.update();\n        return [this.previousPage, this.nextPage];\n    }\n\n    openRecentDocument(document: RecentDocument) {\n        if(this.openOriginal && !!document.url1){\n            this.searchService.notifyOpenOriginalDocument(<any> document);\n        }\n        this.documentOpened.emit(document); // Can be use to trigger actions, like the preview\n        return true;\n    }\n\n    deleteDocument(document: RecentDocument, event: Event){\n        this.recentDocumentsService.deleteRecentDocument(document);\n        this.page = Math.min(this.page, this.maxPage);\n        return false;\n    }\n\n    getQueryParams(document: RecentDocument) {\n        return {\n            id: document.id,\n            query: this.searchService.makeQuery().toJsonForQueryString()\n        };\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {RouterModule} from '@angular/router';\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {SAVEDQUERY_COMPONENTS} from \"../saved-queries.service\";\nimport {BsEditSavedQuery} from \"./edit-saved-query/edit-saved-query\";\nimport {BsManageSavedQueries} from \"./manage-saved-queries/manage-saved-queries\";\nimport {BsExportQuery} from \"./export-query/export-query\";\nimport {BsQueryExporter} from \"./query-exporter/query-exporter\";\nimport {BsSavedQueriesMenuComponent} from \"./saved-queries-menu/saved-queries-menu.component\";\nimport {BsFacetSavedQueries} from \"./facet-saved-queries/facet-saved-queries\";\nimport {BsFacetRecentQueries} from \"./facet-recent-queries/facet-recent-queries\";\nimport {BsFacetRecentDocuments} from \"./facet-recent-documents/facet-recent-documents\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n        DragDropModule,\n\n        BsModalModule,\n\n        IntlModule,\n        ValidationModule,\n        RouterModule,\n\n        BsSelectionModule,\n        BsModalModule,\n        UtilsModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsEditSavedQuery, BsManageSavedQueries,\n        BsExportQuery, BsQueryExporter, BsSavedQueriesMenuComponent,\n        BsFacetSavedQueries, BsFacetRecentQueries, BsFacetRecentDocuments\n    ],\n    exports: [\n        BsEditSavedQuery, BsManageSavedQueries,\n        BsExportQuery, BsQueryExporter, BsSavedQueriesMenuComponent,\n        BsFacetSavedQueries, BsFacetRecentQueries, BsFacetRecentDocuments\n    ],\n    providers: [\n        {\n            provide: SAVEDQUERY_COMPONENTS,\n            useValue: {\n                editSavedQueryModal: BsEditSavedQuery,\n                manageSavedQueriesModal: BsManageSavedQueries,\n                exportSavedQueryModal: BsExportQuery\n            }\n        }\n    ]\n})\nexport class BsSavedQueriesModule {\n}\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Saved Queries\",\n        \"saveCurrentQuery\": \"Save Current Query\",\n        \"manageSavedQueries\": \"Manage Saved Queries\",\n        \"savedQueryAlreadyExists\": \"A saved query with that name already exists. Would you like to replace it?\",\n        \"noSavedQuery\": \"You have not yet saved a search query...\",\n        \"delete\": \"Delete this saved query\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"You have not yet searched for something...\",\n        \"delete\": \"Delete this recent query\",\n        \"save\": \"Save this query\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Recent documents\",\n        \"noRecentDocument\": \"You have not yet opened a document...\",\n        \"delete\": \"Delete this recent document\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Saved Query\",\n        \"name\": \"Name\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Output format\",\n        \"dialogMaxCount\": \"Max rows\",\n        \"dialogSourceType\": \"Export from\",\n        \"dialogResult\": \"Current result\",\n        \"dialogSelection\": \"Current selection\",\n        \"btnTitle\": \"Export results\",\n        \"exportResult\": \"Export result as {type}\",\n        \"exportSelection\": \"Export selection as {type}\",\n        \"btnDownload\": \"Download\",\n        \"btnClose\": \"Close\",\n        \"successNotification\": \"Download complete\",\n        \"exportedColumns\": \"Columns to export\",\n        \"exportedColumnsLabelTooltip\": \"Select the columns that you want to export, an empty selection means exporting all columns\",\n        \"dialogMaxCountTooltip\": \"By default, the number of results is limited to {count}\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Manage Saved Queries\",\n        \"edit\": \"Edit\",\n        \"reorder\": \"Reorder\",\n        \"remove\": \"Remove\",\n        \"removeAll\": \"Remove all\",\n        \"export\": \"Export\",\n        \"name\": \"Name\",\n        \"rss\": \"RSS Feed\"\n    },\n\n};\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Requêtes sauvegardées\",\n        \"saveCurrentQuery\": \"Enregistrer la requête courante\",\n        \"manageSavedQueries\": \"Gérer les requêtes sauvegardées\",\n        \"savedQueryAlreadyExists\": \"Une requête sauvegardée avec ce nom existe déjà. Voulez-vous la remplacer ?\",\n        \"noSavedQuery\": \"Vous n'avez pas encore enregistré de requête de recherche...\",\n        \"delete\": \"Supprimer cette requête enregistrée\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"Vous n'avez pas encore effectué de recherche...\",\n        \"delete\": \"Supprimer cette requête\",\n        \"save\": \"Enregistrer cette requête\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Documents récents\",\n        \"noRecentDocument\": \"Vous n'avez pas encore ouvert de document...\",\n        \"delete\": \"Supprimer ce document récent\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Requête sauvegardée\",\n        \"name\": \"Nom\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Format de sortie\",\n        \"dialogMaxCount\": \"Nb max de lignes\",\n        \"dialogSourceType\": \"Exporter depuis\",\n        \"dialogResult\": \"Résultat courant\",\n        \"dialogSelection\": \"Sélection courante\",\n        \"btnTitle\": \"Exporter les résultats\",\n        \"exportResult\": \"Exporter le résultat en {type}\",\n        \"exportSelection\": \"Exporter la sélection en {type}\",\n        \"btnDownload\": \"Télécharger\",\n        \"btnClose\": \"Fermer\",\n        \"successNotification\": \"Téléchargement terminé\",\n        \"exportedColumns\": \"Colonnes à exporter\",\n        \"exportedColumnsLabelTooltip\": \"Sélectionnez les colonnes que vous souhaitez exporter, une sélection vide signifie la sélection de tous le colonnes\",\n        \"dialogMaxCountTooltip\": \"Par défaut, le nombre de résultats est limité à {count}\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Gérer les requêtes sauvegardées\",\n        \"edit\": \"Editer\",\n        \"reorder\": \"Réorganiser\",\n        \"remove\": \"Effacer\",\n        \"removeAll\": \"Effacer tout\",\n        \"export\": \"Exporter\",\n        \"name\": \"Nom\",\n        \"rss\": \"Flux RSS\"\n    },\n\n};\n","export default {\n    \"savedQueries\": {\n        \"savedQueries\": \"Gespeicherte Suchanfragen\",\n        \"saveCurrentQuery\": \"Aktuelle Suchanfrage speichern\",\n        \"manageSavedQueries\": \"Aktuelle Suchanfragen verwalten\",\n        \"savedQueryAlreadyExists\": \"Es existiert bereits eine Suchanfrage mit diesem Namen. Möchten Sie sie ersetzen?\",\n        \"noSavedQuery\": \"Sie haben noch keine Suchanfrage gespeichert...\",\n        \"delete\": \"Löschen Sie diese gespeicherte Suche\"\n    },\n\n    \"recentQueries\": {\n        \"noRecentQuery\": \"Sie haben noch keine Suche durchgeführt...\",\n        \"delete\": \"Löschen Sie diese letzte Suche\",\n        \"save\": \"Speichern Sie diese letzte Suche\"\n    },\n\n    \"recentDocuments\": {\n        \"recentDocuments\": \"Kürzlich angesehenes Dokument\",\n        \"noRecentDocument\": \"Sie haben kein Dokument angezeigt\",\n        \"delete\": \"Löschen Sie dieses kürzlich angezeigte Dokument\"\n    },\n\n    \"editSavedQuery\": {\n        \"title\": \"Gespeicherte Suchanfrage\",\n        \"name\": \"Name\"\n    },\n\n    \"exportQuery\": {\n        \"dialogTitle\": \"Export\",\n        \"dialogOutputFormat\": \"Ausgabeformat\",\n        \"dialogMaxCount\": \"Maximale Anzahl der Zeilen\",\n        \"dialogSourceType\": \"Exportiere ...\",\n        \"dialogResult\": \"aktuelle Ergebnisliste\",\n        \"dialogSelection\": \"aktuelle Auswahl\",\n        \"btnTitle\": \"Export\",\n        \"exportResult\": \"Exportiere die Ergebnisliste als {type}\",\n        \"exportSelection\": \"Exportiere die Auswahl als {type}\",\n        \"btnDownload\": \"Herunterladen\",\n        \"btnClose\": \"Schließen\",\n        \"successNotification\": \"Herunterladen beendet\",\n        \"exportedColumns\": \"Zu exportierende Spalten\",\n        \"exportedColumnsLabelTooltip\": \"Wählen Sie die Spalten aus, die Sie exportieren möchten. Eine leere Auswahl bedeutet, dass alle Spalten exportiert werden\",\n        \"dialogMaxCountTooltip\": \"Standardmäßig ist die Anzahl der Ergebnisse auf {count} begrenzt\"\n    },\n\n    \"manageSavedQueries\": {\n        \"title\": \"Gespeicherte Suchanfragen verwalten\",\n        \"edit\": \"Bearbeiten\",\n        \"reorder\": \"Neu sortieren\",\n        \"remove\": \"Entfernen\",\n        \"removeAll\": \"Alle entfernen\",\n        \"export\": \"Exportieren\",\n        \"name\": \"Name\",\n        \"rss\": \"RSS-Feed\"\n    },\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enSelection, frSelection, deSelection} from \"@sinequa/components/selection\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\n\nimport _enSavedQueries from \"./en\";\nimport _frSavedQueries from \"./fr\";\nimport _deSavedQueries from \"./de\";\n\nconst enSavedQueries = Utils.merge({}, _enSavedQueries, enSearch, enSelection, enModal);\nconst frSavedQueries = Utils.merge({}, _frSavedQueries, frSearch, frSelection, frModal);\nconst deSavedQueries = Utils.merge({}, _deSavedQueries, deSearch, deSelection, deModal);\n\nexport { enSavedQueries, frSavedQueries, deSavedQueries };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","i0.ɵɵpropertyInterpolate","i0.ɵɵattribute","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd"],"mappings":"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"}