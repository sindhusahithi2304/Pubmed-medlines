{"version":3,"file":"sinequa-components-advanced.js","sources":["../../../projects/components/advanced/advanced.service.ts","../../projects/components/advanced/bootstrap/advanced-form-validation.directive.ts","../projects/components/advanced/bootstrap/advanced-form-checkbox/advanced-form-checkbox.ts","../projects/components/advanced/bootstrap/advanced-form-checkbox/advanced-form-checkbox.html","../../projects/components/advanced/bootstrap/advanced-form-autocomplete.directive.ts","../projects/components/advanced/bootstrap/advanced-form-input/advanced-form-input.html","../projects/components/advanced/bootstrap/advanced-form-input/advanced-form-input.ts","../projects/components/advanced/bootstrap/advanced-form-multi-input/advanced-form-autocomplete-multi-input.directive.ts","../projects/components/advanced/bootstrap/advanced-form-multi-input/advanced-form-multi-input.html","../projects/components/advanced/bootstrap/advanced-form-multi-input/advanced-form-multi-input.ts","../esm2015/projects/components/advanced/bootstrap/advanced-form-range/date-range-picker/date-range-picker.ts","../projects/components/advanced/bootstrap/advanced-form-range/advanced-form-range.html","../projects/components/advanced/bootstrap/advanced-form-range/advanced-form-range.ts","../esm2015/projects/components/advanced/bootstrap/advanced-form-select/select/select.html","../esm2015/projects/components/advanced/bootstrap/advanced-form-select/select/select.ts","../projects/components/advanced/bootstrap/advanced-form-select/advanced-form-select.ts","../projects/components/advanced/bootstrap/advanced-form-select/advanced-form-select.html","../esm2015/projects/components/advanced/bootstrap/advanced-form-range/date-picker/date-picker.ts","../../projects/components/advanced/bootstrap/advanced.module.ts","../../projects/components/advanced/messages/en.ts","../../projects/components/advanced/messages/fr.ts","../../projects/components/advanced/messages/de.ts","../../projects/components/advanced/messages/index.ts","../../../projects/components/advanced/sinequa-components-advanced.ts"],"sourcesContent":["/* DÃ©pendences fonctionnelles internes d'Angular */\nimport { Injectable } from \"@angular/core\";\nimport {\n    FormControl,\n    ValidatorFn,\n    AsyncValidatorFn,\n    Validators,\n    AbstractControl,\n} from \"@angular/forms\";\n\n/* Services */\nimport { Utils } from \"@sinequa/core/base\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprOperator,\n    FormatService,\n    Query,\n    advancedFacetPrefix,\n    ExprBuilder,\n    ValueItem,\n} from \"@sinequa/core/app-utils\";\nimport { ValidationService } from \"@sinequa/core/validation\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\n\n/**\n * Defines the possible basic types of an advanced value\n */\nexport type BaseAdvancedValue = string | number | Date | boolean | undefined;\n\n/**\n * Defines an advanced value type as either a single basic advanced value or an array of basic advanced values\n */\nexport type AdvancedValue = BaseAdvancedValue | BaseAdvancedValue[];\n\nexport interface AdvancedFormValidators {\n    min: (min: string | number | Date, field: string) => ValidatorFn;\n    max: (max: string | number | Date, field: string) => ValidatorFn;\n    required: ValidatorFn;\n    email: ValidatorFn;\n    pattern: (pattern: string | RegExp) => ValidatorFn;\n    integer: (field: string) => ValidatorFn;\n    number: (field: string) => ValidatorFn;\n    date: (field: string) => ValidatorFn;\n    range: (field: string) => ValidatorFn;\n}\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class AdvancedService {\n    /**\n     * Default form validators packaged within SBA to standardize advanced-search validation\n     */\n    public readonly validators: AdvancedFormValidators = {\n        min: (min, field) =>\n            this.validationService.minValidator(min, this._parser(field)),\n        max: (max, field) =>\n            this.validationService.maxValidator(max, this._parser(field)),\n        required: Validators.required,\n        email: Validators.email,\n        pattern: (pattern: string | RegExp) => Validators.pattern(pattern),\n        integer: (field) =>\n            this.validationService.integerValidator(this._parser(field)),\n        number: (field) =>\n            this.validationService.numberValidator(this._parser(field)),\n        date: (field) =>\n            this.validationService.dateValidator(this._parser(field)),\n        range: (field) =>\n            this.validationService.rangeValidator(\n                this._rangeType(field),\n                this._parser(field)\n            ),\n    };\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public validationService: ValidationService,\n        public formatService: FormatService,\n        public exprBuilder: ExprBuilder\n    ) {}\n\n    /**\n     * Return a standard FormControl compatible with a select component\n     * @param field\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public createSelectControl(\n        field: string,\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[],\n        query = this.searchService.query\n    ): FormControl {\n        const value = this.getValue(field, query);\n        return this.createControl(value, validators, asyncValidators);\n    }\n\n    /**\n     * Return a standard FormControl compatible with a range-input component\n     * @param field\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public createRangeControl(\n        field: string,\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[],\n        query = this.searchService.query\n    ): FormControl {\n        const value = this.getRangeValue(field, query);\n        return this.createControl(value, validators, asyncValidators);\n    }\n\n    /**\n     * Return a standard FormControl compatible with a text input component\n     * @param field\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public createInputControl(\n        field: string,\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[],\n        query = this.searchService.query\n    ): FormControl {\n        const value = this.getValue(field, query);\n        return this.createControl(value, validators, asyncValidators);\n    }\n\n    /**\n     * Return a standard FormControl compatible with a multi-value text input component\n     * @param field\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public createMultiInputControl(\n        field: string,\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[],\n        query = this.searchService.query\n    ): FormControl {\n        const value = this.getValue(field, query);\n        return this.createControl(value, validators, asyncValidators);\n    }\n\n    /**\n     * Return a standard FormControl compatible with a checkbox component\n     * @param field\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public createCheckboxControl(\n        field: string,\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[],\n        query = this.searchService.query\n    ): FormControl {\n        const value = this.getBooleanValue(field, query);\n        return this.createControl(value, validators, asyncValidators);\n    }\n\n    /**\n     * Reset the supplied AbstractControl (and its validation) and sets its value to undefined\n     * @param control\n     */\n    public resetControl(control: AbstractControl) {\n        control.reset();\n        control.setValue(undefined);\n    }\n\n    /**\n     * Reset the supplied AbstractControl (and its validation) and sets its value to [undefined, undefined]\n     * @param control\n     */\n    public resetRangeControl(control: AbstractControl) {\n        control.reset();\n        control.setValue([undefined, undefined]);\n    }\n\n    /**\n     * Retrieve the value (ValueItem | ValueItem[] | undefined) to be set to the FormControl from the Query\n     * @param field\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public getValue(\n        field: string,\n        query = this.searchService.query\n    ): ValueItem | ValueItem[] | undefined {\n        const expr = this.getAdvancedExpr(field, query);\n        if (expr) {\n            const value = this.getValueFromExpr(expr);\n            return this.formatValueItems(field, value);\n        }\n        return undefined;\n    }\n\n    /**\n     * Retrieve the boolean value to be set to the FormControl from the Query\n     * @param field\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public getBooleanValue(\n        field: string,\n        query = this.searchService.query\n    ): boolean | undefined {\n        const expr = this.getAdvancedExpr(field, query);\n        if (expr) {\n            const value = this.getValueFromExpr(expr) as ValueItem;\n            return this.formatAdvancedValue(field, value.value as boolean) as boolean;\n        }\n        return undefined;\n    }\n\n    /**\n     * Retrieve the range value to be set to the FormControl from the Query\n     * @param field\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    public getRangeValue(\n        field: string,\n        query = this.searchService.query\n    ): AdvancedValue {\n        const expr = this.getAdvancedExpr(field, query);\n        if (expr) {\n            const value = this.getValueFromExpr(expr);\n            if (Utils.isArray(value)) {\n                return value.map((e) =>\n                    this.formatAdvancedValue(\n                        field,\n                        e.value as string | Date | number\n                    )\n                ) as AdvancedValue;\n            } else {\n                const _value = this.formatAdvancedValue(\n                    field,\n                    value.value as string | Date | number\n                ) as BaseAdvancedValue;\n                if (expr.operator === ExprOperator.gte) {\n                    return [_value, undefined];\n                } else if (expr.operator === ExprOperator.lte) {\n                    return [undefined, _value];\n                }\n            }\n        }\n        return [undefined, undefined];\n    }\n\n    /**\n     * Return the select expression of an advanced filter\n     * @param field\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     */\n    protected getAdvancedExpr(\n        field: string,\n        query = this.searchService.query\n    ): Expr | undefined {\n        let expr: Expr | string;\n        const expression = query.findSelect(advancedFacetPrefix + field)\n            ?.expression;\n        if (expression) {\n            expr = this.appService.parseExpr(expression);\n            if (expr instanceof Expr) {\n                return expr;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Extract values from an expression\n     * @param expr\n     */\n    protected getValueFromExpr(expr: Expr): ValueItem | ValueItem[] {\n        let value: ValueItem | ValueItem[] | undefined;\n        if (Utils.isString(expr.value) && expr.value.indexOf(\"[\") > -1) {\n            value = JSON.parse(expr.value.replace(/`/g, '\"')).map((e) => ({\n                value: e.value!,\n                display: !!e.display ? e.display : e.value,\n            }));\n        } else if (expr.operands?.length > 0) {\n            value = expr.operands.map((e) => ({\n                value: e.value!,\n                display: !!e.display ? e.display : e.value,\n            }));\n        }\n        if (!value) {\n            if (expr.values && expr.values.length > 1) {\n                value = expr.values.map((e) => ({ value: e, display: e }));\n            } else {\n                value = {\n                    value: expr.value!,\n                    display: !!expr.display ? expr.display : expr.value,\n                };\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Sets a select on a query (defaults to searchService.query) for a given\n     * field and value(s)\n     * @param field\n     * @param value\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     * @param combineWithAnd\n     */\n    public setSelect(\n        field: string,\n        value: ValueItem | ValueItem[] | undefined,\n        query?: Query,\n        combineWithAnd?: boolean\n    ) {\n        let expr;\n        if (value !== undefined) {\n            const _value = this.asValueItems(value, field);\n            if (combineWithAnd) {\n                expr = this.exprBuilder.makeAndExpr(field, _value);\n            } else {\n                expr = this.exprBuilder.makeOrExpr(field, _value);\n            }\n        }\n        // When expr is not defined, this simply removes the selection\n        this.setAdvancedSelect(field, expr, query);\n    }\n\n    /**\n     * Sets a select on a query (defaults to searchService.query) for a given\n     * field and a boolean value\n     * @param field\n     * @param value\n     * @param discardFalsy by default it is 'false', so a false value is used to be undefined\n     * @param query\n     */\n    public setBooleanSelect(\n        field: string,\n        value: boolean | undefined,\n        allowFalsy: boolean = false,\n        query?: Query\n    ) {\n        let expr;\n        if (value === true || (value === false && allowFalsy)) {\n            expr = this.exprBuilder.makeBooleanExpr(field, value);\n        }\n        // When expr is not defined, this simply removes the selection\n        this.setAdvancedSelect(field, expr, query);\n    }\n\n    /**\n     * Sets a select on a query (defaults to searchService.query) for a given\n     * field, operator and value\n     * @param field\n     * @param value\n     * @param operator\n     * @param query\n     */\n    public setNumericalSelect(\n        field: string,\n        value: string | Date | number | ValueItem | undefined,\n        operator: \">\" | \">=\" | \"<\" | \"<=\" | \"=\" | \"<>\",\n        query?: Query\n    ) {\n        let expr;\n        if (value !== undefined) {\n            if (this._isValueItem(value)) {\n                value = value.value as string | Date | number;\n            }\n            value = this.parse(value, field);\n            expr = this.exprBuilder.makeNumericalExpr(field, operator, value);\n        }\n        // When expr is not defined, this simply removes the selection\n        this.setAdvancedSelect(field, expr, query);\n    }\n\n    /**\n     * Sets a select on a query (defaults to searchService.query) for a given\n     * field and range of values\n     * @param field\n     * @param range\n     * @param query\n     */\n    public setRangeSelect(\n        field: string,\n        range: (string | Date | number)[] | undefined,\n        query?: Query\n    ) {\n        let expr: string | undefined;\n        if (range && range.length === 2) {\n            const from = this.parse(range[0] || undefined, field);\n            const to = this.parse(range[1] || undefined, field);\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(field, \">=\", from);\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(field, \"<=\", to);\n            }\n        }\n        // When expr is not defined, this simply removes the selection\n        this.setAdvancedSelect(field, expr, query);\n    }\n\n    /**\n     * Sets a select for a given field and expression on the query (defaults to searchService.query)\n     * @param query Query where to fetch advanced values, if omitted, use searchService.query\n     * @param field\n     * @param expr\n     */\n    protected setAdvancedSelect(\n        field: string,\n        expr: string | undefined,\n        query = this.searchService.query\n    ) {\n        query.removeSelect(advancedFacetPrefix + field);\n        if (expr) {\n            query.addSelect(expr, advancedFacetPrefix + field);\n        }\n    }\n\n    /**\n     * Remove a specific advanced value by its field name.\n     * By default, Trigger search() action\n     * @param field\n     * @param query Query from which will remove the specific advanced value, if omitted, use searchService.query\n     * @param search\n     */\n    public removeAdvancedValue(\n        field: string,\n        search: boolean = true,\n        query: Query = this.searchService.query\n    ): void {\n        if (field) {\n            query.removeSelect(advancedFacetPrefix + field);\n            this.searchService.setQuery(query, false);\n            if (search) {\n                this.searchService.search();\n            }\n        }\n    }\n\n    /**\n     * Remove all related advanced-search select(s) from a given query and update searchService.query accordingly\n     * By default, Trigger search() action\n     * @param query Query from which will remove all advanced values, if omitted, use searchService.query\n     * @param search\n     */\n    public resetAdvancedValues(\n        search: boolean = true,\n        query: Query = this.searchService.query\n    ): void {\n        this.searchService.setQuery(query.toStandard(), false);\n        if (search) {\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * Transforms a value to a parsed ValueItem[]\n     * @param value\n     * @param field\n     */\n    protected asValueItems(\n        value: ValueItem | ValueItem[],\n        field: string\n    ): ValueItem[] {\n        if (this._isValueItemArray(value)) {\n            return value.map((val) => ({\n                value: this.parse(val.value, field) as\n                    | string\n                    | Date\n                    | number\n                    | boolean,\n                display: val.display,\n            }));\n        }\n        return [\n            {\n                value: this.parse(value.value, field) as\n                    | string\n                    | Date\n                    | number\n                    | boolean,\n                display: value.display,\n            },\n        ];\n    }\n\n    public formatValueItems(\n        field: string,\n        value: ValueItem | ValueItem[]\n    ): ValueItem | ValueItem[] {\n        if (this._isValueItemArray(value)) {\n            return value.map((val) => this.formatValueItem(field, val));\n        }\n        return this.formatValueItem(field, value);\n    }\n\n    /**\n     * Format the display property of the ValueItem according its related column definition\n     * @param field\n     * @param value\n     */\n    protected formatValueItem(field: string, value: ValueItem): ValueItem {\n        const column = this.appService.getColumn(field);\n        if (column) {\n            value.display = (this.formatBaseAdvancedValue(\n                value.display!,\n                column\n            ) as string | Date | number | boolean).toString();\n        }\n        return value;\n    }\n\n    /**\n     * Format a given advanced value according to its column definition\n     * @param field\n     * @param value\n     */\n    public formatAdvancedValue(\n        field: string,\n        value: AdvancedValue\n    ): AdvancedValue {\n        if (value) {\n            const column = this.appService.getColumn(field);\n            if (column) {\n                if (Utils.isArray(value)) {\n                    return value.map((v) =>\n                        v ? this.formatBaseAdvancedValue(v, column) : v\n                    );\n                }\n                return this.formatBaseAdvancedValue(value, column);\n            }\n        }\n        return value;\n    }\n\n    protected formatBaseAdvancedValue(\n        value: BaseAdvancedValue,\n        column: CCColumn\n    ): BaseAdvancedValue {\n        if (value) {\n            value = this.castAdvancedValue(value, column);\n            return column.formatter ? this.formatService.formatValue(value!, column) : value;\n        }\n        return value;\n    }\n\n    /**\n     * Cast a given value as per its column definition\n     * @param value\n     * @param column\n     */\n    public castAdvancedValue(\n        value: BaseAdvancedValue,\n        column: CCColumn | undefined\n    ): BaseAdvancedValue {\n        if (column) {\n            if (Utils.isString(value)) {\n                if (AppService.isDate(column)) {\n                    value = Utils.toDate(value);\n                } else if (AppService.isInteger(column)) {\n                    if (Utils.testInteger(value)) {\n                        value = Utils.toInt(value);\n                    }\n                } else if (AppService.isDouble(column)) {\n                    if (Utils.testFloat(value)) {\n                        value = Utils.toNumber(value);\n                    }\n                } else if (AppService.isBoolean(column)) {\n                    value = Utils.isTrue(value);\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Create a generic FormControl\n     * @param value value of the FormControl\n     * @param validators optional validators to be added to the returned FormControl\n     * @param asyncValidators optional asyncValidators to be added to the returned FormControl\n     */\n    protected createControl(\n        value: AdvancedValue | ValueItem | ValueItem[],\n        validators?: ValidatorFn[],\n        asyncValidators?: AsyncValidatorFn[]\n    ): FormControl {\n        return new FormControl(\n            {\n                value,\n                disabled: false,\n            },\n            {\n                validators: !!validators ? validators : [],\n                asyncValidators: !!asyncValidators ? asyncValidators : [],\n                updateOn: \"change\",\n            }\n        );\n    }\n\n    /**\n     * Parse a value according to its column definition\n     * @param value\n     * @param field\n     */\n    protected parse<T>(value: T, field: string): T | string {\n        const parser = this._parser(field);\n        if (parser && Utils.isString(value)) {\n            return this.formatService.parseValue(value, parser);\n        }\n        return value;\n    }\n\n    /**\n     * Return the parser if existing in the given field\n     * @param field\n     */\n    protected _parser(field: string): string | undefined {\n        const column = this.appService.getColumn(field);\n        return column ? column.parser : undefined;\n    }\n\n    protected _rangeType(field: string): string | number | Date {\n        const column = this.appService.getColumn(field);\n        let rangeType;\n        if (\n            column &&\n            (AppService.isInteger(column) || AppService.isDouble(column))\n        ) {\n            rangeType = 0;\n        } else if (column && AppService.isDate(column)) {\n            rangeType = new Date();\n        } else {\n            rangeType = \"\";\n        }\n        return rangeType;\n    }\n\n    /**\n     * Return `true` if the passed value is an `ValueItem[]`\n     */\n    protected _isValueItemArray(value: any): value is ValueItem[] {\n        if (Utils.isArray(value)) {\n            const condition = (element) => this._isValueItem(element);\n            return value.every(condition);\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the passed value is an `ValueItem`\n     */\n    protected _isValueItem(value: any): value is ValueItem {\n        if (\n            Utils.isObject(value) &&\n            !Utils.isArray(value) &&\n            !Utils.isDate(value)\n        ) {\n            if (value.hasOwnProperty(\"value\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import { Directive, Input, OnInit } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { ValidationDirective } from \"@sinequa/core/validation\";\n\n@Directive({\n    selector: \"[sqAdvancedFormValidation]\",\n})\nexport class BsAdvancedFormValidation extends ValidationDirective implements OnInit {\n    @Input() field: string;\n    @Input() validationForm: FormGroup;\n    \n    ngOnInit() {\n        this.options = {\n            form: this.validationForm,\n            controlName: this.field,\n        };\n        super.ngOnInit();\n    }\n}\n","import { Component, Input, OnChanges } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { AppService } from '@sinequa/core/app-utils';\n\n@Component({\n    selector: \"sq-advanced-form-checkbox\",\n    templateUrl: \"./advanced-form-checkbox.html\",\n})\nexport class BsAdvancedFormCheckbox implements OnChanges {\n    @Input() form: FormGroup;\n    @Input() field: string;\n    @Input() label: string;\n\n    constructor(public appService: AppService) {}\n\n    ngOnChanges() {\n        if(this.label === undefined) {\n            this.label = this.appService.getLabel(this.field);\n        }\n    }\n}\n","<div class=\"form-group\" [formGroup]=\"form\">\n    <div class=\"form-check\">\n        <label class=\"custom-control custom-checkbox\">\n            <input\n                class=\"custom-control-input\"\n                type=\"checkbox\"\n                sqAdvancedFormValidation\n                [field]=\"field\"\n                [validationForm]=\"form\"\n                [formControlName]=\"field\">\n            <span class=\"custom-control-label\">{{label | sqMessage}}</span>\n        </label>\n    </div>\n</div>\n","import { Directive, Input, ElementRef, HostListener, Output, EventEmitter, OnInit } from \"@angular/core\";\nimport { Autocomplete, SuggestService, AutocompleteItem, AutocompleteState } from \"@sinequa/components/autocomplete\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Observable } from 'rxjs';\n\n@Directive({\n    selector: \"[sqAdvancedFormAutocomplete]\",\n})\nexport class BsAdvancedFormAutocomplete extends Autocomplete implements OnInit {\n    @Output() UpdateItem = new EventEmitter<AutocompleteItem | undefined>();\n    @Input() field : string;\n\n    constructor(\n        elementRef: ElementRef,\n        suggestService: SuggestService,\n        appService: AppService,\n        uiService: UIService\n    ) {\n        super(elementRef, suggestService, appService, uiService);\n    }\n\n    /**\n     * The ngOnInit() method from the original directive is overriden\n     * On initialization, we listen to the autocomplete component for\n     * selection events\n     */\n    ngOnInit() {\n        this._dropdownSubscription = this.dropdown.clicked.subscribe((item) => {\n            this.select(item, false); // An item was selected from the autocomplete => take the value\n        });\n        this.start();\n    }\n\n    protected getSuggests() {\n        const value = this.getInputValue();\n        if (value) {\n            // If there is text, make a call to the suggest API\n            this.processSuggests(\n                this.getSuggestsObs(value, [this.field])\n            );\n        } else {\n            // If empty input, restart autocomplete\n            this.start();\n        }\n    }\n\n    protected processSuggests(obs: Observable<AutocompleteItem[]>){\n        obs.subscribe(\n            suggests => {\n                if(this.getState() === AutocompleteState.ACTIVE || this.getState() === AutocompleteState.OPENED){\n                    this.dropdown.update(true, suggests\n                        .filter(item => item.category !== \"$field$\")  // Filter out fields\n                        .map(item => {\n                            if(!item.label){\n                                item.label = this.appService.getLabel(item.category);\n                            }\n                            if (!item.normalized) {\n                                item.normalized = item.display;\n                            }\n                            return item;\n                        }));\n                }\n            },\n            err => {\n                this.dropdown.update(false);\n            },\n            () => {\n                if(this.dropdown.hasItems && this.getState() === AutocompleteState.ACTIVE){\n                    this.open();    // Switch from ACTIVE to OPENED (if not already)\n                }\n                else if(!this.dropdown.hasItems && this.getState() === AutocompleteState.OPENED){   // No data\n                    this.active();  // Switch from OPENED to ACTIVE (if not already)\n                }\n            });\n    }\n\n    protected setAutocompleteItem(item: AutocompleteItem): boolean {\n        if(item) {\n            this.setInputValue(item.display);\n            this.UpdateItem.next({\n                ...item,\n                normalized: item.normalized ? item.normalized : item.display\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Listen to blur events on the <input> host and overrides the autocomplete blur events\n     */\n    @HostListener(\"blur\", [\"$event\"]) blur(event: FocusEvent) {\n        /** If there is text in the <input/> and not selected from the dropdown ==> set the item manually */\n        if (this.getState() !== AutocompleteState.SELECTED) {\n            if (!!this.getInputValue() && this.getInputValue() !== \"\") {\n                const item = {\n                    display: this.getInputValue(),\n                    normalized: this.getInputValue(),\n                    category: \"\",\n                }\n                this.setAutocompleteItem(item);\n            } else {\n                this.UpdateItem.next(undefined);\n            }\n        }\n        this.init();\n    }\n\n    /**\n     * Overrides the parent inputChanged method, so that it is possible to reinitialize the autocomplete\n     * @param event\n     */\n    @HostListener(\"input\", [\"$event\"]) inputChanged(event: Event) {\n        switch (this.getState()) {\n            case AutocompleteState.OPENED:\n                this.suggest(); // Just request more data, but no state change\n                break;\n            case AutocompleteState.START:\n            case AutocompleteState.ACTIVE:\n                this.active(); // get more data, and change state if not already ACTIVE\n                break;\n            case AutocompleteState.SELECTED:\n                this.start(); // The model changed because we selected a value ==> we restart in case the user keeps typing\n                this.active();\n                break;\n            case AutocompleteState.INIT:\n                break;\n        }\n    }\n}\n","<div class=\"form-group\">\n    <label for=\"{{field}}\">{{label | sqMessage}}</label>\n    <div class=\"d-flex flex-column\">\n        <input\n            sqAdvancedFormAutocomplete\n            [off]=\"!suggestQuery\"\n            [suggestQuery]=\"suggestQuery\"\n            [dropdown]=\"dropdown\"\n            sqAdvancedFormValidation\n            [validationForm]=\"form\"\n            [field]=\"field\"\n            type=\"text\"\n            class=\"form-control\"\n            [id]=\"field\"\n            autocomplete=\"off\"\n            spellcheck=\"off\"\n            [(ngModel)]=\"viewValue\"\n            (UpdateItem)=\"onItemChange($event)\">\n        <sq-autocomplete-list #dropdown>\n            <ng-template #itemTpl let-item>\n                <div class=\"py-2\">{{item.display}}</div>\n            </ng-template>\n        </sq-autocomplete-list>\n    </div>\n</div>\n","import { Component, Input, OnChanges, OnDestroy } from \"@angular/core\";\nimport { FormGroup, AbstractControl } from \"@angular/forms\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Utils } from '@sinequa/core/base';\nimport { Subscription } from 'rxjs';\nimport { AutocompleteItem } from '@sinequa/components/autocomplete';\n\n@Component({\n    selector: \"sq-advanced-form-input\",\n    templateUrl: \"./advanced-form-input.html\"\n})\nexport class BsAdvancedFormInput implements OnChanges, OnDestroy {\n    @Input() form: FormGroup;\n    @Input() field: string;\n    @Input() suggestQuery: string;\n    @Input() label: string;\n\n    control: AbstractControl | null;\n    viewValue: string | number | undefined | null;\n\n    private _valueChangesSubscription: Subscription;\n\n    constructor(public appService: AppService) {}\n\n    ngOnChanges() {\n        if(this.label === undefined) {\n            this.label = this.appService.getLabel(this.field);\n        }\n        this.control = this.form.get(this.field);\n        if (this.control) {\n            if (this.control.value) {\n                this.viewValue = this.control.value.display\n                    ? this.control.value.display\n                    : this.control.value.value.toString();\n            }\n\n            this._valueChangesSubscription = Utils.subscribe(\n                this.control.valueChanges,\n                (val) => {\n                  if (val) {\n                      this.viewValue = val.display ? val.display : val.value.toString();\n                  }\n                }\n            );\n        }\n        else {\n            throw new Error(\"No form control named \"+this.field);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._valueChangesSubscription) {\n            this._valueChangesSubscription.unsubscribe();\n        }\n    }\n\n    onItemChange(item: AutocompleteItem) {\n        this.viewValue = item?.display;\n        this._updateControl(item);\n    }\n\n    private _updateControl(item: AutocompleteItem): void {\n        const value = item\n        ? {\n            value: item.normalized!,\n            display: item.display\n        } : undefined;\n        this.control?.markAsDirty();\n        this.control?.setValue(value, {emitEvent: false});\n    }\n}\n","import {\n    Directive,\n    Input,\n    Output,\n    EventEmitter,\n    HostListener,\n} from \"@angular/core\";\nimport { AutocompleteItem } from \"@sinequa/components/autocomplete\";\nimport { BsAdvancedFormAutocomplete } from \"../advanced-form-autocomplete.directive\";\nimport { Keys } from \"@sinequa/core/base\";\n\n@Directive({\n    selector: \"[sqAdvancedFormAutocompleteMultiInput]\",\n})\nexport class BsAdvancedFormAutocompleteMultiInput extends BsAdvancedFormAutocomplete {\n    /** Event synchronizing the list of search terms in the parent component */\n    @Output() itemsUpdate = new EventEmitter<AutocompleteItem[]>();\n\n    /** Stores the selected search terms selected via Tab */\n    @Input() items: AutocompleteItem[] = [];\n\n    /**\n     * The setAutocompleteItem() method from the original directive is overriden to\n     * Sets the content of the <input> based on the given\n     * Autocomplete Item.\n     * @returns false since we don't need trigger search at this point of time\n     */\n    protected setAutocompleteItem(item: AutocompleteItem): boolean {\n        if (item) {\n            // Store the autocomplete items that will be used to create a selection\n            this.items.push(item);\n            this.itemsUpdate.next(this.items);\n            this.setInputValue(\"\");\n        }\n        return false;\n    }\n\n    /**\n     * Listen to user's keyboard actions in the <input>, in order to navigate\n     * and select the autocomplete suggestions.\n     * Overrides the parent keydown method, adds the management of the backspace key\n     * to remove items, enhance the enter key to support adding new items.\n     * @param event the keyboard\n     */\n    keydown(event: KeyboardEvent) {\n        const keydown = super.keydown(event);\n\n        if (keydown === undefined) {\n            /** We can remove selections by typing <backspace> when the input is empty */\n            if (event.keyCode === Keys.backspace) {\n                if (this.getInputValue() === \"\") {\n                    this.items.pop();\n                    this.itemsUpdate.next(this.items);\n                }\n            }\n            /** Allow the selection one of new item */\n            if (event.keyCode === Keys.enter) {\n                this._manageSetAutocompleteItem();\n            }\n        }\n        return keydown;\n    }\n\n    /**\n     * Listens to blur events (out of focus) on the <input> host and overrides the parent blur events\n     */\n    @HostListener(\"blur\", [\"$event\"]) blur(event: FocusEvent) {\n        this._manageSetAutocompleteItem();\n        this.init();\n    }\n\n    private _manageSetAutocompleteItem(): void {\n        /** Always consider if there is text in the <input> and that it is not yet added in items  */\n        if (!!this.getInputValue() && this.getInputValue() !== \"\") {\n            this.setAutocompleteItem({\n                display: this.getInputValue(),\n                normalized: this.getInputValue(),\n                category: \"\",\n            });\n        }\n    }\n}\n","<div class=\"d-inline\">\n    <label>{{label | sqMessage}}</label>\n    <section class=\"sq-dropdown-form\">\n        <div class=\"form-control multi-entry\"\n            sqAdvancedFormValidation\n            [field]=\"field\"\n            [validationForm]=\"form\">\n            <span\n                *ngFor=\"let item of items\"\n                class=\"badge badge-pill badge-secondary align-self-center mr-1\">\n                {{ item.display }}\n                <span class=\"fas fa-times-circle clickable\" (click)=\"removeItem(item)\"></span>\n            </span>\n            <input\n                class=\"input-autocomplete flex-grow-1\"\n                type=\"text\"\n                autocomplete=\"off\"\n                spellcheck=\"off\"\n                sqAdvancedFormAutocompleteMultiInput\n                [field]=\"field\"\n                [off]=\"!suggestQuery\"\n                [suggestQuery]=\"suggestQuery\"\n                (itemsUpdate)=\"onItemsChanged($event)\"\n                [items]=\"items\"\n                [dropdown]=\"dropdown\"\n                (keydown)=\"keydown($event)\"\n                (keypress)=\"keypress($event)\">\n        </div>\n        <sq-autocomplete-list #dropdown>\n            <ng-template #itemTpl let-item>\n                <div class=\"autocomplete-item p-2\">{{item.display}}\n                </div>\n            </ng-template>\n        </sq-autocomplete-list>\n    </section>\n</div>\n","import { Component, Input, OnChanges, ElementRef, OnDestroy } from \"@angular/core\";\nimport { FormGroup, AbstractControl } from \"@angular/forms\";\nimport { Keys, Utils } from \"@sinequa/core/base\";\nimport { AutocompleteItem } from \"@sinequa/components/autocomplete\";\nimport { Subscription } from \"rxjs\";\nimport { AppService, ValueItem } from '@sinequa/core/app-utils';\n\n/**\n * Component representing a text input that accepts multiple entries.\n * This component also performs value validation on each entry.\n *\n */\n@Component({\n    selector: \"sq-advanced-form-multi-input\",\n    templateUrl: \"./advanced-form-multi-input.html\",\n    styleUrls: [\"./advanced-form-multi-input.scss\"],\n})\nexport class BsAdvancedFormMultiInput implements OnChanges, OnDestroy {\n    @Input() form: FormGroup;\n    @Input() field: string;\n    @Input() suggestQuery: string;\n    @Input() label: string;\n\n    items: AutocompleteItem[] = []; /** List of items already existing in the advanced search */\n    private _valueChangesSubscription: Subscription;\n\n    control: AbstractControl | null;\n\n    constructor(\n        private elementRef: ElementRef,\n        public appService: AppService) {}\n\n    ngOnChanges(): void {\n        if(this.label === undefined) {\n            this.label = this.appService.getPluralLabel(this.field);\n        }\n        this.control = this.form.get(this.field);\n        if (this.control) {\n            this.items = this.control.value\n                ? (Utils.isArray(this.control.value)\n                        ? this.control.value\n                        : [this.control.value]\n                    ).map((item: ValueItem) => {\n                        return {\n                            display: item.display ? item.display : item.value.toString(),\n                            normalized: item.value.toString(),\n                            category: \"\",\n                        };\n                    })\n                : [];\n\n            this._valueChangesSubscription = Utils.subscribe(\n                this.control.valueChanges,\n                (value) => {\n                    if(value && !Utils.isArray(value)) {\n                        value = [value];\n                    }\n                    this.items = value\n                        ? value.map((item: ValueItem) => {\n                                return {\n                                    display: item.display ? item.display : item.value.toString(),\n                                    normalized: item.value.toString(),\n                                    category: \"\",\n                                };\n                            })\n                        : [];\n                }\n            );\n        }\n        else {\n            throw new Error(\"No form control named \"+this.field);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._valueChangesSubscription) {\n            this._valueChangesSubscription.unsubscribe();\n        }\n    }\n\n    removeItem(item: AutocompleteItem) {\n        this.items.splice(this.items.indexOf(item), 1);\n        this._updateControl();\n    }\n\n    onItemsChanged(items: AutocompleteItem[]) {\n        this.items = items;\n        this._updateControl();\n    }\n\n    keydown(event: KeyboardEvent) {\n        // Intercept tab and set focus to surrounding dropdown-item\n        if (event.keyCode === Keys.tab) {\n            const dropdownItem = this._getDropdownItem();\n            if (dropdownItem) {\n                dropdownItem.focus();\n                event.preventDefault();\n                return false;\n            }\n        }\n        return undefined;\n    }\n\n    keypress(event: KeyboardEvent) {\n        if (event.keyCode === Keys.enter) {\n            // Stop click event firing on surrounding anchor (Firefox)\n            event.preventDefault();\n            return false;\n        }\n        return undefined;\n    }\n\n    private _updateControl(): void {\n        const value = this.items.length > 0\n            ? this.items.map((item) => (\n                {\n                    value: item.normalized!,\n                    display: item.display\n                }\n            ))\n            : undefined\n        this.control?.markAsDirty();\n        this.control?.setValue(value, {emitEvent: false});\n    }\n\n    private _getDropdownItem(): HTMLElement | null {\n        if (this.elementRef) {\n            let current: HTMLElement | null = this.elementRef\n                .nativeElement as HTMLElement;\n            while (current && !current.classList.contains(\"dropdown-item\")) {\n                current = current.parentElement;\n            }\n            return current;\n        }\n        return null;\n    }\n}\n","import {Component, Input, OnInit, AfterViewInit, OnDestroy, ViewChild, forwardRef} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BsDaterangepickerDirective, BsDaterangepickerConfig, BsDatepickerDirective, BsDatepickerConfig} from \"ngx-bootstrap/datepicker\";\nimport moment from \"moment\";\nimport { DatePickerOptions } from '../date-picker/date-picker';\n\nexport const DATE_RANGE_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => BsDateRangePicker),\n    multi: true\n};\n\nexport interface DateRangePickerOptions extends DatePickerOptions {\n    closedRange?: boolean;\n}\n\n@Component({\n    selector: \"sq-date-range-picker\",\n    template: `\n        <div *ngIf=\"options.closedRange\" class=\"sq-date-range-picker form-row\">\n            <div class=\"col\">\n                <input type=\"text\" autocomplete=\"off\" class=\"form-control\" bsDaterangepicker triggers=\"click\" #fromTo=\"bsDaterangepicker\" [bsConfig]=\"bsFromToConfig()\" [ngModel]=\"value\" (ngModelChange)=\"updateFromTo($event)\" [placeholder]=\"dateFormat\"/>\n            </div>\n        </div>\n        <div *ngIf=\"!options.closedRange\" class=\"sq-date-range-picker form-row\">\n            <div class=\"col-auto\">\n                <input type=\"text\" autocomplete=\"off\" [id]=\"fromName\" class=\"form-control sq-range-from\" bsDatepicker triggers=\"click\" #from=\"bsDatepicker\" [bsConfig]=\"bsFromConfig()\" [ngModel]=\"value[0]\" (ngModelChange)=\"updateFrom($event)\" [placeholder]=\"dateFormat\"/>\n            </div>\n            <div class=\"col-auto sq-separator\">{{'msg#advanced.dateRangePicker.separator' | sqMessage}}</div>\n            <div class=\"col-auto\">\n                <input type=\"text\" autocomplete=\"off\" [id]=\"toName\" class=\"form-control sq-range-to\" bsDatepicker triggers=\"click\" #to=\"bsDatepicker\" [bsConfig]=\"bsToConfig()\" [ngModel]=\"value[1]\" (ngModelChange)=\"updateTo($event)\" [placeholder]=\"dateFormat\"/>\n            </div>\n        </div>\n    `,\n    providers: [DATE_RANGE_PICKER_VALUE_ACCESSOR]\n})\nexport class BsDateRangePicker implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n\n    private readonly SystemFormat: string = 'YYYY-MM-DD';\n\n    @Input() options: DateRangePickerOptions;\n    value: (Date | undefined)[];\n    private onChangeCallback: (_: any) => void = () => {};\n    private localeChange: Subscription;\n    @ViewChild(\"fromTo\", {static: false}) fromToPicker: BsDaterangepickerDirective;\n    @ViewChild(\"from\", {static: false}) fromPicker: BsDatepickerDirective;\n    @ViewChild(\"to\", {static: false}) toPicker: BsDatepickerDirective;\n    fromName: string;\n    toName: string;\n\n    constructor(\n        public intlService: IntlService) {\n    }\n\n    ngOnInit() {\n        if (!this.options) {\n            this.options = {};\n        }\n        this.fromName = \"from_\" + this.options.name;\n        this.toName = \"to_\" + this.options.name;\n\n        if (!this.value) {\n            this.value = [undefined, undefined];\n        }\n    }\n\n    public get dateFormat(): string {\n        return this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L');\n    }\n\n    setLocale() {\n        if (!!this.fromToPicker && this.fromToPicker.isOpen) {\n            this.fromToPicker.hide();\n            this.fromToPicker.show();\n        }\n        if (!!this.fromPicker && this.fromPicker.isOpen) {\n            this.fromPicker.hide();\n            this.fromPicker.show();\n        }\n        if (!!this.toPicker && this.toPicker.isOpen) {\n            this.toPicker.hide();\n            this.toPicker.show();\n        }\n    }\n\n    ngAfterViewInit() {\n        this.setLocale();\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.setLocale();\n            });\n    }\n\n    ngOnDestroy() {\n        if (this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n    }\n\n    //#region closedRange\n    bsFromToConfig(): BsDaterangepickerConfig {\n        return <any>{\n            minDate: this.options.minDate,\n            maxDate: this.options.maxDate,\n            containerClass:'theme-default',\n            showWeekNumbers: false,\n            rangeInputFormat: this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L')\n        };\n    }\n\n    updateFromTo(fromTo: Date[]) {\n        this.setValue([!!fromTo ? fromTo[0] : undefined, !!fromTo ? fromTo[1] : undefined]);\n        this.onChangeCallback(this.value);\n    }\n    //#endregion closedRange\n\n    //#region !closedRange\n    maxDate: Date | undefined;\n    minDate: Date | undefined;\n    bsFromConfig(): BsDatepickerConfig {\n        return <any>{\n            minDate: this.options.minDate,\n            maxDate: this.maxDate,\n            containerClass:'theme-default',\n            showWeekNumbers: false,\n            dateInputFormat: this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L'),\n        };\n    }\n\n    bsToConfig(): BsDatepickerConfig {\n        return <any>{\n            minDate: this.minDate,\n            maxDate: this.options.maxDate,\n            containerClass:'theme-default',\n            showWeekNumbers: false,\n            dateInputFormat: this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L'),\n        };\n    }\n\n    setMinMaxDate() {\n        this.maxDate = this.value[1] || this.options.maxDate;\n        this.minDate = this.value[0] || this.options.minDate;\n    }\n\n    resetMinMaxDate() {\n        this.maxDate = this.options.maxDate;\n        this.minDate = this.options.minDate;\n    }\n\n    updateFrom(from: Date) {\n        this.setValue([from, this.value[1]]);\n        this.onChangeCallback(this.value);\n    }\n\n    updateTo(to: Date) {\n        this.setValue([this.value[0], to]);\n        this.onChangeCallback(this.value);\n    }\n    //#endregion !closedRange\n\n    zeroTimes() {\n        if (this.value) {\n            if (Utils.isDate(this.value[0])) {\n                const date = this.value[0];\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n            }\n            if (Utils.isDate(this.value[1])) {\n                const date = this.value[1];\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n            }\n        }\n    }\n\n    setValue(value: (Date | undefined)[] | undefined) {\n        if (!this.value || !value || !Utils.equals(this.value[0], value[0]) || !Utils.equals(this.value[1], value[1])) {\n            if (!value) {\n                value = [undefined, undefined];\n            } else {\n                value[0] = !!value[0] ? new Date(value[0]) : value[0];\n                value[1] = !!value[1] ? new Date(value[1]) : value[1];\n            }\n            if (this.options.closedRange) {\n                this.value = value;\n                this.zeroTimes();\n            } else {\n                this.resetMinMaxDate();\n                this.value = value;\n                this.zeroTimes();\n                this.setMinMaxDate();\n            }\n        }\n    }\n\n    //#region ControlValueAccessor\n    writeValue(value: Date[]): void {\n        this.setValue(value);\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n    //#endregion\n}\n","<div class=\"form-group\" [formGroup]=\"form\">\n    <label for=\"{{forName}}\">{{label | sqMessage}}</label>\n    <div *ngIf=\"!isDate\"\n        class=\"sq-advanced-form-range form-row\"\n        sqAdvancedFormValidation\n        [field]=\"field\"\n        [validationForm]=\"form\"\n        [id]=\"field\">\n        <div class=\"col-auto d-flex flex-column\">\n            <input\n                type=\"text\"\n                autocomplete=\"off\"\n                spellcheck=\"off\"\n                class=\"form-control sq-range-from\"\n                [id]=\"fromName\"\n                [ngModel]=\"value[0]\"\n                (ngModelChange)=\"updateFrom($event)\"\n                [ngModelOptions]=\"{standalone: true}\"/>\n        </div>\n        <div class=\"col-auto sq-separator\">{{'msg#advanced.rangeSeparator' | sqMessage}}</div>\n        <div class=\"col-auto d-flex flex-column\">\n            <input\n                type=\"text\"\n                autocomplete=\"off\"\n                spellcheck=\"off\"\n                class=\"form-control sq-range-to\"\n                [id]=\"toName\"\n                [ngModel]=\"value[1]\"\n                (ngModelChange)=\"updateTo($event)\"\n                [ngModelOptions]=\"{standalone: true}\"/>\n        </div>\n    </div>\n    <sq-date-range-picker *ngIf=\"isDate\"\n        [options]=\"{name: field, system: false, closedRange: false, minDate: minDate, maxDate: maxDate}\"\n        [formControlName]=\"field\"\n        [id]=\"field\"\n        sqAdvancedFormValidation\n        [field]=\"field\"\n        [validationForm]=\"form\">\n    </sq-date-range-picker>\n</div>\n","import {\n    Component,\n    Input,\n    OnInit,\n    OnDestroy,\n} from \"@angular/core\";\nimport { FormGroup, AbstractControl } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\nimport { AppService } from \"@sinequa/core/app-utils\";\n\n@Component({\n    selector: \"sq-advanced-form-range\",\n    templateUrl: \"./advanced-form-range.html\"\n})\nexport class BsAdvancedFormRange implements OnInit, OnDestroy {\n    @Input() form: FormGroup;\n    @Input() field: string;\n    @Input() min: Date | number | string;\n    @Input() max: Date | number | string;\n    @Input() label: string;\n\n    fromName: string;\n    toName: string;\n    forName: string;\n    column: CCColumn | undefined;\n    minDate: Date | undefined;\n    maxDate: Date | undefined;\n    control: AbstractControl | null;\n    value: (string | number | Date)[];\n    isDate: boolean;\n    private _valueChangesSubscription: Subscription;\n\n    constructor(private appService: AppService) {}\n\n    ngOnInit() {\n        this.fromName = \"from_\" + this.field;\n        this.toName = \"to_\" + this.field;\n        this.forName = this.fromName;\n        this.column = this.appService.getColumn(this.field);\n        if(this.label === undefined) {\n            this.label = this.appService.getPluralLabel(this.field);\n        }\n        this.isDate = !!this.column && AppService.isDate(this.column);\n        if (this.isDate) {\n            this.minDate = Utils.isDate(this.min)\n                ? this.min\n                : undefined;\n            this.maxDate = Utils.isDate(this.max)\n                ? this.max\n                : undefined;\n        }\n        this.control = this.form.get(this.field);\n        if (this.control) {\n            this.value = this.control.value;\n            this._valueChangesSubscription = Utils.subscribe(\n                this.control.valueChanges,\n                (value) => {\n                    this.value = value;\n                }\n            );\n        }\n        else {\n            throw new Error(\"No form control named \"+this.field);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._valueChangesSubscription) {\n            this._valueChangesSubscription.unsubscribe();\n        }\n    }\n\n    ensureValue(value: string): string | number | Date {\n        if (this.isDate) {\n            const value1 = Utils.toDate(value);\n            if (value1 !== undefined) {\n                return value1;\n            }\n        } else if (this.column && AppService.isNumber(this.column)) {\n            if (Utils.testFloat(value)) {\n                return Utils.toNumber(value);\n            }\n        }\n        return value;\n    }\n\n    updateFrom(from: string) {\n        this.value[0] = this.ensureValue(from);\n        if (this.control) {\n            this.control.markAsDirty();\n            this.control.setValue(this.value);\n        }\n    }\n\n    updateTo(to: string) {\n        this.value[1] = this.ensureValue(to);\n        if (this.control) {\n            this.control.markAsDirty();\n            this.control.setValue(this.value);\n        }\n    }\n}\n","<div class=\"dropdown\">\n    <!-- item-list toggle -->\n    <button #button class=\"btn btn-light {{disabled ? ' disabled' : ''}} dropdown-toggle form-control\" data-toggle=\"dropdown\" type=\"button\" role=\"button\" (click)=\"toggleOpen()\" (blur)=\"blur($event)\" (keydown)=\"keydown($event)\" tabindex=\"0\"><span class=\"sq-button-text\">{{buttonTitle | sqMessage:buttonTitleMessageParams}}</span></button>\n    <!-- item-list view -->\n    <div *ngIf=\"opened\" [hidden]=\"!isOpen\" class=\"dropdown-menu dropdown-menu-left show\" [style.max-height]=\"itemListHeight\" role=\"combobox\" (mousedown)=\"mousedown($event)\">\n        <!-- items -->\n        <a *ngFor=\"let itemName of names; let i = index\" class=\"dropdown-item{{activeItem === i ? ' active' : ''}}\"\n            (click)=\"toggleItemSelected(i)\" (keydown)=\"keydown($event)\" tabindex=\"-1\"\n            [sqScrollIntoView]=\"{active: i === activeItem, first: i === 0}\">\n            <span class=\"fas fa-check {{isItemSelected(i) ? '' : ' invisible'}} left\"></span>\n            <span>{{itemName}}</span>\n        </a>\n    </div>\n</div>\n","import { Component, forwardRef, Input, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Utils, Keys } from \"@sinequa/core/base\";\nimport { ValueItem } from '@sinequa/core/app-utils';\n\n@Component({\n    selector: \"sq-select\",\n    templateUrl: \"./select.html\",\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        multi: true,\n        useExisting: forwardRef(() => BsSelectComponent),\n        }]\n})\nexport class BsSelectComponent implements ControlValueAccessor, OnInit {\n    @Input() items: ValueItem[];\n    @Input() disabled: boolean;\n    @Input() multiple: boolean;\n    @ViewChild(\"button\", {static: false}) buttonElement: ElementRef;\n    opened: boolean = false;\n    isOpen: boolean = false;\n    activeItem: number = -1;\n    private cancelBlur: boolean = false; // For IE which takes focus when clicking on dropdown scrollbar despite the mousedown handling\n    public names: string[];\n    private selectedItems: number[]; //stores indices of selected items\n    private onChangeCallback: (_: any) => void = () => {};\n\n    ngOnInit() {\n        this.clearSelected();\n        if (this.items.length === 0) {\n          this.disabled = false;\n        }\n        this.names = [];\n        this.items.forEach(item => this.names.push(item.display!));\n    }\n\n    setOpen(value: boolean): void {\n        if (!this.opened) {\n            if (this.disabled || !value) {\n                return;\n            }\n            this.opened = true;\n        }\n        this.isOpen = value;\n        if (!value) {\n            this.activeItem = -1;\n        }\n    }\n\n    mousedown(event: Event): void {\n        event.preventDefault();\n        this.cancelBlur = true;\n        Utils.delay().then(() => this.cancelBlur = false);\n    }\n\n    blur(event: FocusEvent): void {\n        if (this.cancelBlur) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            Utils.delay().then(() => {\n                this.buttonElement.nativeElement.focus();\n            });\n            return;\n        }\n        this.setOpen(false);\n    }\n\n    toggleOpen(): void {\n        if (this.disabled) {\n            return;\n        }\n        this.setOpen(!this.isOpen);\n    }\n\n    keydown($event: KeyboardEvent): void {\n        if (this.disabled) {\n            return;\n        }\n        // arrow down\n        if ($event.keyCode === Keys.down) {\n            if (!this.isOpen) {\n                this.setOpen(true);\n            }\n            this.activeItem++;\n            if (this.activeItem >= this.items.length) {\n                this.activeItem = 0;\n            }\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n        // arrow up\n        else if ($event.keyCode === Keys.up) {\n            if (!this.isOpen) {\n                this.setOpen(true);\n            }\n            this.activeItem--;\n            if (this.activeItem < 0) {\n                this.activeItem = this.items.length - 1;\n            }\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n        // enter or space\n        else if (($event.keyCode === Keys.enter || $event.keyCode === Keys.space) &&\n            this.activeItem >= 0 && this.activeItem < this.items.length) {\n            this.toggleItemSelected(this.activeItem);\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n        // escape\n        else if ($event.keyCode === Keys.esc && this.isOpen) {\n            this.setOpen(false);\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    private clearSelected() {\n        this.selectedItems = [];\n    }\n\n    private countSelected(): number {\n        return this.selectedItems.length;\n    }\n\n    isItemSelected(itemIndex: number) : boolean {\n        return this.selectedItems.includes(itemIndex);\n    }\n\n    toggleItemSelected(itemIndex: number): void {\n        const idx: number = this.selectedItems.indexOf(itemIndex);\n        // Remove item if it was already selected\n        if (idx > -1) {\n            this.selectedItems.splice(idx, 1);\n        }\n        // regular case: just add the index, and update the active item if it exists\n        else if (this.multiple) {\n            this.selectedItems.push(itemIndex);\n            if (this.activeItem >= 0)\n                this.activeItem = itemIndex;\n        }\n        // single-item case: ensure there is only one selected item, and close the menu\n        else {\n            this.selectedItems = [itemIndex];\n            this.setOpen(false);\n        }\n        this.triggerOnChange();\n    }\n\n    /* Template properties */\n    get buttonTitleMessageParams(): any {\n        return {\n            values: {\n                count: this.countSelected()\n            }\n        };\n    }\n\n    get buttonTitle(): string {\n        const selectCount = this.countSelected();\n\n        if (selectCount === 0) {\n            return \"msg#advanced.select.noItems\";\n        }\n        if (!this.multiple) {\n            return this.items[this.selectedItems[0]].display!;\n        }\n        if (selectCount === this.items.length) {\n            return \"msg#advanced.select.allItems\";\n        }\n\n        //Get list of items names corresponding to selected indices\n        return this.selectedItems\n            .map(index => this.items[index].display!)\n            .sort()\n            .join(\", \");\n    }\n\n    get itemListHeight(): string {\n        // use 10 as default\n        return (10 * 4) + \"ex\";\n    }\n    /* End Template properties */\n\n    /* Change event */\n    private triggerOnChange() {\n        // Gather selected item values\n        let values: ValueItem | ValueItem[] | undefined;\n        // We can not pass an empty array, when empty use undefined instead\n        if (this.selectedItems.length === 0) {\n            values = undefined;\n        }\n        // return an array if multiple\n        else if (this.multiple) {\n            values = this.selectedItems.map(index => this.items[index]);\n        }\n        // directly pass the value if not multiple\n        else {\n            values = this.items[this.selectedItems[0]];\n        }\n\n        this.onChangeCallback(values);\n    }\n    /* End Change event */\n\n    /* ControlValueAccessor methods */\n    writeValue(value: ValueItem | ValueItem[]): void {\n        this.clearSelected();\n        if (value) {\n            // the value may not be an array if this select is not multiple\n            const asArray = Array.isArray(value) ? value : [value];\n            //Mark items as selected based on input values\n            this.items.forEach((item, index) => {\n                if (asArray.find((el) => el.value === item.value) && index !== undefined) {\n                    this.selectedItems.push(index);\n                }\n            });\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n    /* End ControlValueAccessor methods */\n}\n","import {Component, Input, OnInit, OnDestroy} from \"@angular/core\";\nimport {FormGroup} from \"@angular/forms\";\nimport {AppService, ValueItem} from \"@sinequa/core/app-utils\";\nimport {CCColumn, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Subscription} from \"rxjs\";\nimport {FirstPageService} from \"@sinequa/components/search\";\n\n@Component({\n    selector: \"sq-advanced-form-select\",\n    templateUrl: \"./advanced-form-select.html\",\n})\nexport class BsAdvancedFormSelect implements OnInit, OnDestroy {\n    @Input() form: FormGroup;\n    @Input() field: string;\n    /** Optional label: the component looks for the label in the Query web service configuration for the given field */\n    @Input() label: string;\n    /** Whether the component supports multiple selection */\n    @Input() multiple: boolean;\n    /** Optional input. The component automatically looks for an aggregation with the name equal to the field */\n    @Input() aggregation: string;\n\n    column: CCColumn | undefined;\n    items: ValueItem[];\n\n    private _valueChangesSubscription: Subscription;\n\n    constructor(\n        private appService: AppService,\n        private firstPageService: FirstPageService) {\n    }\n\n    ngOnInit() {\n        const control = this.form.get(this.field);\n        if(!control) {\n            throw new Error(\"No control in search-form named \"+this.field);\n        }\n        this.column = this.appService.getColumn(this.field);\n        this.items = this.getItems();\n        if(this.label === undefined) {\n            if(this.multiple) {\n                this.label = this.appService.getPluralLabel(this.field);\n            }\n            else {\n                this.label = this.appService.getLabel(this.field);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._valueChangesSubscription) {\n            this._valueChangesSubscription.unsubscribe();\n        }\n    }\n\n    private getItems(): ValueItem[] {\n        const firstPage = this.firstPageService.firstPage;\n        if (firstPage) {\n            // Find aggregation for field\n            const condition = (this.aggregation) ?\n                (aggr: Aggregation) => Utils.eqNC(aggr.name, this.aggregation) :\n                (aggr: Aggregation) => this.column && Utils.eqNC(aggr.column, this.column.name);\n            const aggregation = firstPage.aggregations.find(condition);\n\n            if (aggregation && aggregation.items) {\n                return aggregation.items\n                .filter(\n                    (item) => !Utils.isArray(item.value) && !!item.value\n                )\n                .map(\n                    (item: AggregationItem) => (\n                        {\n                            value: item.value,\n                            display: item.display ? item.display : item.value.toString()\n                        }\n                    )\n                );\n            }\n        }\n        return [];\n    }\n}\n","<div class=\"form-group\" [formGroup]=\"form\">\n    <label for=\"{{field}}\">{{label | sqMessage}}</label>\n    <sq-select\n        [items]=\"items\"\n        [multiple]=\"multiple\"\n        [formControlName]=\"field\"\n        [id]=\"field\"\n        sqAdvancedFormValidation\n        [field]=\"field\"\n        [validationForm]=\"form\">\n    </sq-select>\n</div>\n","import {Component, Input, OnInit, AfterViewInit, OnDestroy, ViewChild, forwardRef, ElementRef} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BsDatepickerDirective, BsDatepickerConfig} from \"ngx-bootstrap/datepicker\";\nimport moment from \"moment\";\n\nexport const DATE_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => BsDatePicker),\n    multi: true\n};\n\nexport interface DatePickerOptions {\n    name?: string;\n    system?: boolean; // default false\n    minDate?: Date;\n    maxDate?: Date;\n}\n\n@Component({\n    selector: \"sq-date-picker\",\n    template: `\n        <div class=\"sq-date-picker form-row\">\n            <div class=\"col\">\n                <input type=\"text\" #input class=\"form-control\" autocomplete=\"off\" bsDatepicker triggers=\"click\" #picker=\"bsDatepicker\" [bsConfig]=\"bsConfig()\" [ngModel]=\"value\" (ngModelChange)=\"updateValue($event)\" [placeholder]=\"dateFormat\" />\n            </div>\n        </div>\n    `,\n    providers: [DATE_PICKER_VALUE_ACCESSOR]\n})\nexport class BsDatePicker implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n\n    private readonly SystemFormat: string = 'YYYY-MM-DD';\n\n    @Input() options: DatePickerOptions;\n    value: Date;\n    private onChangeCallback: (_: any) => void = () => {};\n    private localeChange: Subscription;\n    @ViewChild(\"picker\", {static: false}) picker: BsDatepickerDirective;\n    @ViewChild('input', {static: false}) input: ElementRef;\n\n    constructor(\n        public intlService: IntlService) {\n    }\n\n    ngOnInit() {\n        if (!this.options) {\n            this.options = {};\n        }\n    }\n\n    public get dateFormat(): string {\n        return this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L');\n    }\n\n    setLocale() {\n        if (!!this.picker && this.picker.isOpen) {\n            this.picker.hide();\n            this.picker.show();\n        }\n    }\n\n    ngAfterViewInit() {\n        this.setLocale();\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.setLocale();\n            });\n    }\n\n    ngOnDestroy() {\n        if (this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n    }\n\n    bsConfig(): BsDatepickerConfig {\n        return <any>{\n            minDate: this.options.minDate,\n            maxDate: this.options.maxDate,\n            containerClass:'theme-default',\n            showWeekNumbers: false,\n            dateInputFormat: this.options.system ? this.SystemFormat : moment.localeData().longDateFormat('L')\n        };\n    }\n\n    updateValue(value: Date) {\n        this.value = value;\n        this.zeroTimes(this.value);\n        this.onChangeCallback(this.value);\n        this.focus();\n    }\n\n    private zeroTimes(value: Date): void {\n        if (Utils.isDate(value)) { // includes null checking\n            value.setHours(0, 0, 0, 0);\n        }\n    }\n\n    public focus(): void {\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n    }\n\n    //#region ControlValueAccessor\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n    //#endregion\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsDatepickerModule} from \"ngx-bootstrap/datepicker\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";\n\nimport {BsAdvancedFormCheckbox} from \"./advanced-form-checkbox/advanced-form-checkbox\";\nimport {BsAdvancedFormRange} from \"./advanced-form-range/advanced-form-range\";\nimport {BsAdvancedFormSelect} from \"./advanced-form-select/advanced-form-select\";\nimport { BsAdvancedFormMultiInput } from './advanced-form-multi-input/advanced-form-multi-input';\nimport { BsAdvancedFormInput } from './advanced-form-input/advanced-form-input';\nimport { BsDatePicker } from './advanced-form-range/date-picker/date-picker';\nimport { BsDateRangePicker } from './advanced-form-range/date-range-picker/date-range-picker';\nimport { BsSelectComponent } from './advanced-form-select/select/select';\n\n// Directives\nimport {BsAdvancedFormAutocomplete} from \"./advanced-form-autocomplete.directive\";\nimport {BsAdvancedFormValidation} from \"./advanced-form-validation.directive\";\nimport { BsAdvancedFormAutocompleteMultiInput } from './advanced-form-multi-input/advanced-form-autocomplete-multi-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        IntlModule,\n\n        // ngx-bootstrap\n        BsDatepickerModule.forRoot(),\n\n        UtilsModule,\n        BsAutocompleteModule\n    ],\n    declarations: [\n        BsAdvancedFormCheckbox,\n        BsAdvancedFormInput,\n        BsAdvancedFormRange,\n        BsAdvancedFormSelect,\n        BsAdvancedFormMultiInput,\n        BsDatePicker,\n        BsDateRangePicker,\n        BsSelectComponent,\n\n        BsAdvancedFormAutocompleteMultiInput,\n        BsAdvancedFormAutocomplete,\n        BsAdvancedFormValidation,\n    ],\n    exports: [\n        BsAdvancedFormCheckbox,\n        BsAdvancedFormInput,\n        BsAdvancedFormRange,\n        BsAdvancedFormSelect,\n        BsAdvancedFormMultiInput,\n        BsDatePicker,\n        BsDateRangePicker,\n        BsSelectComponent,\n\n        BsAdvancedFormAutocompleteMultiInput,\n        BsAdvancedFormAutocomplete,\n        BsAdvancedFormValidation,\n    ]\n})\nexport class BsAdvancedModule {\n}\n","export default {\n    \"advanced\": {\n        \"rangeSeparator\": \" / \",\n        \"dateRangePicker\": {\n            \"separator\": \" / \"\n        },\n        \"rangeInput\": {\n            \"separator\": \"/\"\n        },\n        \"select\": {\n            \"nItems\": \"{count} items selected\",\n            \"allItems\": \"All items selected\",\n            \"noItems\": \"No items selected\"\n        }\n    }\n};\n","export default {\n    \"advanced\": {\n        \"rangeSeparator\": \" / \",\n        \"dateRangePicker\": {\n            \"separator\": \" / \"\n        },\n        \"rangeInput\": {\n            \"separator\": \"/\"\n        },\n        \"select\": {\n            \"nItems\": \"{count} Ã©lÃ©ments sÃ©lectionnÃ©s\",\n            \"allItems\": \"Tous les Ã©lÃ©ments\",\n            \"noItems\": \"Aucun Ã©lÃ©ment\"\n        }\n    }\n};\n","export default {\n    \"advanced\": {\n        \"rangeSeparator\": \" / \",\n        \"dateRangePicker\": {\n            \"separator\": \" / \"\n        },\n        \"rangeInput\": {\n            \"separator\": \"/\"\n        },\n        \"select\": {\n            \"nItems\": \"{count} Elemente ausgewÃ¤hlt\",\n            \"allItems\": \"Alle Elemenente ausgewÃ¤hlt\",\n            \"noItems\": \"Keine Elemente ausgewÃ¤hlt\"\n        }\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport _enAdvanced from \"./en\";\nimport _frAdvanced from \"./fr\";\nimport _deAdvanced from \"./de\";\n\nconst enAdvanced = Utils.merge({}, _enAdvanced, enSearch);\nconst frAdvanced = Utils.merge({}, _frAdvanced, frSearch);\nconst deAdvanced = Utils.merge({}, _deAdvanced, deSearch);\n\nexport {enAdvanced, frAdvanced, deAdvanced};\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ÉµÉµelementStart","i0.ÉµÉµelement","i0.ÉµÉµtext","i0.ÉµÉµelementEnd","i0.ÉµÉµproperty","i0.ÉµÉµadvance","i0.ÉµÉµtextInterpolate","i0.ÉµÉµlistener","i0.ÉµÉµtemplate","i0.ÉµÉµpropertyInterpolate","i0.ÉµÉµtextInterpolate1","i0.ÉµÉµclassMapInterpolate1","i0.ÉµÉµstyleProp"],"mappings":"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"}