{"version":3,"file":"sinequa-components-selection.js","sources":["../../../projects/components/selection/selection.service.ts","../projects/components/selection/bootstrap/result-selector/result-selector.ts","../projects/components/selection/bootstrap/result-selector/result-selector.html","../projects/components/selection/bootstrap/results-selector/results-selector.ts","../projects/components/selection/bootstrap/results-selector/results-selector.html","../projects/components/selection/bootstrap/selection-arranger/selection-arranger.component.html","../projects/components/selection/bootstrap/selection-arranger/selection-arranger.component.ts","../../projects/components/selection/bootstrap/selection.module.ts","../../projects/components/selection/messages/en.ts","../../projects/components/selection/messages/fr.ts","../../projects/components/selection/messages/de.ts","../../projects/components/selection/messages/index.ts","../../../projects/components/selection/sinequa-components-selection.ts"],"sourcesContent":["import {Injectable, OnDestroy, InjectionToken, Inject} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\nimport {Record} from \"@sinequa/core/web-services\";\nimport {Action} from \"@sinequa/components/action\";\nimport {SearchService} from \"@sinequa/components/search\";\n\nexport enum SelectionEventType {\n    SELECT,\n    UNSELECT,\n    MOVE\n}\n\nexport interface SelectionEvent {\n    type: SelectionEventType;\n    records: Record[];\n    source?: string;\n}\n\nexport interface SelectionItem {\n    id: string;\n}\n\n/**\n * The storage mode allows to customize how the service stores records, \n * which enables different features:\n * - id: only store the id of a selected record (default)\n * - record: store the entire record\n * - a function that customize what is stored (at least the record id is required)\n */\nexport interface SelectionOptions {\n    resetOnNewResults: boolean;\n    resetOnNewQuery: boolean;\n    storage: \"id\" | \"record\" | ((record: Record) => SelectionItem);\n}\n\nexport const defaultSelectionOptions: SelectionOptions = {\n    resetOnNewResults: false,\n    resetOnNewQuery: true,\n    storage: \"id\"\n}\n\nexport const SELECTION_OPTIONS = new InjectionToken<SelectionOptions>(\"SELECTION_OPTIONS\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SelectionService implements OnDestroy {\n\n    protected readonly selectedRecords: SelectionItem[] = []; // currently selected items\n    public readonly selectionActions: Action[] = []; // Actions that other services can register onto this service\n\n    private _events = new Subject<SelectionEvent>();\n\n    public readonly selectedRecordsAction: Action;\n\n    constructor(\n        public searchService : SearchService,\n        @Inject(SELECTION_OPTIONS) public selectionOptions: SelectionOptions \n    ){\n\n        this.searchService.events.subscribe(event => {\n\n            if(!this.selectionOptions.resetOnNewResults && event.type === \"new-results\" && this.searchService.haveRecords){\n\n                const newSelectedRecords: Record[] = [];\n                if (this.searchService.results?.records) {\n                    for (const record of this.searchService.results.records) {\n                        const index = this.selectedRecords.findIndex(item => item.id === record.id);\n                        if (index !== -1 && !record.$selected) {\n                            record.$selected = true;    // Select previously selected records\n                            this.selectedRecords.splice(index, 1, record);\n                            newSelectedRecords.push(record);\n                        }\n                    }\n                }\n                if(newSelectedRecords.length > 0)   // Menus might need to be refreshed\n                    this._events.next({type: SelectionEventType.SELECT, records: newSelectedRecords, source: event.type});\n\n            }\n\n            if(this.selectionOptions.resetOnNewResults && event.type === \"new-results\") {\n                this.clearSelectedRecords(event.type);\n            }\n            \n            if(this.selectionOptions.resetOnNewQuery && event.type === \"new-query\") {\n                this.clearSelectedRecords(event.type);\n            }\n\n        });\n\n        this.selectedRecordsAction = this.buildSelectRecordsAction();\n        this.selectionActions.push(this.selectedRecordsAction);\n\n        this.events.subscribe({next: () => {\n            this.selectionActions.forEach(action => action.update());\n        }});\n\n    }\n\n    /**\n     * Emits an event on any (bulk or single) selection and unselection events\n     */\n    public get events() : Subject<SelectionEvent> {\n        return this._events;\n    }\n\n    ngOnDestroy(){\n        this._events.complete();\n    }\n\n    private getItem(record: Record): SelectionItem {\n        if(this.selectionOptions.storage === \"id\") {\n            return {id: record.id};\n        }\n        else if(this.selectionOptions.storage === \"record\") {\n            return record;\n        }\n        else {\n            return this.selectionOptions.storage(record);\n        }\n    }\n\n    /**\n     * Returns a copy of the list of selected records\n     */\n    public getSelectedItems(): SelectionItem[] {\n        return this.selectedRecords.slice(0);\n    }\n\n    /**\n     * Return the list of selected record ids\n     */\n    public getSelectedIds(): string[] {\n        return this.selectedRecords.map(r => r.id);\n    }\n\n    /**\n     * @returns true if at least one record is selected\n     */\n    public get haveSelectedRecords(): boolean {\n        return this.selectedRecords.length > 0;\n    }\n\n    public getSelectedCount(): number {\n        return this.selectedRecords.length;\n    }\n\n    /**\n     * @returns true if all records in the search results are selected\n     */\n    public get allRecordsSelected(): boolean {\n        if (!this.searchService.results || !this.searchService.results.records) {\n            return false;\n        }\n        for (const record of this.searchService.results.records) {\n            if (!record.$selected) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private selectCurrentRecords(source?: string) {\n        const newSelectedRecords: Record[] = [];\n        if (this.searchService.results && this.searchService.results.records) {\n            for (const record of this.searchService.results.records) {\n                if (!record.$selected) {\n                    this.selectedRecords.push(this.getItem(record));\n                    newSelectedRecords.push(record);\n                    record.$selected = true;\n                }\n            }\n        }\n        if(newSelectedRecords.length > 0)\n            this._events.next({type: SelectionEventType.SELECT, records: newSelectedRecords, source});\n    }\n\n\n    /**\n     * Toggles the selection of one record or all those in the results.\n     * Emits a SelectionEvent if a record is selected or unselected.\n     * @param record if provided, will toggle the selection of this record; if not will toggle all records in results\n     */\n    public toggleSelectedRecords(record?: Record, source?: string) {\n        if (!!record) {\n            const index = this.selectedRecords.findIndex(item => item.id === record.id);\n            if (index > -1) {\n                this.selectedRecords.splice(index, 1);\n                record.$selected = false;\n            }\n            else {\n                this.selectedRecords.push(this.getItem(record));\n                record.$selected = true;\n            }\n            // record might not be the one in the search service results (if passing a SelectionItem)\n            const ssRecord = this.searchService.getRecordFromId(record.id);\n            if(ssRecord) {\n                ssRecord.$selected = record.$selected;\n            }\n            this._events.next({type: record.$selected? SelectionEventType.UNSELECT : SelectionEventType.SELECT, records: [record], source});\n        }\n        else {\n            if (this.allRecordsSelected) {\n                this.clearSelectedRecords(source);\n            }\n            else {\n                this.selectCurrentRecords(source);\n            }\n        }\n    }\n\n    /**\n     * Moves a selected record to a different index;\n     * @param record \n     * @param newIndex \n     */\n    public moveSelectedRecord(record: Record, newIndex: number, source?: string) {\n        const i = this.selectedRecords.findIndex(r => r.id === record.id);\n        if(i === -1) {\n            throw new Error(`Record ${record.id} is not in the selected records`);\n        }\n        this.selectedRecords.splice(i, 1);\n        this.selectedRecords.splice(newIndex, 0, this.getItem(record));\n        this.events.next({type: SelectionEventType.MOVE, records: [record], source});\n    }\n\n    /**\n     * Unselect all selected records\n     * Emits a SelectionEvent\n     */\n    public clearSelectedRecords(source?: string) {\n        this.selectedRecords.splice(0);\n        const newUnselectedRecords: Record[] = [];\n        if (this.searchService.results && this.searchService.results.records) {\n            for (const record of this.searchService.results.records) {\n                if(record.$selected){\n                    record.$selected = false;\n                    newUnselectedRecords.push(record);\n                }\n            }\n        }\n        if(newUnselectedRecords.length > 0)\n            this._events.next({type: SelectionEventType.UNSELECT, records: newUnselectedRecords, source});\n    }\n\n    private buildSelectRecordsAction(): Action {\n        return new Action({\n            icon: \"far fa-square\",\n            text: \"msg#resultsSelector.selectDocuments\",\n            title: this.allRecordsSelected ? \"msg#resultsSelector.unselectDocumentsTitle\" : \"msg#resultsSelector.selectDocumentsTitle\",\n            messageParams: {values: {count: this.selectedRecords.length}},\n            action: (item, $event) => {\n                this.toggleSelectedRecords(undefined, \"multiple-selector\");\n            },\n            updater: (item) => {\n                item.icon = this.haveSelectedRecords ? \"far fa-check-square\" : \"far fa-square\";\n                item.title = this.allRecordsSelected ? \"msg#resultsSelector.unselectDocumentsTitle\" : \"msg#resultsSelector.selectDocumentsTitle\";\n                item.messageParams = {values: {count: this.selectedRecords.length}};\n            }\n        });\n    }\n}","import {Component, Input} from \"@angular/core\";\nimport {Record} from \"@sinequa/core/web-services\";\nimport {SelectionService} from \"../../selection.service\";\n\n@Component({\n    selector: \"sq-result-selector\",\n    templateUrl: \"./result-selector.html\"\n})\nexport class BsResultSelector {\n    @Input() record: Record;\n\n    constructor(\n        public selectionService: SelectionService) {\n    }\n\n}","<label class=\"sq-select-results-item custom-control custom-control-inline custom-checkbox\"\n    title=\"{{(record.$selected ? 'msg#resultSelector.unselectDocument' : 'msg#resultSelector.selectDocument') | sqMessage}}\"\n    [attr.aria-label]=\"(record.$selected ? 'msg#resultSelector.unselectDocument' : 'msg#resultSelector.selectDocument') | sqMessage\">\n    <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"record.$selected\" (change)=\"selectionService.toggleSelectedRecords(record, 'result')\">\n    <span class=\"custom-control-label\">&#8203;</span>\n</label>","import {Component, Input} from \"@angular/core\";\nimport {SelectionService} from \"../../selection.service\";\nimport {Action} from '@sinequa/components/action';\n\n@Component({\n    selector: \"sq-results-selector\",\n    templateUrl: \"./results-selector.html\"\n})\nexport class BsResultsSelector {\n    @Input() size: string;\n    @Input() style: string;\n    @Input() rightAligned: boolean;\n\n    constructor(\n        public selectionService: SelectionService) {\n    }\n\n    public get actions(): Action[] {\n        return this.rightAligned? this.selectionService.selectionActions.slice().reverse() : this.selectionService.selectionActions;\n    }\n}\n","<div class=\"btn-group\" [sq-action-buttons]=\"{items: actions, size: size, style: style, rightAligned: rightAligned}\"></div>","<div cdkDropList  (cdkDropListDropped)=\"dropRecord($event)\">\n    <div class=\"card\" *ngFor=\"let record of getRecords(); let i=index\" cdkDrag>\n        <div class=\"record-placeholder\" *cdkDragPlaceholder></div>\n        <ng-container *ngTemplateOutlet=\"recordTpl; context:{$implicit: record, index: i}\"></ng-container>\n        <i class=\"position-absolute fas fa-times record-close\" (click)=\"removeRecord(record)\"></i>\n    </div>\n</div>","import { Component, ContentChild, TemplateRef, Input, Output, EventEmitter } from \"@angular/core\";\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Record } from \"@sinequa/core/web-services\";\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService, SelectionItem } from '../../selection.service';\n\n@Component({\n    selector: \"sq-selection-arranger\",\n    templateUrl: \"./selection-arranger.component.html\",\n    styleUrls: [\"./selection-arranger.component.scss\"]\n})\nexport class BsSelectionArranger {\n\n    /**\n     * If a list of records is supplied it is used to display and rearrange the list of records.\n     * If this list is not supplied, the SelectionService list of items is used instead.\n     */\n    @Input() records?: Record[];\n\n    /**\n     * A template must be passed by transclusion to display each record in the selection\n     */\n    @ContentChild(TemplateRef, {static: false}) recordTpl: TemplateRef<any>;\n\n    /**\n     * Triggers event when the user moves or removes a record in the list.\n     */\n    @Output() change = new EventEmitter<SelectionItem[]>();\n\n    constructor(\n        public searchService: SearchService,\n        public selectionService: SelectionService\n    ) {\n    }\n\n    getRecords(): SelectionItem[] {\n        return this.records || this.selectionService.getSelectedItems();\n    }\n\n    dropRecord(event: CdkDragDrop<string[]>) {\n        if (event.isPointerOverContainer) { //https://material.angular.io/cdk/drag-drop/api#CdkDragExit\n            if(this.records) {\n                moveItemInArray(this.records, event.previousIndex, event.currentIndex); // Reorder the items when item dragged inside the drop zone\n            }\n            else {\n                const record = this.selectionService.getSelectedItems()[event.previousIndex];\n                this.selectionService.moveSelectedRecord(record as Record, event.currentIndex);\n            }\n        }\n        else {\n            if(this.records) {\n                this.records.splice(event.previousIndex, 1);\n            }\n            else {\n                const record = this.selectionService.getSelectedItems()[event.previousIndex];\n                this.selectionService.toggleSelectedRecords(record as Record, \"selection-arranger\");\n            }\n        }\n        this.change.next(this.getRecords());\n    }\n\n    removeRecord(record: Record) {\n        if(this.records) {\n            this.records.splice(this.records.indexOf(record), 1);\n        }\n        else {\n            this.selectionService.toggleSelectedRecords(record, \"selection-arranger\");\n        }\n        this.change.next(this.getRecords());\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { IntlModule } from \"@sinequa/core/intl\";\n\nimport { BsActionModule } from \"@sinequa/components/action\";\n\nimport { BsResultsSelector } from \"./results-selector/results-selector\";\nimport { BsResultSelector } from \"./result-selector/result-selector\";\nimport { BsSelectionArranger } from \"./selection-arranger/selection-arranger.component\";\nimport { SELECTION_OPTIONS, defaultSelectionOptions } from \"../selection.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        DragDropModule,\n\n        IntlModule,\n\n        BsActionModule,\n    ],\n    declarations: [\n        BsResultsSelector, BsResultSelector, BsSelectionArranger\n    ],\n    exports: [\n        BsResultsSelector, BsResultSelector, BsSelectionArranger\n    ],\n    providers: [\n        {provide: SELECTION_OPTIONS, useValue: defaultSelectionOptions}\n    ]\n})\nexport class BsSelectionModule {\n}\n","export default {\n    \"resultSelector\": {\n        \"selectDocument\": \"Select document\",\n        \"unselectDocument\": \"Unselect document\"\n    },\n    \"resultsSelector\": {\n        \"selectDocuments\": \"{count, selectordinal, =0 {} other {(#)}}\",\n        \"selectDocumentsTitle\": \"Select documents\",\n        \"unselectDocumentsTitle\": \"Unselect documents\"\n    },\n    \"selection\": {\n        \"selectedDocuments\": \"{count, plural, =0 {} one {# selected document} other {# selected documents}}\"\n    }\n};\n","export default {\n    \"resultSelector\": {\n        \"selectDocument\": \"Sélectionner le document\",\n        \"unselectDocument\": \"Désélectionner le document\"\n    },\n    \"resultsSelector\": {\n        \"selectDocuments\": \"{count, selectordinal, =0 {} other {(#)}}\",\n        \"selectDocumentsTitle\": \"Sélectionner les documents\",\n        \"unselectDocumentsTitle\": \"Désélectionner les documents\",\n    },\n    \"selection\": {\n        \"selectedDocuments\": \"{count, plural, =0 {} one {# document sélectionné} other {# documents sélectionnés}}\"\n    }\n};\n","export default {\n    \"resultSelector\": {\n        \"selectDocument\": \"Dokument auswählen\",\n        \"unselectDocument\": \"Dokumentauswahl aufheben\"\n    },\n    \"resultsSelector\": {\n        \"selectDocuments\": \"{count, selectordinal, =0 {} other {(#)}}\",\n        \"selectDocumentsTitle\": \"Dokumente auswählen\",\n        \"unselectDocumentsTitle\": \"Dokumentauswahl aufheben\",\n    },\n    \"selection\": {\n        \"selectedDocuments\": \"{count, plural, =0 {} one {# ausgewähltes Dokument} other {# ausgewählte Dokumente}}\"\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\n\nimport _enSelection from \"./en\";\nimport _frSelection from \"./fr\";\nimport _deSelection from \"./de\";\n\nconst enSelection = Utils.merge({}, _enSelection, enSearch);\nconst frSelection = Utils.merge({}, _frSelection, frSearch);\nconst deSelection = Utils.merge({}, _deSelection, deSearch);\n\nexport { enSelection, frSelection, deSelection };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵtext","i0.ɵɵpropertyInterpolate","i0.ɵɵattribute","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵelement","i0.ɵɵelementContainer","i0.ɵɵtemplate"],"mappings":"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"}