{"version":3,"file":"sinequa-components-rfm.js","sources":["../../../projects/components/rfm/rfm.service.ts","../projects/components/rfm/bootstrap/rfm-action/rfm-action.html","../projects/components/rfm/bootstrap/rfm-action/rfm-action.ts","../../projects/components/rfm/bootstrap/rfm.module.ts","../../../projects/components/rfm/sinequa-components-rfm.ts"],"sourcesContent":["import {Injectable, OnDestroy} from \"@angular/core\";\nimport {RfmWebService, AuditWebService, Results, Record, RFMDisplay} from \"@sinequa/core/web-services\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {Subject, Observable, Subscription} from 'rxjs';\n\nexport type RFMType = \"important\" | \"click\" | \"like\";\n\nexport interface CCRFM {\n    name: string;\n    click: CCRFM.Action;\n    like: CCRFM.Action;\n    important: CCRFM.Action;\n}\n\nexport declare module CCRFM {\n    interface Action {\n        name: string;\n        enabled: boolean;\n        actionEnabled: boolean;\n        noMenu: boolean;\n        displayUnrated: boolean;\n        negAvailable: boolean;\n    }\n}\n\nexport enum RFMEventType {\n    ClickSet = \"RFM_ClickSet\",\n    ClickReset = \"RFM_ClickReset\",\n    Like = \"RFM_Like\",\n    LikeReset = \"RFM_LikeReset\",\n    Dislike = \"RFM_Dislike\",\n    Important = \"RFM_Important\",\n    ImportantReset = \"RFM_ImportantReset\",\n    Ban = \"RFM_Ban\"\n}\n\nexport interface RFMEvent {\n    type: \"updated\";\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RFMService implements OnDestroy {\n\n    private _events = new Subject<RFMEvent>();\n    private _subscription: Subscription;\n\n    constructor(\n        public appService: AppService,\n        public rfmService: RfmWebService,\n        public searchService: SearchService,\n        public auditService: AuditWebService\n    ){\n        this._subscription = this.searchService.resultsStream.subscribe(results => {\n            this.updateRfm(results);\n        });\n    }\n\n    get events(): Observable<RFMEvent> {\n        return this._events;\n    }\n\n    ngOnDestroy(){\n        this._events.complete();\n        this._subscription.unsubscribe();\n    }\n\n    public getMenuActions(config: CCRFM.Action): RFMDisplay[] {\n        const actions = [RFMDisplay.positiveRate, RFMDisplay.unrate];\n        if(config.negAvailable)\n            actions.push(RFMDisplay.negativeRate);\n        return actions;\n    }\n\n    public static getActionName(rfmDisplay: RFMDisplay): string {\n        switch (rfmDisplay) {\n            case RFMDisplay.positiveRate:\n                return \"pos\";\n            case RFMDisplay.mainlyPosRate:\n                return \"mpos\";\n            case RFMDisplay.unrate:\n                return \"unrated\";\n            case RFMDisplay.mainlyNegRate:\n                return \"mneg\";\n            case RFMDisplay.negativeRate:\n                return \"neg\";\n            default:\n                return \"none\";\n        }\n    }\n\n\n    public static toAuditEventType(action : RFMType, evt: RFMDisplay): RFMEventType | undefined {\n        let aet: RFMEventType | undefined;\n        switch (action) {\n            case \"important\":\n                switch (evt) {\n                    case RFMDisplay.positiveRate:\n                        aet = RFMEventType.Important;\n                        break;\n                    case RFMDisplay.unrate:\n                        aet = RFMEventType.ImportantReset;\n                        break;\n                    case RFMDisplay.negativeRate:\n                        aet = RFMEventType.Ban;\n                        break;\n                }\n                break;\n            case \"like\":\n                switch (evt) {\n                    case RFMDisplay.positiveRate:\n                        aet = RFMEventType.Like;\n                        break;\n                    case RFMDisplay.unrate:\n                        aet = RFMEventType.LikeReset;\n                        break;\n                    case RFMDisplay.negativeRate:\n                        aet = RFMEventType.Dislike;\n                        break;\n                }\n                break;\n            case \"click\":\n                switch (evt) {\n                    case RFMDisplay.positiveRate:\n                        aet = RFMEventType.ClickSet;\n                        break;\n                    case RFMDisplay.unrate:\n                        aet = RFMEventType.ClickReset;\n                        break;\n                    //case RFMDisplay.negativeRate:\n                    //aet = AuditEventType.RFM_Dislike;\n                    //break;\n                }\n                break;\n        }\n        return aet;\n    }\n\n    public notifyRfmAction(rfmEvent: any, record: Record, results: Results) {\n        this.auditService.notifyDocument(rfmEvent, record, results, undefined, {\n            queryhash: this.searchService.results ? this.searchService.results.rfmQueryHash : undefined,\n            querytext: this.searchService.query.text,\n            querylang: this.searchService.query.questionLanguage || (this.appService.ccquery && this.appService.ccquery.questionLanguage)\n        });\n    }\n\n\n    /**\n     * Called every time new results come in.\n     * Performs a request for\n     * @param results\n     */\n    private updateRfm(results: Results | undefined) {\n        if (results && results.records) {\n            const ccquery = this.appService.ccquery;\n            if (ccquery && ccquery.rFM) {\n                Utils.subscribe(this.rfmService.getRfmData(ccquery.rFM, results),\n                    (value) => {\n                        if (value) {\n                            for (const record of results.records) {\n                                const rfmData = value[record.id];\n                                if (!!rfmData) {\n                                    record.rfm = rfmData;\n                                }\n                            }\n                            this._events.next({type: \"updated\"});\n                        }\n                    });\n            }\n        }\n    }\n}\n","<ng-container *ngIf=\"hasRFMAction\">\n    <div *ngIf=\"displayImgAction || displayMenu\" [sq-action-buttons]=\"{items: [action], autoAdjust: true, size: size}\"></div>\n    <div *ngIf=\"displayNoAction\">\n        <div class=\"btn-text rfm-no-action\">\n            <span class=\"{{getActionIcon(rfm.image)}}\"></span>\n        </div>\n    </div>\n</ng-container>","import {Component, Input, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef} from \"@angular/core\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Results, Record, RFMDisplay, RFMActionDisplay} from \"@sinequa/core/web-services\";\nimport {RFMService, CCRFM, RFMType} from \"../../rfm.service\";\nimport {Action} from \"@sinequa/components/action\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n    selector: \"sq-rfm-action\",\n    templateUrl: \"./rfm-action.html\"\n})\nexport class BsRfmAction implements OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() record: Record;\n    @Input() config: CCRFM.Action;  // Parent should bind this.appService.ccrfm[type]\n    @Input() rfm: RFMActionDisplay; // Parent should bind record.rfm && record.rfm[type]\n    @Input() type: RFMType;         // click, like, important (default)\n    @Input() size: string;\n    action: Action;\n\n    menuActions: RFMDisplay[];\n\n    private rfmSubscription: Subscription;\n\n    constructor(\n        protected changeDetectorRef: ChangeDetectorRef,\n        protected rFMService: RFMService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.rfmSubscription) {\n            this.rfmSubscription = this.rFMService.events.subscribe(\n                (event) => {\n                    this.changeDetectorRef.markForCheck();\n                }\n            );\n        }\n        if (changes[\"rfm\"]) {\n            if (!this.action) {\n                this.type = (Utils.toLowerCase(this.type) || \"important\") as RFMType;\n                // List of menu actions from app config\n                this.menuActions = this.rFMService.getMenuActions(this.config);\n                this.buildAction();\n            }\n            else {\n                this.action.update();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.rfmSubscription.unsubscribe();\n    }\n\n    get hasRFMAction(): boolean {\n        return this.record.rfmEnabled && this.config.enabled &&\n            this.hasRfmImage;\n    }\n\n    get rfmStatus(): RFMDisplay {\n        return (!this.rfm) ? RFMDisplay.unrate : this.rfm.status;\n    }\n\n    get hasRfmImage() : boolean {\n        return this.rfmImage !== RFMDisplay.none;\n    }\n\n    get rfmImage(): RFMDisplay {\n        return (!this.rfm) ? this.rfmDefaultImage : this.rfm.image;\n    }\n\n    private get rfmDefaultImage(): RFMDisplay {\n        return ( this.config.displayUnrated || !this.config.noMenu) ? RFMDisplay.unrate : RFMDisplay.none;\n    }\n\n    get rfmImageAction(): RFMDisplay {\n        return (!this.rfm) ? this.rfmDefaultImageAction : this.rfm.imageAction;\n    }\n\n    private get rfmDefaultImageAction(): RFMDisplay {\n        return this.config.noMenu ? RFMDisplay.positiveRate : RFMDisplay.none;\n    }\n\n    get rfmAvailableActions(): RFMDisplay {\n        return (!this.rfm) ? this.rfmDefaultAvailableActions : this.rfm.availableActions;\n    }\n\n    private get rfmDefaultAvailableActions(): RFMDisplay {\n        if (this.config.noMenu) {\n            return RFMDisplay.none;\n        }\n        if (this.config.negAvailable) {\n            return RFMDisplay.personalAll;\n        }\n        return RFMDisplay.personalPosOnly;\n    }\n\n    get displayImgAction(): boolean {\n        return this.rfmImageAction !== RFMDisplay.none;\n    }\n\n    get displayMenu(): boolean {\n        return this.rfmImageAction === RFMDisplay.none &&\n            this.rfmAvailableActions !== RFMDisplay.none &&\n            !this.config.noMenu;\n    }\n\n    get displayNoAction(): boolean {\n        return this.rfmImageAction === RFMDisplay.none &&\n            this.rfmAvailableActions === RFMDisplay.none;\n    }\n\n    getActionIcon(rfmDisplay: RFMDisplay): string {\n        const name = RFMService.getActionName(rfmDisplay);\n        return `rfm-${this.type}-${name}`;\n    }\n\n    buildAction() {\n        this.action = new Action({\n            updater: (item) => {\n                item.icon = this.getActionIcon(this.rfmImage);\n            }\n        });\n        if (this.displayImgAction) {\n            this.action.action = (item) => {\n                this.selectRfmDisplay(this.rfmImageAction);\n            };\n        }\n        if (this.displayMenu) {\n            this.action.children = this.menuActions.map(rfmDisplay => new Action({\n                icon: this.getActionIcon(rfmDisplay),\n                data: rfmDisplay,\n                action: (item) => {\n                    this.selectRfmDisplay(item.data);\n                },\n                updater: (item) => {\n                    item.disabled = rfmDisplay === this.rfmStatus;\n                }\n            }));\n        }\n        this.action.update();\n    }\n\n    selectRfmDisplay(rfmDisplay: RFMDisplay) {\n        if (rfmDisplay !== this.rfmStatus) {\n            const eventtype = RFMService.toAuditEventType(this.type, rfmDisplay);\n            this.rFMService.notifyRfmAction(eventtype, this.record, this.results);\n            // Update RFM data for the record (created a new RFM data can be necessary)\n            this.updateRfmData(rfmDisplay, this.rfmStatus);\n        }\n    }\n\n    private updateRfmData(newStatus: RFMDisplay, newAction: RFMDisplay) {\n        let updateNeeded = false;\n        if (!this.rfm) {\n            this.rfm = {\n                eventCount: 1,\n                average: 0,\n                status: newStatus,\n                image: newStatus,\n                imageAction: newAction,\n                availableActions: this.rfmDefaultAvailableActions\n            };\n            updateNeeded = true;\n        }\n        else {\n            if (newStatus === RFMDisplay.unrate) {\n                this.rfm.eventCount--;\n            }\n            else {\n                this.rfm.eventCount++;\n            }\n            this.rfm.status = newStatus;\n            this.rfm.image = newStatus;\n            this.rfm.imageAction = newAction;\n        }\n\n        if (updateNeeded) {\n            let rfm = this.record.rfm;\n            let updateRfm = false;\n            if (!rfm) {\n                updateRfm = true;\n                rfm = {};\n            }\n            rfm[this.type] = this.rfm;\n            if (updateRfm) {\n                this.record.rfm = rfm;\n            }\n        }\n        this.action.update();\n    }\n}","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsRfmAction} from \"./rfm-action/rfm-action\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        BsActionModule\n    ],\n    declarations: [\n        BsRfmAction\n    ],\n    exports: [\n        BsRfmAction\n    ]\n})\nexport class BsRfmModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵelementStart","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵclassMap","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd"],"mappings":"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"}