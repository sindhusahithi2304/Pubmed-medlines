{"version":3,"file":"sinequa-components-labels.js","sources":["../../../projects/components/labels/labels.service.ts","../../../projects/components/labels/label.pipe.ts","../../../projects/components/labels/labels.component.html","../../../projects/components/labels/labels.component.ts","../../../projects/components/labels/result-labels.component.html","../../../projects/components/labels/result-labels.component.ts","../../../projects/components/labels/labels-autocomplete.directive.ts","../../../projects/components/labels/labels.module.ts","../projects/components/labels/bootstrap/labels-autocomplete/labels-autocomplete.component.html","../projects/components/labels/bootstrap/labels-autocomplete/labels-autocomplete.component.ts","../projects/components/labels/bootstrap/rename-label/rename-label.html","../projects/components/labels/bootstrap/rename-label/rename-label.ts","../projects/components/labels/bootstrap/labels-menu/labels-menu.component.html","../projects/components/labels/bootstrap/labels-menu/labels-menu.component.ts","../projects/components/labels/bootstrap/delete-label/delete-label.html","../projects/components/labels/bootstrap/delete-label/delete-label.ts","../projects/components/labels/bootstrap/add-label/add-label.html","../projects/components/labels/bootstrap/add-label/add-label.ts","../projects/components/labels/bootstrap/edit-label/edit-label.html","../projects/components/labels/bootstrap/edit-label/edit-label.ts","../../projects/components/labels/bootstrap/labels.module.ts","../../projects/components/labels/messages/en.ts","../../projects/components/labels/messages/fr.ts","../../projects/components/labels/messages/de.ts","../../projects/components/labels/messages/index.ts","../../../projects/components/labels/sinequa-components-labels.ts"],"sourcesContent":["import {\n    Injectable,\n    Inject,\n    InjectionToken,\n    Type,\n    OnDestroy,\n} from \"@angular/core\";\nimport { Observable, of, Subscription } from \"rxjs\";\nimport {\n    PrincipalWebService,\n    LabelsWebService,\n    AuditEventType,\n    LabelsRights,\n} from \"@sinequa/core/web-services\";\nimport { AppService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ModalService, ModalResult } from \"@sinequa/core/modal\";\nimport { Action } from \"@sinequa/components/action\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\nimport { SelectionService } from \"@sinequa/components/selection\";\n\nexport interface LabelsComponents {\n    renameModal: Type<any>;\n    labelsAutocompleteComponent: Type<any>;\n    deleteModal: Type<any>;\n    addModal: Type<any>;\n    editModal: Type<any>;\n}\n\nexport interface ModalProperties {\n    public: boolean;\n    allowEditPublicLabels: boolean;\n    allowManagePublicLabels: boolean;\n    allowNewLabels: boolean;\n    disableAutocomplete: boolean;\n    action: number;\n    radioButtons: any[];\n}\n\nexport const enum UpdateLabelsAction {\n    add,\n    remove,\n    rename,\n    delete,\n    bulkAdd,\n    bulkRemove,\n    edit,\n}\n\nexport const LABELS_COMPONENTS = new InjectionToken<LabelsComponents>(\n    \"LABELS_COMPONENTS\"\n);\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class LabelsService implements OnDestroy {\n    private _privateLabelsPrefix: string | undefined;\n    private static readonly defaultLabelsRights: LabelsRights = {\n        canManagePublicLabels: true,\n        canEditPublicLabels: true,\n    };\n    private labelsRightsSubscription: Subscription | undefined;\n    private labelsRights: LabelsRights | undefined;\n\n    constructor(\n        private labelsWebService: LabelsWebService,\n        private appService: AppService,\n        private searchService: SearchService,\n        private modalService: ModalService,\n        private principalWebService: PrincipalWebService,\n        private intlService: IntlService,\n        private notificationService: NotificationsService,\n        private selectionService: SelectionService,\n        @Inject(LABELS_COMPONENTS) public labelsComponents: LabelsComponents\n    ) {\n        this.principalWebService.events.subscribe((event) => {\n            switch (event.type) {\n                case \"changed\":\n                    this._privateLabelsPrefix = undefined;\n                    this.labelsRights = undefined;\n                    this.labelsRightsSubscription = undefined;\n                    break;\n            }\n        });\n    }\n\n    public get publicLabelsField(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.publicLabelsField\n            : undefined;\n    }\n\n    public get privateLabelsField(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.privateLabelsField\n            : undefined;\n    }\n\n    public get labelsAutoSuggestWildcard(): string | undefined {\n        return this.appService.cclabels\n            ? this.appService.cclabels.labelsAutoSuggestWildcard\n            : undefined;\n    }\n\n    public get allowPublicLabelsManagement(): boolean {\n        return this.appService.cclabels\n            ? this.appService.cclabels.allowPublicLabelsCreation\n            : false;\n    }\n\n    public get allowPublicLabelsEdition(): boolean {\n        return this.appService.cclabels\n            ? this.appService.cclabels.allowPublicLabelsModification\n            : false;\n    }\n\n    public get userLabelsRights(): LabelsRights {\n        let rights: LabelsRights | undefined;\n        if (!this.labelsRights) {\n            if (!this.labelsRightsSubscription) {\n                const observable = this.labelsWebService.getUserRights();\n                this.labelsRightsSubscription = Utils.subscribe(\n                    observable,\n                    (response) => (rights = response)\n                );\n            } else {\n                rights = LabelsService.defaultLabelsRights;\n            }\n            this.labelsRights = !!rights\n                ? rights\n                : LabelsService.defaultLabelsRights;\n        }\n        return this.labelsRights;\n    }\n\n    ngOnDestroy() {\n        if (this.labelsRightsSubscription) {\n            this.labelsRightsSubscription.unsubscribe();\n        }\n    }\n\n    /** From navbar */\n    public renameLabelModal(): Promise<ModalResult> {\n        const data = {\n            oldValues: [],\n            newValue: \"\",\n            properties: this._modalProperties(UpdateLabelsAction.rename),\n        };\n        return this.modalService.open(this.labelsComponents.renameModal, {\n            model: data,\n        });\n    }\n\n    public deleteLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.delete),\n        };\n        return this.modalService.open(this.labelsComponents.deleteModal, {\n            model: data,\n        });\n    }\n\n    public bulkAddLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.bulkAdd),\n        };\n        return this.modalService.open(this.labelsComponents.addModal, {\n            model: data,\n        });\n    }\n\n    public bulkRemoveLabelModal(): Promise<ModalResult> {\n        const data = {\n            values: [],\n            properties: this._modalProperties(UpdateLabelsAction.bulkRemove),\n        };\n        return this.modalService.open(this.labelsComponents.deleteModal, {\n            model: data,\n        });\n    }\n\n    private _modalProperties(action: number): ModalProperties {\n        const allowManagePublicLabels: boolean =\n            this.allowPublicLabelsManagement &&\n            this.userLabelsRights &&\n            this.userLabelsRights.canManagePublicLabels;\n        const allowEditPublicLabels: boolean =\n            this.allowPublicLabelsEdition &&\n            this.userLabelsRights &&\n            this.userLabelsRights.canEditPublicLabels;\n        let allowNewLabels: boolean = false;\n        let radioButtonsConf: any;\n\n        switch (action) {\n            case UpdateLabelsAction.rename:\n            case UpdateLabelsAction.remove:\n            case UpdateLabelsAction.delete:\n            case UpdateLabelsAction.bulkRemove:\n                allowNewLabels = false;\n                break;\n            case UpdateLabelsAction.add:\n            case UpdateLabelsAction.bulkAdd:\n            case UpdateLabelsAction.edit:\n                allowNewLabels = true;\n                break;\n            default:\n                break;\n        }\n\n        switch (action) {\n            case UpdateLabelsAction.rename:\n            case UpdateLabelsAction.delete:\n                radioButtonsConf = this._getModalRadioButtonsConf(\n                    allowManagePublicLabels\n                );\n                break;\n            case UpdateLabelsAction.add:\n            case UpdateLabelsAction.bulkAdd:\n            case UpdateLabelsAction.remove:\n            case UpdateLabelsAction.bulkRemove:\n            case UpdateLabelsAction.edit:\n                radioButtonsConf = this._getModalRadioButtonsConf(\n                    allowManagePublicLabels || allowEditPublicLabels\n                );\n                break;\n            default:\n                break;\n        }\n\n        return {\n            allowEditPublicLabels: allowEditPublicLabels,\n            allowManagePublicLabels: allowManagePublicLabels,\n            allowNewLabels: allowNewLabels,\n            action: action,\n            ...radioButtonsConf,\n        };\n    }\n\n    private _getModalRadioButtonsConf(publicRight: boolean): any {\n        let isPublic: boolean = true;\n        let disableAutocomplete: boolean = false;\n        let radioButtons: any[] = [];\n        let publicRadioButton = {\n            id: \"publicLabel\",\n            name: \"msg#labels.public\",\n            value: true,\n            disabled: false,\n            checked: true,\n        };\n        let privateRadioButton = {\n            id: \"privateLabel\",\n            name: \"msg#labels.private\",\n            value: false,\n            disabled: false,\n            checked: false,\n        };\n        if (!!this.publicLabelsField && !!this.privateLabelsField) {\n            if (publicRight) {\n                isPublic = true;\n                radioButtons = [publicRadioButton, privateRadioButton];\n            } else {\n                isPublic = false;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: false,\n                };\n                privateRadioButton = {\n                    ...privateRadioButton,\n                    disabled: true,\n                    checked: true,\n                };\n                radioButtons = [publicRadioButton, privateRadioButton];\n            }\n        } else if (!!this.publicLabelsField) {\n            if (publicRight) {\n                isPublic = true;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: true,\n                };\n                radioButtons = [publicRadioButton];\n            } else {\n                isPublic = false;\n                disableAutocomplete = true;\n                publicRadioButton = {\n                    ...publicRadioButton,\n                    disabled: true,\n                    checked: false,\n                };\n                radioButtons = [publicRadioButton];\n            }\n        } else if (!!this.privateLabelsField) {\n            isPublic = false;\n            privateRadioButton = {\n                ...privateRadioButton,\n                disabled: true,\n                checked: true,\n            };\n            radioButtons = [privateRadioButton];\n        }\n\n        return {\n            public: isPublic,\n            disableAutocomplete: disableAutocomplete,\n            radioButtons: radioButtons,\n        };\n    }\n    /** END From navbar */\n\n    /** From result selector */\n    public buildSelectionAction(): Action | undefined {\n        if (!this.publicLabelsField && !this.privateLabelsField) {\n            return undefined;\n        }\n        const action = new Action({\n            icon: \"fas fa-tags\",\n            title: \"msg#labels.labels\",\n            action: () => {\n                this.editLabelModal();\n            },\n        });\n        if (action) {\n            action.updater = (action) => {\n                action.hidden = !this.selectionService.haveSelectedRecords;\n            };\n            action.hidden = true;\n        }\n        return action;\n    }\n\n    public editLabelModal(): Promise<ModalResult> {\n        const data = {\n            valuesToBeAdded: [],\n            valuesToBeRemoved: [],\n            properties: this._modalProperties(UpdateLabelsAction.edit),\n        };\n        return this.modalService.open(this.labelsComponents.editModal, {\n            model: data,\n        });\n    }\n    /** END result selector */\n\n\n    addLabels(\n        labels: string[],\n        ids: string[],\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0 || !ids || ids.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.add(labels, ids, _public);\n        return observable;\n    }\n\n    removeLabels(\n        labels: string[],\n        ids: string[],\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0 || !ids || ids.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.remove(labels, ids, _public);\n        return observable;\n    }\n\n    selectLabels(labels: string[], _public: boolean): Promise<boolean> {\n        const field =\n            this.appService.cclabels &&\n            (_public\n                ? this.appService.cclabels.publicLabelsField\n                : this.appService.cclabels.privateLabelsField);\n        if (!field) {\n            return Promise.resolve(false);\n        }\n        const items: ValueItem[] = [];\n        const selectedLabels: string[] = this.getSelectedLabels(field);\n        for (let label of labels) {\n            const display = label;\n            if (!_public) {\n                label = <string>this.addPrivatePrefix(label);\n            }\n            if (selectedLabels.indexOf(label) === -1) {\n                items.push({\n                    value: label,\n                    display: display,\n                });\n            }\n        }\n\n        this.searchService.addFieldSelect(field, items);\n        return this.searchService.search(undefined, {\n            type: AuditEventType.Label_Open,\n            detail: {\n                label: !!labels ? labels.toString() : null,\n                public: _public,\n            },\n        });\n    }\n\n    /**\n     * Retrieves the labels that are not in the current filters of breadcrumbs\n     *\n     * @param field The column index containing the labels.\n     * @returns The selected labels\n     */\n    private getSelectedLabels(field: string): string[] {\n        const labels: string[] = [];\n        if (field && this.searchService.breadcrumbs?.activeSelects) {\n            for (const select of this.searchService.breadcrumbs.activeSelects) {\n                if (select.expr) {\n                    const values = select.expr.getValues(field);\n                    values.forEach((value) => {\n                        if (labels.indexOf(value) === -1) {\n                            labels.push(value);\n                        }\n                    });\n                }\n            }\n        }\n        return labels;\n    }\n\n    renameLabels(\n        labels: string[],\n        newLabel: string,\n        _public: boolean\n    ): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.rename(\n            labels,\n            newLabel,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\"msg#renameLabel.errorFeedback\");\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#renameLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    deleteLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.delete(labels, _public);\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\"msg#deleteLabel.errorFeedback\");\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#deleteLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    bulkAddLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.bulkAdd(\n            labels,\n            this.searchService.query,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\n                    \"msg#bulkAddLabel.errorFeedback\"\n                );\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#bulkAddLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    bulkRemoveLabels(labels: string[], _public: boolean): Observable<void> {\n        if (!labels || labels.length === 0) {\n            return of();\n        }\n        const observable = this.labelsWebService.bulkRemove(\n            labels,\n            this.searchService.query,\n            _public\n        );\n        Utils.subscribe(\n            observable,\n            () => {},\n            () => {\n                this.notificationService.error(\n                    \"msg#bulkRemoveLabel.errorFeedback\"\n                );\n            },\n            () => {\n                this.notificationService.success(\n                    \"msg#bulkRemoveLabel.successFeedback\"\n                );\n                this.searchService.search(); /** Update the display immediately in the components and facets*/\n            }\n        );\n        return observable;\n    }\n\n    get privateLabelsPrefix(): string {\n        if (!this.principalWebService.principal) {\n            return \"\";\n        }\n        if (!this._privateLabelsPrefix && this.appService.cclabels) {\n            if (\n                this.appService.isTree(\n                    this.appService.cclabels.privateLabelsField\n                )\n            ) {\n                this._privateLabelsPrefix = Utils.addUrl(\n                    \"/\",\n                    Utils.replace(\n                        this.principalWebService.principal.userId,\n                        \"|\",\n                        \"/\"\n                    ),\n                    \"/\"\n                );\n            } else {\n                this._privateLabelsPrefix =\n                    this.principalWebService.principal.userId + \"|\";\n            }\n        }\n        return this._privateLabelsPrefix || \"\";\n    }\n\n    sort(labels: string[], _public: boolean): string[] {\n        if (!labels) return labels;\n        return labels.sort((a, b) => {\n            if (!a) return -1;\n            if (!b) return 1;\n            if (!_public) {\n                a = <string>this.removePrivatePrefix(a);\n                b = <string>this.removePrivatePrefix(b);\n            }\n            a = this.intlService.formatMessage(a);\n            b = this.intlService.formatMessage(b);\n            return a.localeCompare(b);\n        });\n    }\n\n    split(labels: string): string[] {\n        if (!labels) {\n            return [];\n        }\n        return labels\n            .trim()\n            .split(/\\s*;\\s*/)\n            .filter((value) => {\n                return value !== \"\";\n            });\n    }\n\n    private _addPrivatePrefix(label: string): string {\n        if (\n            this.appService.cclabels &&\n            this.appService.isTree(this.appService.cclabels.privateLabelsField)\n        ) {\n            return Utils.addUrl(this.privateLabelsPrefix, label);\n        } else {\n            return this.privateLabelsPrefix + label;\n        }\n    }\n\n    addPrivatePrefix(labels: string | string[]): string | string[] {\n        if (typeof labels === \"string\") {\n            return this._addPrivatePrefix(labels);\n        } else {\n            for (let i = 0, ic = labels.length; i < ic; i++) {\n                labels[i] = this._addPrivatePrefix(labels[i]);\n            }\n            return labels;\n        }\n    }\n\n    private _removePrivatePrefix(label: string): string {\n        if (label.indexOf(this.privateLabelsPrefix) === 0) {\n            if (\n                this.appService.cclabels &&\n                this.appService.isTree(\n                    this.appService.cclabels.privateLabelsField\n                )\n            ) {\n                return label.slice(this.privateLabelsPrefix.length - 1);\n            } else {\n                return label.slice(this.privateLabelsPrefix.length);\n            }\n        }\n        return label;\n    }\n\n    removePrivatePrefix(labels: string | string[]): string | string[] {\n        if (typeof labels === \"string\") {\n            return this._removePrivatePrefix(labels);\n        } else {\n            for (let i = 0, ic = labels.length; i < ic; i++) {\n                labels[i] = this._removePrivatePrefix(labels[i]);\n            }\n            return labels;\n        }\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {AbstractIntlPipe, IntlService} from \"@sinequa/core/intl\";\nimport {LabelsService} from \"./labels.service\";\n\n@Pipe({name: \"sqLabel\", pure: false})\nexport class LabelPipe extends AbstractIntlPipe {\n    constructor(\n        protected labelsService: LabelsService,\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef) {\n        super(intlService, changeDetectorRef);\n    }\n\n    updateValue(value: string, _public?: boolean): void {\n        super.updateValue(value, _public);\n        this.value = value;\n        if (!_public) {\n            this.value = <string>this.labelsService.removePrivatePrefix(this.value);\n        }\n        this.value = this.intlService.formatMessage(this.value);\n    }\n}","<div *ngIf=\"showLabels\" class=\"d-inline\">\n    <span *ngFor=\"let label of labels; let $index = index\" class=\"d-inline\">\n        <div class=\"badge badge-pill badge-info align-self-center mr-1 d-inline\" [ngClass]=\"{'sq-labels-public': public, 'sq-labels-private': !public}\"\n            title=\"{{(public ? 'msg#labels.selectPublicLabelTitle' : 'msg#labels.selectPrivateLabelTitle') | sqMessage}}\">\n            <span (click)=\"select(label)\">{{label | sqLabel:public}}</span>\n            <i class=\"sq-label-remove fas fa-times-circle clickable\" (click)=\"remove($index)\" *ngIf=\"canRemove()\"\n                title=\"{{(public ? 'msg#labels.removePublicLabelTitle' : 'msg#labels.removePrivateLabelTitle') | sqMessage}}\">\n            </i>\n        </div>\n    </span>\n</div>\n","import { Component, Input, OnChanges, HostBinding } from \"@angular/core\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Record } from \"@sinequa/core/web-services\";\nimport { LabelsService } from \"./labels.service\";\nimport { AppService } from \"@sinequa/core/app-utils\";\n\n@Component({\n    selector: \"sq-labels\",\n    // We need the two spans to get whitespace between each label\n    // change size by adding h1-6 class to .sq-label div (default is h5)\n    templateUrl: \"./labels.component.html\",\n    styles: [\n        `\n            .sq-labels-public {\n                background-color: #4fc3f7;\n            }\n            .sq-labels-private {\n                background-color: #7283a7;\n            }\n            .sq-label-remove {\n                margin-left: 3px;\n            }\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class Labels implements OnChanges {\n    @Input() record: Record;\n    @Input() public: boolean;\n    @Input() enableDelete: boolean = false; /** Display the delete button in the label tag */\n\n    protected labelsField: string;\n    showLabels: boolean;\n    labels: string[];\n\n    @HostBinding(\"class\") hostClasses;\n\n    constructor(\n        private appService: AppService,\n        private labelsService: LabelsService\n    ) {}\n\n    ngOnChanges() {\n        const field = this.public\n            ? this.labelsService.publicLabelsField\n            : this.labelsService.privateLabelsField;\n        this.labelsField = this.appService.resolveColumnAlias(field);\n        this.showLabels = !!this.labelsField;\n        this.makeLabels();\n    }\n\n    private makeLabels() {\n        if (!this.showLabels) {\n            this.labels = [];\n            return;\n        }\n        const labels = this.record[this.labelsField];\n        if (Utils.isArray(labels)) {\n            this.labels = this.labelsService.sort(labels.slice(), this.public);\n        } else {\n            this.labels = [];\n        }\n    }\n\n    select(label: string) {\n        if (!this.public) {\n            label = <string>this.labelsService.removePrivatePrefix(label);\n        }\n        this.labelsService.selectLabels([label], this.public);\n    }\n\n    remove(index: number) {\n        if (this.canRemove()) {\n            let label = this.labels[index];\n            if (!this.public) {\n                label = <string>this.labelsService.removePrivatePrefix(label);\n            }\n            this.labelsService.removeLabels(\n                [label],\n                [this.record.id],\n                this.public\n            );\n        }\n    }\n\n    canRemove(): boolean {\n        return this.public\n            ? this.enableDelete &&\n                this.labelsService.allowPublicLabelsManagement &&\n                this.labelsService.userLabelsRights &&\n                this.labelsService.userLabelsRights.canManagePublicLabels\n            : this.enableDelete && true;\n    }\n}\n","<span *ngIf=\"caption\" class=\"sq-text\">{{caption | sqMessage}}</span>\n<sq-labels [record]=\"record\" [public]=\"public\"></sq-labels>\n","import {Component, Input} from \"@angular/core\";\nimport {Record} from \"@sinequa/core/web-services\";\n\n@Component({\n    selector: \"sq-result-labels\",\n    templateUrl: \"./result-labels.component.html\"\n})\nexport class ResultLabels {\n    @Input() record: Record;\n    @Input() caption: string;\n    @Input() public: boolean;\n}\n","import {\n    Directive,\n    ElementRef,\n    Input,\n    EventEmitter,\n    SimpleChanges,\n    Output,\n    HostListener,\n    OnInit,\n    OnChanges,\n} from \"@angular/core\";\nimport {\n    Autocomplete,\n    SuggestService,\n    AutocompleteState,\n    AutocompleteItem,\n} from \"@sinequa/components/autocomplete\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { LabelsWebService, Labels } from \"@sinequa/core/web-services\";\nimport { Keys } from \"@sinequa/core/base\";\nimport { LabelsService } from \"./labels.service\";\n\n@Directive({\n    selector: \"[sqAutocompleteLabels]\",\n})\nexport class LabelsAutocomplete extends Autocomplete implements OnInit, OnChanges {\n    /** Event synchronizing the list of selected labels in the parent component */\n    @Output() itemsUpdate = new EventEmitter<AutocompleteItem[]>();\n\n    /** Whether the labels are public or not */\n    @Input() public: boolean;\n\n    /** Enable adding new labels in labelsItems or not */\n    @Input() allowNewLabels: boolean = false;\n\n    /** Define the right of adding new labels in labelsItems or not */\n    @Input() allowManagePublicLabels: boolean = false;\n\n    /** Stores the selected labels items selected via Tab */\n    @Input() labelsItems: AutocompleteItem[] = [];\n\n    /** Stores the suggestions retrieved by th server in order to perform checks on key.enter events */\n    private _suggestions: string[] = [];\n\n    constructor(\n        elementRef: ElementRef,\n        suggestService: SuggestService,\n        appService: AppService,\n        uiService: UIService,\n        private labelsWebService: LabelsWebService,\n        private labelsService: LabelsService\n    ) {\n        super(elementRef, suggestService, appService, uiService);\n    }\n\n    /**\n     * The ngOnInit() method from the original directive is overriden\n     * On initialization, we listen to the autocomplete component for\n     * selection events\n     */\n    ngOnInit() {\n        this._dropdownSubscription = this.dropdown.clicked.subscribe((item) => {\n            this.select(item, true); // An item was selected from the autocomplete => take the value\n        });\n        this.start();\n    }\n\n    /**\n     * If the inputs changes state, react accordingly\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"labelsItems\"]) {\n            this.updatePlaceholder();\n        }\n\n        // Override start() by using init() instead, so that no double queries are generated and autocomplete dropdown is shown only on focus\n        if (changes[\"off\"] && !this.off) {\n            this.init();\n        }\n\n        // If labels category changes, we must remove the selected labels items and reinitialize the autocomplete\n        if (changes[\"public\"] && !changes[\"public\"].firstChange) {\n            const newInitLabels = [...changes[\"labelsItems\"].currentValue];\n            this.inputElement.blur();\n            /** Reset the input Value*/\n            this.setInputValue(\"\");\n            /** initialize the input needed specially for labels edit cases */\n            this.updatePlaceholder();\n            this.itemsUpdate.next(newInitLabels);\n        }\n    }\n\n    /**\n     * The getSuggests() method from the original directive is overriden to\n     * use the labelsService rather than suggest service.\n     */\n    protected getSuggests() {\n        const value = this.getInputValue();\n\n        if (value) {\n            // parse\n            const labels = value.split(\";\");\n\n            // find label at caret location\n            const position = this.getInputPosition();\n            let length = 0;\n            let val:\n                | { value: string, start: number, length: number }\n                | undefined;\n            for (const label of labels) {\n                if (position >= length && position <= length + label.length) {\n                    val = {\n                        value: label,\n                        start: length,\n                        length: label.length,\n                    };\n                    break;\n                }\n                length += label.length + 1;\n            }\n\n            // Get suggestions from web service\n            if (val) {\n                this._getLabelsSuggestions(val.value);\n            }\n        } else {\n            if (!!this.labelsService.labelsAutoSuggestWildcard) {\n                this._getLabelsSuggestions(\n                    this.labelsService.labelsAutoSuggestWildcard\n                );\n            } else {\n                this.start();\n            }\n        }\n    }\n\n    private _getLabelsSuggestions(val: string) {\n        this.labelsWebService.list(val, this.public).subscribe(\n            (labels: Labels) => {\n                if (\n                    this.getState() === AutocompleteState.ACTIVE ||\n                    this.getState() === AutocompleteState.OPENED\n                ) {\n                    /** Eliminate suggestions that are already selected */\n                    labels.labels = labels.labels.filter(\n                        (label) =>\n                            !this.labelsItems.find(\n                                (item) => item.display === label\n                            )\n                    );\n\n                    /** update the local list of suggestions */\n                    this._suggestions = labels.labels;\n\n                    /** limit the suggestions to be displayed to 10  */\n                    labels.labels = labels.labels.slice(0, 10);\n\n                    this.dropdown.update(\n                        true,\n                        labels.labels.map((label) => {\n                            return {\n                                display: label,\n                                category: \"\",\n                            };\n                        })\n                    );\n                }\n            },\n            () => {\n                this.dropdown.update(false);\n            },\n            () => {\n                if (\n                    this.dropdown.hasItems &&\n                    this.getState() === AutocompleteState.ACTIVE\n                ) {\n                    this.open(); // Switch from ACTIVE to OPENED (if not already)\n                } else if (\n                    !this.dropdown.hasItems &&\n                    this.getState() === AutocompleteState.OPENED\n                ) {\n                    // No data\n                    this.active(); // Switch from OPENED to ACTIVE (if not already)\n                }\n            }\n        );\n    }\n\n    /**\n     * The setAutocompleteItem() method from the original directive is overriden to\n     * Sets the content of the <input> based on the given\n     * Autocomplete Item.\n     * @returns false since labels items don't need to be searched\n     */\n    protected setAutocompleteItem(item: AutocompleteItem): boolean {\n        if (item) {\n            // Store the autocomplete items that will be used to create a selection\n            this.labelsItems.push(item);\n            this.updatePlaceholder();\n            this.itemsUpdate.next(this.labelsItems);\n            this.setInputValue(\"\");\n        }\n        return false;\n    }\n\n    /**\n     * The startOrActive() method from the original directive is overriden to\n     * immediately switch to ACTIVE if it is not the case\n     */\n    protected startOrActive(): void {\n        if (\n            this.getState() !== AutocompleteState.ACTIVE &&\n            this.getState() !== AutocompleteState.OPENED\n        ) {\n            // Avoid flickering\n            this.start();\n            this.active();\n        }\n    }\n\n    /**\n     * Listen to user's keyboard actions in the <input>, in order to navigate\n     * and select the autocomplete suggestions.\n     * Overrides the parent keydown method, adds the management of the backspace key\n     * to remove labels items, enhance the enter key to support adding new labels.\n     * @param event the keyboard\n     */\n    keydown(event: KeyboardEvent) {\n        const keydown = super.keydown(event);\n\n        if (keydown === undefined) {\n            //We can remove selections by typing <backspace> when the input is empty\n            if (event.keyCode === Keys.backspace) {\n                if (this.getInputValue() === \"\") {\n                    this.labelsItems.pop();\n                    this.updatePlaceholder();\n                    this.itemsUpdate.next(this.labelsItems);\n                }\n            }\n            /** Allow the selection one of new labels that not exists in the list */\n            if (event.keyCode === Keys.enter) {\n                this._manageSetAutocompleteItem();\n            }\n        }\n        return keydown;\n    }\n\n    /**\n     * Listens to focus events on the <input> host and overrides the parent focus events in order to launch the autocomplete\n     * If empty input :\n     * - display top relevent labels if the auto-suggest wildcard is configured\n     * - restart the autocomplete if no auto-suggest wildcard is found\n     * If not empty input :\n     * retrieve suggestions based on this input text\n     */\n    @HostListener(\"focus\") focus() {\n        this.start();\n        this.active();\n    }\n\n    /**\n     * Listens to blur events (out of focus) on the <input> host and overrides the parent blur events\n     */\n    @HostListener(\"blur\", [\"$event\"]) blur(event: FocusEvent) {\n        this._manageSetAutocompleteItem();\n        this.init();\n    }\n\n    /**\n     * Overrides the parent inputChanged method, so that it is possible to reinitialize the autocomplete\n     * @param event\n     */\n    @HostListener(\"input\", [\"$event\"]) inputChanged(event: Event) {\n        switch (this.getState()) {\n            case AutocompleteState.OPENED:\n                this.suggest(); // Just request more data, but no state change\n                break;\n            case AutocompleteState.START:\n            case AutocompleteState.ACTIVE:\n                this.active(); // get more data, and change state if not already ACTIVE\n                break;\n            case AutocompleteState.SELECTED:\n                this.start(); // The model changed because we selected a value ==> we restart in case the user keeps typing\n                this.active();\n                break;\n            case AutocompleteState.INIT:\n                break;\n        }\n    }\n\n    /**\n     * Updates the <input>'s placeholder to avoid displaying something\n     * when there are labelsItems displayed to the left.\n     */\n    updatePlaceholder() {\n        this._placeholder = this.labelsItems.length > 0 ? \"\" : this.placeholder;\n    }\n\n    private _manageSetAutocompleteItem(): void {\n        /** Always consider if there is text in the <input> and that it is not yet added in the labelsItems  */\n        if (!!this.getInputValue() && this.getInputValue() !== \"\") {\n            if (this.allowNewLabels) {\n                /** When it is an add Labels action ==> check the privilege to create new label */\n                if (\n                    !this.public ||\n                    (this.public && this.allowManagePublicLabels)\n                ) {\n                    this.setAutocompleteItem({\n                        display: this.getInputValue(),\n                        category: \"\",\n                    });\n                }\n            } else {\n                /** For all other actions on the labels, check if the typed text equals an existing label in the _suggestions  */\n                if (this._suggestions.indexOf(this.getInputValue()) > -1) {\n                    this.setAutocompleteItem({\n                        display: this.getInputValue(),\n                        category: \"\",\n                    });\n                }\n            }\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {UtilsModule} from \"@sinequa/components/utils\";\n\nimport {BsModalModule} from \"@sinequa/components/modal\";\n\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";\n\nimport {LabelPipe} from \"./label.pipe\";\nimport {Labels} from \"./labels.component\";\nimport {ResultLabels} from \"./result-labels.component\";\nimport {LabelsAutocomplete} from \"./labels-autocomplete.directive\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsModalModule,\n        BsAutocompleteModule,\n    ],\n    declarations: [\n        LabelPipe, Labels, ResultLabels, LabelsAutocomplete\n    ],\n    exports: [\n        LabelPipe, Labels, ResultLabels, LabelsAutocomplete\n    ],\n})\nexport class LabelsModule {\n}\n","<form name=\"labelsForm\" class=\"d-inline\">\n    <section class=\"sq-dropdown-form\">\n        <div class=\"form-control\">\n            <span\n                *ngFor=\"let item of labelsItems\"\n                class=\"badge badge-pill badge-info align-self-center\"\n                [ngClass]=\"{'label-public': public, 'label-private': !public}\">\n                {{ item.display }}\n                <span class=\"fas fa-times-circle clickable\" (click)=\"removeItem(item)\"></span>\n            </span>\n            <input type=\"text\"\n                class=\"input-autocomplete flex-grow-1\"\n                name=\"labelName\"\n                spellcheck=\"false\"\n                autocomplete=\"off\"\n                sqAutocompleteLabels\n                [public]=\"public\"\n                [placeholder]=\"'msg#labels.selectLabel' | sqMessage\"\n                [dropdown]=\"dropdown\"\n                [allowNewLabels]=\"allowNewLabels\"\n                [allowManagePublicLabels]=\"allowManagePublicLabels\"\n                (keydown)=\"keydown($event)\"\n                (keypress)=\"keypress($event)\"\n                (itemsUpdate)=\"onLabelsItemsChanged($event)\"\n                [disabled]=\"disableAutocomplete\"\n                [off]=\"disableAutocomplete\"\n                [class.disabled]=\"disableAutocomplete\"\n                [labelsItems]=\"labelsItems\">\n        </div>\n        <sq-autocomplete-list #dropdown>\n            <ng-template #itemTpl let-item>\n                <div class=\"autocomplete-item p-2\">{{item.display}}\n                </div>\n            </ng-template>\n        </sq-autocomplete-list>\n    </section>\n</form>\n\n\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from \"@angular/core\";\nimport { Keys } from \"@sinequa/core/base\";\nimport { AutocompleteItem } from \"@sinequa/components/autocomplete\";\n\n/**\n * Component containing a form and autocomplete to search\n * through the list labels according to a specific type (public/private) and select one(s) of them\n *\n * The component can be used as custom component in the Action\n * menu's modals.\n */\n\n@Component({\n    selector: \"sq-labels-autocomplete\",\n    templateUrl: \"./labels-autocomplete.component.html\",\n    styles: [\n        `\n            .sq-dropdown-form {\n                min-width: 13rem;\n                display: inline;\n            }\n            .disabled {\n                cursor: not-allowed;\n            }\n            :host ::ng-deep .sq-autocomplete-list {\n                width: 50% !important;\n            }\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n            .label-public {\n                background-color: #4fc3f7;\n                margin: 2px;\n            }\n            .label-private {\n                background-color: #7283a7;\n                margin: 2px;\n            }\n\n            :host div {\n                width: 100%;\n                display: flex;\n                flex-wrap: wrap;\n                align-items: center;\n                height: unset !important;\n            }\n            :host input {\n                border: none;\n                flex-grow: 1;\n                flex-basis: 100px;\n                min-width: 100px;\n            }\n            :host input:focus {\n                outline: none;\n            }\n        `,\n    ],\n})\nexport class BsLabelsAutocompleteComponent implements OnChanges {\n    /** Event synchronizing the list of selected labels and label's type in the parent component */\n    @Output() labelsUpdate = new EventEmitter<string[]>();\n\n    @Input() public: boolean; /** Whether labels are public/private */\n    @Input() disableAutocomplete: boolean = false /** Whether the autocomplete input is disabled or not */;\n    @Input() allowNewLabels: boolean; /** Whether enable adding new labels or not */\n    @Input() allowManagePublicLabels: boolean; /** Define the right of adding new labels */\n    @Input() initLabels: string[] = []; /** Initial labels to be displayed in the labelsAutocomplete input*/\n\n    labelsItems: AutocompleteItem[] = []; /** List of assigned labels to selected record(s) */\n\n    constructor(private elementRef: ElementRef) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.public) {\n            this.labelsItems = [];\n        }\n        if (changes.initLabels) {\n            this.labelsItems = this.initLabels.map((label) => {\n                return {\n                    display: label,\n                    category: \"\",\n                };\n            });\n        }\n    }\n\n    removeItem(item: AutocompleteItem) {\n        this.labelsItems.splice(this.labelsItems.indexOf(item), 1);\n        this.labelsItems = [\n            ...this.labelsItems,\n        ]; /** Need to programmatically update this.labelsItems object in order to fire ngOnChanges hook in sqAutocompleteLabels */\n        this.labelsUpdate.next(this.labelsItems.map((item) => item.display));\n    }\n\n    onLabelsItemsChanged(labelsItems: AutocompleteItem[]) {\n        this.labelsItems = labelsItems; /** Need to Programmatically update this.labelsItems to catch updates happening in the sqAutocompleteLabels  */\n        this.labelsUpdate.next(labelsItems.map((item) => item.display));\n    }\n\n    private getDropdownItem(): HTMLElement | null {\n        if (this.elementRef) {\n            let current: HTMLElement | null = this.elementRef\n                .nativeElement as HTMLElement;\n            while (current && !current.classList.contains(\"dropdown-item\")) {\n                current = current.parentElement;\n            }\n            return current;\n        }\n        return null;\n    }\n\n    keydown(event: KeyboardEvent) {\n        // Intercept tab and set focus to surrounding dropdown-item\n        if (event.keyCode === Keys.tab) {\n            const dropdownItem = this.getDropdownItem();\n            if (dropdownItem) {\n                dropdownItem.focus();\n                event.preventDefault();\n                return false;\n            }\n        }\n        return undefined;\n    }\n\n    keypress(event: KeyboardEvent) {\n        if (event.keyCode === Keys.enter) {\n            // Stop click event firing on surrounding anchor (Firefox)\n            event.preventDefault();\n            return false;\n        }\n        return undefined;\n    }\n}\n","<form name=\"renameLabel\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#renameLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-danger\" role=\"alert\">\n                {{'msg#renameLabel.alertText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#renameLabel.oldLabels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n            <b><label for=\"label\">{{'msg#renameLabel.newLabel' | sqMessage}}</label></b>\n            <input\n                [sqValidation]=\"form\"\n                type=\"text\"\n                class=\"form-control\"\n                id=\"label\"\n                formControlName=\"label\"\n                autocomplete=\"off\"\n                spellcheck=\"off\"\n                placeholder=\"{{'msg#renameLabel.newLabel' | sqMessage}}\">\n        </div>\n    </sq-modal>\n</form>\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Inject,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport {\n    FormBuilder,\n    FormGroup,\n    FormControl,\n    Validators,\n} from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\n\n@Component({\n    selector: \"sq-rename-label\",\n    templateUrl: \"./rename-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsRenameLabel implements OnInit, OnDestroy {\n    public labelControl: FormControl;\n    public form: FormGroup;\n    public formChanges: Subscription;\n    public buttons: ModalButton[];\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            oldValues: string[],\n            newValue: string,\n            properties: ModalProperties\n        },\n        private formBuilder: FormBuilder,\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.labelControl = new FormControl(\n            this.model.newValue,\n            Validators.required\n        );\n        this.form = this.formBuilder.group({\n            label: this.labelControl,\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges, () => {\n            this.model.newValue = this.labelControl.value;\n        });\n\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#renameLabel.btnRename\",\n                primary: true,\n                validation: this.form,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.renameLabels(\n                        this.model.oldValues,\n                        this.model.newValue,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.oldValues = values;\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    OnDestroy,\n} from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { LoginService } from \"@sinequa/core/login\";\nimport { LabelsService } from \"../../labels.service\";\nimport { Results } from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"sq-labels-menu\",\n    templateUrl: \"./labels-menu.component.html\",\n})\nexport class BsLabelsMenuComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() icon: string = \"fas fa-tags\";\n    @Input() autoAdjust: boolean = true;\n    @Input() autoAdjustBreakpoint: string = \"xl\";\n    @Input() collapseBreakpoint: string = \"sm\";\n    @Input() size: string;\n\n    menu: Action | undefined;\n\n    // Labels  actions\n    renameAction: Action;\n    deleteAction: Action;\n    bulkAddAction: Action;\n    bulkDeleteAction: Action;\n\n    private _loginServiceSubscription: Subscription;\n\n    constructor(\n        public loginService: LoginService,\n        public labelsService: LabelsService\n    ) {\n        this.renameAction = new Action({\n            text: \"msg#renameLabel.title\",\n            title: \"msg#renameLabel.title\",\n            action: () => {\n                this.labelsService.renameLabelModal();\n            },\n        });\n\n        this.deleteAction = new Action({\n            text: \"msg#deleteLabel.title\",\n            title: \"msg#deleteLabel.title\",\n            action: () => {\n                this.labelsService.deleteLabelModal();\n            },\n        });\n\n        this.bulkAddAction = new Action({\n            text: \"msg#bulkAddLabel.title\",\n            title: \"msg#bulkAddLabel.title\",\n            action: () => {\n                this.labelsService.bulkAddLabelModal();\n            },\n        });\n\n        this.bulkDeleteAction = new Action({\n            text: \"msg#bulkRemoveLabel.title\",\n            title: \"msg#bulkRemoveLabel.title\",\n            action: () => {\n                this.labelsService.bulkRemoveLabelModal();\n            },\n        });\n    }\n\n    ngOnInit() {\n        this._loginServiceSubscription = this.loginService.events.subscribe(\n            (event) => {\n                if (event.type === \"session-changed\") {\n                    this.updateMenu();\n                }\n            }\n        );\n    }\n\n    ngOnDestroy() {\n        if (this._loginServiceSubscription) {\n            this._loginServiceSubscription.unsubscribe();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.results) {\n            this.updateMenu();\n        }\n    }\n\n    updateMenu() {\n        if (!this.loginService.complete) {\n            this.menu = undefined;\n            return;\n        }\n\n        if (\n            !this.labelsService.publicLabelsField &&\n            !this.labelsService.privateLabelsField\n        ) {\n            this.menu = undefined;\n            return;\n        }\n\n        const labelsActions: Action[] = [this.renameAction, this.deleteAction];\n\n        /** Allow Bulk actions only if there are some results */\n        if (!!this.results && !!this.results.records) {\n            labelsActions.push(this.bulkAddAction);\n            labelsActions.push(this.bulkDeleteAction);\n        }\n\n        this.menu = new Action({\n            icon: this.icon,\n            text: \"msg#labels.labels\",\n            children: labelsActions,\n        });\n    }\n}\n","<form name=\"deleteLabel\" novalidate>\n    <sq-modal [title]=\"title\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert\" [ngClass]=\"{'alert-danger': model.properties.action === 3, 'alert-warning': model.properties.action === 5}\" role=\"alert\">\n                {{alert | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport {\n    UpdateLabelsAction,\n    ModalProperties,\n    LabelsService,\n} from \"../../labels.service\";\nimport { Utils } from \"@sinequa/core/base\";\n\n@Component({\n    selector: \"sq-delete-label\",\n    templateUrl: \"./delete-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsDeleteLabel implements OnInit {\n    public buttons: ModalButton[];\n    public title: string;\n    public alert: string;\n    public btnText: string;\n    public isProcessing: boolean = false;\n\n    private _action: () => void;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            values: string[],\n            properties: ModalProperties\n        },\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        switch (this.model.properties.action) {\n            case UpdateLabelsAction.delete:\n                this.title = \"msg#deleteLabel.title\";\n                this.btnText = \"msg#deleteLabel.btnDelete\";\n                this.alert = \"msg#deleteLabel.alertText\";\n                this._action = () => {\n                    const observable = this.labelsService.deleteLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                };\n                break;\n            case UpdateLabelsAction.bulkRemove:\n                this.title = \"msg#bulkRemoveLabel.title\";\n                this.btnText = \"msg#bulkRemoveLabel.btnBulkRemove\";\n                this.alert = \"msg#bulkRemoveLabel.alertText\";\n                this._action = () => {\n                    const observable = this.labelsService.bulkRemoveLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                };\n                break;\n            default:\n                this.title = \"\";\n                this.btnText = \"\";\n                this.alert = \"\";\n                break;\n        }\n\n        this.buttons = [\n            new ModalButton({\n                text: this.btnText,\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: this._action,\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.values = values;\n    }\n}\n","<form name=\"addLabel\" novalidate>\n    <sq-modal [title]=\"'msg#bulkAddLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-warning\" role=\"alert\">\n                {{'msg#bulkAddLabel.alertText' | sqMessage}}\n            </div>\n            <div *ngIf=\"model.properties.allowManagePublicLabels || !model.properties.public \" class=\"alert alert-info\" role=\"alert\">\n                {{'msg#bulkAddLabel.infoText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n            <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n            <sq-labels-autocomplete\n                (labelsUpdate)=\"onLabelsChanged($event)\"\n                [public]=\"model.properties.public\"\n                [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                [allowNewLabels]=\"model.properties.allowNewLabels\"\n                [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n            </sq-labels-autocomplete>\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\nimport { Utils } from \"@sinequa/core/base\";\n\n@Component({\n    selector: \"sq-add-label\",\n    templateUrl: \"./add-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsAddLabel implements OnInit {\n    public buttons: ModalButton[];\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            values: string[],\n            properties: ModalProperties\n        },\n        private labelsService: LabelsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#bulkAddLabel.btnBulkAdd\",\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.bulkAddLabels(\n                        this.model.values,\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.isProcessing = false;\n                                this.modalRef.close(ModalResult.OK);\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n    }\n\n    onLabelsChanged(values: string[]) {\n        this.model.values = values;\n    }\n}\n","<form name=\"editLabel\" novalidate>\n    <sq-modal [title]=\"'msg#editLabel.title'\" [buttons]=\"buttons\" [isProcessingState]=\"isProcessing\">\n        <div class=\"form-group sq-form-group\">\n            <div class=\"alert alert-warning\" role=\"alert\">\n                {{'msg#editLabel.alertText' | sqMessage}}\n            </div>\n            <div *ngIf=\"model.properties.allowManagePublicLabels || !model.properties.public \" class=\"alert alert-info\" role=\"alert\">\n                {{'msg#editLabel.infoText' | sqMessage}}\n            </div>\n            <section>\n                <div *ngFor=\"let item of model.properties.radioButtons\" class=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" class=\"custom-control-input\" id=\"{{item.id}}\" name=\"nature\" value=\"{{item.value}}\"\n                        [checked]=\"item.checked\" [disabled]=\"item.disabled\" (click)=\"updateLabelsNature(item.value)\" [ngClass]=\"{'disabled': item.disabled, 'clickable': !item.disabled}\">\n                    <label class=\"custom-control-label\" for=\"{{item.id}}\">{{ item.name | sqMessage }}</label>\n                </div>\n            </section>\n\n            <section *ngIf=\"record\">\n                <b><label for=\"label\">{{'msg#labels.labels' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\"\n                    [initLabels]=\"initialLabels\">\n                </sq-labels-autocomplete>\n            </section>\n\n            <section *ngIf=\"!record\">\n                <b><label for=\"label\">{{'msg#editLabel.labelsToBeAdded' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsToBeAddedChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n                </sq-labels-autocomplete>\n                <b><label for=\"label\">{{'msg#editLabel.labelsToBeRemoved' | sqMessage}}</label></b>\n                <sq-labels-autocomplete\n                    (labelsUpdate)=\"onLabelsToBeRemovedChanged($event)\"\n                    [public]=\"model.properties.public\"\n                    [disableAutocomplete]=\"model.properties.disableAutocomplete\"\n                    [allowNewLabels]=\"model.properties.allowNewLabels\"\n                    [allowManagePublicLabels]=\"model.properties.allowManagePublicLabels\">\n                </sq-labels-autocomplete>\n            </section>\n\n        </div>\n    </sq-modal>\n</form>\n","import { Component, OnInit, Inject, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    ModalButton,\n    ModalResult,\n    MODAL_MODEL,\n    ModalRef,\n} from \"@sinequa/core/modal\";\nimport { ModalProperties, LabelsService } from \"../../labels.service\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Record } from \"@sinequa/core/web-services\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { NotificationsService } from \"@sinequa/core/notification\";\n\n@Component({\n    selector: \"sq-edit-label\",\n    templateUrl: \"./edit-label.html\",\n    styles: [\n        `\n            .clickable {\n                cursor: pointer;\n            }\n            .clickable:hover {\n                opacity: 85%;\n            }\n        `,\n    ],\n})\nexport class BsEditLabel implements OnInit {\n    public selectedRecordsIds: string[];\n    public buttons: ModalButton[];\n    /** Initial labels list assigned to a record */\n    public initialLabels: string[] = [];\n    public record: Record | undefined;\n    public isProcessing: boolean = false;\n\n    constructor(\n        @Inject(MODAL_MODEL)\n        public model: {\n            valuesToBeAdded: string[],\n            valuesToBeRemoved: string[],\n            properties: ModalProperties\n        },\n        private appService: AppService,\n        private selectionService: SelectionService,\n        private labelsService: LabelsService,\n        private searchService: SearchService,\n        private notificationService: NotificationsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private modalRef: ModalRef\n    ) {}\n\n    ngOnInit() {\n        this.selectedRecordsIds = !!this.selectionService.getSelectedIds()\n            ? this.selectionService.getSelectedIds()\n            : [];\n        if (this.selectedRecordsIds.length === 1) {\n            this.record = this.searchService.getRecordFromId(\n                this.selectedRecordsIds[0]\n            );\n            this.initialLabels = this._getInitialRecordLabels();\n        }\n        this.buttons = [\n            new ModalButton({\n                text: \"msg#editLabel.btnEdit\",\n                primary: true,\n                result: ModalResult.Custom,\n                anchor: true,\n                action: () => {\n                    const observable = this.labelsService.addLabels(\n                        this.model.valuesToBeAdded,\n                        this.selectionService.getSelectedIds(),\n                        this.model.properties.public\n                    );\n                    if (observable) {\n                        this.isProcessing = true;\n                        this.changeDetectorRef.markForCheck();\n                        Utils.subscribe(\n                            observable,\n                            () => {},\n                            (error) => {\n                                this.notificationService.error(\n                                    \"msg#editLabel.errorFeedback\"\n                                );\n                                this.modalRef.close(error);\n                            },\n                            () => {\n                                this.labelsService\n                                    .removeLabels(\n                                        this.model.valuesToBeRemoved,\n                                        this.selectionService.getSelectedIds(),\n                                        this.model.properties.public\n                                    )\n                                    .subscribe(\n                                        () => {},\n                                        (error) => {\n                                            this.notificationService.error(\n                                                \"msg#editLabel.errorFeedback\"\n                                            );\n                                            this.modalRef.close(error);\n                                        },\n                                        () => {\n                                            this.isProcessing = false;\n                                            this.modalRef.close(ModalResult.OK);\n                                            this.notificationService.success(\n                                                \"msg#editLabel.successFeedback\"\n                                            );\n                                            this.searchService.search(); /** Update the display immediately in the components and facets*/\n                                        }\n                                    );\n                            }\n                        );\n                    }\n                },\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel,\n            }),\n        ];\n    }\n\n    updateLabelsNature(nature: boolean) {\n        this.model.properties.public = nature;\n        this.model.valuesToBeRemoved = [];\n        this.model.valuesToBeAdded = [];\n        if (this.selectedRecordsIds.length === 1) {\n            this.initialLabels = this._getInitialRecordLabels(); /** update initial labels */\n        }\n    }\n\n    onLabelsChanged(values: string[]) {\n        if (!!this.initialLabels) {\n            this.model.valuesToBeAdded = values.filter(\n                (value) => !this.initialLabels.find((label) => label === value)\n            );\n            this.model.valuesToBeRemoved = this.initialLabels.filter(\n                (label) => !values.find((value) => value === label)\n            );\n        } else {\n            this.model.valuesToBeAdded = values;\n            this.model.valuesToBeRemoved = [];\n        }\n    }\n\n    onLabelsToBeAddedChanged(values: string[]) {\n        this.model.valuesToBeAdded = values;\n    }\n\n    onLabelsToBeRemovedChanged(values: string[]) {\n        this.model.valuesToBeRemoved = values;\n    }\n\n    /**\n     * Return the list of labels already assigned to the selected record\n     */\n    private _getInitialRecordLabels(): string[] {\n        if (!!this.record) {\n            const field = this.model.properties.public\n                ? this.labelsService.publicLabelsField\n                : this.labelsService.privateLabelsField;\n            const labelsField = this.appService.resolveColumnAlias(field);\n            if (!this.model.properties.public) {\n                return !!this.record[labelsField]\n                    ? (this.labelsService.removePrivatePrefix(\n                          this.record[labelsField]\n                      ) as string[])\n                    : ([] as string[]);\n            }\n            return this.record[labelsField] || [];\n        } else {\n            return [];\n        }\n    }\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsAutocompleteModule} from \"@sinequa/components/autocomplete\";\nimport {LabelsModule} from \"../labels.module\";\n\nimport {BsRenameLabel} from \"./rename-label/rename-label\";\nimport {BsLabelsMenuComponent} from \"./labels-menu/labels-menu.component\";\n\nimport {LABELS_COMPONENTS, LabelsComponents} from \"../labels.service\";\nimport { BsDeleteLabel } from './delete-label/delete-label';\nimport { BsAddLabel } from './add-label/add-label';\nimport { BsLabelsAutocompleteComponent } from './labels-autocomplete/labels-autocomplete.component';\nimport { BsEditLabel } from './edit-label/edit-label';\n\nexport const defaultLabelComponents: LabelsComponents = {\n    labelsAutocompleteComponent: BsLabelsAutocompleteComponent,\n    renameModal: BsRenameLabel,\n    deleteModal: BsDeleteLabel,\n    addModal: BsAddLabel,\n    editModal: BsEditLabel\n};\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsModalModule,\n        BsAutocompleteModule,\n        BsActionModule,\n        LabelsModule\n    ],\n    declarations: [\n        BsLabelsAutocompleteComponent,\n        BsRenameLabel,\n        BsLabelsMenuComponent,\n        BsDeleteLabel,\n        BsAddLabel,\n        BsEditLabel\n    ],\n    exports: [\n        LabelsModule,\n        BsLabelsAutocompleteComponent,\n        BsRenameLabel,\n        BsLabelsMenuComponent,\n        BsDeleteLabel,\n        BsAddLabel,\n        BsEditLabel\n    ],\n    providers: [\n        {provide: LABELS_COMPONENTS, useValue: defaultLabelComponents},\n    ]\n})\nexport class BsLabelsModule {\n}\n","export default {\n    \"labels\": {\n        \"labels\": \"Labels\",\n        \"publicLabels\": \"Public Labels\",\n        \"privateLabels\": \"Private Labels\",\n        \"public\": \"Public\",\n        \"private\": \"Private\",\n        \"selectLabel\": \"Select label(s)\",\n        \"deleteLabelAreYouSure\": \"Are you sure you want to remove the label: {name}?\",\n        \"bulkAddLabelAreYouSure\": \"Are you sure you want to bulk add the label: {name} to the results of the current query?\",\n        \"bulkRemoveLabelAreYouSure\": \"Are you sure you want to bulk remove the label: {name} to the results of the current query?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Add public label\",\n        \"selectPublicLabelTitle\": \"Select public label\",\n        \"removePublicLabelTitle\": \"Remove public label\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Add private label\",\n        \"selectPrivateLabelTitle\": \"Select private label\",\n        \"removePrivateLabelTitle\": \"Remove private label\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Rename Label(s) globally\",\n        \"btnRename\": \"Rename\",\n        \"newLabel\": \"New Label\",\n        \"oldLabels\": \"Old label(s)\",\n        \"alertText\": \"This action renames the label(s) in the index and is irreversible\",\n        \"successFeedback\": \"Label(s) renamed in the index\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Delete label(s) globally\",\n        \"btnDelete\": \"Delete\",\n        \"alertText\": \"This action deletes the selected label(s) from the index and is irreversible\",\n        \"successFeedback\": \"Label(s) deleted from the index\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Remove label(s) from the current results\",\n        \"btnBulkRemove\": \"Remove\",\n        \"alertText\": \"This action removes the selected label(s) from all results reported by the engine (not only from the first page)\",\n        \"successFeedback\": \"Label(s) removed from all results reported by the engine\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Add label(s) to the current results\",\n        \"btnBulkAdd\": \"Add\",\n        \"alertText\": \"This action assigns the selected label(s) to all results reported by the engine (not only to the first page)\",\n        \"infoText\": \"Press 'Enter' to add a new label that does not exist in the suggestions\",\n        \"successFeedback\": \"Label(s) assigned to all results reported by the engine\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Edit the label(s) of the selected result(s)\",\n        \"btnEdit\": \"Save\",\n        \"alertText\": \"This action edits the label(s) of the selected result(s)\",\n        \"infoText\": \"Press 'Enter' to add a new label that does not exist in the suggestions\",\n        \"labelsToBeRemoved\": \"Label(s) to be removed\",\n        \"labelsToBeAdded\": \"Label(s) to be added\",\n        \"successFeedback\": \"Label(s) of the selected result(s) edited\",\n        \"errorFeedback\": \"An error occurred. Request failed\"\n    }\n\n};\n","export default {\n    \"labels\": {\n        \"labels\": \"Libellés\",\n        \"publicLabels\": \"Libellés publics\",\n        \"privateLabels\": \"Libellés privés\",\n        \"public\": \"Public\",\n        \"private\": \"Privé\",\n        \"selectLabel\": \"Sélectionner le(s) libellé(s)\",\n        \"deleteLabelAreYouSure\": \"Etes-vous sûr de vouloir effacer le libellé: {name} ?\",\n        \"bulkAddLabelAreYouSure\": \"Etes-vous sûr de vouloir ajouter en lot le libellé: {name} aux résultats de la requête courante ? \",\n        \"bulkRemoveLabelAreYouSure\": \"Etes-vous sûr de vouloir enlever en lot le libellé: {name} aux résultats de la requête courante ?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Ajouter un libellé public\",\n        \"selectPublicLabelTitle\": \"Sélectionner le libellé public\",\n        \"removePublicLabelTitle\": \"Supprimer le libellé public\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Ajouter un libellé privé\",\n        \"selectPrivateLabelTitle\": \"Sélectionner le libellé privé\",\n        \"removePrivateLabelTitle\": \"Supprimer le libellé privé\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Renommer le(s) libellé(s) globalement\",\n        \"btnRename\": \"Renommer\",\n        \"newLabel\": \"Nouveau Libellé\",\n        \"oldLabels\": \"Ancien(s) libellé(s)\",\n        \"alertText\": \"Cette action renomme le(s) libellé(s) sélectionné(s) dans l'index et est irréversible\",\n        \"successFeedback\": \"Libellé(s) renommé(s) dans l'index\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Supprimer le(s) libellé(s) globalement\",\n        \"btnDelete\": \"Supprimer\",\n        \"alertText\": \"Cette action supprime le(s) libellé(s) sélectionné(s) de l'index et est irréversible\",\n        \"successFeedback\": \"Libellé(s) supprimé(s) de l'index\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Enlever le(s) libellé des résultats courants\",\n        \"btnBulkRemove\": \"Enlever\",\n        \"alertText\": \"Cette action enlève le(s) libellé(s) sélectionné(s) de tous les résultats remontés par le moteur (pas seulement de la première page)\",\n        \"successFeedback\": \"Libellé(s) enlevé(s) de tous les résultats remontés par le moteur\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Ajouter le(s) libellé(s) aux résultats courants\",\n        \"btnBulkAdd\": \"Ajouter\",\n        \"alertText\": \"Cette action ajoute le(s) libellé(s) sélectionné(s) à tous les résultats remontés par le moteur (pas seulement à la première page)\",\n        \"infoText\": \"Appuyez sur 'Entrée' pour ajouter un nouveau libellé qui n'existe pas dans les suggestions\",\n        \"successFeedback\": \"Libellé(s) ajouté(s) à tous les résultats remontés par le moteur\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Editer le(s) libellé(s) de(s) résultat(s) sélectionné(s)\",\n        \"btnEdit\": \"Sauvegarder\",\n        \"alertText\": \"Cette action édite le(s) libellé(s) de(s) résultat(s) sélectionné(s)\",\n        \"infoText\": \"Appuyez sur 'Entrée' pour ajouter un nouveau libellé qui n'existe pas dans les suggestions\",\n        \"labelsToBeRemoved\": \"Libellé(s) à enlever\",\n        \"labelsToBeAdded\": \"Libellé(s) à ajouter\",\n        \"successFeedback\": \"Libellé(s) de(s) résultat(s) sélectionné(s) édité(s)\",\n        \"errorFeedback\": \"Une erreur s'est produite. Requête non aboutie\"\n    }\n};\n","export default {\n    \"labels\": {\n        \"labels\": \"Etiketten\",\n        \"publicLabels\": \"Öffentliche Etiketten\",\n        \"privateLabels\": \"Private Etiketten\",\n        \"public\": \"Öffentliche\",\n        \"private\": \"Private\",\n        \"selectLabel\": \"Etikett(en) auswählen\",\n        \"deleteLabelAreYouSure\": \"Möchten Sie dieses Etikett wirklich löschen: {name}?\",\n        \"bulkAddLabelAreYouSure\": \"Möchten Sie wirklich das Etikett {name} zu allen Ergebnissen der aktuellen Suche hinzufügen?\",\n        \"bulkRemoveLabelAreYouSure\": \"Möchten Sie wirklich das Etikett {name} von allen Ergebnissen der aktuellen Suche entfernen?\",\n        \"addPublicLabelText\": \"+\",\n        \"removePublicLabelText\": \"×\",\n        \"addPublicLabelTitle\": \"Öffentliches Etikett hinzufügen\",\n        \"selectPublicLabelTitle\": \"Öffentliches Etikett auswählen\",\n        \"removePublicLabelTitle\": \"Öffentliches Etikett entfernen\",\n        \"addPrivateLabelText\": \"+\",\n        \"removePrivateLabelText\": \"×\",\n        \"addPrivateLabelTitle\": \"Privates Etikett hinzufügen\",\n        \"selectPrivateLabelTitle\": \"Privates Etikett auswählen\",\n        \"removePrivateLabelTitle\": \"Privates Etikett entfernen\"\n    },\n\n    \"renameLabel\": {\n        \"title\": \"Etikett(en) unbenennen\",\n        \"btnRename\": \"Umbennen\",\n        \"newLabel\": \"Neuen Etikett\",\n        \"oldLabels\": \"Altes Etikett(en)\",\n        \"alertText\": \"Diese Aktion benennt das (die) ausgewählte(n) Etikett(en) im Index um und ist unwiderruflich\",\n        \"successFeedback\": \"Etikett(en), das (die) im Index umbenannt wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"deleteLabel\": {\n        \"title\": \"Etikett(en) global entfernen\",\n        \"btnDelete\": \"Löschen\",\n        \"alertText\": \"Diese Aktion löscht das (die) ausgewählte(n) Etikett(en) aus dem Index und ist unwiderruflich\",\n        \"successFeedback\": \"Etikett(en), das (die) aus dem Index gelöscht wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"bulkRemoveLabel\": {\n        \"title\": \"Etikett(en) von aktuellen Ergebnissen entfernen\",\n        \"btnBulkRemove\": \"Entfernen\",\n        \"alertText\": \"Diese Aktion löscht das (die) ausgewählte(n) Etikett(en) aus allen gefundenen Ergebnisse (nicht nur die der ersten Seite)\",\n        \"successFeedback\": \"Etikett(en), das (die) aus allen gefundenen Ergebnissen gelöscht wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"bulkAddLabel\": {\n        \"title\": \"Etikett(en) zu aktuellen Ergebnissen hinzufügen\",\n        \"btnBulkAdd\": \"Hinzufügen\",\n        \"alertText\": \"Diese Aktion fügt das (die) ausgewählte(n) Etikett(en) zu allen gefundenen Ergebnissen (nicht nur denen der ersten Seite) hinzu\",\n        \"infoText\": \"klicken Sie auf 'Enter', um ein neues Etikett, das nicht in den Vorschlägen existiert, hinzuzufügen\",\n        \"successFeedback\": \"Etikett(en), das (die) allen gefundenen Ergebnissen hinzugefügt wurde(n)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    },\n\n    \"editLabel\": {\n        \"title\": \"Bearbeiten des (der) Etikett(en) aus dem (den) ausgewählten Ergebnis(sen)\",\n        \"btnEdit\": \"speichern\",\n        \"alertText\": \"Diese Aktion bearbeitet das (die) Etikett(en) des (der) ausgewählten Ergebnisse(s)\",\n        \"infoText\": \"klicken Sie auf 'Enter', um ein neues Etikett, das nicht in den Vorschlägen existiert, hinzuzufügen\",\n        \"labelsToBeRemoved\": \"Zu löschende(s) Etikett(en)\",\n        \"labelsToBeAdded\": \"Hinzuzufügende(s) Etikett(en)\",\n        \"successFeedback\": \"Etikett(en), das (die) zu dem (den) ausgewählten Ergebnis(sen) bearbeit(en)\",\n        \"errorFeedback\": \"Ein Fehler ist aufgetreten. Die Suchanfrage war erfolglos\"\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\nimport _enLabels from \"./en\";\nimport _frLabels from \"./fr\";\nimport _deLabels from \"./de\";\n\nconst enLabels = Utils.merge({}, _enLabels, enSearch, enModal);\nconst frLabels = Utils.merge({}, _frLabels, frSearch, frModal);\nconst deLabels = Utils.merge({}, _deLabels, deSearch, deModal);\n\nexport { enLabels, frLabels, deLabels };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵpropertyInterpolate","i0.ɵɵtext","i0.ɵɵtemplate","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtextInterpolate","i0.ɵɵelement","i0.ɵɵtextInterpolate1","i0.ɵɵclassProp"],"mappings":"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"}