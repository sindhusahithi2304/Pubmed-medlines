{"version":3,"file":"sinequa-components-results-view.js","sources":["../../../projects/components/results-view/results-view.service.ts","../projects/components/results-view/bootstrap/results-grid-view/results-grid-view.html","../projects/components/results-view/bootstrap/results-grid-view/results-grid-view.ts","../projects/components/results-view/bootstrap/results-view-selector/results-view-selector.ts","../projects/components/results-view/bootstrap/results-view-selector/results-view-selector.html","../../projects/components/results-view/bootstrap/results-view-module.ts","../../projects/components/results-view/messages/en.ts","../../projects/components/results-view/messages/fr.ts","../../projects/components/results-view/messages/de.ts","../../projects/components/results-view/messages/index.ts","../../../projects/components/results-view/sinequa-components-results-view.ts"],"sourcesContent":["import { Injectable, Inject, InjectionToken } from \"@angular/core\";\nimport { Router, ActivatedRoute, NavigationEnd } from \"@angular/router\";\nimport { Subject, Observable } from \"rxjs\";\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { Query } from '@sinequa/core/app-utils';\n\n/**\n * Configuration of a Results View\n */\nexport interface ResultsView {\n    /** Name of the results view */\n    name: string;\n    /** Type of the results view (not used internally, but may be useful if multiple views share a common component) */\n    type: string;\n    /** How the results view should be displayed (default to the name) */\n    display?: string;\n    /** Icon class for the results view */\n    icon?: string;\n    /** List of tab for which this tab can be displayed (defaults to all if undefined) */\n    includedTabs?: string[];\n    /** List of tab for which this tab is excluded (defaults to none if undefined) */\n    excludedTabs?: string[];\n    /**\n     * Method called when selecting this results view. It can be used to modify the search query\n     * when a view has specific data to display. If the method returns true, then selecting this view\n     * triggers a search and the view selection becomes effective upon results. If the method results false,\n     * (or if the method is undefined), then selecting this view does not trigger a new search\n     * and the view selection is immediate.\n     */\n    beforeSearch?: (query: Query, previousView: ResultsView) => boolean;\n}\n\nexport interface ResultsViewEvent {\n    type: \"before-select\" | \"after-select\" | \"select-cancelled\";\n}\n\nexport interface ResultsViewBeforeSelectEvent extends ResultsViewEvent {\n    type: \"before-select\";\n    view: ResultsView;\n    promises: Promise<boolean>[];\n}\n\nexport interface ResultsViewAfterSelectEvent extends ResultsViewEvent {\n    type: \"after-select\";\n    view: ResultsView;\n}\n\nexport interface ResultsViewSelectCancelledEvent extends ResultsViewEvent {\n    type: \"select-cancelled\";\n    view: ResultsView;\n}\n\nexport type ResultsViewEvents =\n    ResultsViewBeforeSelectEvent |\n    ResultsViewAfterSelectEvent |\n    ResultsViewSelectCancelledEvent;\n\nexport const RESULTS_VIEWS = new InjectionToken<ResultsView[]>(\"RESULTS_VIEWS\");\n//export const DEFAULT_VIEW = new InjectionToken<ResultsView>(\"DEFAULT_VIEW\");\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ResultsViewService {\n\n    protected _resultsView : ResultsView;\n    protected readonly _resultsViews : ResultsView[];\n\n    protected _resultsViewSelected = new Subject<ResultsView>();\n    protected _events = new Subject<ResultsViewEvents>();\n\n    protected pendingView: ResultsView | undefined;\n\n    /**\n     * Constructor: Expects the configuration for a list of views and\n     * one default view. These views can be set when importing the module in the AppModule\n     * with the ResultsViewModule.forRoot() method.\n     */\n    constructor(\n       // @Inject(DEFAULT_VIEW) public defaultView: ResultsView,\n        @Inject(RESULTS_VIEWS) resultsViews: ResultsView[],\n        protected router: Router,\n        protected route: ActivatedRoute,\n        protected searchService: SearchService\n    ) {\n        this._resultsViews = resultsViews;\n       // this._resultsView = this.defaultView;\n\n        /**\n         * Listener triggered whenever the URL changes\n         */\n        this.router.events.subscribe(event => {\n            if (event instanceof NavigationEnd) {\n                this.handleNavigation();\n            }\n        });\n\n        /**\n         * Listener triggered whenever new results come in.\n         * Some views must be displayed after a search, hence the\n         * pendingView flag.\n         */\n        this.searchService.resultsStream.subscribe(results => {\n            if(this.pendingView) {\n                this.searchService.queryStringParams.view = this.pendingView.name;\n                this.searchService.navigate({skipSearch: true});\n                this.pendingView = undefined;\n            }\n        });\n\n        // Automatically switch results views, if we go to a tab that has specific list of views\n        this.searchService.events.subscribe(event => {\n            // Event called just before the query for the new tab is searched\n            if(event.type === \"before-select-tab\" && event.query.tab) {\n                const views = this.getIncludedViews(event.query.tab);\n                // If there are views for this tab and they don't include the current one...\n                if(views.length > 0 && !views.includes(this.resultsView)) {\n                    // Set the view as pending\n                    this.pendingView = views[0];\n                    // Modify the query if needed\n                    if(this.pendingView.beforeSearch) {\n                        this.pendingView.beforeSearch(event.query, this.resultsView);\n                    }\n                }\n            }\n        })\n    }\n\n\n    // GETTERS\n\n    public get resultsViewSelected(): Observable<ResultsView> {\n        return this._resultsViewSelected;\n    }\n\n    public get events(): Observable<ResultsViewEvents> {\n        return this._events;\n    }\n\n    public get resultsView(): ResultsView {\n        return this._resultsView;\n    }\n\n    public get views(): ResultsView[] {\n        return this._resultsViews;\n    }\n\n    // EVENT HANDLERS\n\n    /**\n     * Navigate to a new URL including the given results view's name\n     * @param view \n     */\n    protected navigate(view: ResultsView) {\n        let waitForResults = !!view.beforeSearch;\n        if(view.beforeSearch) {\n            waitForResults = view.beforeSearch(this.searchService.query, this.resultsView);\n        }\n        if(!waitForResults) {\n            // We switch view immediately via the search service (which centralizes the navigation)\n            this.searchService.queryStringParams.view = view.name;\n            this.searchService.navigate({skipSearch: true});\n        }\n        else {\n            // We set the view as \"pending\", that is waiting for new results to come in\n            this.pendingView = view;\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * Responds to a change in the URL: Sets the results view if the URL\n     * specifies a different results view name.\n     */\n    protected handleNavigation() {\n        const url = Utils.makeURL(this.router.url);\n        const view = this.getView(url.searchParams.get(\"view\"));\n        if(view && view !== this.resultsView) {\n            this.searchService.queryStringParams.view = view.name; // Needed when refreshing the page\n            this.setResultsView(view);\n        }\n    }\n\n    /**\n     * Sets the results view and emits an event\n     * @param view \n     */\n    protected setResultsView(view: ResultsView) {\n        this._resultsView = view;\n        this._events.next({type: \"after-select\", view});\n        this._resultsViewSelected.next(view);\n    }\n\n\n    // PUBLIC API\n\n    /**\n     * Selects the given results view. This method is asynchronous:\n     * - The selected results view might modify the query before being displayed\n     * - The view selection works with a navigation via the router (adding the view name to the URL)\n     * @param view \n     */\n    public selectResultsView(view: ResultsView) {\n        if (view) {\n            // Raise before event...\n            const beforeEvent: ResultsViewBeforeSelectEvent = {\n                type: \"before-select\",\n                view,\n                promises: []\n            }\n            this._events.next(beforeEvent);\n            if (beforeEvent.promises.length === 0) {\n                this.navigate(view);\n            }\n            else {\n                Promise.all(beforeEvent.promises)\n                    .then((results) => {\n                        const ok = results.every(result => result);\n                        if (ok) {\n                            this.navigate(view);\n                        }\n                        else {\n                            console.log(\"selectResultsView cancelled\");\n                            this._events.next({type: \"select-cancelled\", view});\n                        }\n                    })\n                    .catch((reason) => {\n                        console.log(\"selectResultsView error:\", reason);\n                        this._events.next({type: \"select-cancelled\", view});\n                    });\n            }\n        }\n        else {\n            console.error(\"Undefined Results View\");\n        }\n    }\n\n    /**\n     * Selects the results view with the given name. This method is asynchronous:\n     * - The selected results view might modify the query before being displayed\n     * - The view selection works with a navigation via the router (adding the view name to the URL)\n     * @param viewName \n     */\n    public selectResultsViewName(viewName: string){\n        const view = this.getView(viewName);\n        if (view) {\n            this.selectResultsView(view);\n        }\n    }\n\n    /**\n     * Returns the results view with the given name\n     * @param viewName \n     */\n    public getView(viewName): ResultsView | undefined {\n        return this.views.find(v => v.name === viewName);\n    }\n\n    /**\n     * Returns the list of results views compatible with a given tab\n     * @param tab \n     */\n    public getIncludedViews(tab?: string): ResultsView[] {\n        const views: ResultsView[] = [];\n        for (const view of this.views) {\n            const included = !!view.includedTabs\n                ? view.includedTabs.includes(tab || \"\")\n                : !view.excludedTabs || !view.excludedTabs.includes(tab || \"\");\n\n            if (included) {\n                views.push(view);\n            }\n        }\n        return views;\n    }\n\n}","<table class=\"sq-results-grid-view\">\n    <thead>\n        <tr>\n            <th class=\"sq-grid-view-checkbox\">\n                <label class=\"custom-control custom-checkbox\" title=\"{{(haveSelectedRecords ? 'msg#results.resultsGridView.unselectDocuments' : 'msg#results.resultsGridView.selectDocuments') | sqMessage}}\">\n                    <input class=\"custom-control-input\" type=\"checkbox\" [checked]=\"haveSelectedRecords\" (change)=\"toggleSelectedRecords()\">\n                    <span class=\"custom-control-label\">&#8203;</span>\n                </label>            \n            </th>\n            <th *ngFor=\"let columnData of columnsData\" scope=\"col\" [ngClass]=\"{'sq-clickable': isSortable(columnData)}\" (click)=\"setSort(columnData)\">{{columnData.config.title | sqMessage}}{{columnData.sortIndicator}}<span *ngIf=\"isSortable(columnData)\" class=\"{{columnData.sortIcon}}\"></span></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let record of results.records\">\n            <td class=\"sq-grid-view-checkbox\">\n                <sq-result-selector [record]=\"record\"></sq-result-selector>\n            </td>\n            <ng-container *ngFor=\"let columnData of columnsData; let $index = index\">\n                <td *ngIf=\"columnData.config.renderAsHtml\" [attr.scope]=\"$index === 0 ? 'row' : null\" [innerHTML]=\"record[columnData.config.field] | sqValue:columnData.column\"></td>\n                <td *ngIf=\"!columnData.config.renderAsHtml\" [attr.scope]=\"$index === 0 ? 'row' : null\">{{record[columnData.config.field] | sqValue:columnData.column}}</td>\n            </ng-container>\n        </tr>\n    </tbody>\n</table>","import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AppService, FormatService} from \"@sinequa/core/app-utils\";\nimport {CCColumn, Results} from \"@sinequa/core/web-services\";\nimport {SelectionService} from \"@sinequa/components/selection\";\nimport {SearchService} from \"@sinequa/components/search\";\nimport {ResultsView} from \"../../results-view.service\";\n\nexport interface GridView extends ResultsView {\n    columns: Column[];\n}\n\nexport interface Column {\n    active: boolean;\n    title: string;\n    field: string;\n    sortable: boolean;\n    renderAsHtml: boolean;\n}\n\nexport interface ColumnData {\n    config: Column;\n    column: CCColumn | undefined;\n    // Sorting data\n    sortIndex?: number;\n    ascending?: boolean;\n    sortIcon?: string;\n    sortIndicator?: string;\n}\n\n@Component({\n    selector: \"sq-results-grid-view\",\n    templateUrl: \"./results-grid-view.html\"\n})\nexport class BsResultsGridView implements OnChanges {\n    @Input() results: Results;\n    @Input() view: GridView;\n    private orderBy: string | undefined;\n    columnsData: ColumnData[] | undefined;\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public formatService: FormatService,\n        private selectionService: SelectionService) {\n    }\n\n    observeQueryFields() {\n        this.initSorts();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.columnsData) {\n            if (!!this.view.columns) {\n                this.columnsData = this.view.columns.filter(config => config.active).map(config => ({\n                    config: config,\n                    column: this.appService.getColumn(config.field)\n                }));\n                this.clearSorts();\n            }\n            else {\n                this.columnsData = [];\n            }\n        }\n        if (!!changes[\"query\"]) {\n            this.observeQueryFields();\n        }\n    }\n\n\n    toggleSelectedRecords() {\n        this.selectionService.toggleSelectedRecords();\n    }\n\n    get haveSelectedRecords(){\n        return this.selectionService.haveSelectedRecords;\n    }\n\n    getSortIndicator(columnData: ColumnData): string | undefined {\n        if (columnData.sortIndex === -1) {\n            return undefined;\n        }\n        if (this.maxSortIndex === 0) {\n            return undefined;\n        }\n        switch (columnData.sortIndex || -1 + 1) {\n            case 1: return \"\\u00B9\";\n            case 2: return \"\\u00B2\";\n            case 3: return \"\\u00B3\";\n            case 4: return \"\\u2074\";\n            case 5: return \"\\u2075\";\n            case 6: return \"\\u2076\";\n            case 7: return \"\\u2077\";\n            case 8: return \"\\u2078\";\n            case 9: return \"\\u2079\";\n            default: return \"\\u207A\";\n        }\n    }\n\n    ascendingFirst(column: Column): boolean {\n        //return this.appService.isNumber(column.field);\n        return false;\n    }\n\n    get maxSortIndex(): number {\n        let sortIndex = -1;\n        if (this.columnsData) {\n            for (const columnData of this.columnsData) {\n                if (columnData.sortIndex !== undefined && columnData.sortIndex > sortIndex) {\n                    sortIndex = columnData.sortIndex;\n                }\n            }\n        }\n        return sortIndex;\n    }\n\n    _setSort(columnData: ColumnData, ascending: boolean) {\n        const previousSortIndex = columnData.sortIndex;\n        if (previousSortIndex === -1) {\n            columnData.sortIndex = this.maxSortIndex + 1;\n        }\n        columnData.ascending = ascending;\n        columnData.sortIcon = columnData.ascending ? \"fas fa-caret-up\" : \"fas fa-caret-down\";\n        columnData.sortIndicator = this.getSortIndicator(columnData);\n        if (previousSortIndex === -1) {\n            if (this.columnsData) {\n                for (const columnData1 of this.columnsData) {\n                    columnData1.sortIndicator = this.getSortIndicator(columnData1);\n                }\n            }\n        }\n    }\n\n    _clearSort(columnData: ColumnData) {\n        const previousSortIndex = columnData.sortIndex || -1;\n        columnData.sortIndex = -1;\n        columnData.ascending = false;\n        columnData.sortIcon = \"fas fa-sort\";\n        columnData.sortIndicator = undefined;\n        if (previousSortIndex !== -1) {\n            if (this.columnsData) {\n                for (const columnData1 of this.columnsData) {\n                    if (columnData1.sortIndex !== undefined && columnData1.sortIndex > previousSortIndex) {\n                        columnData1.sortIndex--;\n                    }\n                    columnData1.sortIndicator = this.getSortIndicator(columnData1);\n                }\n            }\n        }\n    }\n\n    clearSorts() {\n        if (this.columnsData) {\n            for (const columnData of this.columnsData) {\n                this._clearSort(columnData);\n            }\n        }\n    }\n\n    isSortable(columnData: ColumnData): boolean {\n        return !!columnData && columnData.config.sortable && this.appService.isSortable(columnData.config.field);\n    }\n\n    initSorts() {\n        if (this.searchService.query.orderBy === this.orderBy) {\n            return;\n        }\n        this.orderBy = this.searchService.query.orderBy;\n        this.clearSorts();\n        if (!!this.orderBy) {\n            const parts = Utils.split(this.orderBy, \",\");\n            for (const part of parts) {\n                const tokens = Utils.split(part, \" \");\n                if (tokens.length > 0) {\n                    const field = tokens[0];\n                    if (this.columnsData) {\n                        const columnData = this.columnsData.find(value => Utils.eqNC(field, value.config.field));\n                        if (columnData && this.isSortable(columnData)) {\n                            this._setSort(columnData, tokens.length > 1 ? Utils.eqNC(tokens[1], \"asc\") : true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    setSort(columnData: ColumnData) {\n        if (this.isSortable(columnData)) {\n            if (columnData.sortIndex !== -1) {\n                if (this.ascendingFirst(columnData.config)) {\n                    if (columnData.ascending) {\n                        this._setSort(columnData, false);\n                    }\n                    else {\n                        this._clearSort(columnData);\n                    }\n                }\n                else {\n                    if (columnData.ascending) {\n                        this._clearSort(columnData);\n                    }\n                    else {\n                        this._setSort(columnData, true);\n                    }\n                }\n            }\n            else {\n                this._setSort(columnData, this.ascendingFirst(columnData.config));\n            }\n            const orderBy: string[] = [];\n            if (this.columnsData) {\n                for (let sortIndex = 0; ; sortIndex++) {\n                    const columnData = this.columnsData.find(columnData => columnData.sortIndex === sortIndex);\n                    if (!columnData) {\n                        break;\n                    }\n                    if (orderBy.length !== 0) {\n                        orderBy.push(\",\");\n                    }\n                    orderBy.push(columnData.config.field);\n                    if (!columnData.ascending) {\n                        orderBy.push(\" desc\");\n                    }\n                }\n            }\n            if (orderBy.length === 0) {\n                this.searchService.query.orderBy = this.orderBy = undefined;\n            }\n            else {\n                this.searchService.query.orderBy = this.orderBy = orderBy.join(\"\");\n            }\n            this.searchService.search();\n        }\n    }\n\n}","import {Component, Input, OnChanges, SimpleChanges, OnDestroy} from \"@angular/core\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Query} from \"@sinequa/core/app-utils\";\nimport {Results} from \"@sinequa/core/web-services\";\nimport {ResultsViewService, ResultsView} from \"../../results-view.service\";\nimport {Action} from \"@sinequa/components/action\";\nimport {Subscription} from 'rxjs';\n\n\n@Component({\n    selector: \"sq-results-view-selector\",\n    templateUrl: \"./results-view-selector.html\"\n})\nexport class BsResultsViewSelector implements OnChanges, OnDestroy {\n    @Input() query: Query;  // Needed to get tab, and possibly include/exclude results views\n    @Input() results: Results;  // Needed to detect Changes\n    // UI inputs\n    @Input() rightAligned: boolean;\n    @Input() useDropdownMenu: boolean = true;\n    @Input() size: string;\n\n    private viewAction: Action | Action[] | undefined;\n    items: Action[];\n\n    constructor(\n        public resultsViewService : ResultsViewService\n    ) {\n        this._subscription = this.resultsViewService.resultsViewSelected.subscribe(\n            (view : ResultsView) => {\n                this.setCurrentViewAction();\n        });\n    }\n\n    private _subscription: Subscription;\n    ngOnDestroy(){\n        if(this._subscription){\n            this._subscription.unsubscribe();\n        }\n    }\n\n    private setCurrentViewAction() {\n        if (!!this.viewAction && !!this.resultsViewService.resultsView) {\n            if (!Utils.isArray(this.viewAction)) {\n                const view = this.resultsViewService.views.find(view => Utils.eqNC(this.resultsViewService.resultsView.name, view.name));\n                if (view) {\n                    this.viewAction.text = view.display || view.name;\n                    this.viewAction.icon = view.icon || 'fas fa-list';\n                }\n                else {\n                    this.viewAction.text = \"msg#results.unselectableViewDisplay\";\n                    this.viewAction.icon = \"far fa-square fa-fw\";\n                }\n                this.viewAction.messageParams = {values: {text: this.viewAction.text}}; // for title\n            }\n            else {\n                this.viewAction.forEach(action => {\n                    action.selected = Utils.eqNC(action.data.name, this.resultsViewService.resultsView.name);\n                });\n            }\n        }\n    }\n\n    private buildViewAction() {\n        if (this.resultsViewService.views.length <= 1) {\n            this.viewAction = undefined;\n            this.items = [];\n            return;\n        }\n        const includedViews = this.resultsViewService.getIncludedViews(this.query.tab);\n        if (includedViews.length <= 1) {\n            this.viewAction = undefined;\n            this.items = [];\n            return;\n        }\n        if (this.useDropdownMenu) {\n            this.viewAction = new Action({\n                title: \"msg#results.viewTitle\",\n                children: includedViews.map(view => new Action({\n                    text: view.display,\n                    icon: view.icon,\n                    data: view,\n                    action: (item: Action, event: Event) => {\n                        this.selectView(item.data);\n                    }\n                }))\n            });\n            this.items = [this.viewAction];\n        }\n        else {\n            this.viewAction = [];\n            for (const view of includedViews) {\n                this.viewAction.push(new Action({\n                    icon: view.icon,\n                    title: view.display,\n                    data: view,\n                    action: (item: Action, event: Event) => {\n                        this.selectView(item.data);\n                    }\n                }));\n            }\n            this.items = this.viewAction;\n        }\n        this.setCurrentViewAction();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.buildViewAction();\n    }\n\n    selectView(view: ResultsView) {\n        this.resultsViewService.selectResultsView(view);\n    }\n}","<div [sq-action-buttons]=\"{items: items, autoAdjust: true, rightAligned: rightAligned, size: size}\"></div>","import {NgModule, ModuleWithProviders} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {LoadComponentModule} from \"@sinequa/core/load-component\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\n\nimport {RESULTS_VIEWS, ResultsView} from \"../results-view.service\";\n\nimport {BsResultsViewSelector} from \"./results-view-selector/results-view-selector\";\nimport {BsResultsGridView} from \"./results-grid-view/results-grid-view\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        LoadComponentModule,\n        IntlModule,\n        ValidationModule,\n\n        UtilsModule,\n        BsActionModule,\n        BsSelectionModule\n    ],\n    declarations: [\n        BsResultsViewSelector,\n        BsResultsGridView,\n    ],\n    exports: [\n        BsResultsViewSelector,\n        BsResultsGridView,\n    ],\n})\nexport class BsResultsViewModule {\n    public static forRoot(resultsViews: ResultsView[], defaultView: ResultsView): ModuleWithProviders<BsResultsViewModule> {\n        return {\n            ngModule: BsResultsViewModule,\n            providers: [\n                {\n                    provide: RESULTS_VIEWS,\n                    useValue: resultsViews\n                },\n              /*  {\n                    provide: DEFAULT_VIEW,\n                    useValue: defaultView\n                } */\n            ]\n        };\n    }\n}\n","export default {\n    \"results\": {\n        \"viewTitle\": \"View: {text}\",\n        \"unselectableViewDisplay\": \"<Other>\",\n        \"resultsListView\": {\n            \"display\": \"List\",\n            \"selectDocument\": \"Select document\",\n            \"unselectDocument\": \"Unselect document\",\n            \"previewPopup\": \"Document Navigator\",\n            \"previewInCurrentPage\": \"Document Navigator (in current page)\",\n            \"previewInNewTab\": \"Document Navigator (in new tab)\",\n            \"showMetadata\": \"Details\",\n            \"showLabels\": \"Labels\"\n        },\n        \"resultsGridView\": {\n            \"display\": \"Grid\",\n            \"selectDocument\": \"Select document\",\n            \"unselectDocument\": \"Unselect document\",\n            \"selectDocuments\": \"Select documents\",\n            \"unselectDocuments\": \"Unselect documents\"\n        },\n        \"viewPageSize\": \"Number of results per page\",\n        \"viewUpdateApply\": \"Apply\",\n        \"warningNoViewForTab\": \"The '{tab}' tab has no associated result views.\",\n        \"warningCannotDisplayTabOnView\": \"The '{tab}' tab cannot be displayed using '{view}' view because it is not included in the view configuration.\",\n\n        \"resultsAllTab\": \"All\",\n        \"resultsTextTab\": \"Text\",\n        \"results_all_tab\": \"All\",\n        \"results_text_tab\": \"Text\",\n    }\n};\n","export default {\n    \"results\": {\n        \"viewTitle\": \"Vue : {text}\",\n        \"unselectableViewDisplay\": \"<Autre>\",\n        \"resultsListView\": {\n            \"display\": \"Liste\",\n            \"selectDocument\": \"Sélectionner le document\",\n            \"unselectDocument\": \"Désélectionner le document\",\n            \"previewPopup\": \"Document Navigator\",\n            \"previewInCurrentPage\": \"Document Navigator (dans la page courante)\",\n            \"previewInNewTab\": \"Document Navigator (dans un nouvel onglet)\",\n            \"showMetadata\": \"Détails\",\n            \"showLabels\": \"Libellés\"\n        },\n        \"resultsGridView\": {\n            \"display\": \"Grille\",\n            \"selectDocument\": \"Sélectionner le document\",\n            \"unselectDocument\": \"Désélectionner le document\",\n            \"selectDocuments\": \"Sélectionner les documents\",\n            \"unselectDocuments\": \"Désélectionner les documents \"\n        },\n        \"viewPageSize\": \"Nombre de résultats par page\",\n        \"viewUpdateApply\": \"Appliquer\",\n        \"warningNoViewForTab\": \"L'onglet '{tab}' n'est associé à aucune vue.\",\n        \"warningCannotDisplayTabOnView\": \"L'onglet '{tab}' ne peut pas être affiché dans la vue '{view}' car il n'est pas inclus dans la configuration de la vue.\",\n\n        \"resultsAllTab\": \"Tous\",\n        \"resultsTextTab\": \"Texte\",\n        \"results_all_tab\": \"Tous\",\n        \"results_text_tab\": \"Texte\",\n    }\n};\n","export default {\n    \"results\": {\n        \"viewTitle\": \"Anzeige: {text}\",\n        \"unselectableViewDisplay\": \"<Andere>\",\n        \"resultsListView\": {\n            \"display\": \"Liste\",\n            \"selectDocument\": \"Dokument auswählen\",\n            \"unselectDocument\": \"Dokumentauswahl aufheben\",\n            \"previewPopup\": \"[Dokument-Navigator]\",\n            \"previewInCurrentPage\": \"[Dokument-Navigator (auf der aktuellen Seite)]\",\n            \"previewInNewTab\": \"[Dokument-Navigator (in einem neuen Reiter)]\",\n            \"showMetadata\": \"[Metadaten]\",\n            \"showLabels\": \"[Etiketten]\"\n        },\n        \"resultsGridView\": {\n            \"display\": \"Tabelle\",\n            \"selectDocument\": \"Dokument auswählen\",\n            \"unselectDocument\": \"Dokumentauswahl aufheben\",\n            \"selectDocuments\": \"Dokumente auswählen\",\n            \"unselectDocuments\": \"Dokumentauswahl aufheben\"\n        },\n        \"viewPageSize\": \"Anzahl der Ergebnisse pro Seite\",\n        \"viewUpdateApply\": \"Anwenden\",\n        \"warningNoViewForTab\": \"Der Reiter '{tab}' hat keine zugewiesenen Ergebnisansichten.\",\n        \"warningCannotDisplayTabOnView\": \"Der Reiter '{tab}' kann nicht mit der Ansicht '{view}' angezeigt werden, da diese nicht in der Ansichtskonfiguration enthalten ist.\",\n\n        \"resultsAllTab\": \"Alle\",\n        \"resultsTextTab\": \"Text\",\n        \"results_all_tab\": \"Alle\",\n        \"results_text_tab\": \"Text\",\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enSearch, frSearch, deSearch} from \"@sinequa/components/search\";\nimport {enSelection, frSelection, deSelection} from \"@sinequa/components/selection\";\n\nimport _enResultsView from \"./en\";\nimport _frResultsView from \"./fr\";\nimport _deResultsView from \"./de\";\n\nconst enResultsView = Utils.merge({}, _enResultsView, enSearch, enSelection);\nconst frResultsView = Utils.merge({}, _frResultsView, frSearch, frSelection);\nconst deResultsView = Utils.merge({}, _deResultsView, deSearch, deSelection);\n\nexport { enResultsView, frResultsView, deResultsView };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelement","i0.ɵɵclassMap","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵtemplate","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate2","i0.ɵɵattribute","i0.ɵɵtextInterpolate","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","i0.ɵɵpropertyInterpolate"],"mappings":"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"}