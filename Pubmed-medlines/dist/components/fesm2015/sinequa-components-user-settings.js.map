{"version":3,"file":"sinequa-components-user-settings.js","sources":["../projects/components/user-settings/bootstrap/edit-user-settings/edit-user-settings.ts","../projects/components/user-settings/bootstrap/edit-user-settings/edit-user-settings.html","../projects/components/user-settings/bootstrap/user-settings-editor/user-settings-editor.html","../projects/components/user-settings/bootstrap/user-settings-editor/user-settings-editor.ts","../projects/components/user-settings/bootstrap/user-menu/user-menu.component.html","../projects/components/user-settings/bootstrap/user-menu/user-menu.component.ts","../../projects/components/user-settings/bootstrap/user-settings.module.ts","../../projects/components/user-settings/messages/en.ts","../../projects/components/user-settings/messages/fr.ts","../../projects/components/user-settings/messages/de.ts","../../projects/components/user-settings/messages/index.ts","../../../projects/components/user-settings/user-preferences.ts","../../../projects/components/user-settings/sinequa-components-user-settings.ts"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ModalButton, ModalResult } from \"@sinequa/core/modal\";\nimport { UserSettingsWebService } from \"@sinequa/core/web-services\";\nimport { MapOf, Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { Validator } from \"@sinequa/core/validation\";\n\nexport module JsonInfo {\n    export interface Entry {\n        type: string;\n        path: string;\n        valueType: string;\n        label: string;\n        list?: string;\n        pattern?: string;\n        min?: number | Date;\n        max?: number | Date;\n        validators?: Validator[];\n    }\n\n    export enum InputType {\n        Entry = 'JsonEntryInput',\n        Range = 'JsonRangeInput',\n        MultiEntry = 'JsonMultiEntryInput',\n    }\n\n    export enum ValueType {\n        String = 'String',\n        Int = 'Int',\n        Number = 'Number',\n        Date = 'Date',\n        Bool = 'Bool',\n    }\n\n    export interface EntryInput extends Entry {\n        type: InputType.Entry;\n    }\n\n    export interface RangeInput extends Entry {\n        type: InputType.Range;\n    }\n\n    export interface MultiEntryInput extends Entry {\n        type: InputType.MultiEntry;\n        distinct?: boolean;\n        nbVisibleLines?: number;\n    }\n}\n\n/**\n * Opens a dialog to modify the user settings.\n *\n */\n@Component({\n    selector: 'sq-edit-user-settings',\n    templateUrl: './edit-user-settings.html'\n})\nexport class BsEditUserSettings implements OnInit {\n\n    @Input() visibleThreshold = 0;\n    @Input() showUILanguageSelector?: boolean;\n\n    public model: MapOf<any>;\n    public layout: MapOf<JsonInfo.Entry>;\n    public form: FormGroup;\n    public buttons: ModalButton[];\n\n    constructor(\n        private userSettingsService: UserSettingsWebService,\n        private intlService: IntlService,\n        private formBuilder: FormBuilder,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.layout = {};\n        this.model = {\n            'language': this.intlService.currentLocale.name\n        };\n        this.form = this.formBuilder.group({\n            'selectedLocale': [this.intlService.currentLocale.name]\n        });\n\n        const onOkClicked = (_) => {\n            if (this.form.dirty) {\n                // Locale is treated separately because it is not really stored in the user settings.\n                const newLocale = this.form.value['selectedLocale'];\n                this.form.removeControl('selectedLocale');\n                if (!Utils.eqNC(this.model['language'], newLocale)) {\n                    Utils.subscribe(\n                        this.intlService.use(newLocale),\n                        response => console.log('editUserSettings UI language changed.')\n                    );\n                }\n\n                const patch = this.calculatePatch();\n                if (!Utils.isUndefined(patch) && !Utils.isEmpty(patch)) {\n                    const observable = this.userSettingsService.patch(patch);\n                    Utils.subscribe(\n                        observable,\n                        response => {\n                            if (this.userSettingsService.userSettings) {\n                                this.setNewValue(this.userSettingsService.userSettings, patch);\n                            }\n                            console.log('editUserSettings saved.');\n                        },\n                        error => console.log('editUserSettings save failed: ', error)\n                    );\n                }\n            }\n        };\n\n        this.buttons = [\n            new ModalButton({\n                result: ModalResult.OK,\n                primary: true,\n                validation: this.form as any,\n                action: onOkClicked\n            }),\n            new ModalButton({\n                result: ModalResult.Cancel\n            })\n        ];\n    }\n\n    private setNewValue(obj: MapOf<any>, newObj: MapOf<any>): void {\n        for (const key of Object.keys(newObj)) {\n            const value = newObj[key];\n            if (value === null) {\n                /* NOTE: Don't use delete obj[key] because some component may put an observer on the user settings property */\n                obj[key] = undefined;\n            }\n            else if (Utils.isObject(value)) {\n                if (Utils.isDate(value)) {\n                    obj[key] = new Date(value.valueOf());\n                }\n                else if (Utils.isRegExp(value)) {\n                    obj[key] = new RegExp(value);\n                }\n                else if (Utils.isArray(value)) {\n                    obj[key] = value.slice(0); // clone the array\n                }\n                else {\n                    if (!Utils.isObject(obj[key])) {\n                        obj[key] = Utils.isArray(value) ? [] : {};\n                    }\n                    this.setNewValue(obj[key], value);\n                }\n            }\n            else {\n                obj[key] = value;\n            }\n        }\n    }\n\n    /**\n     * Calculates the update patch for user settings.\n     *\n     * @returns the update patch.\n     */\n    private calculatePatch(): MapOf<any> {\n        const patch = {};\n        Object.keys(this.form.value).forEach(key => {\n            const formValue = this.ensureType(this.layout[key], this.readFormValue(key));\n            const paths = Utils.split(this.layout[key].path, '.');\n            const currentValue = this.userSettingsService.readUserSetting(paths);\n\n            let includedInPatch = false;\n            if (!Utils.isUndefined(currentValue)) {\n                if (formValue !== currentValue) {\n                    includedInPatch = true;\n                }\n            } else {\n                if (!Utils.isUndefined(formValue)) {\n                    includedInPatch = true;\n                }\n            }\n\n            if (includedInPatch) {\n                this.setValue(patch, paths, formValue);\n            }\n        });\n\n        return patch;\n    }\n\n    /**\n     * Ensures that the form value is of the same type as the user setting before saving it.\n     *\n     * @param entryInfo The entry information.\n     * @param value The form value.\n     * @returns The conformed value for the user setting.\n     */\n    private ensureType(entryInfo: JsonInfo.Entry, value: any): any {\n        const inputType = entryInfo.type as JsonInfo.InputType;\n        const valueType = entryInfo.valueType as JsonInfo.ValueType;\n\n        switch (valueType as JsonInfo.ValueType) {\n            case JsonInfo.ValueType.Bool:\n                // For the case of boolean, we ignore the input type because we only support having a JSON boolean\n                return !!value;\n            case JsonInfo.ValueType.Date:\n                return this.cast<Date>(inputType, value, Utils.asDate);\n            case JsonInfo.ValueType.Int:\n            case JsonInfo.ValueType.Number:\n                return this.cast<number>(inputType, value, Utils.asNumber);\n            case JsonInfo.ValueType.String:\n            default:\n                return this.cast<string>(inputType, value, Utils.asString);\n        }\n    }\n\n\n    /**\n     * Casts the value of a given type to another type.\n     * <p>\n     * If the given value is of array type, it is casted into another array containing element of the\n     * desired type.\n     *\n     * @template T The desired type after casting.\n     * @param inputType The type of form input where the value comes.\n     * @param value The value to cast.\n     * @param castFn The casting function.\n     * @returns the cast result.\n     */\n    private cast<T>(\n        inputType: JsonInfo.InputType, value: any, castFn: (params: any) => T | undefined\n    ): T | T[] | undefined {\n        if (Utils.isArray(value)) {\n            const array = value as any[];\n            const empty = array.length === 0;\n            switch (inputType) {\n                case JsonInfo.InputType.Entry:\n                    return !empty ? castFn(array[0]) : undefined;\n                case JsonInfo.InputType.MultiEntry:\n                case JsonInfo.InputType.Range:\n                    const result: T[] = [];\n                    for (const v of array) {\n                        result.push(castFn(v) as T);\n                    }\n                    return result;\n            }\n            return undefined;\n        }\n\n        return castFn(value);\n    }\n\n    /**\n     * Reads the form value for the given entry.\n     *\n     * @param key The entry key.\n     * @returns The form value.\n     */\n    private readFormValue(key: string): any {\n        const formValue = this.form.value[key];\n        if (Utils.isArray(formValue)) {\n            switch (this.layout[key].type as JsonInfo.InputType) {\n                case JsonInfo.InputType.Entry:\n                    // The entry is single-value type whereas its corresponding form control has an array value.\n                    // This should be because its form control is represented by a Select component.\n                    // The array value should be then a singleton array, we simply return the first element.\n                    const array = <any[]>formValue;\n                    if (array.length !== 1) {\n                        console.log('editUserSettings.readFormValue not a singleton array.');\n                    }\n                    return array[0];\n                case JsonInfo.InputType.MultiEntry:\n                    break;\n                case JsonInfo.InputType.Range:\n                    break;\n            }\n        }\n        return formValue;\n    }\n\n    /**\n     * Sets a JSON value.\n     *\n     * @param json The JSON to set.\n     * @param paths The path of the value in the JSON.\n     * @param value The value to set.\n     */\n    private setValue(json: MapOf<any>, paths: string[], value: any): void {\n        const nbPaths = paths.length;\n        if (nbPaths > 1) {\n            for (let i = 0; i < nbPaths - 1; ++i) {\n                const path = paths[i];\n                if (!json[path]) {\n                    json[path] = {};\n                }\n                json = json[path];\n            }\n        }\n\n        json[paths[nbPaths - 1]] = Utils.isEmpty(value) ? null : value;\n    }\n\n    /**\n     * Indicates the height of the dialog content to trigger scroll behavior when there are too many input controls.\n     *\n     * @return the height of the dialog content to trigger scroll behavior when there are too many input controls.\n     */\n    public get maxHeight(): string {\n        //If size is undefined use 5 as default\n        return (((this.visibleThreshold | 0) || 5) * 10) + \"ex\";\n    }\n}\n","<form name=\"editUserSettings\" novalidate [formGroup]=\"form\">\n    <sq-modal [title]=\"'msg#editUserSettings.title'\" [buttons]=\"buttons\">\n        <div class=\"sq-user-settings-modal-body\" [style.max-height]=\"maxHeight\">\n            <sq-user-settings-editor [form]=\"form\" [model]=\"model\" [layout]=\"layout\"></sq-user-settings-editor>\n        </div>\n    </sq-modal>\n</form>\n","<div [formGroup]=\"form\">\n    <div class=\"form-group\" style=\"margin-bottom: 0\" [hidden]=\"!showLanguageSelector()\">\n        <label for=\"locales\">{{'msg#editUserSettings.language' | sqMessage}}</label>\n        <select [sqValidation]=\"form\" class=\"form-control custom-select\" formControlName=\"selectedLocale\" id=\"selectedLocale\" sqAutofocus>\n            <option [value]=\"locale.name\" *ngFor=\"let locale of locales\">{{locale.display | sqMessage}}</option>\n        </select>\n    </div>\n    <!--sq-json-editor [form]=\"form\" [model]=\"model\" [layout]=\"layout\" [config]=\"config\"></sq-json-editor-->\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Locale, IntlService } from \"@sinequa/core/intl\";\nimport { MapOf } from \"@sinequa/core/base\";\n\nimport { JsonInfo } from \"../edit-user-settings/edit-user-settings\";\n\n\n/**\n * Editor for User settings.\n * <p>\n * This component can add form control for modifiable settings which are not shown by JsonEditor component.\n *\n */\n@Component({\n    selector: 'sq-user-settings-editor',\n    templateUrl: './user-settings-editor.html'\n})\nexport class BsUserSettingsEditor implements OnInit {\n\n    @Input() public form: FormGroup;\n    @Input() public model: MapOf<any>;\n    @Input() public layout: MapOf<JsonInfo.Entry>;\n    @Input() showUILanguageSelector: boolean;\n    public locales: Locale[];\n\n    constructor(\n        private appService: AppService,\n        private intlService: IntlService,\n        private formBuilder: FormBuilder\n    ) {\n    }\n\n    ngOnInit(): void {\n        if (!this.appService.app) {\n            return; // logout\n        }\n\n        // Locale is treated separately because it is not really stored in the user settings.\n        this.locales = [];\n        if (this.intlService.locales.length > 0) {\n            for (const locale of this.intlService.locales) {\n                this.locales.push(locale);\n            }\n        }\n\n        this.model['language'] = this.intlService.currentLocale.name;\n        this.form.addControl('selectedLocale', this.formBuilder.control(this.intlService.currentLocale.name));\n/*\n        if (this.config && this.config.items) {\n            this.config.items.forEach(item => {\n                if (item.active && JsonEditor.isInputComponent(item)) {\n                    const entry = <JsonInfo.Entry>item;\n                    const paths = Utils.split(entry.path, '.');\n                    const pathLength = paths.length;\n                    const currentValue = this.userSettingsService.readUserSetting(paths)\n                    const entryKey = paths[pathLength - 1];\n\n                    // Add model value\n                    this.setModelValue(paths, currentValue);\n\n                    // Add layout\n                    this.layout[entryKey] = entry;\n\n                    // Add form control\n                    this.form.addControl(\n                        entryKey,\n                        this.formBuilder.control(currentValue, Validators.compose(JsonEditor.makeValidatorFunctions(entry, this.validationService))));\n                }\n            });\n        }\n        */\n    }\n\n    /**\n     * Sets the current value of an entry to our JSON model.\n     *\n     * @param paths The paths to the entry in the JSON model.\n     * @param value The value to set.\n     */\n    /*private setModelValue(paths: string[], value: any): void {\n        const nbPaths = paths.length;\n        let json = this.model;\n        if (nbPaths > 1) {\n            for (let i = 0; i < nbPaths - 1; ++i) {\n                const path = paths[i];\n                if (!json[path]) {\n                    json[path] = {};\n                }\n                json = json[path];\n            }\n        }\n\n        const key = paths[nbPaths - 1];\n        json[key] = value;\n    }*/\n\n    /**\n     * Indicates if the UI language selector is shown in the User settings editor dialog.\n     * By default, returns true.\n     *\n     * @returns true if the UI language selector is shown in the User settings editor dialog.\n     */\n    public showLanguageSelector(): boolean {\n        return this.showUILanguageSelector;\n    }\n}\n","<li *ngIf=\"!!menu && !menu.hidden\" class=\"nav-item dropdown\" \n    [sq-action-item]=\"{item: menu, size: size, autoAdjust: autoAdjust, autoAdjustBreakpoint: autoAdjustBreakpoint, inMenu: true}\"\n    [collapseBreakpoint]=\"collapseBreakpoint\"\n></li>","import { Component, OnInit, ChangeDetectorRef, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { PrincipalWebService, UserSettingsWebService } from '@sinequa/core/web-services';\nimport { AuthenticationService, LoginService, UserOverride } from '@sinequa/core/login';\nimport { IntlService, Locale } from '@sinequa/core/intl';\nimport { Utils } from '@sinequa/core/base';\nimport { BsOverrideUser } from '@sinequa/components/modal';\nimport { ModalService, ModalResult, ConfirmType, ModalButton } from '@sinequa/core/modal';\nimport { AppService } from '@sinequa/core/app-utils';\nimport {NotificationsService, NotificationType} from '@sinequa/core/notification';\n\n@Component({\n  selector: 'sq-user-menu',\n  templateUrl: './user-menu.component.html'\n})\nexport class BsUserMenuComponent implements OnInit, OnDestroy {\n\n  @Input() icon: string = \"fas fa-user\";\n  @Input() autoAdjust: boolean = true;\n  @Input() autoAdjustBreakpoint: string = 'xl';\n  @Input() collapseBreakpoint: string = 'sm';\n  @Input() size: string;\n\n  menu: Action;\n\n  // User actions\n  loginAction: Action;\n  logoutAction: Action;\n  overrideAction: Action;\n  revertOverrideAction: Action;\n  adminAction: Action;\n  languageAction: Action;\n  resetUserSettings: Action;\n\n  constructor(\n    public principalService: PrincipalWebService,\n    public authenticationService: AuthenticationService,\n    public intlService: IntlService,\n    public loginService: LoginService,\n    public modalService: ModalService,\n    public appService: AppService,\n    public userSettingsService: UserSettingsWebService,\n    public notificationsService: NotificationsService,\n    public changeDetectorRef: ChangeDetectorRef) {\n\n\n    // Actions objects are initialized in the constructor\n\n    // User Menu\n\n    // Login\n    this.loginAction = new Action({\n      text: \"msg#userMenu.login\",\n      title: \"msg#userMenu.login\",\n      action: () => {\n        this.loginService.login();\n      }\n    });\n\n    // Logout\n    this.logoutAction = new Action({\n      text: \"msg#userMenu.logout\",\n      title: \"msg#userMenu.logout\",\n      action: () => {\n        this.loginService.logout();\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n\n    // Override a user's identity\n    this.overrideAction = new Action({\n      text: \"msg#userMenu.overrideUser\",\n      title: \"msg#userMenu.overrideUser\",\n      action: () => {\n        let userOverride = this.authenticationService.userOverride ?\n          Utils.copy<UserOverride>(this.authenticationService.userOverride) : undefined;\n        if (!userOverride) {\n          userOverride = {\n            userName: \"\",\n            domain: \"\"\n          };\n        }\n        this.modalService.open(BsOverrideUser, {model: userOverride})\n          .then((result) => {\n            if (result === ModalResult.OK) {\n              this.loginService.overrideUser(userOverride);\n              this.changeDetectorRef.markForCheck();\n            }\n          });\n      }\n    });\n\n    // Cancel user override\n    this.revertOverrideAction = new Action({\n      text: \"msg#userMenu.revertUserOverride\",\n      title: \"msg#userMenu.revertUserOverride\",\n      action: () => {\n        this.loginService.overrideUser(undefined);\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n\n    // Link to the admin\n    this.adminAction = new Action({\n      text: \"msg#userMenu.administration\",\n      title: \"msg#userMenu.administration\",\n      href: this.appService.adminUrl\n    });\n\n    // Language menu\n    this.languageAction = new Action({\n      text: \"msg#userMenu.language\",\n      title: \"msg#userMenu.language\",\n      children: this.intlService.locales.map(locale =>\n        new Action({\n          text: locale.display,   // \"French\"\n          title: locale.display,   // \"French\"\n          data: locale,   // French locale\n          selected: locale === this.intlService.currentLocale, // Whether French is the current locale\n          iconAfter: \"sq-image sq-flag-\" + locale.name,\n          action: (item: Action, $event: UIEvent) => {    // On click, switch to this language\n            this.intlService.use((item.data as Locale).name).subscribe(\n              (value) => this.languageAction.children!.forEach(a => a.update()));\n          },\n          updater: (action) => {  // Update the status of buttons\n            action.selected = action.data === this.intlService.currentLocale;\n          }\n        })\n      )\n    });\n\n    this.resetUserSettings = new Action({\n      text: \"msg#userMenu.resetUserSettings.menu\",\n      title: \"msg#userMenu.resetUserSettings.menu\",\n      action: () => {\n        this.modalService.confirm({\n          title: \"msg#userMenu.resetUserSettings.modalTitle\",\n          message: \"msg#userMenu.resetUserSettings.modalMessage\", \n          buttons: [\n            new ModalButton({result: ModalResult.OK, text: \"msg#userMenu.resetUserSettings.modalConfirmButton\"}),\n            new ModalButton({result: ModalResult.Cancel, primary: true})\n          ],\n          confirmType: ConfirmType.Warning\n        }).then(res => {\n          if(res === ModalResult.OK) {\n            this.userSettingsService.reset().subscribe({\n              next: () => this.notificationsService.notify(NotificationType.Success, \"msg#userMenu.resetUserSettings.successMessage\"),\n              error: () => this.notificationsService.notify(NotificationType.Error, \"msg#userMenu.resetUserSettings.errorMessage\")\n            });\n          }\n        });\n      }\n    });\n\n  }\n\n  ngOnInit() {\n    this.updateMenu();\n    this._loginSubscription = this.loginService.events.subscribe(event => {\n      if(event.type === \"session-changed\"){\n        this.updateMenu();\n      }\n    });\n    this._principalSubscription = this.principalService.events.subscribe(event => {\n      this.updateMenu();\n    });\n  }\n\n  private _loginSubscription: Subscription;\n  private _principalSubscription: Subscription;\n  ngOnDestroy(){\n    if(this._loginSubscription){\n      this._loginSubscription.unsubscribe();\n    }\n    if(this._principalSubscription){\n      this._principalSubscription.unsubscribe();\n    }\n  }\n\n  updateMenu() {\n    const userActions: Action[] = [];\n\n    if (!this.principalService.principal && !this.authenticationService.userOverrideActive) {\n      userActions.push(this.loginAction);\n    }\n    if (this.principalService.principal) {\n      userActions.push(this.logoutAction);\n    }\n    if (this.authenticationService.userOverrideActive) {\n      userActions.push(this.revertOverrideAction);\n    }\n    if (this.principalService.principal && this.principalService.principal.isAdministrator) {\n      userActions.push(this.overrideAction);\n    }\n    if (this.principalService.principal && (this.principalService.principal.isAdministrator || this.principalService.principal.isDelegatedAdmin)) {\n      userActions.push(this.adminAction);\n    }\n    if(this.loginService.complete) {\n      userActions.push(this.resetUserSettings);\n    }\n    userActions.push(new Action({separator: true}));\n    if (this.intlService.locales.length > 1) {\n      userActions.push(this.languageAction);\n    }\n\n    this.menu = new Action({\n        icon: this.icon,\n        text: this.loginService.complete && this.principalService.principal ? this.principalService.principal.name || \"msg#userMenu.user\" : \"msg#userMenu.user\",\n        children: userActions\n    });\n  }\n\n\n}\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {BsModalModule} from \"@sinequa/components/modal\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {UtilsModule} from \"@sinequa/components/utils\";\n\nimport {BsEditUserSettings} from \"./edit-user-settings/edit-user-settings\";\nimport {BsUserSettingsEditor} from './user-settings-editor/user-settings-editor';\nimport {BsUserMenuComponent} from './user-menu/user-menu.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n\n        IntlModule,\n        ValidationModule,\n\n        BsModalModule,\n        BsActionModule,\n        UtilsModule,\n    ],\n    declarations: [\n        BsEditUserSettings, BsUserSettingsEditor, BsUserMenuComponent\n    ],\n    exports: [\n        BsEditUserSettings, BsUserSettingsEditor, BsUserMenuComponent\n    ],\n})\nexport class BsUserSettingsModule {\n}\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"User\",\n        \"login\": \"Login\",\n        \"overrideUser\": \"Override User\",\n        \"settings\": \"Settings\",\n        \"revertUserOverride\": \"Revert User Override\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Logout\",\n\n        \"language\": \"Language\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Reset user settings\",\n            \"modalTitle\": \"Reset user settings\",\n            \"modalMessage\": \"You are about to reset ALL your user data (recent queries, collections, alerts, preferences, etc.). Do you want to continue?\",\n            \"modalConfirmButton\": \"Confirm\",\n            \"successMessage\": \"Reset user settings succefully\",\n            \"errorMessage\": \"Reset user settings failed\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Settings\",\n        \"language\": \"UI Language\",\n        \"pageSize\": \"Number of results per page\",\n        \"email\": \"Email\"\n    }\n\n};\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"Utilisateur\",\n        \"login\": \"S'identifier\",\n        \"overrideUser\": \"Surcharger l'utilisateur\",\n        \"settings\": \"Paramètres\",\n        \"revertUserOverride\": \"Revenir à l'utilisateur normal\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Se déconnecter\",\n\n        \"language\": \"Langue\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Réinitialiser les paramètres utilisateur\",\n            \"modalTitle\": \"Réinitialiser Paramètres Utilisateur\",\n            \"modalMessage\": \"Vous êtes sur le point de réinitialiser TOUTES vos données utilisateur (requêtes récentes, collections, alertes, préférences, etc.). Voulez-vous continuer ?\",\n            \"modalConfirmButton\": \"Confirmer\",\n            \"successMessage\": \"Réinitialisation des paramètres utilisateur réussie\",\n            \"errorMessage\": \"Echec de la réinitialisation des paramètres utilisateur\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Paramètres\",\n        \"language\": \"Langue de l'interface\",\n        \"pageSize\": \"Nombre de résultats par page\",\n        \"email\": \"E-mail\"\n    }\n\n};\n","export default {\n\n    \"userMenu\": {\n        \"user\": \"Benutzer\",\n        \"login\": \"Anmeldung\",\n        \"overrideUser\": \"Benutzer wechseln\",\n        \"settings\": \"Einstellungen\",\n        \"revertUserOverride\": \"Zum Administrator zurückkehren\",\n        \"administration\": \"Administration\",\n        \"logout\": \"Abmeldung\",\n\n        \"language\": \"Sprache\",\n        \n        \"resetUserSettings\": {\n            \"menu\": \"Benutzereinstellungen zurücksetzen\",\n            \"modalTitle\": \"Benutzereinstellungen zurücksetzen\",\n            \"modalMessage\": \"Sie sind dabei, ALLE Ihre Benutzerdaten zurückzusetzen (letzte Abfragen, Sammlungen, Warnungen, Einstellungen usw.). Möchtest du fortfahren?\",\n            \"modalConfirmButton\": \"Bestätigen\",\n            \"successMessage\": \"Benutzereinstellungen erfolgreich zurücksetzen\",\n            \"errorMessage\": \"Benutzereinstellungen zurücksetzen fehlgeschlagen\"\n        }\n    },\n\n    \"editUserSettings\": {\n        \"title\": \"Einstellungen\",\n        \"language\": \"Sprache der Benutzeroberfläche\",\n        \"pageSize\": \"Anzahl der Ergebnisse pro Seite\",\n        \"email\": \"E-Mail\"\n    }\n\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enModal, frModal, deModal} from \"@sinequa/components/modal\";\n\nimport _enUserSettings from \"./en\";\nimport _frUserSettings from \"./fr\";\nimport _deUserSettings from \"./de\";\n\nconst enUserSettings = Utils.merge({}, _enUserSettings, enModal);\nconst frUserSettings = Utils.merge({}, _frUserSettings, frModal);\nconst deUserSettings = Utils.merge({}, _deUserSettings, deModal);\n\nexport { enUserSettings, frUserSettings, deUserSettings };\n","import { Injectable } from '@angular/core';\nimport { UserSettingsWebService } from '@sinequa/core/web-services';\n\n/**\n * The role of this service is to bundle together the simple preferences of\n * the user and synchronise them with the user settings.\n *\n * Usage:\n * this.userPreferences.get(\"foo\")\n * this.userPreferences.set(\"foo\", \"bar\")\n * this.userPreferences.sync()\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserPreferences {\n\n    constructor(\n        private userSettingsService: UserSettingsWebService\n    ) {\n    }\n\n    private get prefs(): any {\n        if(!this.userSettingsService.userSettings)\n            this.userSettingsService.userSettings = {};\n        if(!this.userSettingsService.userSettings[\"prefs\"])\n            this.userSettingsService.userSettings[\"prefs\"] = {};\n        return this.userSettingsService.userSettings[\"prefs\"];\n    }\n\n    /**\n     * Returns the value of a property\n     * @param property the name of this property\n     */\n    public get(property: string) {\n        return this.prefs[property.toLowerCase()];\n    }\n\n    /**\n     * Sets the value of a property\n     * @param property the name of this property\n     * @param value the value\n     * @param skipSync whether we should skyp syncing (to update multiple properties for example)\n     */\n    public set(property: string, value: any, skipSync?: boolean) {\n        this.prefs[property.toLowerCase()] = value;\n        if(!skipSync){\n            this.sync();\n        }\n    }\n\n    /**\n     * Deletes a given property from the preferences\n     * @param property the name of this property\n     * @param skipSync whether we should skyp syncing (to update multiple properties for example)\n     */\n    public delete(property: string, skipSync?: boolean) {\n        if(Object.prototype.hasOwnProperty.call(this.prefs, property.toLowerCase())) {\n            this.prefs[property.toLowerCase()] = null;\n            if(!skipSync){\n                this.sync();\n            }\n        }\n    }\n\n    /**\n     * Synchronizes the user preferences with the server\n     */\n    public sync(){\n        this.userSettingsService.patch({prefs: this.prefs});\n    }\n\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtext","i0.ɵɵtextInterpolate","i0.ɵɵtemplate"],"mappings":";;;;;;;;;;;;;;;IAQc,SAwCb;AAxCD,WAAc,QAAQ;IAalB,IAAY,SAIX;IAJD,WAAY,SAAS;QACjB,qCAAwB,CAAA;QACxB,qCAAwB,CAAA;QACxB,+CAAkC,CAAA;KACrC,EAJW,SAAS,GAAT,kBAAS,KAAT,kBAAS,QAIpB;IAED,IAAY,SAMX;IAND,WAAY,SAAS;QACjB,8BAAiB,CAAA;QACjB,wBAAW,CAAA;QACX,8BAAiB,CAAA;QACjB,0BAAa,CAAA;QACb,0BAAa,CAAA;KAChB,EANW,SAAS,GAAT,kBAAS,KAAT,kBAAS,QAMpB;AAeL,CAAC,EAxCa,QAAQ,KAAR,QAAQ,QAwCrB;AAED;;;;MAQa,kBAAkB;IAU3B,YACY,mBAA2C,EAC3C,WAAwB,EACxB,WAAwB;QAFxB,wBAAmB,GAAnB,mBAAmB,CAAwB;QAC3C,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QAX3B,qBAAgB,GAAG,CAAC,CAAC;KAa7B;IAED,QAAQ;QACJ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG;YACT,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI;SAClD,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC/B,gBAAgB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;SAC1D,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,CAAC,CAAC;YAClB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;;gBAEjB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBACpD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;gBAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,EAAE;oBAChD,KAAK,CAAC,SAAS,CACX,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,EAC/B,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CACnE,CAAC;iBACL;gBAED,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACpD,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACzD,KAAK,CAAC,SAAS,CACX,UAAU,EACV,QAAQ;wBACJ,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE;4BACvC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;yBAClE;wBACD,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;qBAC1C,EACD,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAChE,CAAC;iBACL;aACJ;SACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG;YACX,IAAI,WAAW,CAAC;gBACZ,MAAM;gBACN,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,IAAI,CAAC,IAAW;gBAC5B,MAAM,EAAE,WAAW;aACtB,CAAC;YACF,IAAI,WAAW,CAAC;gBACZ,MAAM;aACT,CAAC;SACL,CAAC;KACL;IAEO,WAAW,CAAC,GAAe,EAAE,MAAkB;QACnD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACnC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,KAAK,KAAK,IAAI,EAAE;;gBAEhB,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;aACxB;iBACI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC5B,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;oBACrB,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;iBACxC;qBACI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC5B,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;iBAChC;qBACI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC7B;qBACI;oBACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;wBAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;qBAC7C;oBACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;iBACrC;aACJ;iBACI;gBACD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACpB;SACJ;KACJ;;;;;;IAOO,cAAc;QAClB,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG;YACpC,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7E,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACtD,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAErE,IAAI,eAAe,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;gBAClC,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,eAAe,GAAG,IAAI,CAAC;iBAC1B;aACJ;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;oBAC/B,eAAe,GAAG,IAAI,CAAC;iBAC1B;aACJ;YAED,IAAI,eAAe,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;aAC1C;SACJ,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;KAChB;;;;;;;;IASO,UAAU,CAAC,SAAyB,EAAE,KAAU;QACpD,MAAM,SAAS,GAAG,SAAS,CAAC,IAA0B,CAAC;QACvD,MAAM,SAAS,GAAG,SAAS,CAAC,SAA+B,CAAC;QAE5D,QAAQ,SAA+B;YACnC,KAAK,QAAQ,CAAC,SAAS,CAAC,IAAI;;gBAExB,OAAO,CAAC,CAAC,KAAK,CAAC;YACnB,KAAK,QAAQ,CAAC,SAAS,CAAC,IAAI;gBACxB,OAAO,IAAI,CAAC,IAAI,CAAO,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YAC3D,KAAK,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;YAC5B,KAAK,QAAQ,CAAC,SAAS,CAAC,MAAM;gBAC1B,OAAO,IAAI,CAAC,IAAI,CAAS,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC/D,KAAK,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;YAC/B;gBACI,OAAO,IAAI,CAAC,IAAI,CAAS,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;SAClE;KACJ;;;;;;;;;;;;;IAeO,IAAI,CACR,SAA6B,EAAE,KAAU,EAAE,MAAsC;QAEjF,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,MAAM,KAAK,GAAG,KAAc,CAAC;YAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;YACjC,QAAQ,SAAS;gBACb,KAAK,QAAQ,CAAC,SAAS,CAAC,KAAK;oBACzB,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;gBACjD,KAAK,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;gBACnC,KAAK,QAAQ,CAAC,SAAS,CAAC,KAAK;oBACzB,MAAM,MAAM,GAAQ,EAAE,CAAC;oBACvB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;wBACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAM,CAAC,CAAC;qBAC/B;oBACD,OAAO,MAAM,CAAC;aACrB;YACD,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;KACxB;;;;;;;IAQO,aAAa,CAAC,GAAW;QAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,QAAQ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAA0B;gBAC/C,KAAK,QAAQ,CAAC,SAAS,CAAC,KAAK;;;;oBAIzB,MAAM,KAAK,GAAU,SAAS,CAAC;oBAC/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;wBACpB,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;qBACxE;oBACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAK,QAAQ,CAAC,SAAS,CAAC,UAAU;oBAC9B,MAAM;gBACV,KAAK,QAAQ,CAAC,SAAS,CAAC,KAAK;oBACzB,MAAM;aACb;SACJ;QACD,OAAO,SAAS,CAAC;KACpB;;;;;;;;IASO,QAAQ,CAAC,IAAgB,EAAE,KAAe,EAAE,KAAU;QAC1D,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;QAC7B,IAAI,OAAO,GAAG,CAAC,EAAE;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAClC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACb,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;iBACnB;gBACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;SACJ;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;KAClE;;;;;;IAOD,IAAW,SAAS;;QAEhB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;KAC3D;;oFAzPQ,kBAAkB;oDAAlB,kBAAkB;QC1D/BA,4BACI;QAAAA,gCACI;QAAAA,2BACI;QAAAC,0CAAmG;QACvGC,cAAM;QACVA,cAAW;QACfA,cAAO;;QANkCC,iCAAkB;QAC7CC,YAAsC;QAAtCD,iDAAsC,wBAAA;QACHC,YAA8B;QAA9BC,wCAA8B;QAC1CD,YAAa;QAAbD,4BAAa,oBAAA,sBAAA;;+CDuDrC,kBAAkB;cAJ9B,SAAS;eAAC;gBACP,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,2BAA2B;aAC3C;oHAGY,gBAAgB;kBAAxB,KAAK;YACG,sBAAsB;kBAA9B,KAAK;;;;IEzDEH,8BAA6D;IAAAM,SAA8B;;IAAAJ,cAAS;;;IAA5FC,mCAAqB;IAAgCC,YAA8B;IAA9BG,uDAA8B;;ACKvG;;;;;;MAUa,oBAAoB;IAQ7B,YACY,UAAsB,EACtB,WAAwB,EACxB,WAAwB;QAFxB,eAAU,GAAV,UAAU,CAAY;QACtB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;KAEnC;IAED,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YACtB,OAAO;SACV;;QAGD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC7B;SACJ;QAED,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KAyBzG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BM,oBAAoB;QACvB,OAAO,IAAI,CAAC,sBAAsB,CAAC;KACtC;;wFAvFQ,oBAAoB;sDAApB,oBAAoB;QDnBjCP,2BACI;QAAAA,2BACI;QAAAA,6BAAqB;QAAAM,SAA+C;;QAAAJ,cAAQ;QAC5EF,8BACI;QAAAQ,wEAAoG;QACxGN,cAAS;QACbA,cAAM;QAEVA,cAAM;;QARDC,iCAAkB;QAC8BC,YAAkC;QAAlCD,iDAAkC;QAC1DC,YAA+C;QAA/CG,qEAA+C;QAC5DH,YAAqB;QAArBD,oCAAqB;QACwBC,YAAU;QAAVD,kCAAU;;+CCe1D,oBAAoB;cAJhC,SAAS;eAAC;gBACP,QAAQ,EAAE,yBAAyB;gBACnC,WAAW,EAAE,6BAA6B;aAC7C;wGAGmB,IAAI;kBAAnB,KAAK;YACU,KAAK;kBAApB,KAAK;YACU,MAAM;kBAArB,KAAK;YACG,sBAAsB;kBAA9B,KAAK;;;;;ICxBVF,qBAGM;;;IAFFE,+HAA6H,iDAAA;;MCepH,mBAAmB;IAmB9B,YACS,gBAAqC,EACrC,qBAA4C,EAC5C,WAAwB,EACxB,YAA0B,EAC1B,YAA0B,EAC1B,UAAsB,EACtB,mBAA2C,EAC3C,oBAA0C,EAC1C,iBAAoC;;QARpC,qBAAgB,GAAhB,gBAAgB,CAAqB;QACrC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAwB;QAC3C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,sBAAiB,GAAjB,iBAAiB,CAAmB;QA1BpC,SAAI,GAAW,aAAa,CAAC;QAC7B,eAAU,GAAY,IAAI,CAAC;QAC3B,yBAAoB,GAAW,IAAI,CAAC;QACpC,uBAAkB,GAAW,IAAI,CAAC;;;QA+BzC,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,CAAC;YAC5B,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE,oBAAoB;YAC3B,MAAM,EAAE;gBACN,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;aAC3B;SACF,CAAC,CAAC;;QAGH,IAAI,CAAC,YAAY,GAAG,IAAI,MAAM,CAAC;YAC7B,IAAI,EAAE,qBAAqB;YAC3B,KAAK,EAAE,qBAAqB;YAC5B,MAAM,EAAE;gBACN,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;gBAC3B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;aACvC;SACF,CAAC,CAAC;;QAGH,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC;YAC/B,IAAI,EAAE,2BAA2B;YACjC,KAAK,EAAE,2BAA2B;YAClC,MAAM,EAAE;gBACN,IAAI,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY;oBACxD,KAAK,CAAC,IAAI,CAAe,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;gBAChF,IAAI,CAAC,YAAY,EAAE;oBACjB,YAAY,GAAG;wBACb,QAAQ,EAAE,EAAE;wBACZ,MAAM,EAAE,EAAE;qBACX,CAAC;iBACH;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC;qBAC1D,IAAI,CAAC,CAAC,MAAM;oBACX,IAAI,MAAM,kBAAqB;wBAC7B,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;wBAC7C,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;qBACvC;iBACF,CAAC,CAAC;aACN;SACF,CAAC,CAAC;;QAGH,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC;YACrC,IAAI,EAAE,iCAAiC;YACvC,KAAK,EAAE,iCAAiC;YACxC,MAAM,EAAE;gBACN,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;aACvC;SACF,CAAC,CAAC;;QAGH,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,CAAC;YAC5B,IAAI,EAAE,6BAA6B;YACnC,KAAK,EAAE,6BAA6B;YACpC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;SAC/B,CAAC,CAAC;;QAGH,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC;YAC/B,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,uBAAuB;YAC9B,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAC3C,IAAI,MAAM,CAAC;gBACT,IAAI,EAAE,MAAM,CAAC,OAAO;gBACpB,KAAK,EAAE,MAAM,CAAC,OAAO;gBACrB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,aAAa;gBACnD,SAAS,EAAE,mBAAmB,GAAG,MAAM,CAAC,IAAI;gBAC5C,MAAM,EAAE,CAAC,IAAY,EAAE,MAAe;oBACpC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAE,IAAI,CAAC,IAAe,CAAC,IAAI,CAAC,CAAC,SAAS,CACxD,CAAC,KAAK,KAAK,IAAI,CAAC,cAAc,CAAC,QAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;iBACtE;gBACD,OAAO,EAAE,CAAC,MAAM;oBACd,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;iBAClE;aACF,CAAC,CACH;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,MAAM,CAAC;YAClC,IAAI,EAAE,qCAAqC;YAC3C,KAAK,EAAE,qCAAqC;YAC5C,MAAM,EAAE;gBACN,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;oBACxB,KAAK,EAAE,2CAA2C;oBAClD,OAAO,EAAE,6CAA6C;oBACtD,OAAO,EAAE;wBACP,IAAI,WAAW,CAAC,EAAC,MAAM,eAAkB,IAAI,EAAE,mDAAmD,EAAC,CAAC;wBACpG,IAAI,WAAW,CAAC,EAAC,MAAM,mBAAsB,OAAO,EAAE,IAAI,EAAC,CAAC;qBAC7D;oBACD,WAAW;iBACZ,CAAC,CAAC,IAAI,CAAC,GAAG;oBACT,IAAG,GAAG,kBAAqB;wBACzB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC;4BACzC,IAAI,EAAE,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,kBAA2B,+CAA+C,CAAC;4BACvH,KAAK,EAAE,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,gBAAyB,6CAA6C,CAAC;yBACrH,CAAC,CAAC;qBACJ;iBACF,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;KAEJ;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK;YAChE,IAAG,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAC;gBAClC,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;SACF,CAAC,CAAC;QACH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK;YACxE,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB,CAAC,CAAC;KACJ;IAID,WAAW;QACT,IAAG,IAAI,CAAC,kBAAkB,EAAC;YACzB,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;SACvC;QACD,IAAG,IAAI,CAAC,sBAAsB,EAAC;YAC7B,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;SAC3C;KACF;IAED,UAAU;QACR,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YACtF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACpC;QACD,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACnC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACrC;QACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YACjD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SAC7C;QACD,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,eAAe,EAAE;YACtF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,KAAK,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,eAAe,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE;YAC5I,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACpC;QACD,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC7B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC1C;QACD,WAAW,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QAChD,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACvC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,IAAI,mBAAmB,GAAG,mBAAmB;YACvJ,QAAQ,EAAE,WAAW;SACxB,CAAC,CAAC;KACJ;;sFAnMU,mBAAmB;qDAAnB,mBAAmB;QDhBhCK,+DAGM;;QAHDL,kDAA4B;;+CCgBpB,mBAAmB;cAJ/B,SAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,4BAA4B;aAC1C;gSAGU,IAAI;kBAAZ,KAAK;YACG,UAAU;kBAAlB,KAAK;YACG,oBAAoB;kBAA5B,KAAK;YACG,kBAAkB;kBAA1B,KAAK;YACG,IAAI;kBAAZ,KAAK;;;MCYK,oBAAoB;;qDAApB,oBAAoB;oHAApB,oBAAoB,kBAlBpB;YACL,YAAY;YACZ,WAAW,EAAE,mBAAmB;YAEhC,UAAU;YACV,gBAAgB;YAEhB,aAAa;YACb,cAAc;YACd,WAAW;SACd;qFAQQ,oBAAoB,mBANzB,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB,aAX7D,YAAY;QACZ,WAAW,EAAE,mBAAmB;QAEhC,UAAU;QACV,gBAAgB;QAEhB,aAAa;QACb,cAAc;QACd,WAAW,aAMX,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB;+CAGxD,oBAAoB;cAnBhC,QAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,WAAW,EAAE,mBAAmB;oBAEhC,UAAU;oBACV,gBAAgB;oBAEhB,aAAa;oBACb,cAAc;oBACd,WAAW;iBACd;gBACD,YAAY,EAAE;oBACV,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB;iBAChE;gBACD,OAAO,EAAE;oBACL,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB;iBAChE;aACJ;;oBALO,kBAAkB,uFAAE,oBAAoB;;AC5BhD,sBAAe;IAEX,UAAU,EAAE;QACR,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,OAAO;QAChB,cAAc,EAAE,eAAe;QAC/B,UAAU,EAAE,UAAU;QACtB,oBAAoB,EAAE,sBAAsB;QAC5C,gBAAgB,EAAE,gBAAgB;QAClC,QAAQ,EAAE,QAAQ;QAElB,UAAU,EAAE,UAAU;QAEtB,mBAAmB,EAAE;YACjB,MAAM,EAAE,qBAAqB;YAC7B,YAAY,EAAE,qBAAqB;YACnC,cAAc,EAAE,8HAA8H;YAC9I,oBAAoB,EAAE,SAAS;YAC/B,gBAAgB,EAAE,gCAAgC;YAClD,cAAc,EAAE,4BAA4B;SAC/C;KACJ;IAED,kBAAkB,EAAE;QAChB,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,aAAa;QACzB,UAAU,EAAE,4BAA4B;QACxC,OAAO,EAAE,OAAO;KACnB;CAEJ;;AC9BD,sBAAe;IAEX,UAAU,EAAE;QACR,MAAM,EAAE,aAAa;QACrB,OAAO,EAAE,cAAc;QACvB,cAAc,EAAE,0BAA0B;QAC1C,UAAU,EAAE,YAAY;QACxB,oBAAoB,EAAE,gCAAgC;QACtD,gBAAgB,EAAE,gBAAgB;QAClC,QAAQ,EAAE,gBAAgB;QAE1B,UAAU,EAAE,QAAQ;QAEpB,mBAAmB,EAAE;YACjB,MAAM,EAAE,0CAA0C;YAClD,YAAY,EAAE,sCAAsC;YACpD,cAAc,EAAE,8JAA8J;YAC9K,oBAAoB,EAAE,WAAW;YACjC,gBAAgB,EAAE,qDAAqD;YACvE,cAAc,EAAE,yDAAyD;SAC5E;KACJ;IAED,kBAAkB,EAAE;QAChB,OAAO,EAAE,YAAY;QACrB,UAAU,EAAE,uBAAuB;QACnC,UAAU,EAAE,8BAA8B;QAC1C,OAAO,EAAE,QAAQ;KACpB;CAEJ;;AC9BD,sBAAe;IAEX,UAAU,EAAE;QACR,MAAM,EAAE,UAAU;QAClB,OAAO,EAAE,WAAW;QACpB,cAAc,EAAE,mBAAmB;QACnC,UAAU,EAAE,eAAe;QAC3B,oBAAoB,EAAE,gCAAgC;QACtD,gBAAgB,EAAE,gBAAgB;QAClC,QAAQ,EAAE,WAAW;QAErB,UAAU,EAAE,SAAS;QAErB,mBAAmB,EAAE;YACjB,MAAM,EAAE,oCAAoC;YAC5C,YAAY,EAAE,oCAAoC;YAClD,cAAc,EAAE,8IAA8I;YAC9J,oBAAoB,EAAE,YAAY;YAClC,gBAAgB,EAAE,gDAAgD;YAClE,cAAc,EAAE,mDAAmD;SACtE;KACJ;IAED,kBAAkB,EAAE;QAChB,OAAO,EAAE,eAAe;QACxB,UAAU,EAAE,gCAAgC;QAC5C,UAAU,EAAE,iCAAiC;QAC7C,OAAO,EAAE,QAAQ;KACpB;CAEJ;;MCvBK,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,EAAE;MAC3D,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,EAAE;MAC3D,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO;;ACN/D;;;;;;;;;MAYa,eAAe;IAExB,YACY,mBAA2C;QAA3C,wBAAmB,GAAnB,mBAAmB,CAAwB;KAEtD;IAED,IAAY,KAAK;QACb,IAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY;YACrC,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,EAAE,CAAC;QAC/C,IAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACxD,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;KACzD;;;;;IAMM,GAAG,CAAC,QAAgB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;KAC7C;;;;;;;IAQM,GAAG,CAAC,QAAgB,EAAE,KAAU,EAAE,QAAkB;QACvD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,GAAG,KAAK,CAAC;QAC3C,IAAG,CAAC,QAAQ,EAAC;YACT,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;KACJ;;;;;;IAOM,MAAM,CAAC,QAAgB,EAAE,QAAkB;QAC9C,IAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,EAAE;YACzE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC;YAC1C,IAAG,CAAC,QAAQ,EAAC;gBACT,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;SACJ;KACJ;;;;IAKM,IAAI;QACP,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;KACvD;;8EAvDQ,eAAe;oDAAf,eAAe,WAAf,eAAe,mBAFZ,MAAM;+CAET,eAAe;cAH3B,UAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACdD;;;;;;"}