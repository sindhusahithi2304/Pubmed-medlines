{"version":3,"file":"sinequa-core-modal.js","sources":["../../../projects/core/modal/modal-ref.ts","../../../projects/core/modal/modal.service.ts","../../../projects/core/modal/confirm.component.ts","../../../projects/core/modal/prompt.component.ts","../../../projects/core/modal/module.providers.ts","../../../projects/core/modal/modal.module.ts","../../projects/core/modal/messages/en.ts","../../projects/core/modal/messages/fr.ts","../../projects/core/modal/messages/de.ts","../../projects/core/modal/messages/index.ts","../../../projects/core/modal/sinequa-core-modal.ts"],"sourcesContent":["import {Type} from \"@angular/core\";\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subject, Observable, of} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ModalResult} from \"./modal.service\";\n\n/**\n * Describes the event raised by an {@link IModalRef} instance before a modal dialog is closed.\n */\nexport interface CheckCloseEvent {\n    /**\n     * The result passed to the [IModalRef.close]{@link IModalRef#close} method.\n     */\n    result: ModalResult;\n    /**\n     * A flag that can be set by the event receiver to indicate that the closing of the modal dialog\n     * should be cancelled.\n     */\n    cancelled?: Observable<boolean>;\n}\n\n/**\n * Describes the object returned by the [ModalService.openRef]{@link ModalService.openRef} method\n * to maintain a reference to the opened modal.\n */\nexport interface IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent>;\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult>;\n    /**\n     * A stream that emits after the referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult>;\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result: ModalResult);\n}\n\n/**\n * An implementation of the {@link IModalRef} interface.\n */\nexport class ModalRef implements IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A flag indicating whether the referenced modal has been submitted.\n     */\n    submitted: boolean;\n    private _checkClose = new Subject<CheckCloseEvent>();\n    private _beforeClosed = new Subject<ModalResult>();\n    private _afterClosed = new Subject<ModalResult>();\n    private formElement: HTMLFormElement | undefined;\n\n    constructor(private overlayRef: OverlayRef) {\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent> {\n        return this._checkClose.asObservable();\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * A stream that emits aftervthe referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result = ModalResult.Cancel) {\n        // Delay to allow submit handling\n        Utils.delay().then(() => {\n            const checkCloseEvent: CheckCloseEvent = { result };\n            this._checkClose.next(checkCloseEvent);\n            (checkCloseEvent.cancelled || of(false)).subscribe(\n                (cancelled) => {\n                    if (!cancelled) {\n                        this._checkClose.complete();\n                        this._beforeClosed.next(result);\n                        this._beforeClosed.complete();\n                        this.removeSubmitListener();\n                        this.overlayRef.detachBackdrop();\n                        this.overlayRef.dispose();\n                        this.componentInstance = undefined;\n                        this._afterClosed.next(result);\n                        this._afterClosed.complete();\n                    }\n                }\n            );\n        });\n    }\n\n    private submitListener = (event) => {\n        this.submitted = true;\n        event.preventDefault();\n        return false;\n    }\n\n    /**\n     * Disable the standard browser submit handling on any HTML form in the modal component.\n     */\n    disableSubmit() {\n        if (!this.formElement) {\n            const formElement = this.overlayRef.overlayElement.querySelector(\"form\");\n            if (formElement) {\n                this.formElement = formElement;\n                this.formElement.addEventListener(\"submit\", this.submitListener);\n            }\n        }\n    }\n\n    private removeSubmitListener() {\n        if (this.formElement) {\n            this.formElement.removeEventListener(\"submit\", this.submitListener);\n            this.formElement = undefined;\n        }\n    }\n}\n","import {Injectable, Inject, Type, Injector, InjectionToken} from \"@angular/core\";\nimport {FormGroup, ValidatorFn} from \"@angular/forms\";\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Utils, Keys} from \"@sinequa/core/base\";\nimport {MessageParams} from \"@sinequa/core/intl\"; // Dependency to INTL !\nimport {ModalRef, IModalRef} from \"./modal-ref\";\n\n/** Describes the configuration object that can be passed when opening\n * a modal with the {@link ModalService}.\n */\nexport interface ModalConfig {\n    /**\n     * Classes that should be added to the `Overlay` pane.\n     */\n    panelClass?: string | string[];\n    /**\n     * Indicates whether a backdrop should be added when opening the modal.\n     */\n    hasBackdrop?: boolean;\n    /**\n     * Classes that should be added to the backdrop.\n     */\n    backdropClass?: string | string[];\n    /**\n     * The data model that the modal will operate on.\n     */\n    model?: any;\n    /**\n     * The CSS width of the modal.\n     */\n    width?: string;\n    /**\n     * The CSS height of the modal.\n     */\n    height?: string;\n    /**\n     * Indicates whether the modal should occupy the screen width and height. In this case\n     * `width` and `height` are set to `100%` and the `sq-modal-fullscreen` class is added\n     * to `panelClass`\n     */\n    fullscreen?: boolean;\n    /**\n     * Indicates whether a click on the backdrop should close the modal. The default value\n     * is `true`.\n     */\n    closeOnBackdropClick?: boolean;\n}\n\nconst DEFAULT_CONFIG: ModalConfig = {\n    hasBackdrop: true,\n    backdropClass: [\"cdk-overlay-dark-backdrop\", \"sq-modal-backdrop\"],\n    panelClass: \"sq-modal-pane\",\n    model: null,\n    closeOnBackdropClick: true\n};\n\n/**\n * The `MODAL_MODEL` injection token can be used to access the modal's model in\n * the the modal component. The value is `provided` from the value set in the\n * {@link ModalConfig} options when the modal is opened.\n */\nexport const MODAL_MODEL = new InjectionToken<any>('MODAL_MODEL');\n\n/**\n * The possible result values that can be set when a modal is closed. Buttons in a modal\n * have an associated `ModalResult` value. All buttons except those with a `Custom` result\n * value will close the modal when they are clicked.\n */\nexport const enum ModalResult {\n    OK = -1,\n    Cancel = -2,\n    Yes = -3,\n    No = -4,\n    Abort = -5,\n    Retry = -6,\n    Ignore = -7,\n    Custom = 0\n}\n\n/**\n * An enumeration of the types of confirm modals. The type of the confirm modal\n * can be reflected in the icon and/or colors used.\n */\nexport const enum ConfirmType {\n    Success,\n    Info,\n    Warning,\n    Error\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.confirm]{@link ModalService#confirm}\n * method.\n */\nexport interface ConfirmOptions {\n    /**\n     * The title of the confirm modal.\n     */\n    title?: string;\n    /**\n     * The message dispayed in the confirm modal.\n     */\n    message: string;\n    /**\n     * Any parameters for the `message`.\n     */\n    messageParams?: MessageParams;\n    /**\n     * The type of the confirm modal.\n     */\n    confirmType?: ConfirmType;\n    /**\n     * The buttons to display in the confirm modal.\n     */\n    buttons: ModalButton[];\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.prompt]{@link ModalService#prompt}\n * method.\n */\nexport interface PromptOptions extends ConfirmOptions {\n    /**\n     * text written by the user in the prompt input\n     */\n    output: string;\n    /**\n     * List of validators for the input form control\n     */\n    validators?: ValidatorFn[];\n    /**\n     * If omitted, a single-line input is displayed. If specified, a textarea with the\n     * given number of rows is displayed\n     */    \n    rowCount?: number;\n}\n\n/**\n * Describes the options that can be used when creating an instance of a {@link ModalButton}.\n */\nexport interface IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary?: boolean;\n    /**\n     * The button text.\n     */\n    text?: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible?: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation?: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor?: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action?: (button: ModalButton) => void;\n}\n\n/**\n * A class representing a button displayed in a modal.\n */\nexport class ModalButton implements IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary: boolean;\n    /**\n     * The button text.\n     */\n    text: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action: (button: ModalButton) => void;\n\n    constructor(options: IModalButton) {\n        Utils.extend(this, {visible: true, anchor: false}, options);\n    }\n\n    /**\n     * Get the button text. Buttons with non-custom result types\n     * have default text depending on their result type -\n     * `msg#modal.buttons.ok`, `msg#modal.buttons.cancel` etc\n     */\n    getText() {\n        if (this.text) {\n            return this.text;\n        }\n        switch (this.result) {\n            case ModalResult.OK:\n                return \"msg#modal.buttons.ok\";\n            case ModalResult.Cancel:\n                return \"msg#modal.buttons.cancel\";\n            case ModalResult.Yes:\n                return \"msg#modal.buttons.yes\";\n            case ModalResult.No:\n                return \"msg#modal.buttons.no\";\n            case ModalResult.Abort:\n                return \"msg#modal.buttons.abort\";\n            case ModalResult.Retry:\n                return \"msg#modal.buttons.retry\";\n            case ModalResult.Ignore:\n                return \"msg#modal.buttons.ignore\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Perform a click on a button. The button's explicit action is performed if set and\n     * the modal closed with the button's modal result if the `result` type is non-`Custom`.\n     * If the validation status not `valid` this method returns without performing any action.\n     *\n     * @param closer An object with a `close` method. If the result type is non-custom then\n     * the `close` method of this object is called.\n     */\n    click(closer: {close(result: any): void}) {\n        if (this.validation && !this.validation.valid) {\n            return;\n        }\n        if (this.action) {\n            this.action(this);\n        }\n        if (this.result !== ModalResult.Custom) {\n            closer.close(this.result);\n        }\n    }\n}\n\n/**\n * An injection token to set the component to use for the `confirm` modal displayed\n * by the [ModalService.confirm]{@link ModalService#confirm} method.\n */\nexport const MODAL_CONFIRM = new InjectionToken<Type<any>>('MODAL_CONFIRM');\n\n/**\n * An injection token to set the component to use for the `prompt` modal displayed\n * by the [ModalService.prompt]{@link ModalService#confirm} method.\n */\nexport const MODAL_PROMPT = new InjectionToken<Type<any>>('MODAL_PROMPT');\n\n/**\n * A service to open modal dialogs.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ModalService {\n    constructor(\n        protected injector: Injector,\n        protected overlay: Overlay,\n        @Inject(MODAL_CONFIRM) protected confirmModal: Type<any>,\n        @Inject(MODAL_PROMPT) protected promptModal: Type<any>\n    ) {\n    }\n\n    /**\n     * Open a modal dialog using the passed configuration options.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns An `IModalRef` object that can be used to close the modal.\n     */\n    openRef(component: Type<any>, config: ModalConfig = {}): IModalRef {\n        // Override default configuration\n        const modalConfig = { ...DEFAULT_CONFIG, ...config };\n        if (modalConfig.fullscreen) {\n            modalConfig.width = \"100%\";\n            modalConfig.height = \"100%\";\n            if (Utils.isString(modalConfig.panelClass)) {\n                modalConfig.panelClass = [modalConfig.panelClass, \"sq-modal-fullscreen\"];\n            }\n            else if (modalConfig.panelClass) {\n                modalConfig.panelClass.push(\"sq-modal-fullscreen\");\n            }\n            else {\n                modalConfig.panelClass = \"sq-modal-fullscreen\";\n            }\n        }\n        // Returns an OverlayRef which is a PortalHost\n        const overlayRef = this.createOverlay(modalConfig);\n        // Instantiate remote control\n        const modalRef = new ModalRef(overlayRef);\n        const overlayComponent = this.attachDialogContainer(component, overlayRef, modalConfig, modalRef);\n        modalRef.componentInstance = overlayComponent;\n        overlayRef.hostElement.classList.add(\"sq-modal-host\");\n        if (modalConfig.closeOnBackdropClick) {\n            // NB backdropClick will not fire if pointer-events are enabled on modal-host\n            overlayRef.backdropClick().subscribe(() => modalRef.close());\n            // Provide support for a scrollable sq-modal-host (overlay wrapper)\n            // The standard cdk styling disables pointer-events at this level which means that scrolling\n            // won't work. We can enable pointer-events in css but then the backdrop will not receive the\n            // click event. So, we handle the click event directly on sq-modal-host also and if the\n            // click target === sq-modal-host then we initiate modal closing here\n            overlayRef.hostElement.addEventListener(\"click\", (event) => {\n                if (event.target === overlayRef.hostElement) {\n                    modalRef.close();\n                }\n            });\n        }\n        overlayRef.keydownEvents().subscribe((event) => {\n            if (event.keyCode === Keys.esc) {\n                modalRef.close();\n            }\n        });\n        modalRef.disableSubmit();\n        return modalRef;\n    }\n\n    /**\n     * A wrapper around the {@link #openRef} method which returns a `Promise` that resolves\n     * with the `ModalResult` when the modal is closed.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns The `ModalResult` when the modal is closed.\n     */\n    open(component: Type<any>, config: ModalConfig = {}): Promise<ModalResult> {\n        const modalRef = this.openRef(component, config);\n        return modalRef.afterClosed().toPromise();\n    }\n\n    private createOverlay(config: ModalConfig): OverlayRef {\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(component: Type<any>, overlayRef: OverlayRef, config: ModalConfig, modalRef: ModalRef) {\n        // PortalInjector() is deprecated\n        const injector = Injector.create({\n            providers:[\n                {provide: ModalRef, useValue: modalRef},\n                {provide: MODAL_MODEL, useValue: config.model}\n            ], \n            parent:this.injector\n        });\n        const containerPortal = new ComponentPortal(component, null, injector);\n        const containerRef = overlayRef.attach<Type<any>>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    private getOverlayConfig(config: ModalConfig): OverlayConfig {\n        const positionStrategy = this.overlay.position()\n            .global()\n            .centerHorizontally()\n            .centerVertically();\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n\n        return overlayConfig;\n    }\n\n    /**\n     * Open a confirmation modal dialog displaying a message and a set buttons. This is similar to the Javacsript\n     * `Window.alert` method but renders a modal.\n     *\n     * @param options The options used to open the confirm modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    confirm(options: ConfirmOptions): Promise<ModalResult> {\n        return this.open(this.confirmModal, {model: options});\n    }\n\n    /**\n     * Open a prompt modal dialog displaying a message, an input and OK/Cancel buttons.\n     *\n     * @param options The options used to open the prompt modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    prompt(options: PromptOptions): Promise<ModalResult> {\n        return this.open(this.promptModal, {model: options});\n    }\n\n    /**\n     * Open a confirm modal that has an `OK` button.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     */\n    oK(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Success): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: true })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `OK` and `Cancel` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    oKCancel(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.OK): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: primaryButton === ModalResult.OK }),\n                new ModalButton({ visible: true, result: ModalResult.Cancel, primary: primaryButton === ModalResult.Cancel })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `Yes` and `No` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    yesNo(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.Yes): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.Yes, primary: primaryButton === ModalResult.Yes }),\n                new ModalButton({ visible: true, result: ModalResult.No, primary: primaryButton === ModalResult.No })\n            ]\n        });\n    }\n}\n","import {Component, Inject} from \"@angular/core\";\nimport {MODAL_MODEL, ConfirmOptions, ModalButton} from \"./modal.service\";\nimport {ModalRef} from \"./modal-ref\";\n\n@Component({\n    selector: \"sq-core-confirm\",\n    template: `\n        <div style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <hr>\n            <ng-container *ngFor=\"let button of model.buttons\">\n                <button *ngIf=\"button.visible\" type=\"{{button.primary ? 'submit' : 'button'}}\"\n                    (click)=\"buttonClick(button)\">{{button.getText() | sqMessage}}</button>\n            </ng-container>\n        </div>\n    `\n})\nexport class Confirm {\n    constructor(\n        @Inject(MODAL_MODEL) public model: ConfirmOptions,\n        protected modalRef: ModalRef) {\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.confirm.title\";\n    }\n\n    buttonClick(button: ModalButton) {\n        button.click(this.modalRef);\n    }\n}\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { MODAL_MODEL, PromptOptions, ModalResult} from \"./modal.service\";\nimport { ModalRef } from \"./modal-ref\";\nimport { Utils } from '@sinequa/core/base';\n\n@Component({\n    selector: \"sq-core-prompt\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <input type=\"text\" formControlName=\"input\" *ngIf=\"!model.rowCount\">\n            <textarea type=\"text\" formControlName=\"input\" spellcheck=\"on\" rows=\"{{model.rowCount}}\" autofocus *ngIf=\"!!model.rowCount\">\n            </textarea>\n            <ng-container *ngIf=\"showError(inputControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"input\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Prompt implements OnInit, OnDestroy {\n    inputControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: PromptOptions,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.inputControl = new FormControl(this.model.output, this.model.validators || Validators.required);\n        this.form = this.formBuilder.group({\n            input: this.inputControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.output = this.inputControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.prompt.title\";\n    }\n\n}\n","const MODAL_MODULE_PROVIDERS = [];\n\nexport {MODAL_MODULE_PROVIDERS};\n","import {NgModule, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {MODAL_CONFIRM} from \"./modal.service\";\nimport {MODAL_PROMPT} from \"./modal.service\";\n\nimport {MODAL_MODULE_PROVIDERS} from \"./module.providers\";\n\nimport {Confirm} from \"./confirm.component\";\nimport {Prompt} from './prompt.component';\n\n/**\n * This module contains an implementation of a [modal dialog service]{@link ModalService} which can be extended\n * to support UI frameworks such as Bootstrap and Material Design. It uses the `Overlay` and `Portal` funcionality\n * provided by the [Angular CDK]{@link https://material.angular.io/cdk/categories} library.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        IntlModule,\n        ValidationModule,\n    ],\n    declarations: [\n        Confirm,    // Default confirm\n        Prompt\n    ],\n    exports: [\n    ],\n    providers: [\n        ...MODAL_MODULE_PROVIDERS\n    ]\n})\nexport class ModalModule {\n    static forRoot(confirmModal: Type<any> = Confirm, promptModal: Type<any> = Prompt): ModuleWithProviders<ModalModule> {\n        return {\n            ngModule: ModalModule,\n            providers: [\n                {provide: MODAL_CONFIRM, useValue: confirmModal},\n                {provide: MODAL_PROMPT, useValue: promptModal},\n            ]\n        };\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Cancel\",\n            \"yes\": \"Yes\",\n            \"no\": \"No\",\n            \"abort\": \"Abort\",\n            \"retry\": \"Retry\",\n            \"ignore\": \"Ignore\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirm\"\n        },\n\n        \"prompt\": {\n            \"title\": \"Enter a value\"\n        }\n    }\n};\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Annuler\",\n            \"yes\": \"Oui\",\n            \"no\": \"Non\",\n            \"abort\": \"Abandonner\",\n            \"retry\": \"Réessayer\",\n            \"ignore\": \"Ignorer\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirmer\"\n        },\n        \"prompt\": {\n            \"title\": \"Saississez une valeur\"\n        }\n    }\n};\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Abbrechen\",\n            \"yes\": \"Ja\",\n            \"no\": \"Nein\",\n            \"abort\": \"Abbrechen\",\n            \"retry\": \"Wiederholen\",\n            \"ignore\": \"Ignorieren\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Bestätigen\"\n        },\n        \"prompt\": {\n            \"title\": \"Geben Sie einen Wert ein\"\n        }\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enModal from \"./en\";\nimport _frModal from \"./fr\";\nimport _deModal from \"./de\";\n\nconst enModal = Utils.merge({}, _enModal, enIntl);\nconst frModal = Utils.merge({}, _frModal, frIntl);\nconst deModal = Utils.merge({}, _deModal, deIntl);\n\nexport { enModal, frModal, deModal };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵpropertyInterpolate","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵproperty","i0.ɵɵelement"],"mappings":"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"}