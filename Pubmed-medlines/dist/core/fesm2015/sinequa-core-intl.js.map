{"version":3,"file":"sinequa-core-intl.js","sources":["../../../projects/core/intl/import-moment.ts","../../../projects/core/intl/intl.service.ts","../../../projects/core/intl/abstract-intl.pipe.ts","../../../projects/core/intl/message.pipe.ts","../../../projects/core/intl/module.providers.ts","../../../projects/core/intl/intl.module.ts","../../projects/core/intl/messages/en.ts","../../projects/core/intl/messages/fr.ts","../../projects/core/intl/messages/de.ts","../../../projects/core/intl/sinequa-core-intl.ts"],"sourcesContent":["// moment locales need moment set globally\nimport moment from \"moment\";\n(window as any).moment = moment;\n","import {Injectable, Optional, Inject, OnDestroy, InjectionToken} from \"@angular/core\";\nimport {Subject, Observable, concat, of, throwError} from \"rxjs\";\nimport {map, last} from \"rxjs/operators\";\nimport IntlMessageFormat from \"intl-messageformat\";\nimport memoizeFormatConstructor from \"intl-format-cache\";\n// TODO - check loading of locale data per locale - the ponyfill doesn't seem to work\nimport \"@formatjs/intl-relativetimeformat/polyfill\";\nimport \"intl-pluralrules\";\nimport get from \"lodash/get\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\n// We support loading d3 bundled and unbundled as it is typically easier\n// for others to integrate bundled examples but some 3rd party libs (eg swimlane/charts)\n// load d3 unbundled.\nimport {FormatLocaleDefinition, formatDefaultLocale} from \"d3-format\";\nimport {TimeLocaleDefinition, timeFormatDefaultLocale} from \"d3-time-format\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\n\n/**\n * @ignore\n */\nconst formatters = {\n    getMessageFormat: memoizeFormatConstructor(IntlMessageFormat),\n    getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat),\n    getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat),\n    getRelativeTimeFormat: memoizeFormatConstructor(Intl.RelativeTimeFormat),\n    getPluralRules: memoizeFormatConstructor(Intl.PluralRules)\n};\n\n/**\n * @ignore\n */\nconst DATE_TIME_FORMAT_OPTIONS = [\n    \"dateStyle\",\n    \"timeStyle\",\n    \"localeMatcher\",\n    \"timeZone\",\n    \"hour12\",\n    \"hourCycle\",\n    \"formatMatcher\",\n    \"weekday\",\n    \"era\",\n    \"year\",\n    \"month\",\n    \"day\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"timeZoneName\",\n];\n\n/**\n * @ignore\n */\nconst NUMBER_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"style\",\n    \"currency\",\n    \"currencyDisplay\",\n    \"useGrouping\",\n    \"minimumIntegerDigits\",\n    \"minimumFractionDigits\",\n    \"maximumFractionDigits\",\n    \"minimumSignificantDigits\",\n    \"maximumSignificantDigits\",\n];\n\n/**\n * @ignore\n */\nconst RELATIVE_TIME_FORMAT_OPTIONS = [\n    \"localeMatcher\",\n    \"numeric\",\n    \"style\"\n];\n\n/**\n * Describes event emitted by {@link IntlService} when the current locale changes\n */\nexport interface LocaleChangeEvent {\n    /**\n     * The name of the newly selected locale\n     */\n    locale: string;\n}\n\n/**\n * Describes the data that can be set in a Sinequa locale. Instances are normally\n * defined in application locale modules which can be included statically or loaded\n * dynamically\n */\nexport interface LocaleData {\n    /**\n     * Options pertaining to the `Intl` API\n     */\n    intl: {\n        locale: string\n    };\n    /**\n     * Options pertaining to the `Moment.js` library\n     */\n    moment?: { // default to built-in en-us, data is auto set by moment.defineLocale when the locale module is loaded\n        locale: string\n    };\n    /**\n     * Options pertaining to the `D3.js` library\n     */\n    d3?: {\n        locale: string,\n        format: FormatLocaleDefinition,\n        time: TimeLocaleDefinition\n    };\n    /**\n     * The messages (ICU Message syntax) for this locale\n     */\n    messages: JsonObject;\n}\n\n/**\n * Describes a Sinequa locale\n */\nexport interface Locale {\n    /**\n     * The name identifying the locale\n     */\n    name: string;\n    /**\n     * A display name for the locale\n     */\n    display: string;\n    /**\n     * The directionality of text in this locale (left-to-right or right-to-left)\n     */\n    direction?: \"ltr\" | \"rtl\";\n    /**\n     * The locale data for the locale\n     */\n    data?: LocaleData;\n}\n\n/**\n * @ignore\n */\ninterface NextLang {\n    start: number;\n    end: number;\n    lang1: number;\n    lang2: number;\n}\n\n\n// moment needs to be set globally to load moment locales successfully when the locales are bundled in the main rollup bundle\n// see: https://github.com/rollup/rollup/issues/641\nimport \"./import-moment\";\n\n/**\n * Describes the locales configuration object defined by an application and used by the {@link IntlService}\n */\nexport interface LocalesConfig {\n    /**\n     * The default locale\n     */\n    defaultLocale: Locale;\n    /**\n     * The set of locales supported by the application\n     */\n    locales?: Locale[];\n    /**\n     * An optional loader for the dynamic loading of locale data\n     * for locales that do not define the data statically\n     */\n    loadLocale?(locale: string): Observable<LocaleData>;\n}\n\n/**\n * An injection token used to initialize the [locales configuration]{@link LocalesConfig} of {@link IntlModule}\n */\nexport const LOCALES_CONFIG = new InjectionToken<LocalesConfig>('LOCALES_CONFIG');\n\n/**\n * Describes the object to specify custom ICU Message formats\n */\nexport interface IntlFormats {\n    /**\n     * Format options for dates\n     */\n    date?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for times\n     */\n    time?: MapOf<Intl.DateTimeFormatOptions>;\n    /**\n     * Format options for numbers\n     */\n    number?: MapOf<Intl.NumberFormatOptions>;\n    /**\n     * Format options for relative times\n     */\n    relativeTime?: MapOf<Intl.RelativeTimeFormatOptions>;\n}\n\n/**\n * Describes a general configuration object for the {@link IntlModule}\n */\nexport interface IntlConfig {\n    /**\n     * Custom formats for ICU Message processing\n     */\n    formats?: IntlFormats;\n}\n\n/**\n * An injection token used to initialize the [general configuration]{@link IntlConfig} of {@link IntlModule}\n */\nexport const INTL_CONFIG = new InjectionToken<IntlConfig>('INTL_CONFIG');\n\n/**\n * Default custom ICU Message formats\n */\nconst DEFAULT_FORMATS: IntlFormats = {\n    date: {\n        sqDateTime: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n        },\n        sqDate: {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\"\n        },\n        sqYear: {\n            year: \"numeric\"\n        },\n        sqMonthYear: {\n            month: \"short\",\n            year: \"numeric\"\n        }\n    },\n    time: {\n    },\n    number: {\n        sqWeek: {\n            minimumIntegerDigits: 2,\n            useGrouping: false\n        },\n        sqYear: {\n            useGrouping: false\n        },\n        sqNoGrouping: {\n            useGrouping: false\n        },\n        sqZeroDecimalPlaces: {\n            maximumFractionDigits: 0\n        },\n        sqOneDecimalPlace: {\n            maximumFractionDigits: 1\n        },\n        sqTwoDecimalPlaces: {\n            maximumFractionDigits: 2\n        },\n        sqThreeDecimalPlaces: {\n            maximumFractionDigits: 3\n        },\n        sqFourDecimalPlaces: {\n            maximumFractionDigits: 4\n        },\n        sqFiveDecimalPlaces: {\n            maximumFractionDigits: 5\n        }\n    }\n};\n\n/* eslint-disable jsdoc/check-alignment,jsdoc/check-indentation,jsdoc/newline-after-description */\n/**\n * This service provides methods for managing locales and for formatting dates, numbers and strings using\n * [ICU Message syntax]{@link https://formatjs.io/guides/message-syntax/}. [Messages]{@link LocaleData#messages} stored\n * in a locale's data are referenced using a key in the following form: `msg#<JSONPath>`. Given the following messages:\n``` json\n{\n    \"myComponent\": {\n        \"title\": \"Component: {name}\",\n        \"footer\": \"Created on {created, date, medium} by {author}\"\n    }\n}\n```\n * this key: `msg#myComponent.footer` references myComponent's footer message. The message itself uses\n * ICU Message syntax.\n *\n * This service registers a number of [default custom ICU formats]{@link DEFAULT_FORMATS}. These can be overridden or\n * extended by providing the [INTL_CONFIG]{@link INTL_CONFIG} injection token.\n */\n/* eslint-enable jsdoc/check-alignment, jsdoc/check-indentation, jsdoc/newline-after-description */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class IntlService implements OnDestroy {\n    /**\n     * The prefix for ICU messages to be retrieved from [LocaleData.messages]{@link LocaleData#messages}\n     * by {@link formatMessage}\n     */\n    readonly messagePrefix = \"msg#\";\n    /**\n     * An alternative prefix for inline ICU messages processed by {@link formatMessage}\n     */\n    readonly textPrefix = \"txt#\";\n    /**\n     * The available locales\n     */\n    locales: Locale[];\n    /** The current locale */\n    currentLocale: Locale;\n    protected intlLocale: string;\n    /** The current direction */\n    direction: \"ltr\" | \"rtl\";\n    protected _events: Subject<LocaleChangeEvent>;\n    protected formats: IntlFormats;\n\n    constructor(\n        @Optional() @Inject(INTL_CONFIG) protected intlConfig: IntlConfig,\n        @Optional() @Inject(LOCALES_CONFIG) protected localesConfig: LocalesConfig\n    ) {\n        if (!this.intlConfig) {\n            this.intlConfig = {};\n        }\n        if (!localesConfig) {\n            if (!localesConfig) {\n                console.error(\"LOCALES_CONFIG has not been provided by the calling app. \" +\n                    \"Please import IntlModule using the forRoot method to which you should pass a LocalesConfig object\");\n            }\n        }\n        this._events = new Subject<LocaleChangeEvent>();\n        this.locales = localesConfig.locales || [localesConfig.defaultLocale];\n    }\n\n    private static getLanguage(name: string) {\n        const sepPos = name.indexOf(\"-\");\n        if (sepPos === -1) {\n            return name;\n        }\n        return name.substring(0, sepPos);\n    }\n\n    private static getBrowserLanguages(): string[] {\n        if ((navigator as any).languages) {\n            return (navigator as any).languages;\n        }\n        const language = navigator.language || (navigator as any).userLanguage ||\n            (navigator as any).browserLanguage || (navigator as any).systemLanguage;\n        return !!language ? [language] : [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<LocaleChangeEvent> {\n        return this._events;\n    }\n\n    private getInitialLocale(): Locale {\n        const language = window.localStorage.getItem(\"sinequa-locale\");\n        const languages = !!language ? [language] : IntlService.getBrowserLanguages();\n        let locale = this.getLocale(languages);\n        if (locale) {\n            return locale;\n        }\n        locale = this.getLocale(languages, true);\n        if (locale) {\n            return locale;\n        }\n        return this.localesConfig.defaultLocale;\n    }\n\n    /**\n     * Initialize the service. The current locale is initialized to either the `sinequa-locale` local\n     * storage value, the browser language or the default locale.\n     *\n     * This method is called automatically by the {@link IntlModule} at application startup.\n     *\n     * @return An observable of the current locale\n     */\n    init(): Observable<string> {\n        // Set up formats\n        this.formats = Utils.merge(DEFAULT_FORMATS, this.intlConfig.formats);\n        // Load default locale\n        let observable = this.use(this.localesConfig.defaultLocale.name, false);\n        const initialLocale = this.getInitialLocale();\n        if (initialLocale !== this.localesConfig.defaultLocale) {\n            // Load initial locale if different to default\n            console.log(\"Setting initial locale: \", initialLocale.name);\n            observable = concat<string>(observable, this.use(initialLocale.name, false)).pipe(last<string>());\n        }\n        Utils.subscribe(observable,\n            (value) => {\n                console.log(\"Initial locale set: \", value);\n            });\n        return observable;\n    }\n\n    private loadData(locale: string): Observable<LocaleData> {\n        if (!this.localesConfig.loadLocale) {\n            return throwError(\"Dynamic locale loading has not been implemented in the calling app - \"  +\n                \"please add a loadLocale handler to your LocalesConfig\");\n        }\n        return this.localesConfig.loadLocale(locale);\n    }\n\n    private getLocale(names: string | string[], approximate = false): Locale | undefined {\n        if (typeof names === \"string\") {\n            names = [names];\n        }\n        for (const name of names) {\n            const locale = this.locales.find((locale1) => {\n                if (locale1.name === name) {\n                    return true;\n                }\n                if (approximate && IntlService.getLanguage(locale1.name) === IntlService.getLanguage(name)) {\n                    return true;\n                }\n                return false;\n            });\n            if (locale) {\n                return locale;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Change the current locale. The change is made asynchronously as the locale may need to be\n     * downloaded. The current locale is optionally stored in local storage (`sinequa-locale`)\n     * to be picked up the next time the service is initialized\n     *\n     * @param locale The name of the locale to use\n     * @param store If `true` the current locale is stored in local storage\n     */\n    use(locale: string, store = true): Observable<string> {\n        const newLocale = this.getLocale(locale);\n        if (!newLocale) {\n            return throwError({error: \"unsupported locale\"});\n        }\n\n        const observable = !!newLocale.data ? of(newLocale.data) : this.loadData(locale);\n        Utils.subscribe<LocaleData>(observable,\n            (data) => {\n                this.currentLocale = newLocale;\n\n                if (store) {\n                    window.localStorage.setItem(\"sinequa-locale\", this.currentLocale.name);\n                }\n\n                this.direction = this.currentLocale.direction || \"ltr\";\n\n                if (!this.currentLocale.data) {\n                    this.currentLocale.data = data;\n                }\n\n                // Set moment locale\n                if (this.currentLocale.data.moment) {\n                    // Set (and define if necessary) moment locale (it auto-defines when we are not bundled)\n                    if (moment.locale(this.currentLocale.data.moment.locale) !== this.currentLocale.data.moment.locale) {\n                        console.log(`moment locale not defined: ${this.currentLocale.data.moment.locale} - defaulting to en`);\n                        moment.locale(\"en\");\n                    }\n                }\n                else {\n                    moment.locale(\"en\");\n                }\n\n                // Set d3 locale\n                if (this.currentLocale.data.d3) {\n                    formatDefaultLocale(this.currentLocale.data.d3.format);\n                    timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                    d3.formatDefaultLocale(this.currentLocale.data.d3.format);\n                    d3.timeFormatDefaultLocale(this.currentLocale.data.d3.time);\n                }\n\n                if (this.currentLocale.data.intl && this.currentLocale.data.intl.locale) {\n                    this.intlLocale = this.currentLocale.data.intl.locale;\n                }\n                else {\n                    this.intlLocale = this.localesConfig.defaultLocale.data ? this.localesConfig.defaultLocale.data.intl.locale : \"en\";\n                }\n                return of(this.intlLocale);\n            });\n\n        const observable2 = observable.pipe(map((value) => {\n            return this.currentLocale.name;\n        }));\n\n        Utils.subscribe(observable2,\n            (name) => {\n                this._events.next({locale: name});\n            });\n\n        return observable2;\n    }\n\n    private getDefaultMessages(): any {\n        const _default = this.locales.find((value) => !!value.data && !!value.data.messages);\n        if (_default) {\n            return _default.data && _default.data.messages;\n        }\n        return {};\n    }\n\n    private getMessages(): any {\n        let messages;\n        if (this.currentLocale && this.currentLocale.data) {\n            messages = this.currentLocale.data.messages;\n        }\n        if (!messages) {\n            messages = this.getDefaultMessages();\n        }\n        return messages;\n    }\n\n    /**\n     * Get the message from the current locale that corresponds to the passed `key`.\n     * If the is not prefixed by {@link messagePrefix} then `null` is returned\n     *\n     * @param key The message key\n     */\n    getMessage(key: string): string | undefined {\n        if (!Utils.startsWith(key, this.messagePrefix)) {\n            return undefined;\n        }\n        key = key.substr(this.messagePrefix.length);\n        const messages = this.getMessages();\n        let message = get(messages, key);\n        if (!message) {\n            const defaultMessages = this.getDefaultMessages();\n            if (messages !== defaultMessages) {\n                message = get(defaultMessages, key);\n            }\n        }\n        return message;\n    }\n\n    // Returned start and end are for the text BEFORE the language specifier and so refer to the previous\n    // language not the one returned by the same call to this method\n    private nextLang(text: string, start: number, allowNone: boolean): NextLang | undefined {\n        for (let i = start, ic = text.length - 3; i < ic; i++) {\n            if (text[i] === \"[\" && text[i + 3] === \"]\") {\n                return {\n                    start,\n                    end: i,\n                    lang1: text.charCodeAt(i + 1),\n                    lang2: text.charCodeAt(i + 2)\n                };\n            }\n        }\n        if (allowNone) {\n            return {\n                start,\n                end: text.length,\n                lang1: -1,\n                lang2: -1\n            };\n        }\n        return undefined;\n    }\n\n    // ([nnn])<default>[fr]<french>[de]<german>...\n    private sysLang(text: string): string {\n        if (!text) {\n            return text;\n        }\n        let iStart = 0;\n        const len = text.length;\n        // Skip order\n        let i = 0;\n        if (text[i] === \"[\") {\n            while (i < len && text[i] >= \"0\" && text[i] <= \"9\") {\n                i++;\n            }\n            if (text[i] === \"]\") {\n                iStart = i + 1;\n            }\n        }\n        // Pick out default value\n        const defaultLang = this.nextLang(text, iStart, false);\n        if (!defaultLang) {\n            return text; // Not a sys lang formatted text\n        }\n        // Look for a matching language\n        const lang1 = this.currentLocale.name.charCodeAt(0);\n        const lang2 = this.currentLocale.name.charCodeAt(1);\n        let curLang: NextLang | undefined = defaultLang;\n        while (curLang) {\n            if (lang1 === curLang.lang1 && lang2 === curLang.lang2) {\n                // We have a matching language, get its text\n                const nextLang = this.nextLang(text, curLang.end + 4, true);\n                return text.substring(nextLang!.start, nextLang!.end);\n            }\n            else {\n                curLang = this.nextLang(text, curLang.end + 4, false);\n            }\n        }\n        // return default language text\n        return text.substring(defaultLang.start, defaultLang.end);\n    }\n\n    private processFormatMessage(message: string, values = {}): string {\n        const hasValues = Object.keys(values).length > 0;\n        if (!hasValues) {\n            return message;\n        }\n        if (message) {\n            try {\n                const formatter = formatters.getMessageFormat(message, this.intlLocale, this.formats, {formatters});\n                const formattedMessage = formatter.format(values);\n                return formattedMessage;\n            }\n            catch (e) {\n                console.log(\"IntlService.processFormatMessage error:\", e);\n                return message;\n            }\n        }\n        else {\n            return message;\n        }\n    }\n\n    /**\n     * Format a message identified by a `key`. Any values referenced\n     * by the message are taken from an optional `values` map. The key can be\n     * in a variety of forms:\n     * * a Sinequa \"syslang\" string: `apple[fr]pomme[de]Apfel`\n     * * a message key resolved in the [messages]{@link LocaleData#messages} of the current\n     * locale:  `msg#path1.path2.path3`\n     * * an ICU message using the `txt#` prefix: `txt#Hello {name}`\n     *\n     * @param key The message identifier\n     * @param values Values referenced by an ICU message\n     * @return The formatted message. If the key is not resolved then it is returned unprocessed\n     */\n    formatMessage(key: string, values?: MapOf<any>): string {\n        key = Utils.trim(key);\n        const sysLangStr = this.sysLang(key);\n        if (sysLangStr !== key) {\n            return sysLangStr;\n        }\n        const _values = {};\n        if (values) {\n            for (const valueName of Object.keys(values)) {\n                const value = values[valueName];\n                if (value && Utils.isString(value)) {\n                    _values[valueName] = this.formatMessage(value);\n                }\n                else {\n                    _values[valueName] = value;\n                }\n            }\n        }\n        if (Utils.startsWith(key, this.messagePrefix)) {\n            if (Utils.eq(key, this.messagePrefix)) {\n                return key;\n            }\n            let message = this.getMessage(key);\n            if (!Utils.isString(message)) {\n                message = key;\n            }\n            const formattedMessage = this.processFormatMessage(message, _values);\n            return formattedMessage;\n        }\n        else if (Utils.startsWith(key, this.textPrefix)) {\n            if (Utils.eq(key, this.textPrefix)) {\n                return key;\n            }\n            key = key.substr(this.textPrefix.length);\n            const formattedMessage = this.processFormatMessage(key, _values);\n            return formattedMessage;\n        }\n        else {\n            return key;\n        }\n    }\n\n    /**\n     * Format an ICU Message string\n     *\n     * @param text An ICU Message to format\n     * @param values Values referenced by an ICU message\n     */\n    formatText(text: string, values?: {}): string {\n        const formattedMessage = this.processFormatMessage(text, values);\n        return formattedMessage;\n    }\n\n    /**\n     * Parse a date string in the current locale - eg `04/09/1986`\n     *\n     * @param value A date string\n     * @returns The parse `Date` or `undefined` if the date cannot be parsed\n     */\n    parseDate(value: string): Date | undefined {\n        const m = moment(value, \"L\");\n        if (m.isValid()) {\n            return m.toDate();\n        }\n        return undefined;\n    }\n\n    private getNamedFormat(type: string, name: string): Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | undefined {\n        const format = this.formats && this.formats[type] && this.formats[type][name];\n        if (format) {\n            return format;\n        }\n        console.warn(`IntlService.getNamedFormat - not found - type: ${type}, name: ${name}`);\n        return undefined;\n    }\n\n    private filterProps(props: {[k: string]: any}, whitelist: string[], defaults: {[k: string]: any} = {}): any {\n        return whitelist.reduce<{[k: string]: string}>((filtered, name) => {\n            if (props.hasOwnProperty(name)) {\n                filtered[name] = props[name];\n            }\n            else if (defaults.hasOwnProperty(name)) {\n                filtered[name] = defaults[name];\n            }\n            return filtered;\n        }, {});\n    }\n\n    /**\n     * Format a date in the current locale according to the passed options. If the passed `value` is not a `Date`\n     * then one is constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatDate(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"date\", format)) || {};\n        const filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatDate:\", e);\n        }\n        return String(date);\n    }\n\n    /**\n     * Format a time in the current locale according to the passed options. If the passed `value` is not a `Date` then one is\n     * constructed from it.\n     *\n     * @param value The date to format\n     * @param options The options can include a custom format\n     */\n    formatTime(value: string | number | Date, options: Intl.DateTimeFormatOptions & { format?: string } = {}): string {\n        const {format} = options;\n        const date = value instanceof Date ? value : new Date(value);\n        const defaults = (format && this.getNamedFormat(\"time\", format)) || {};\n        let filteredOptions = this.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {\n            // Add default formatting options if hour, minute, or second isn't defined.\n            filteredOptions = Object.assign({},\n                filteredOptions,\n                {\n                    hour: 'numeric',\n                    minute: 'numeric'\n                });\n        }\n        try {\n            return formatters.getDateTimeFormat(this.intlLocale, filteredOptions).format(date);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatTime:\", e);\n        }\n        return String(date);\n    }\n\n    private makeRelativeTimeParams(value: Date): { value: number, unit: Intl.RelativeTimeUnit } {\n        const diff = value.getTime() - Utils.now.getTime();\n        const absDiff = Math.abs(diff);\n        if (absDiff < Utils.oneSecond) {\n            return { value: 0, unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneMinute) {\n            return { value: Utils.roundAway(diff / Utils.oneSecond), unit: \"seconds\" };\n        }\n        else if (absDiff < Utils.oneHour) {\n            return { value: Utils.roundAway(diff / Utils.oneMinute), unit: \"minutes\" };\n        }\n        else if (absDiff < Utils.oneDay) {\n            return { value: Utils.roundAway(diff / Utils.oneHour), unit: \"hours\" };\n        }\n        else if (absDiff < (Utils.oneDay * 30)) {\n            return { value: Utils.roundAway(diff / Utils.oneDay), unit: \"days\" };\n        }\n        else if (absDiff < (Utils.oneDay * 365)) {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 30)), unit: \"months\" };\n        }\n        else {\n            return { value: Utils.roundAway(diff / (Utils.oneDay * 365)), unit: \"years\" };\n        }\n    }\n\n    /**\n     * Format a relative time in the current locale according to the passed options\n     *\n     * @param value The relative time to format. Negative number values represent times in the past.\n     * If a Date value is passed then a number value and unit are deduced automatically based on\n     * the current date and time.\n     * @param unit The relative time unit (eg years, days or seconds). Must be passed if value\n     * is a number.\n     * @param options The options can include a custom format\n     */\n    formatRelativeTime(\n        value: string | number | Date | undefined, unit?: Intl.RelativeTimeUnit,\n        options: Intl.RelativeTimeFormatOptions & { format?: string } = {}\n    ): string {\n        if (value === undefined) {\n            return \"\";\n        }\n        if (Utils.isString(value)) {\n            value = new Date(value);\n        }\n        if (Utils.isDate(value)) {\n            const params =  this.makeRelativeTimeParams(value);\n            value = params.value;\n            unit = params.unit;\n        }\n        const { format } = options;\n        const defaults = (format && this.getNamedFormat(\"relativeTime\", format)) || {};\n        const filteredOptions = this.filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n        if (!filteredOptions.numeric) {\n            filteredOptions.numeric = \"auto\"; // default is always - we prefer auto\n        }\n        try {\n            return formatters.getRelativeTimeFormat(this.intlLocale, filteredOptions).format(value, unit);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatRelativeTime:\", e);\n        }\n        return String(value);\n    }\n\n    /**\n     * Format a number in the current locale\n     *\n     * @param value The number to format\n     * @param options The options can include a custom format\n     */\n    formatNumber(value: any, options: Intl.NumberFormatOptions & { format?: any } = {}): string {\n        const {format} = options;\n        const defaults = format && this.getNamedFormat(\"number\", format);\n        const filteredOptions = this.filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n        try {\n          return formatters.getNumberFormat(this.intlLocale, filteredOptions).format(value);\n        }\n        catch (e) {\n            console.warn(\"IntlService.formatNumber:\", e);\n        }\n        return String(value);\n    }\n}\n","import {Pipe, PipeTransform, OnDestroy, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An abstract base class for pipes that should refresh automatically\n * when the current locale on {@link IntlService} changes. Pipes should\n * be declared as `pure: false` - the current value is cached to avoid\n * unnecessary processing\n */\n@Pipe({name: \"sqAbstractIntlPipe\", pure: false})\nexport abstract class AbstractIntlPipe implements PipeTransform, OnDestroy {\n    protected value: any = \"\";\n    protected lastValue: any;\n    protected lastParams: any;\n    protected localeChange: Subscription;\n\n    constructor(\n        protected intlService: IntlService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    protected updateValue(value: any, params?: any): void {\n        this.lastValue = value;\n        this.lastParams = params;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    transform(value: any, params?: any): any {\n        // if we ask another time for the same key, return the last value\n        if (Utils.equals(value, this.lastValue) && Utils.equals(params, this.lastParams)) {\n            return this.value;\n        }\n\n        // set the value\n        this.updateValue(value, params);\n\n        // subscribe to localeChange event\n        if (!this.localeChange) {\n            this.localeChange = this.intlService.events.subscribe(\n                (event) => {\n                    if (!Utils.isEmpty(this.lastValue)) {\n                        this.lastValue = null;\n                        this.updateValue(value, params);\n                    }\n                });\n        }\n\n        return this.value;\n    }\n\n    ngOnDestroy(): void {\n        if (this.localeChange) {\n            this.localeChange.unsubscribe();\n        }\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {AbstractIntlPipe} from \"./abstract-intl.pipe\";\nimport {IntlService} from \"./intl.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the parameters that can be passed to the [sqMessage]{@link MessagePipe} pipe\n */\nexport interface MessageParams {\n    /**\n     * Values that can be referenced from ICU messages\n     */\n    values?: MapOf<any>;\n}\n\n/**\n * A pipe to display messages in the current locale. Inputs are processed by\n * [IntlService.formatMessage]{@link IntlService#formatMessage}\n */\n@Pipe({name: \"sqMessage\", pure: false})\nexport class MessagePipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef) {\n        super(intlService, changeDetectorRef);\n    }\n\n    protected updateValue(value: any, params: MessageParams): void {\n        if (!Utils.isEmpty(value)) {\n            // coerce to string (eg sys date strings get converted to dates so if this happens to a title we will break otherwise)\n            value = value + \"\";\n        }\n        super.updateValue(value, params);\n        if (!value) {\n            this.value = value;\n            return;\n        }\n        let values: MapOf<any> | undefined;\n        if (params) {\n            values = params.values ? params.values : params;\n        }\n        this.value = this.intlService.formatMessage(value, values);\n    }\n}\n","const INTL_MODULE_PROVIDERS = [];\n\nexport {INTL_MODULE_PROVIDERS};\n","import {NgModule, APP_INITIALIZER, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {IntlService, LOCALES_CONFIG, LocalesConfig} from \"./intl.service\";\nimport {MessagePipe} from \"./message.pipe\";\nimport {INTL_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * An APP_INITIALIZER factory function for initialising the {@link IntlService} before any UI is displayed\n */\nexport function IntlInitializer(intlService: IntlService): () => Promise<string> {\n    const init = () => intlService.init().toPromise();\n    return init;\n}\n\n/**\n * This module contains core internationalization functionality for the formatting of numbers, dates and strings.\n * It is based on the industry standard\n * [Intl]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl} API\n * and an implementation of the ICU Message syntax provided by [FormatJS]{@link https://formatjs.io/}.\n *\n * The module provides mechanisms for the definition and loading of locales which can be extended with library specific\n * locale information. By default, locales contain support for `Moment.js` and `D3.js`.\n *\n * The module can be initialized by importing it using the `forRoot` static method or otherwise providing the\n * {@link LOCALES_CONFIG} injection token\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        MessagePipe\n    ],\n    exports: [\n        MessagePipe\n    ],\n    providers: [\n        {provide: APP_INITIALIZER, useFactory: IntlInitializer, deps: [IntlService], multi: true},\n        ...INTL_MODULE_PROVIDERS\n    ]\n})\nexport class IntlModule {\n    static forRoot(localeConfig: Type<LocalesConfig>): ModuleWithProviders<IntlModule> {\n        return {\n            ngModule: IntlModule,\n            providers: [\n                {provide: LOCALES_CONFIG, useClass: localeConfig},\n            ]\n        };\n    }\n}\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {true} other {false}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Server error\",\n        \"loginCancelled\": \"login cancelled\",\n        \"processedCredentialsError\": \"unable to get processed credentials\",\n        \"autoLoginError\": \"login failed\",\n        \"principalSwitched\": \"the logged in user has changed\",\n        \"userOverrideFailure\": \"unable to override user\",\n        \"responseLoadFailure\": \"failed to load response\",\n        \"unknownError\": \"unknown error\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabic\",\n        \"da\": \"Danish\",\n        \"de\": \"German\",\n        \"el\": \"Greek\",\n        \"en\": \"English\",\n        \"es\": \"Spanish\",\n        \"fi\": \"Finnish\",\n        \"fr\": \"French\",\n        \"it\": \"Italian\",\n        \"ja\": \"Japanese\",\n        \"ko\": \"Korean\",\n        \"nl\": \"Dutch\",\n        \"no\": \"Norwegian\",\n        \"pl\": \"Polish\",\n        \"pt\": \"Portuguese\",\n        \"ro\": \"Romanian\",\n        \"ru\": \"Russian\",\n        \"sv\": \"Swedish\",\n        \"th\": \"Thai\",\n        \"zh\": \"Traditional Chinese\",\n        \"zs\": \"Simplified Chinese\",\n        \"zz\": \"Unknown\"\n    }\n};\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date} à {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {vrai} other {faux}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \" : \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} o\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} Ko\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} Mo\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} Go\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} To\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} Po\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Erreur de serveur\",\n        \"loginCancelled\": \"Connexion annulée\",\n        \"processedCredentialsError\": \"Impossible d'obtenir les informations d'identification\",\n        \"autoLoginError\": \"Echec de la connexion\",\n        \"principalSwitched\": \"L'utilisateur connecté a été modifié\",\n        \"userOverrideFailure\": \"Echec de surchargement de l'utilisateur\",\n        \"responseLoadFailure\": \"Echec de chargement de la réponse\",\n        \"unknownError\": \"Erreur inconnue\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabe\",\n        \"da\": \"Danois\",\n        \"de\": \"Allemand\",\n        \"el\": \"Grec\",\n        \"en\": \"Anglais\",\n        \"es\": \"Espagnol\",\n        \"fi\": \"Finlandais\",\n        \"fr\": \"Français\",\n        \"it\": \"Italien\",\n        \"ja\": \"Japonais\",\n        \"ko\": \"Coréen\",\n        \"nl\": \"Néerlandais\",\n        \"no\": \"Norvégien\",\n        \"pl\": \"Polonais\",\n        \"pt\": \"Portugais\",\n        \"ro\": \"Roumain\",\n        \"ru\": \"Russe\",\n        \"sv\": \"Suédois\",\n        \"th\": \"Thaïlandais\",\n        \"zh\": \"Chinois traditionnel\",\n        \"zs\": \"Chinois simplifié\",\n        \"zz\": \"Inconnu\"\n    },\n};\n","export default {\n    \"system\": {\n        \"date\": \"{time, selectordinal, =0 {{date, date}} other {{date, date}, {date, time, medium}}}\",\n        \"number\": \"{value, number}\",\n        \"boolean\": \"{value, select, true {wahr} other {falsch}}\",\n        \"percent\": \"{value, number, percent}\",\n        \"fieldSeparator\": \": \",\n        \"memorySize\": {\n            \"bytes\": \"{value, number, sqZeroDecimalPlaces} B\",\n            \"kb\": \"{value, number, sqZeroDecimalPlaces} KB\",\n            \"mb\": \"{value, number, sqOneDecimalPlace} MB\",\n            \"gb\": \"{value, number, sqTwoDecimalPlaces} GB\",\n            \"tb\": \"{value, number, sqThreeDecimalPlaces} TB\",\n            \"pb\": \"{value, number, sqFourDecimalPlaces} PB\"\n        }\n    },\n\n    \"error\": {\n        \"serverError\": \"Serverfehler\",\n        \"loginCancelled\": \"Anmeldung abgebrochen (login cancelled)\",\n        \"processedCredentialsError\": \"Verarbeitete Anmeldeinformationen konnten nicht ermittelt werden (unable to get processed credentials)\",\n        \"autoLoginError\": \"Anmeldung fehlgeschlagen (login failed)\",\n        \"principalSwitched\": \"Der angemeldete Benutzer hat sich geändert (the logged in user has changed)\",\n        \"userOverrideFailure\": \"Benutzerwechsel fehlgeschlagen (unable to override user)\",\n        \"responseLoadFailure\": \"Antwort konnte nicht geladen werden (failed to load response)\",\n        \"unknownError\": \"Unbekannter Fehler\"\n    },\n\n    \"language\": {\n        \"ar\": \"Arabisch\",\n        \"da\": \"Dänisch\",\n        \"de\": \"Deutsch\",\n        \"el\": \"Griechisch\",\n        \"en\": \"Englisch\",\n        \"es\": \"Spanisch\",\n        \"fi\": \"Finnisch\",\n        \"fr\": \"Französisch\",\n        \"it\": \"Italienisch\",\n        \"ja\": \"Japanisch\",\n        \"ko\": \"Koreanisch\",\n        \"nl\": \"Niederländisch\",\n        \"no\": \"Norwegisch\",\n        \"pl\": \"Polnisch\",\n        \"pt\": \"Portugiesisch\",\n        \"ro\": \"Rumänisch\",\n        \"ru\": \"Russisch\",\n        \"sv\": \"Schwedisch\",\n        \"th\": \"Thailändisch\",\n        \"zh\": \"Traditionelles Chinesisch\",\n        \"zs\": \"Vereinfachtes Chinesisch\",\n        \"zz\": \"Unbekannt\"\n    },\n};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["d3.formatDefaultLocale","d3.timeFormatDefaultLocale"],"mappings":"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"}