{"version":3,"file":"sinequa-core-load-component.js","sources":["../../../projects/core/load-component/load-component.service.ts","../../../projects/core/load-component/load-component.directive.ts","../../../projects/core/load-component/module.providers.ts","../../../projects/core/load-component/load-component.module.ts","../../../projects/core/load-component/sinequa-core-load-component.ts"],"sourcesContent":["import {Injectable, ViewContainerRef, ComponentRef, Type, ComponentFactory, ComponentFactoryResolver, ApplicationRef,\n    Injector, SimpleChanges, SimpleChange, EventEmitter} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Describes the options that can be passed to [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadComponentOptions {\n    /**\n     * The type of the component to load\n     */\n    component: Type<any>;\n    /**\n     * The initial values for the component's `@Input` decorated properties\n     */\n    inputs?: MapOf<any>;\n    /**\n     * The handlers for the component's `@Output` decorated events\n     */\n    outputs?: MapOf<any>;\n    /**\n     * The index at which to insert the loaded component's host view into the container.\n     * If not specified, appends the new view as the last entry.\n     * See [ViewContainerRef.createComponent]{@link https://angular.io/api/core/ViewContainerRef#createComponent}\n     */\n    index?: number;\n}\n\n/**\n * Describes the object returned by [LoadComponentService.loadComponent]{@link LoadComponentService#loadComponent}\n */\nexport interface LoadedComponent {\n    /**\n     * The loaded component instance\n     */\n    componentRef: ComponentRef<any>;\n    /**\n     * The subscriptions made to the component's output events\n     */\n    subscriptions?: Subscription;\n}\n\n/**\n * This service provides methods to dynamically load and unload an angular component from its type.\n * The component's initial inputs and outputs are respected and the first call to the component's\n * `ngOnChanges` method is made.\n * Changes to the inputs and outputs can be made by calling {@link #bindComponent} which will call\n * the component's `ngOnChanges` method again\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoadComponentService {\n\n    // A cache of resolved component factories\n    private factories = new Map<Type<any>, ComponentFactory<any>>();\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private applicationRef: ApplicationRef) {\n    }\n\n    private _bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent, initialLoad: boolean) {\n        if (!initialLoad) {\n            this.unbindComponent(loadedComponent);\n        }\n        const ngOnChanges: (changes: SimpleChanges) => void = loadedComponent.componentRef.instance.ngOnChanges;\n        let simpleChanges: SimpleChanges | undefined;\n        const makeSimpleChanges = Utils.isFunction(ngOnChanges) && !!options.inputs;\n        if (!!options.inputs) {\n            // Assign inputs and generate SimpleChanges if required\n            Object.keys(options.inputs).forEach(name => {\n                if (makeSimpleChanges) {\n                    const previousValue = initialLoad ? undefined : loadedComponent.componentRef.instance[name];\n                    const currentValue = options.inputs![name];\n                    if (initialLoad || currentValue !== previousValue) {\n                        if (!simpleChanges) {\n                            simpleChanges = {};\n                        }\n                        simpleChanges[name] = new SimpleChange(previousValue, currentValue, initialLoad);\n                    }\n                }\n                loadedComponent.componentRef.instance[name] = options.inputs![name];\n            });\n        }\n        if (!!options.outputs) {\n            Object.keys(options.outputs).forEach(name => {\n                const eventEmitter: EventEmitter<any> = loadedComponent.componentRef.instance[name];\n                if (eventEmitter) {\n                    const subscription = eventEmitter.subscribe(options.outputs![name]);\n                    if (!loadedComponent.subscriptions) {\n                        loadedComponent.subscriptions = subscription;\n                    }\n                    else {\n                        loadedComponent.subscriptions.add(subscription);\n                    }\n                }\n            });\n        }\n        if (simpleChanges) {\n            ngOnChanges.call(loadedComponent.componentRef.instance, simpleChanges);\n        }\n    }\n\n    /**\n     * Bind a component's input and output properties according to the passed options. Generate a\n     * call to the component's `ngOnChanges` method if the inputs have changed since the last call.\n     * If the component has been previously bound it is first unbound by calling {@link #unbindComponent}\n     * which will unsubscribe the component's outputs\n     *\n     * @param options Specify the inputs and outputs for the component\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    public bindComponent(options: LoadComponentOptions, loadedComponent: LoadedComponent) {\n        return this._bindComponent(options, loadedComponent, false);\n    }\n\n    /**\n     * Unbind a previously bound dynamically loaded component. Subscriptions to the component's\n     * outputs are unsubscribed\n     *\n     * @param loadedComponent A component loaded by {@link #loadComponent}\n     */\n    unbindComponent(loadedComponent: LoadedComponent) {\n        if (!!loadedComponent.subscriptions) {\n            loadedComponent.subscriptions.unsubscribe();\n            loadedComponent.subscriptions = undefined;\n        }\n    }\n\n    /**\n     * Dynamically load a component from its type. The component's inputs and outputs will be initialized\n     * by calling {@link #bindComponent}.\n     *\n     * @param options The options containing the component to load and its inputs and outputs\n     * @param viewContainerRef Specifies where the loaded component should be attached. If not specified then the\n     * loaded component is inserted before the application component\n     * @param injector Overrides the injector to use as the parent for the component. By default this will be\n     * the injector held on the `viewContainerRef`\n     */\n    loadComponent<T>(options: LoadComponentOptions, viewContainerRef?: ViewContainerRef, injector?: Injector): LoadedComponent {\n        let componentRef: ComponentRef<T>;\n        let factory = this.factories.get(options.component);\n        if (!factory) {\n            factory = this.componentFactoryResolver.resolveComponentFactory(options.component);\n        }\n        if (!viewContainerRef) {\n            const appElement: Element = this.applicationRef.components[0].location.nativeElement;\n            const injector1 = this.applicationRef.components[0].injector;\n            componentRef = factory.create(injector1, [[appElement]]);\n            this.applicationRef.attachView(componentRef.hostView);\n            if (appElement.parentElement) {\n                appElement.parentElement.insertBefore(componentRef.location.nativeElement, appElement.nextSibling);\n            }\n        }\n        else {\n            if (!injector) {\n                injector = viewContainerRef.injector;\n            }\n            const index = !Utils.isEmpty(options.index) ? options.index : undefined;\n            componentRef = viewContainerRef.createComponent(factory, index, injector, []);\n        }\n        const loadedComponent: LoadedComponent = {\n            componentRef\n        };\n        this._bindComponent(options, loadedComponent, true);\n        loadedComponent.componentRef.changeDetectorRef.detectChanges();\n        return loadedComponent;\n    }\n\n    /**\n     * Unload a dynamically loaded component. It is unbound prior to being destroyed\n     *\n     * @param component A loaded component\n     */\n    unloadComponent(component: LoadedComponent) {\n        if (!!component) {\n            this.unbindComponent(component);\n            component.componentRef.destroy();\n        }\n    }\n}\n","import {Directive, Input, Output, OnChanges, OnDestroy, ViewContainerRef, ComponentRef, EventEmitter, Type} from \"@angular/core\";\nimport {LoadComponentService, LoadComponentOptions, LoadedComponent} from \"./load-component.service\";\n\n/**\n * A directive that uses the {@link LoadComponentService} to dynamically load a component.\n * The loaded component's lifecycle is automatically managed with changes to the directive's\n * `options` reflected to the component by rebinding it using {@link LoadComponentService}\n */\n@Directive({\n    selector: \"[sqLoadComponent]\"\n})\nexport class LoadComponentDirective implements OnChanges, OnDestroy {\n    /**\n     * Options for the loading of a component\n     */\n    @Input(\"sqLoadComponent\") options: LoadComponentOptions;\n    /**\n     * Used to emit events when the component is created and destroyed\n     */\n    @Output(\"sqLoadComponent\") eventEmitter = new EventEmitter<{componentRef: ComponentRef<Type<any>> | undefined}>();\n    private loadedComponent: LoadedComponent;\n    private currentComponent: Type<any>;\n\n    constructor(\n        private loadComponentService: LoadComponentService,\n        private viewContainerRef: ViewContainerRef) {\n    }\n\n    /**\n     * Handles any changes to the input `options`. On the first call the component is loaded\n     * and bound. Subsequent changes to the `options` are handled by rebinding the component unless\n     * the component type to load changes in which case the current component is unloaded before\n     * loading the new component.\n     *\n     * The component is loaded using the `ViewContainerRef` associated with the directive\n     */\n    ngOnChanges() {\n        if (this.loadedComponent) {\n            if (this.currentComponent === this.options.component) {\n                this.loadComponentService.bindComponent(this.options, this.loadedComponent);\n                return;\n            }\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.loadedComponent.componentRef.destroy();\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n        this.loadedComponent = this.loadComponentService.loadComponent(this.options, this.viewContainerRef);\n        this.currentComponent = this.options.component;\n        this.eventEmitter.emit({componentRef: !!this.loadedComponent ? this.loadedComponent.componentRef : undefined});\n    }\n\n    /**\n     * Unbinds the loaded component. It is not destroyed here as angular will automatically destroy\n     * the component at the same time as this directive is destroyed as they share the same `ViewContainerRef`\n     */\n    ngOnDestroy() {\n        if (this.loadedComponent) {\n            this.loadComponentService.unbindComponent(this.loadedComponent);\n            this.eventEmitter.emit({componentRef: undefined});\n        }\n    }\n}\n","const LOAD_COMPONENT_MODULE_PROVIDERS = [];\n\nexport {LOAD_COMPONENT_MODULE_PROVIDERS};\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {BaseModule} from \"@sinequa/core/base\";\n\nimport {LoadComponentDirective} from \"./load-component.directive\";\nimport {LOAD_COMPONENT_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides functionality for the dynamic loading of components based on the\n * techniques described in the [angular documentation]{@link https://angular.io/guide/dynamic-component-loader}\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule\n    ],\n    declarations: [\n        LoadComponentDirective\n    ],\n    exports: [\n        LoadComponentDirective\n    ],\n    providers: [\n        ...LOAD_COMPONENT_MODULE_PROVIDERS\n    ]\n})\nexport class LoadComponentModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;AA2CA;;;;;;;MAUa,oBAAoB;IAK7B,YACY,wBAAkD,EAClD,cAA8B;QAD9B,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,mBAAc,GAAd,cAAc,CAAgB;;QAJlC,cAAS,GAAG,IAAI,GAAG,EAAoC,CAAC;KAK/D;IAEO,cAAc,CAAC,OAA6B,EAAE,eAAgC,EAAE,WAAoB;QACxG,IAAI,CAAC,WAAW,EAAE;YACd,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;SACzC;QACD,MAAM,WAAW,GAAqC,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC;QACxG,IAAI,aAAwC,CAAC;QAC7C,MAAM,iBAAiB,GAAG,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5E,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE;;YAElB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI;gBACpC,IAAI,iBAAiB,EAAE;oBACnB,MAAM,aAAa,GAAG,WAAW,GAAG,SAAS,GAAG,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAC5F,MAAM,YAAY,GAAG,OAAO,CAAC,MAAO,CAAC,IAAI,CAAC,CAAC;oBAC3C,IAAI,WAAW,IAAI,YAAY,KAAK,aAAa,EAAE;wBAC/C,IAAI,CAAC,aAAa,EAAE;4BAChB,aAAa,GAAG,EAAE,CAAC;yBACtB;wBACD,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,aAAa,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;qBACpF;iBACJ;gBACD,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAO,CAAC,IAAI,CAAC,CAAC;aACvE,CAAC,CAAC;SACN;QACD,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;YACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI;gBACrC,MAAM,YAAY,GAAsB,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpF,IAAI,YAAY,EAAE;oBACd,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,OAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpE,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;wBAChC,eAAe,CAAC,aAAa,GAAG,YAAY,CAAC;qBAChD;yBACI;wBACD,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;qBACnD;iBACJ;aACJ,CAAC,CAAC;SACN;QACD,IAAI,aAAa,EAAE;YACf,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;SAC1E;KACJ;;;;;;;;;;IAWM,aAAa,CAAC,OAA6B,EAAE,eAAgC;QAChF,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;KAC/D;;;;;;;IAQD,eAAe,CAAC,eAAgC;QAC5C,IAAI,CAAC,CAAC,eAAe,CAAC,aAAa,EAAE;YACjC,eAAe,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;YAC5C,eAAe,CAAC,aAAa,GAAG,SAAS,CAAC;SAC7C;KACJ;;;;;;;;;;;IAYD,aAAa,CAAI,OAA6B,EAAE,gBAAmC,EAAE,QAAmB;QACpG,IAAI,YAA6B,CAAC;QAClC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACtF;QACD,IAAI,CAAC,gBAAgB,EAAE;YACnB,MAAM,UAAU,GAAY,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;YACrF,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC7D,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,UAAU,CAAC,aAAa,EAAE;gBAC1B,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;aACtG;SACJ;aACI;YACD,IAAI,CAAC,QAAQ,EAAE;gBACX,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;aACxC;YACD,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC;YACxE,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;SACjF;QACD,MAAM,eAAe,GAAoB;YACrC,YAAY;SACf,CAAC;QACF,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;QACpD,eAAe,CAAC,YAAY,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAC/D,OAAO,eAAe,CAAC;KAC1B;;;;;;IAOD,eAAe,CAAC,SAA0B;QACtC,IAAI,CAAC,CAAC,SAAS,EAAE;YACb,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAChC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;SACpC;KACJ;;wFAhIQ,oBAAoB;yDAApB,oBAAoB,WAApB,oBAAoB,mBAFjB,MAAM;+CAET,oBAAoB;cAHhC,UAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACjDD;;;;;MAQa,sBAAsB;IAY/B,YACY,oBAA0C,EAC1C,gBAAkC;QADlC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,qBAAgB,GAAhB,gBAAgB,CAAkB;;;;QANnB,iBAAY,GAAG,IAAI,YAAY,EAAuD,CAAC;KAOjH;;;;;;;;;IAUD,WAAW;QACP,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBAClD,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC5E,OAAO;aACV;YACD,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAChE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;SACrD;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACpG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,GAAG,SAAS,EAAC,CAAC,CAAC;KAClH;;;;;IAMD,WAAW;QACP,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;SACrD;KACJ;;4FAjDQ,sBAAsB;wDAAtB,sBAAsB;+CAAtB,sBAAsB;cAHlC,SAAS;eAAC;gBACP,QAAQ,EAAE,mBAAmB;aAChC;gGAK6B,OAAO;kBAAhC,KAAK;mBAAC,iBAAiB;YAIG,YAAY;kBAAtC,MAAM;mBAAC,iBAAiB;;;ACnB7B,MAAM,+BAA+B,GAAG,EAAE;;ACO1C;;;;AAIA;MAgBa,mBAAmB;;oDAAnB,mBAAmB;kHAAnB,mBAAmB,mBAJjB;QACP,GAAG,+BAA+B;KACrC,YAZQ;YACL,YAAY;YACZ,UAAU;SACb;qFAWQ,mBAAmB,mBATxB,sBAAsB,aAJtB,YAAY;QACZ,UAAU,aAMV,sBAAsB;+CAMjB,mBAAmB;cAf/B,QAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,UAAU;iBACb;gBACD,YAAY,EAAE;oBACV,sBAAsB;iBACzB;gBACD,OAAO,EAAE;oBACL,sBAAsB;iBACzB;gBACD,SAAS,EAAE;oBACP,GAAG,+BAA+B;iBACrC;aACJ;;;AC1BD;;;;;;"}