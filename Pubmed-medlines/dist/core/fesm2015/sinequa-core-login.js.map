{"version":3,"file":"sinequa-core-login.js","sources":["../../../projects/core/login/token.service.ts","../../../projects/core/login/jwt.service.ts","../../../projects/core/login/authentication.service.ts","../../../projects/core/login/login.service.ts","../../../projects/core/login/component-with-login.component.ts","../../../projects/core/login/authentication-oauth.service.ts","../../../projects/core/login/authentication-popup.service.ts","../../../projects/core/login/login.component.ts","../../../projects/core/login/module.providers.ts","../../../projects/core/login/login.module.ts","../../../projects/core/login/login.interceptor.ts","../../projects/core/login/messages/en.ts","../../projects/core/login/messages/fr.ts","../../projects/core/login/messages/de.ts","../../projects/core/login/messages/index.ts","../../../projects/core/login/sinequa-core-login.ts"],"sourcesContent":["import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n/**\n * A service to manage JWT and CSRF tokens. The methods of this service\n * can be called before the authentication process has completed\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class TokenService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Retrieve the CSRF token corresponding to the current JWT cookie\n     * which should accompany the request. This method is called by\n     * [AuthenticationService.autoAuthenticate]{@link AuthenticationService#autoAuthenticate}\n     *\n     * @param notify `true` if any errors should be notified using the {@NotificationService}\n     */\n    getCsrfToken(notify = false): Observable<string> {\n        return this.httpClient.get<{csrfToken: string}>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"getCsrfToken\",\n                suppressErrors: !notify,\n                noUserOverride: true,\n                noAutoAuthentication: true,\n                noNotify: !notify\n            })\n        }).pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n\n    /**\n     * Delete the current JWT cookie.\n     * This method is called by [AuthenticationService.logout]{@link AuthenticationService#logout}\n     */\n    deleteWebTokenCookie(): Observable<void> {\n        return this.httpClient.get<void>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"deleteWebTokenCookie\",\n                noUserOverride: true,\n                noAutoAuthentication: true\n            })\n        });\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Credentials} from \"./authentication.service\";\n\n/**\n * A service to retrieve a JWT (JSON Web Token) from the Sinequa server.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class JWTService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get a JWT from the Sinequa server using the passed credentials. The JWT is received in a cookie\n     * and the associated CSRF token in the response payload.\n     *\n     * @param credentials The credentials to be used for the JWT. These are sent in clear text\n     */\n    getToken(credentials: Credentials): Observable<string> {\n        const observable = this.httpClient.post<{csrfToken: string}>(this.makeUrl(\"webToken\"),\n            {\n                action: \"get\",\n                user: credentials.userName,\n                password: credentials.password,\n                tokenInCookie: true,\n            },\n            {\n                params: this.makeParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            });\n        return observable.pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpHeaders, HttpParams, HttpResponse, HttpErrorResponse} from \"@angular/common/http\";\nimport {Observable, timer, of, throwError} from \"rxjs\";\nimport {share, flatMap, map, catchError} from \"rxjs/operators\";\nimport {AuthService} from \"ng2-ui-auth\";\nimport {HttpService, START_CONFIG, StartConfig, AuditWebService} from \"@sinequa/core/web-services\";\nimport {Utils, IRef, MapOf} from \"@sinequa/core/base\";\nimport {SqHttpClient} from \"@sinequa/core/web-services\";\nimport {TokenService} from \"./token.service\";\nimport {JWTService} from \"./jwt.service\";\n\ninterface Authentication {\n    csrfToken: string;\n    headers?: MapOf<string>;    // set in http headers\n    params?: MapOf<string>;     // added to query string\n}\n\n/**\n * Describes the credentials that a user would enter manually to authenticate\n */\nexport interface Credentials {\n    userName?: string;\n    password?: string;\n}\n\nconst LEGACY_PROCESSED_CREDENTIALS_KIND = 0;\n\n/**\n * Describes the object created after successful authentication. The form of this object\n * is designed to maintain compatibility with previous SBA libraries\n */\nexport interface ProcessedCredentials {\n    /**\n     * An unused \"kind\" value - always set to 0\n     */\n    kind: number;\n    /**\n     * The user name of the authenticated user\n     */\n    userName?: string;\n    /**\n     * Additional data containing the associated CSRF token that is sent with\n     * authenticated web service requests and the provider for informational\n     * purposes only. The provider will be `Sinequa` for form-based authentication\n     * and the name of the auto-login provider in the Sinequa configuration for\n     * OAuth and SAML authentication\n     */\n    data: {\n        csrfToken: string, // the web token itself is stored in the sinequa-web-token cookie\n        provider: string\n    };\n}\n\n/**\n * Describes the object used by an administrator to authenticate as another user\n */\nexport interface UserOverride {\n    /**\n     * The user name of the user to authenticate as\n     */\n    userName: string;\n    /**\n     * The Sinequa domain name containing the user\n     */\n    domain: string;\n}\n\n/**\n * Describes a JWT object\n */\nexport interface JsonWebToken {\n    header: {\n        typ: string,\n        alg: string\n    };\n    payload: {\n        iss: string,\n        iat: string,\n        exp: string,\n        sub: string,\n        hash: string\n    };\n    signature: string;\n}\n\n/**\n * A service to authenticate a user with a Sinequa server. Authentication can be automatic (OAuth/SAML), if configured in the\n * Sinequa administration, or manual where the user name and password are entered in a modal dialog box and transmitted in\n * clear text. There is also support for the ng2-ui-auth library where the authentication process occurs in a browser popup window.\n * Successful authentication results in a JWT stored in cookie along with a CSRF token which is stored in storage so it can\n * be picked up in other browser tabs.\n *\n * The service also holds information on the status of the \"override user\" administrator function\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationService extends HttpService {\n    private authentication: Authentication | undefined;\n    private storage: Storage;\n    /**\n     * A flag indicating whether an attempt to \"override user\" has failed. This is normally\n     * only set by the {@link HttpInterceptor} and tested and reset in {@link LoginService}\n     */\n    userOverrideFailed: boolean;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private tokenService: TokenService,\n        private auditService: AuditWebService,\n        private jWTService: JWTService,\n        private authService: AuthService) {\n        super(startConfig);\n        this.init();\n    }\n\n    private _userOverride: UserOverride | undefined;\n    /**\n     * Get the currrent user override, if any\n     */\n    get userOverride(): UserOverride | undefined {\n        return this._userOverride;\n    }\n\n    /**\n     * Set/unset the user override. The {@link #userOverrideActive} flag\n     * is set accordingly\n     */\n    set userOverride(value: UserOverride | undefined) {\n        this._userOverride = value;\n        if (this._userOverride) {\n            this._userOverrideActive = !!this._userOverride.userName && !!this._userOverride.domain;\n        }\n        else {\n            this._userOverrideActive = false;\n        }\n    }\n\n    private _userOverrideActive: boolean;\n\n    /**\n     * A flag indicating whether the current user override is active\n     */\n    get userOverrideActive(): boolean {\n        return this._userOverrideActive;\n    }\n\n    private _processedCredentials: ProcessedCredentials | undefined;\n    private _processedCredentialsStr: string | undefined;\n\n    /**\n     * Get the current processed credentials\n     */\n    get processedCredentials(): ProcessedCredentials | undefined {\n        return this._processedCredentials;\n    }\n\n    /**\n     * Set the current processed credentials. A stringified version\n     * is stored in either local or session storage\n     */\n    set processedCredentials(value: ProcessedCredentials | undefined) {\n        this._processedCredentials = value;\n        if (value) {\n            const newProcessedCredentialsStr = Utils.toJson(this._processedCredentials);\n            if (this._processedCredentialsStr !== newProcessedCredentialsStr) {\n                this._processedCredentialsStr = newProcessedCredentialsStr;\n                this.storage.setItem(\"sinequa-credentials\", this._processedCredentialsStr);\n            }\n        }\n        else {\n            if (this._processedCredentialsStr) {\n                this._processedCredentialsStr = undefined;\n                this.storage.removeItem(\"sinequa-credentials\");\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if an OAuth or SAML auto provider is configured\n     */\n    get autoLoginActive(): boolean {\n        return !!this.startConfig.autoOAuthProvider || !!this.startConfig.autoSAMLProvider;\n    }\n\n    /**\n     * Deactivate the current user override\n     */\n    deactivateUserOverride() {\n        this._userOverrideActive = false;\n    }\n\n    private loadCredentials() {\n        const sinequaCredentials = this.storage.getItem(\"sinequa-credentials\");\n        this._processedCredentialsStr = sinequaCredentials ? sinequaCredentials : undefined;\n        this._processedCredentials = this._processedCredentialsStr ? Utils.fromJson(this._processedCredentialsStr) : null;\n    }\n\n    private saveCredentials(value: ProcessedCredentials) {\n        this.processedCredentials = value;\n    }\n\n    private init() {\n        if (this.startConfig.authenticationStorage === \"local\") {\n            this.storage = window.localStorage;\n        }\n        else {\n            this.storage = window.sessionStorage;\n        }\n        this.loadCredentials();\n        window.addEventListener('storage', (event: StorageEvent) => {\n            if (event.storageArea === this.storage) {\n                if (!event.key) { // clear\n                    this.processedCredentials = undefined;\n                }\n                else if (event.key === \"sinequa-credentials\") {\n                    if (event.newValue !== this._processedCredentialsStr) {\n                        this.loadCredentials();\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Return `true` if `processedCredentials` exists\n     */\n    get haveCredentials(): boolean {\n        return !!this.processedCredentials;\n    }\n\n    /**\n     * Add the current authentication information to the passed `HttpHeaders` and `HttpParams`.\n     * Currently, this adds the `sinequa-csrf-token` value to the HTTP headers. Called from\n     * {@link HttpInterceptor}\n     *\n     * @param config HttpHeaders and HttpParams to be updated\n     *\n     * @returns new configuration\n     */\n    addAuthentication(config: {headers: HttpHeaders, params: HttpParams}): {headers: HttpHeaders, params: HttpParams} {\n        this.doAuthentication();\n        if (this.authentication) {\n            if (this.authentication.headers) {\n                for (const header in this.authentication.headers) {\n                    if (this.authentication.headers.hasOwnProperty(header)) {\n                        config.headers = config.headers.set(header, this.authentication.headers[header]);\n                    }\n                }\n            }\n            if (this.authentication.params) {\n                for (const param in this.authentication.params) {\n                    if (this.authentication.params.hasOwnProperty(param)) {\n                        config.params = config.params.set(param, this.authentication.params[param]);\n                    }\n                }\n            }\n        }\n        return config;\n    }\n\n    /**\n     * Update the current authentication information with information in the passed `response`.\n     * This processes the `sinequa-jwt-refresh` header which will contain an updated CSRF token\n     * to correspond to the new JWT cookie. Called from {@link HttpInterceptor}\n     *\n     * @param response An `HttpResponse`\n     */\n    updateAuthentication(response: HttpResponse<any>) {\n        const csrfToken = response.headers.get(\"sinequa-jwt-refresh\");\n        if (csrfToken) {\n            if (this.processedCredentials) {\n                if (this.processedCredentials.data.csrfToken !== csrfToken) {\n                    this.processedCredentials.data.csrfToken = csrfToken;\n                    this.saveCredentials(this.processedCredentials);\n                }\n            }\n            else {\n                this.setCsrfToken(csrfToken);\n            }\n        }\n    }\n\n    private refreshAuthentication() {\n        if (this.processedCredentials) {\n            if (!this.authentication) {\n                this.authentication = {\n                    csrfToken: this.processedCredentials.data.csrfToken\n                };\n            }\n            else {\n                this.authentication.csrfToken = this.processedCredentials.data.csrfToken;\n            }\n        }\n        else {\n            this.authentication = undefined;\n        }\n    }\n\n    private doAuthentication() {\n        this.refreshAuthentication();\n        if (this.authentication && this.authentication.csrfToken) {\n            this.authentication.headers = {\n                \"sinequa-csrf-token\": this.authentication.csrfToken\n            };\n        }\n    }\n\n    private getAuthenticateHeader(regex: RegExp, authenticationHeaders: string[], header: IRef<string>): boolean {\n        if (authenticationHeaders) {\n            for (let i = 0, ic = authenticationHeaders.length; i < ic; i++) {\n                const authenticationHeader = authenticationHeaders[i];\n                const matches = regex.exec(authenticationHeader);\n                if (matches && matches.length > 0) {\n                    const prefix = matches[0];\n                    header.value = authenticationHeader.slice(prefix.length);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Authenticate with the Sinequa server using the passed credentials. The credentials are sent\n     * in clear text. Prior to the authentication the passed `response` is checked for a\n     * `WWW-Authenticate: Bearer` header.\n     *\n     * @param credentials The credentials to authenticate with\n     * @param response The error response the reception of which initiated the call to this method\n     */\n    authenticate(\n        credentials: Credentials,\n        response: HttpErrorResponse): Promise<ProcessedCredentials | undefined> {\n        const wwwAuthenticate = response.headers.get(\"WWW-Authenticate\");\n        if (!wwwAuthenticate) {\n            console.error(\"Missing WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        const authenticateHeaders = wwwAuthenticate.split(\", \");\n        const header: IRef<string> = {value: \"\"};\n        if (!this.getAuthenticateHeader(/^Bearer ?/, authenticateHeaders, header)) {\n            console.error(\"Unexpected WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        return this.jWTService.getToken(credentials).toPromise()\n            .then((value) => {\n                return {\n                    kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                    userName: credentials.userName,\n                    data: {\n                        csrfToken: value,\n                        provider: \"Sinequa\"\n                    }\n                };\n            });\n    }\n\n    /**\n     * Remove all current authentication data. The JWT cookie\n     * is removed\n     */\n    logout() {\n        this.auditService.notifyLogout().subscribe(\n            _ => {\n                this.tokenService.deleteWebTokenCookie().subscribe()\n                this.authentication = undefined;\n                this.processedCredentials = undefined;\n            }\n        );\n    }\n\n    /**\n     * Add the current user override information to the passed headers.\n     *\n     * @param config An object containing the `HttpHeaders` to update\n     */\n    addUserOverride(config: {headers: HttpHeaders}): HttpHeaders {\n        if (this.userOverride && this.userOverrideActive) {\n            config.headers = config.headers.set(\"sinequa-override-user\", this.userOverride.userName);\n            config.headers = config.headers.set(\"sinequa-override-domain\", this.userOverride.domain);\n        }\n\n        return config.headers;\n    }\n\n    /**\n     * Initiate authentication using the ng2-ui-auth library. The authentication process will be performed\n     * in a browser popup window\n     *\n     * @param provider The name of the provider to use. This is the name configured in the Sinequa administration\n     * console\n     */\n    authenticateWithProvider(provider: string): Observable<any> {\n        // AuthService.authenticate opens a popup. On some platforms (Firefox) this is asynchronous\n        // so we add a delay (timer(0)) so the caller can create a promise from the returned observable\n        // without yielding\n        const observable = timer(0).pipe(flatMap((value) => {\n            const observable1 = this.authService.authenticate(provider, true).pipe(share());\n            Utils.subscribe(observable1,\n                (response) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    if (response) {\n                        this.processedCredentials = {\n                            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                            data: {\n                                csrfToken: response.csrfToken,\n                                provider\n                            }\n                        };\n                    }\n                });\n            return observable1;\n        }));\n        return observable;\n    }\n\n    private setCsrfToken(csrfToken: string, provider = \"Sinequa\"): boolean {\n        if (!csrfToken) {\n            return false;\n        }\n        this.processedCredentials = {\n            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n            data: {\n                csrfToken,\n                provider\n            }\n        };\n        return true;\n    }\n\n    private initiateAutoAuthentication(): boolean {\n        if (!this.startConfig.usePopupForLogin && this.autoLoginActive) {\n            let observable: Observable<{redirectUrl: string}>;\n            if (this.startConfig.autoOAuthProvider) {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.oauth\"),\n                    {\n                        action: \"getcode\",\n                        provider: this.startConfig.autoOAuthProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            else {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.saml\"),\n                    {\n                        action: \"getresponse\",\n                        provider: this.startConfig.autoSAMLProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href,\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            observable.subscribe(\n                (response) => {\n                    window.location.replace(response.redirectUrl);\n                }\n            );\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Initiate the auto-authentication process if an automatic OAuth or SAML provider is configured.\n     * The {@LoginService} calls this method at startup. First, an attempt is made to retrieve a CSRF token.\n     * If that works, then the token is set and authentication is complete. Otherwise, the initial OAuth or SAML\n     * call is made to the Sinequa server. The `redirectUrl` in the response to this call is then used to redirect\n     * the browser to continue the normal OAuth/SAML autentication flow. A successful authentiction will culminate\n     * in the SBA being loaded a second time, this method being called again and the attempt to retrieve a CSRF\n     * token succeeding because a valid JWT cookie will now be present.\n     *\n     * A CSRF token is always requested to allow automatic login if a valid web token cookie has previously been\n     * written via, for example, a login to the admin console.\n     *\n     * @returns An Observable of a boolean value which if `true` indicates that auto-authentication has been initiated.\n     */\n    autoAuthenticate(): Observable<boolean> {\n        return this.tokenService.getCsrfToken().pipe(\n            map((csrfToken) => {\n                // Token can be empty as getCsrfToken suppresses application errors (no cookie or cookie invalid)\n                // (We do this to avoid having errors in the console for normal situations.)\n                if (csrfToken) {\n                    this.setCsrfToken(csrfToken);\n                    return false;\n                }\n                else {\n                    this.initiateAutoAuthentication();\n                    return true;\n                }\n            }),\n            catchError((error) => {\n                // We should rarely have an error now as getCsrfToken\n                // suppresses the application-level ones\n                if (this.initiateAutoAuthentication()) {\n                    return throwError(error);\n                }\n                // Swallow the error and continue with non-auto login process\n                return of(false);\n            }));\n    }\n}\n","import {Injectable, Inject, OnDestroy, Type, InjectionToken, Optional} from \"@angular/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {BehaviorSubject, Observable, forkJoin, of, throwError} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig, CCApp, PrincipalWebService, Principal,\n    UserSettingsWebService, UserSettings} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {AuthenticationService, ProcessedCredentials, Credentials, UserOverride} from \"./authentication.service\";\n\n/**\n * Describes the different session events that are emitted by the {@link LoginService}\n * * `session-start`: emitted after successful login\n * * `session-end`: emitted after logout and also when the {@link LoginService} is destroyed\n * * `session-changed`: emitted whenever the login state changes - login, logout and user override\n */\nexport interface SessionEvent {\n    type: \"session-start\" | \"session-end\" | \"session-changed\";\n}\n\n\n/**\n * An `InjectionToken` to set the component to use for the login modal dialog which is displayed\n * by the {@link LoginService} when performing a manual login. This makes the service independent\n * of any particular UI framework. If manual login is to be used a component must be configured by\n * providing this token.\n */\nexport const MODAL_LOGIN = new InjectionToken<Type<any>>('MODAL_LOGIN');\n\n/**\n * Describes the data retrieved during the login process.\n */\nexport interface LoginData {\n    /**\n     * The application configuration.\n     */\n    app: CCApp;\n    /**\n     * The principal corresponding to the logged in user.\n     */\n    principal: Principal;\n    /**\n     * The user settings for the logged in user.\n     */\n    userSettings: UserSettings;\n}\n\n/**\n * A high-level service to manage user login\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginService implements OnDestroy {\n    /**\n     * `true` if a user is currently logged in\n     */\n    complete: boolean;\n    // getCredentials handling (concurrent calls)\n    protected loginModalPromise: Promise<ModalResult> | undefined;\n    protected processCredentialsPromise: Promise<ProcessedCredentials | undefined> | undefined;\n    protected checkPrincipalPromise: Promise<Principal> | undefined;\n    protected automaticLoginPromise: Promise<any> | undefined;\n    protected _events = new BehaviorSubject<SessionEvent>({type: \"session-changed\"});\n\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        @Inject(MODAL_LOGIN) protected loginModal: Type<any>,\n        @Optional() protected router: Router,\n        protected appService: AppService,\n        protected principalService: PrincipalWebService,\n        protected userSettingsService: UserSettingsWebService,\n        protected modalService: ModalService,\n        protected notificationsService: NotificationsService,\n        protected authenticationService: AuthenticationService) {\n        // NB unload doesn't fire reliably so we listen for beforeunload\n        window.addEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    protected beforeUnloadEventListener = (e: Event) => {\n        this._events.next({type: \"session-end\"});\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n        window.removeEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    /**\n     * Get an `Observable` stream of {@link SessionEvent} events emitted by the service\n     */\n    get events(): Observable<SessionEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the currently logged in {@link Principal}, if any. Note that a principal can exist\n     * without the login being complete. For example, in the situation where access is denied to\n     * the selected app.\n     */\n    get principal(): Principal | undefined {\n        return this.principalService.principal;\n    }\n\n    private setComplete() {\n        const complete = this.complete;\n        this.complete = !!this.appService.app && !!this.principalService.principal && !!this.userSettingsService.userSettings;\n        if (this.complete) {\n            if (!this.authenticationService.userOverrideFailed) {\n                this.notificationsService.hideNotifications();\n            }\n            this.authenticationService.userOverrideFailed = false;\n        }\n        if (!!complete !== !!this.complete) {\n            this._events.next({type: \"session-changed\"});\n        }\n    }\n\n    /**\n     * Perform a logout of the currently logged in user. [AppService.app]{@link AppService#app},\n     * [PrincipalWebService.principal]{@link PrincipalWebService#prinicpal} and\n     * [UserSettingsWebService.userSettings]{@link UserSettingsWebService#userSettings} are reset.\n     * The `session-end` event is emitted\n     */\n    logout() {\n        this._events.next({type: \"session-end\"});\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.authenticationService.deactivateUserOverride();\n        this.authenticationService.logout();\n        this.setComplete();\n    }\n\n    /**\n     * Override the current user to the user specified in `userOverride`. Only an administrator\n     * is permitted to do this. They can revert to the normal login by calling this method with\n     * `undefined`\n     *\n     * @param userOverride The user override\n     */\n    overrideUser(userOverride: UserOverride | undefined) {\n        this.authenticationService.userOverride = userOverride;\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.setComplete();\n        Utils.delay().then(() => this.login());\n    }\n\n    private switchPrincipal(principal: Principal) {\n        if (!principal.isAdministrator) {\n            this.authenticationService.deactivateUserOverride();\n        }\n        this.principalService.principal = principal;\n        this.userSettingsService.userSettings = undefined;\n        Utils.delay().then(() => this.login());\n    }\n\n    /**\n     * Initiate the user login process. The method attempts to retrieve\n     * the [application configuration]{@link CCApp}, the\n     * [logged in user]{@link Principal} and the [user settings]{@link UserSettings}.\n     * If a user is not currently authenticated then authentication is performed using\n     * the {@link AuthenticationService} - OAuth/SAML if configured on the Sinequa Server\n     * or manual using a login modal dialog provided using the {@link MODAL_LOGIN} injection\n     * token.\n     */\n    login(): Observable<LoginData> {\n        const appName = this.appService.appName;\n        if (!appName) {\n            return throwError({error: \"App not specified\"});\n        }\n        let appNeeded: boolean;\n        if (this.router) {\n            const hash = window.location.hash.replace(\"#\", \"\");\n            const href = hash.split(\"?\")[0];\n            const params = new URLSearchParams(hash.split(\"?\")[1]);\n            const queryParams = {}\n            params.forEach((v, k) => queryParams[k] = v);\n\n            // Pick up any user override from the query string\n            const overrideUser = queryParams[\"overrideUser\"];\n            const overrideDomain = queryParams[\"overrideDomain\"];\n            if (overrideUser) {\n                this.authenticationService.userOverride = {\n                    userName: overrideUser,\n                    domain: overrideDomain\n                };\n                delete queryParams[\"overrideUser\"];\n                delete queryParams[\"overrideDomain\"];\n                const url = Utils.makeURL(href);\n                this.router.navigate([url.pathname], {queryParams});\n            }\n        }\n\n        interface ObservableLoginData {\n            app: Observable<CCApp> | undefined;\n            principal: Observable<Principal> | undefined;\n            userSettings: Observable<UserSettings> | undefined;\n        }\n\n        const makeObservables = (): ObservableLoginData => {\n            const observables: ObservableLoginData = {\n                app: undefined,\n                principal: undefined,\n                userSettings: undefined\n            };\n            if (!this.appService.app || (appName && this.appService.app.name !== appName)) {\n                appNeeded = true;\n                observables.app = this.appService.init();\n            }\n            else {\n                observables.app = of(this.appService.app);\n            }\n            let loadUserSettings = false;\n            if (!this.principalService.principal) {\n                loadUserSettings = true;\n                observables.principal = this.principalService.load();\n            }\n            else {\n                observables.principal = of(this.principalService.principal);\n            }\n            if (!this.userSettingsService.userSettings || loadUserSettings) {\n                observables.userSettings = this.userSettingsService.load();\n            }\n            else {\n                observables.userSettings = of(this.userSettingsService.userSettings);\n            }\n            return observables;\n        };\n\n        const observable = this.authenticationService.autoAuthenticate()\n            .pipe(flatMap((success) => {\n                const observables = makeObservables();\n                return forkJoin<ObservableLoginData, keyof ObservableLoginData>(observables);\n            }));\n        Utils.subscribe(observable,\n            (result) => {\n                console.log(\"loginService.login ok: \", result);\n                this.setComplete();\n                if (appNeeded) {\n                    this._events.next({type: \"session-start\"});\n                }\n            },\n            (error) => {\n                console.log(\"loginService.login failed: \", error);\n                // proceed to logout to clean process\n                this.logout();\n                return throwError(error);\n            });\n        return observable;\n    }\n\n    private getAutomaticProvider(): string | undefined {\n        if (this.startConfig.providers) {\n            return Object.keys(this.startConfig.providers).find((value) => {\n                const provider = this.startConfig.providers && this.startConfig.providers[value];\n                return !!provider && (provider as any).automatic;\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Called by the {@link HttpInterceptor} on reception of an `HTTP 401` response.\n     * This will either initiate an auto login process (OAuth/SAML) if configured on\n     * the Sinequa server or display the login modal dialog to request user credentials\n     *\n     * @param response An `HTTP 401` response\n     * @param acceptCurrent If `true` and the `AuthenticationService` currently has\n     * processed credentials then use them instead of starting a new login\n     * @returns A promise that is resolved when credentials have been obtained. Note that\n     * when auto-authentication is configured the promise will be rejected and the browser\n     * redirected to the OAuth/SAML redirect url\n     */\n    getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        if (acceptCurrent && this.authenticationService.processedCredentials) {\n            return Promise.resolve(); // initiate retry\n        }\n        if (!this.startConfig.usePopupForLogin && this.authenticationService.autoLoginActive) {\n            return this.authenticationService.autoAuthenticate().toPromise()\n                .then(result => {\n                    if (result/*auto-authentication initiated*/) {\n                        return Promise.reject(\"performing auto login\");\n                    }\n                    else {\n                        return undefined;\n                    }\n                });\n        }\n        let firstCaller = false;\n        const automaticProvider = this.getAutomaticProvider();\n        if (automaticProvider) {\n            if (!this.automaticLoginPromise) {\n                this.automaticLoginPromise = this.authenticationService.authenticateWithProvider(automaticProvider).toPromise();\n                firstCaller = true;\n            }\n            return this.automaticLoginPromise\n                .then((result) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    this.automaticLoginPromise = undefined;\n                    return result ? Promise.resolve() : Promise.reject(\"popup failed?\");\n                })\n                .catch((reason) => {\n                    this.automaticLoginPromise = undefined;\n                    const error = new SqError(SqErrorCode.autoLoginError);\n                    if (firstCaller) {\n                        this.notificationsService.error(error.message);\n                    }\n                    throw error;\n                });\n        }\n        const credentials: Credentials = {};\n        if (this.authenticationService.processedCredentials) {\n            credentials.userName = this.authenticationService.processedCredentials.userName;\n        }\n        if (!this.loginModalPromise) {\n            this.loginModalPromise = this.modalService.open(this.loginModal, {model: credentials});\n            firstCaller = true;\n        }\n        return this.loginModalPromise\n            .then((result) => {\n                this.loginModalPromise = undefined;\n                // result === ModalResult.Yes is a special return from Login when using AuthenticationService.authenticateWithProvider\n                if (result === ModalResult.OK || result === ModalResult.Yes) {\n                    if (!this.processCredentialsPromise) {\n                        this.processCredentialsPromise = result === ModalResult.Yes ?\n                            Promise.resolve<ProcessedCredentials | undefined>(undefined) :\n                            this.authenticationService.authenticate(credentials, response);\n                    }\n                    return this.processCredentialsPromise\n                        .then((value) => {\n                            this.processCredentialsPromise = undefined;\n                            if (result !== ModalResult.Yes) {\n                                this.authenticationService.processedCredentials = value;\n                            }\n                            if (!this.checkPrincipalPromise) {\n                                this.checkPrincipalPromise = this.principalService.get(false).toPromise();\n                            }\n                            return this.checkPrincipalPromise\n                                .then((principal) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    if (!this.principalService.principal || this.principalService.principal.id === principal.id) {\n                                        // no current principal OR prinicpal unchanged - initiate retry\n                                        return Promise.resolve();\n                                    }\n                                    const error = new SqError(SqErrorCode.principalSwitched);\n                                    if (firstCaller) {\n                                        this.switchPrincipal(principal);\n                                        this.notificationsService.info(error.message);\n                                    }\n                                    throw error;\n                                })\n                                .catch((reason) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    throw reason;\n                                });\n                        })\n                        .catch((reason) => {\n                            this.processCredentialsPromise = undefined;\n                            if (SqError.is(reason, SqErrorCode.principalSwitched)) {\n                                throw reason;\n                            }\n                            throw new SqError(SqErrorCode.processedCredentialsError);\n                        });\n                }\n                else {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                    const error = new SqError(SqErrorCode.loginCancelled);\n                    if (firstCaller) {\n                        this.notificationsService.info(error.message);\n                    }\n                    throw error;\n                }\n            })\n            .catch((reason) => {\n                if (!SqError.is(reason, SqErrorCode.principalSwitched)) {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                }\n                this.loginModalPromise = undefined;\n                throw reason;\n            });\n    }\n}\n","import {Component, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {LoginService} from \"./login.service\";\n\n/**\n * A utility base class to assist main components in the handling of the login state of the\n * the application. It initiates the login process and sets `loginComplete` accordingly\n * whenever the login state changes\n */\n@Component({\n    template: ''\n})\nexport class ComponentWithLogin implements OnInit, OnDestroy, AfterViewInit {\n    protected loginSubscription: Subscription;\n    /**\n     * `true` if the application is currently logged in successfully\n     */\n    loginComplete: boolean;\n\n    constructor(\n        protected loginService: LoginService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    /**\n     * A method called whenever the `session-changed` event is received. This can be\n     * overridden by the subclassing component.\n     */\n    onLoginComplete() {\n    }\n\n    /**\n     * Subscribes to the [LoginService.events]{@link LoginService#events} and sets\n     * the `loginComplete` member whenever the `session-changed` event is received\n     */\n    ngOnInit() {\n        this.loginComplete = this.loginService.complete;\n        this.loginSubscription = this.loginService.events.subscribe(event => {\n            if (event.type === \"session-changed\") {\n                this.loginComplete = this.loginService.complete;\n                this.onLoginComplete();\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.loginSubscription.unsubscribe();\n    }\n\n    /**\n     * Initiates the login process by calling [LoginService.login]{@link LoginService#login}\n     */\n    ngAfterViewInit() {\n        this.loginService.login();\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {OauthService, SharedService, PopupService, ConfigService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's state handling to retrieve a state from the Sinequa server\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationOauthService extends OauthService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient,\n        protected sharedService: SharedService,\n        protected popupService: PopupService,\n        protected configService: ConfigService) {\n        super(httpClient, sharedService, configService, popupService);\n    }\n\n    authenticate<T extends object | string>(name: string, userData: any): Observable<T> {\n        const options = this.configService.options.providers[name];\n        if (options.sqInitState) {\n            return this.httpClient.get<{state: string}>(Utils.addUrl(this.startConfig.apiPath!, \"oauth\"), {\n                params: Utils.makeHttpParams({\n                    action: \"initstate\",\n                    provider: options.name,\n                    tokenInCookie: true,\n                    loginInPopup: true,\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            }).pipe<T>(flatMap<{state: string}, Observable<T>>((ret) => {\n                options.state = ret.state;\n                return super.authenticate(name, userData);\n            }));\n        }\n        return super.authenticate(name, userData);\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {PopupService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's popup handling as it doesn't work with SAML + IE11 because\n * of a double redirection.\n * The initial request is to Sinequa which redirects to the authentication provider.\n * On successful authentication, the authentication provider redirects back\n * to Sinequa to perform the login.\n * In IE the initial redirection causes the popup window to be reported as \"closed\"\n * which breaks the process.\n * So, override ng2-ui-auth's PopupService and do the inital request to get the\n * redirect url outside of the popup\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationPopupService extends PopupService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient) {\n        super();\n    }\n\n    open(url: string, options: any/*IOauth2Options | IOauth1Options*/, cordova: boolean | undefined): Observable<Window> {\n        if (Utils.startsWith(url, this.startConfig.apiPath!)) {\n            return this.httpClient.get<{redirectUrl: string}>(url, {\n                params: Utils.makeHttpParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true,\n                    tokenInCookie: true,\n                    loginInPopup: true\n                })\n            }).pipe(flatMap((ret) => {\n                return super.open(ret.redirectUrl, options, cordova);\n            }));\n        }\n        return super.open(url, options, cordova);\n    }\n}\n","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalResult, ModalRef} from \"@sinequa/core/modal\";\nimport {Credentials} from \"./authentication.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A basic login component that request a user name and password. It is designed to work with\n * [LoginService.getCredentials]{@link LoginService#getCredentials} and can be set using the\n * {@link MODAL_LOGIN} injection token\n */\n@Component({\n    selector: \"sq-core-login\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\"\n            cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{'msg#modal.login.title' | sqMessage}}</h3>\n            <input placeholder=\"{{'msg#modal.login.userName' | sqMessage}}\" formControlName=\"userName\">\n            <ng-container *ngIf=\"showError(userNameControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"userName\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <div style=\"margin-bottom: 8px;\"></div>\n            <input type=\"password\" placeholder=\"{{'msg#modal.login.password' | sqMessage}}\" formControlName=\"password\">\n            <ng-container *ngIf=\"showError(passwordControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"password\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Login implements OnInit, OnDestroy {\n    userNameControl: FormControl;\n    passwordControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) protected model: Credentials,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.userNameControl = new FormControl(this.model.userName, Validators.required);\n        this.passwordControl = new FormControl(this.model.password, Validators.required);\n        this.form = this.formBuilder.group({\n            userName: this.userNameControl,\n            password: this.passwordControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.userName = this.userNameControl.value;\n                this.model.password = this.passwordControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n}\n","const LOGIN_MODULE_PROVIDERS = [];\n\nexport {LOGIN_MODULE_PROVIDERS};\n","import {NgModule, Injectable, Inject, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {Ng2UiAuthModule, /*IPartialConfigOptions,*/ CONFIG_OPTIONS, IProviders, StorageType, OauthService, PopupService} from \"ng2-ui-auth\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {AuthenticationOauthService} from \"./authentication-oauth.service\";\nimport {AuthenticationPopupService} from \"./authentication-popup.service\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {WebServicesModule, START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationModule} from \"@sinequa/core/notification\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\n\n// Login\nimport {MODAL_LOGIN} from \"./login.service\";\nimport {Login} from \"./login.component\";\n\nimport {LOGIN_MODULE_PROVIDERS} from \"./module.providers\";\n\nexport interface IPartialConfigOptions {} // until export restored to ng2-ui-auth@9\n\n/**\n * Configuration for the ng2-ui-auth library\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthConfig implements IPartialConfigOptions {\n    storageType: StorageType;\n    providers: IProviders;\n    constructor(@Inject(START_CONFIG) startConfig: StartConfig) {\n        this.storageType = \"memory\" as StorageType;\n        this.providers = startConfig.providers || {};\n    }\n}\n\n/**\n * This module provides support for user authentication in the {@link AuthenticationService}. This authentication can be\n * automatic (OAuth/SAML), if configured in the Sinequa administration, or manual where the user name and password are\n * entered in a modal dialog box and transmitted in clear text. There is also support for the ng2-ui-auth library where the\n * authentication process occurs in a browser popup window. Authentication is instigated by the handling of HTTP 401 errors\n * in an `HttpInterceptor` so all web service calls requiring authentication are automatically protected. This module will\n * not be used for authentication when the web server is configured for Windows authentication.\n *\n * A higher level {@link LoginService} groups the successful retrieval of the current `application configuration` ({@link AppService}),\n * `principal` ({@link PrincipalWebService}), and `user settings` ({@link UserSettingsWebService}) all of which require the user\n * to be authenticated. This can be used as a \"gatekeeper\" to protect access to the main, often routed, component(s).\n *\n * The {@link LoginInterceptor} in this module must be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        Ng2UiAuthModule.forRoot(undefined, false),\n        ModalModule.forRoot(),\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        AppUtilsModule,\n        WebServicesModule,  // Required for start-up config (START_CONFIG token)\n        IntlModule,\n        ValidationModule,\n        NotificationModule\n    ],\n    declarations: [\n        Login, // Default Login components\n    ],\n    exports: [\n    ],\n    providers: [\n        // Auth module dependencies\n        {provide: CONFIG_OPTIONS, useClass: AuthConfig},\n        {provide: OauthService, useExisting: AuthenticationOauthService},\n        {provide: PopupService, useExisting: AuthenticationPopupService},\n\n        ...LOGIN_MODULE_PROVIDERS\n    ]\n})\nexport class LoginModule {\n    static forRoot(loginModal: Type<any> = Login): ModuleWithProviders<LoginModule> {\n        return {\n            ngModule: LoginModule,\n            providers: [\n                // Login\n                {provide: MODAL_LOGIN, useValue: loginModal},\n            ]\n        };\n    }\n}\n","import {Injectable, Inject, InjectionToken, Optional} from \"@angular/core\";\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpEvent, HttpErrorResponse, HttpParams, HttpResponse\n} from \"@angular/common/http\";\nimport {from, Observable, throwError} from \"rxjs\";\nimport {catchError, map, switchMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {LoginService} from \"./login.service\";\nimport {AuthenticationService} from \"./authentication.service\";\n\nexport type HttpRequestInitializer = (request: HttpRequest<any>) => boolean;\nexport const HTTP_REQUEST_INITIALIZERS = new InjectionToken<HttpRequestInitializer[]>(\"HTTP_REQUEST_INITIALIZERS\");\n\ntype Options = {noAutoAuthentication: boolean, noUserOverride: boolean, hadCredentials: boolean, userOverrideActive: boolean};\n\n/**\n * An `HttpInterceptor` to handle `HTTP 401 unauthorized` error responses by calling\n * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles\n * the `sinequa-jwt-refresh` header set when auto refreshing of JWT is configured in\n * the Sinequa administration console.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginInterceptor implements HttpInterceptor {\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        @Optional() @Inject(HTTP_REQUEST_INITIALIZERS) private requestInitializers: HttpRequestInitializer[],\n        private notificationsService: NotificationsService,\n        private loginService: LoginService,\n        private authService: AuthenticationService) {}\n\n    private processRequestInitializers(request: HttpRequest<any>) {\n        if (this.requestInitializers) {\n            for (const requestInitializer of this.requestInitializers) {\n                if (!requestInitializer(request)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private notifyError(error: any) {\n        let message;\n        const title = \"msg#error.serverError\";\n        if (error instanceof HttpErrorResponse) {\n            const response = error;\n            try {\n                let data = response.error;\n                if (Utils.isString(data)) {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (exception) {\n                    }\n                }\n                if (data && data.errorMessage) {\n                    message = data.errorMessage;\n                    if (data.errorCodeText) {\n                        message = `${message} (${data.errorCodeText})`;\n                    }\n                    else if (data.errorCode) {\n                        message = `${message} (${data.errorCode})`;\n                    }\n                }\n            }\n            catch (exception) {\n            }\n            if (!message) {\n                if (response.status === 200) {\n                    message = \"msg#error.responseLoadFailure\";\n                }\n                else if (response.statusText) {\n                    message = `${response.statusText} (${response.status})`;\n                }\n                else {\n                    message = `HTTP error: ${response.status}`;\n                }\n            }\n        }\n        else if (SqError.is(error)) {\n            message = error.message;\n        }\n        else {\n            message = (error + \"\") || \"msg#error.unknownError\";\n        }\n        this.notificationsService.error(message, undefined, title);\n    }\n\n    private getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        return this.loginService.getCredentials(response, acceptCurrent)\n            .catch((error) => {\n                if (SqError.is(error, SqErrorCode.processedCredentialsError)) {\n                    return this.getCredentials(response, acceptCurrent);\n                }\n                throw error;\n            });\n    }\n\n    /**\n     * Handles `HTTP 401 unauthorized errors responses by calling\n     * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles auto\n     * refreshing of JWT by processing the `sinequa-jwt-refresh` header. The JWT cookie itself\n     * is updated by a `Set-Cookie` header in the response. There are a number of flags that\n     * can be set in the request parameters which will be removed before the request is actually\n     * sent:\n     * * `noAutoAuthentication` - set to bypass the `HTTP 401` handling\n     * * `noUserOverride` - set to not add the current user override to the request\n     * * `noNotify` - set to not notify errors using the {@link NotificationService}\n     *\n     * @param request The intercepted request\n     * @param next The next interceptor in the chain\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url) || request.params.has(\"noIntercept\")) {\n            return next.handle(request);\n        }\n\n        let config = {headers: request.headers, params: request.params};\n\n        const options: Options = {\n            noAutoAuthentication: Utils.isTrue(config.params.get(\"noAutoAuthentication\")) || false,\n            noUserOverride: Utils.isTrue(config.params.get(\"noUserOverride\")) || false,\n            hadCredentials: this.authService.haveCredentials,\n            userOverrideActive: false\n        }\n\n        const noNotify = Utils.isTrue(config.params.get(\"noNotify\")) || false;\n\n        config.params = config.params.delete(\"noAutoAuthentication\");\n        config.params = config.params.delete(\"noUserOverride\");\n        config.params = config.params.delete(\"noNotify\");\n\n        config = this.authService.addAuthentication(config);\n\n        if (this.authService.userOverrideActive && !options.noUserOverride) {\n            options.userOverrideActive = true;\n            config.headers = this.authService.addUserOverride(config);\n        }\n\n        config.headers = config.headers.set(\"sinequa-force-camel-case\", \"true\");\n\n        if (this.isJsonable(request.body)) {\n            this.processRequestInitializers(request);\n        }\n\n        this.notificationsService.enter(\"network\");\n        \n        const _request = request.clone({\n            headers: config.headers,\n            params: config.params,\n            body: request.body,\n            withCredentials: true\n        });\n\n        return next.handle(_request).pipe(\n            catchError((error, caught) => {\n                this.notificationsService.leave(\"network\");\n                if (error instanceof HttpErrorResponse) {\n                    switch (error.status) {\n                        case 401: {\n                            return this.handle401Error(error, _request, next, options, caught);\n                        }\n                    }\n                }\n                if (!noNotify) {\n                    this.notifyError(error);\n                }\n                return throwError(error);\n            }),\n            map((event) => {\n                if (event instanceof HttpResponse) {\n                    this.notificationsService.leave(\"network\");\n                    this.authService.updateAuthentication(event);\n                }\n                return event;\n            })\n        );\n    }\n\n    private handle401Error(err: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler, options: Options, caught: Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\n        if (!options.noAutoAuthentication) {\n            if (options.userOverrideActive) {\n                if (this.authService.userOverrideActive) {\n                    this.authService.deactivateUserOverride();\n                    this.authService.userOverrideFailed = true;\n                    this.notificationsService.error(\"msg#error.userOverrideFailure\");\n                }\n                return throwError(err);\n            }\n\n            return from(this.getCredentials(err, !options.hadCredentials))\n                .pipe(\n                    switchMap(value => {\n                        const {headers} = this.authService.addAuthentication(req);\n                        return next.handle(req.clone({headers}));\n                    }),\n                    catchError(err => \n                        // in case of an Http error, 'caught' must be returned to be catched by the interceptor\n                        err instanceof HttpErrorResponse ? caught : throwError(err)\n                    ));\n        }\n\n        return throwError(err);\n    }\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Login\",\n            \"userName\": \"User name\",\n            \"password\": \"Password\",\n            \"singleSignOn\": \"Single sign-on\",\n            \"signInWith\": \"Sign in with...\"\n        }\n    }\n};\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Connexion\",\n            \"userName\": \"Identifiant\",\n            \"password\": \"Mot de passe\",\n            \"singleSignOn\": \"Authentification unique\",\n            \"signInWith\": \"S'identifier avec ...\"\n        }\n    },\n};\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Anmeldung\",\n            \"userName\": \"Benutzername\",\n            \"password\": \"Passwort\",\n            \"singleSignOn\": \"Einmalanmeldung (Single sign-on)\",\n            \"signInWith\": \"Anmelden mit...\"\n        }\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport {enModal, frModal, deModal} from \"@sinequa/core/modal\";\nimport {enValidation, frValidation, deValidation} from \"@sinequa/core/validation\";\nimport _enLogin from \"./en\";\nimport _frLogin from \"./fr\";\nimport _deLogin from \"./de\";\n\nconst enLogin = Utils.merge({}, _enLogin, enIntl, enModal, enValidation);\nconst frLogin = Utils.merge({}, _frLogin, frIntl, frModal, frValidation);\nconst deLogin = Utils.merge({}, _deLogin, deIntl, deModal, deValidation);\n\nexport { enLogin, frLogin, deLogin };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementContainerStart","i0.ɵɵelement","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵlistener","i0.ɵɵproperty","i0.ɵɵpropertyInterpolate"],"mappings":"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"}