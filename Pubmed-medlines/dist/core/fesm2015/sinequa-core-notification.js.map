{"version":3,"file":"sinequa-core-notification.js","sources":["../../../projects/core/notification/notifications.service.ts","../../../projects/core/notification/notifications.interceptor.ts","../../../projects/core/notification/module.providers.ts","../../../projects/core/notification/notification.module.ts","../../../projects/core/notification/sinequa-core-notification.ts"],"sourcesContent":["import {Injectable, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\n\n/**\n * Notification types.\n */\nexport const enum NotificationType {\n    Success,\n    Info,\n    Warning,\n    Error,\n    Last = Error\n}\n\n/**\n * Notification visibility states.\n */\nexport const enum NotificationState {\n    Initial,\n    Showing,\n    Hidden\n}\n\n/**\n * Describes a notification object.\n */\nexport interface Notification {\n    /**\n     * The notification title.\n     */\n    title?: string;\n    /**\n     * The notification text.\n     */\n    text?: string;\n    /**\n     * Message parameters for the notification `text`.\n     */\n    params?: MapOf<any>;\n    /**\n     * Determines whether the notification should close automatically after a period.\n     * The duration is determined by a particular UI implementation.\n     */\n    autoClose?: boolean;\n    /**\n     * The notification type.\n     */\n    type?: NotificationType;\n    /**\n     * The nofification state.\n     */\n    state?: NotificationState;\n}\n\n/**\n * Describes a base notification event.\n */\nexport interface NotificationEvent {\n    /**\n     * The possible notification event types.\n     */\n    type: \"updated\" | \"data-updated\";\n}\n\n/**\n * Describes a notification \"updated\" event. This event is emitted\n * when one or more notifications are added, shown, hidden or deleted.\n */\nexport interface UpdatedEvent extends NotificationEvent {\n    type: \"updated\";\n}\n\n/**\n * Describes a data updated event. This event is emitted by the\n * [NotificationsService.set]{NotificationsService#set} method\n * is called.\n */\nexport interface DataUpdatedEvent extends NotificationEvent {\n    type: \"data-updated\";\n}\n\n/**\n * This service provides methods for managing notifications. No user interface\n * is imposed. It also manages a key-value data store. Events are emitted\n * when the notifications and data store are updated.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsService implements OnDestroy {\n    protected data: MapOf<any>;\n    /**\n     * The current notifications.\n     */\n    notifications: Notification[];\n    protected _events = new Subject<UpdatedEvent | DataUpdatedEvent>();\n    protected _notificationsStream = new Subject<Notification>();\n\n    constructor() {\n        this.data = {};\n        this.notifications = [];\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * Get the obervable stream of notification events.\n     */\n    get events(): Observable<UpdatedEvent | DataUpdatedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the observable stream of notifications. This will\n     * emit each time a notification is added. It will also emit\n     * `null` when notifications are deleted.\n     */\n    get notificationsStream(): Observable<Notification> {\n        return this._notificationsStream;\n    }\n\n    /**\n     * Set a value in the data store. The `data-updated` event\n     * is emitted.\n     *\n     * @param key The value's key.\n     * @param value The value.\n     */\n    set(key: string, value: any) {\n        this.data[key] = value;\n        this._events.next({type: \"data-updated\"});\n    }\n\n    /**\n     * Get a value from the data store.\n     *\n     * @param key The value's key.\n     */\n    get(key: string): any {\n        return this.data[key];\n    }\n\n    /**\n     * Increment a counter in the data store identified by the passed `key`.\n     * The intial value is 0.\n     *\n     * @param key The key for the counter.\n     */\n    enter(key: string) {\n        let value = this.data[key];\n        if (!value) {\n            value = 0;\n        }\n        value++;\n        this.set(key, value);\n    }\n\n    /**\n     * Decrement a counter in the data store identified by the passed `key`.\n     * Calls to `leave` should match calls to `enter`. If the counter becomes negative\n     * an \"underflow\" warning is emitted to the console and the counter set to 0.\n     *\n     * @param key The key for the counter.\n     */\n    leave(key: string) {\n        let value = this.data[key];\n        value--;\n        if (value < 0) {\n            console.warn(\"NotificationsService.leave underflow for:\", key);\n        }\n        if (!value || value < 0) {\n            value = 0;\n        }\n        this.set(key, value);\n    }\n\n    /**\n     * `true` if there are current notifications.\n     */\n    get haveNotifications(): boolean {\n        return this.notifications.length > 0;\n    }\n\n    /**\n     * `true` if the all current notifications are in the `Showing` state.\n     */\n    get allNotificationsShowing(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Showing) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * `true` if all current notifications are in the `Hidden` state.\n     */\n    get allNotificationsHidden(): boolean {\n        for (const notification of this.notifications) {\n            if (notification.state !== NotificationState.Hidden) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the last added notification.\n     */\n    get lastNotification(): Notification | undefined {\n        if (this.notifications.length > 0) {\n            return this.notifications[this.notifications.length - 1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Add a notification. The `updated` event is emitted and the added notification\n     * is emitted on the notifications stream.\n     *\n     * @param type The notification type.\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     * @param autoClose A flag determining whether the notification should auto-close.\n     */\n    notify(type: NotificationType, text: string, params?: MapOf<any>, title?: string, autoClose?: boolean): Notification {\n        const notification: Notification = {\n            type,\n            text,\n            params,\n            title,\n            autoClose\n        };\n        // Replace the last notification if it is the same as the new one\n        const lastNotification = this.lastNotification;\n        if (lastNotification) {\n            notification.state = lastNotification.state;\n            if (Utils.equals(notification, lastNotification)) {\n                this.notifications.splice(this.notifications.length - 1, 1);\n            }\n        }\n        notification.state = NotificationState.Initial;\n        this.notifications.push(notification);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(notification);\n        return notification;\n    }\n\n    /**\n     * Add a `Success` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    success(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Success, text, params, title, true);\n    }\n\n    /**\n     * Add an `Info` type notification. The notification will auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    info(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Info, text, params, title, true);\n    }\n\n    /**\n     * Add a `Warning` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    warning(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Warning, text, params, title, false);\n    }\n\n    /**\n     * Add an `Error` type notification. The nofification will not auto-close.\n     *\n     * @param text The notification message text.\n     * @param params Parameters for the message text.\n     * @param title The notification title.\n     */\n    error(text: string, params?: MapOf<any>, title?: string): Notification {\n        return this.notify(NotificationType.Error, text, params, title, false);\n    }\n\n    /**\n     * Set the state of all notifications to `Showing`. The `updated` event is\n     * emitted.\n     */\n    showNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Showing;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Set the state of all notifications to `Hidden`. The `updated` event is\n     * emitted.\n     */\n    hideNotifications() {\n        for (const notification of this.notifications) {\n            notification.state = NotificationState.Hidden;\n        }\n        this._events.next({type: \"updated\"});\n    }\n\n    /**\n     * Delete all notifications. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream.\n     */\n    deleteAllNotifications() {\n        this.notifications.splice(0);\n        this._events.next({type: \"updated\"});\n        this._notificationsStream.next(undefined);\n    }\n\n    /**\n     * Delete the passed `notification`. The `updated` event is\n     * emitted. `null` is emitted on the notifications stream if no notifications\n     * remain.\n     *\n     * @param notification The notification to delete.\n     */\n    deleteNotification(notification: Notification) {\n        for (let i = 0, ic = this.notifications.length; i < ic; i++) {\n            if (this.notifications[i] === notification) {\n                this.notifications.splice(i, 1);\n                this._events.next({type: \"updated\"});\n                if (this.notifications.length === 0) {\n                    this._notificationsStream.next(undefined);\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the passed `notification`. If the notification is in the\n     * `Initial` state then its state is set to `Hidden` otherwise the\n     * notification is deleted. The `updated` event is emitted.\n     *\n     * @param notification The notification to close.\n     */\n    closeNotification(notification: Notification) {\n        if (notification.state === NotificationState.Initial) {\n            notification.state = NotificationState.Hidden;\n            this._events.next({type: \"updated\"});\n        }\n        else {\n            this.deleteNotification(notification);\n        }\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {NotificationsService, Notification, NotificationType} from \"./notifications.service\";\n\n/**\n * An `HttpInterceptor` to process notifications attached to the response body\n * in the `$notifications` member.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NotificationsInterceptor implements HttpInterceptor {\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        private notificationsService: NotificationsService) {\n    }\n\n    protected shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    protected processNotifications(notifications: Notification[] | undefined) {\n        if (Utils.isArray(notifications)) {\n            for (const notification of notifications) {\n                let  type = notification.type;\n                if (Utils.isUndefined(type)) {\n                    type = NotificationType.Info;\n                }\n                const text = notification.text;\n                if (text) {\n                    const params = notification.params;\n                    const title = notification.title;\n                    let autoClose = notification.autoClose;\n                    if (Utils.isUndefined(autoClose)) {\n                        autoClose = (type === NotificationType.Success) || (type === NotificationType.Info);\n                    }\n                    this.notificationsService.notify(type, text, params, title, autoClose);\n                }\n            }\n        }\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url)) {\n            return next.handle(request);\n        }\n        return next.handle(request).pipe(\n            tap(event => {\n                if (event instanceof HttpResponse) {\n                    if (request.responseType === \"json\" && Utils.isObject(event.body)) {\n                        this.processNotifications(event.body.$notifications);\n                    }\n                }\n            }));\n   }\n}\n","const NOTIFICATION_MODULE_PROVIDERS = [];\n\nexport {NOTIFICATION_MODULE_PROVIDERS};\n","import {NgModule} from \"@angular/core\";\n\nimport {NOTIFICATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module provides a service for managing notifications. It is used by the\n * Sinequa runtime and can also be used for application-specific purposes.\n *\n * The {@link NotificationsInterceptor} in this module should be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        ...NOTIFICATION_MODULE_PROVIDERS\n    ]\n})\nexport class NotificationModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;AAkFA;;;;;MAQa,oBAAoB;IAS7B;QAHU,YAAO,GAAG,IAAI,OAAO,EAAmC,CAAC;QACzD,yBAAoB,GAAG,IAAI,OAAO,EAAgB,CAAC;QAGzD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KAC3B;IAED,WAAW;QACP,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;KAC3B;;;;IAKD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;;;;;;IAOD,IAAI,mBAAmB;QACnB,OAAO,IAAI,CAAC,oBAAoB,CAAC;KACpC;;;;;;;;IASD,GAAG,CAAC,GAAW,EAAE,KAAU;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;KAC7C;;;;;;IAOD,GAAG,CAAC,GAAW;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACzB;;;;;;;IAQD,KAAK,CAAC,GAAW;QACb,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAG,CAAC,CAAC;SACb;QACD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACxB;;;;;;;;IASD,KAAK,CAAC,GAAW;QACb,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,KAAK,GAAG,CAAC,EAAE;YACX,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,GAAG,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE;YACrB,KAAK,GAAG,CAAC,CAAC;SACb;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACxB;;;;IAKD,IAAI,iBAAiB;QACjB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;KACxC;;;;IAKD,IAAI,uBAAuB;QACvB,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE;YAC3C,IAAI,YAAY,CAAC,KAAK,sBAAgC;gBAClD,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;IAKD,IAAI,sBAAsB;QACtB,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE;YAC3C,IAAI,YAAY,CAAC,KAAK,qBAA+B;gBACjD,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;IAKD,IAAI,gBAAgB;QAChB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,SAAS,CAAC;KACpB;;;;;;;;;;;IAYD,MAAM,CAAC,IAAsB,EAAE,IAAY,EAAE,MAAmB,EAAE,KAAc,EAAE,SAAmB;QACjG,MAAM,YAAY,GAAiB;YAC/B,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,KAAK;YACL,SAAS;SACZ,CAAC;;QAEF,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,gBAAgB,EAAE;YAClB,YAAY,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;YAC5C,IAAI,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC,EAAE;gBAC9C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aAC/D;SACJ;QACD,YAAY,CAAC,KAAK,mBAA6B;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;QACrC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7C,OAAO,YAAY,CAAC;KACvB;;;;;;;;IASD,OAAO,CAAC,IAAY,EAAE,MAAmB,EAAE,KAAc;QACrD,OAAO,IAAI,CAAC,MAAM,kBAA2B,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KAC3E;;;;;;;;IASD,IAAI,CAAC,IAAY,EAAE,MAAmB,EAAE,KAAc;QAClD,OAAO,IAAI,CAAC,MAAM,eAAwB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KACxE;;;;;;;;IASD,OAAO,CAAC,IAAY,EAAE,MAAmB,EAAE,KAAc;QACrD,OAAO,IAAI,CAAC,MAAM,kBAA2B,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAC5E;;;;;;;;IASD,KAAK,CAAC,IAAY,EAAE,MAAmB,EAAE,KAAc;QACnD,OAAO,IAAI,CAAC,MAAM,gBAAyB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAC1E;;;;;IAMD,iBAAiB;QACb,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE;YAC3C,YAAY,CAAC,KAAK,mBAA6B;SAClD;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;KACxC;;;;;IAMD,iBAAiB;QACb,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE;YAC3C,YAAY,CAAC,KAAK,kBAA4B;SACjD;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;KACxC;;;;;IAMD,sBAAsB;QAClB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;QACrC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC7C;;;;;;;;IASD,kBAAkB,CAAC,YAA0B;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YACzD,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBACxC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;gBACrC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;oBACjC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC7C;gBACD,MAAM;aACT;SACJ;KACJ;;;;;;;;IASD,iBAAiB,CAAC,YAA0B;QACxC,IAAI,YAAY,CAAC,KAAK,sBAAgC;YAClD,YAAY,CAAC,KAAK,kBAA4B;YAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;SACxC;aACI;YACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SACzC;KACJ;;wFAlRQ,oBAAoB;yDAApB,oBAAoB,WAApB,oBAAoB,mBAFjB,MAAM;+CAET,oBAAoB;cAHhC,UAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACjFD;;;;MAOa,wBAAwB;IACjC,YACkC,WAAwB,EAC9C,oBAA0C;QADpB,gBAAW,GAAX,WAAW,CAAa;QAC9C,yBAAoB,GAApB,oBAAoB,CAAsB;KACrD;IAES,eAAe,CAAC,GAAW;QACjC,OAAO,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,OAAQ,CAAC,CAAC;KAC3D;IAES,oBAAoB,CAAC,aAAyC;QACpE,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAC9B,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACtC,IAAK,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;gBAC9B,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;oBACzB,IAAI,gBAAyB;iBAChC;gBACD,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;gBAC/B,IAAI,IAAI,EAAE;oBACN,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;oBACnC,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;oBACjC,IAAI,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;oBACvC,IAAI,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;wBAC9B,SAAS,GAAG,CAAC,IAAI,0BAAmC,IAAI,kBAA2B,CAAC;qBACvF;oBACD,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;iBAC1E;aACJ;SACJ;KACJ;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAClD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5B,GAAG,CAAC,KAAK;YACL,IAAI,KAAK,YAAY,YAAY,EAAE;gBAC/B,IAAI,OAAO,CAAC,YAAY,KAAK,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAC/D,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACxD;aACJ;SACJ,CAAC,CAAC,CAAC;KACZ;;gGA3CS,wBAAwB,WAErB,YAAY;6DAFf,wBAAwB,WAAxB,wBAAwB,mBAFrB,MAAM;+CAET,wBAAwB;cAHpC,UAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;sBAGQ,MAAM;uBAAC,YAAY;;;ACjB5B,MAAM,6BAA6B,GAAG,EAAE;;ACIxC;;;;;;MAiBa,kBAAkB;;mDAAlB,kBAAkB;gHAAlB,kBAAkB,mBAJhB;QACP,GAAG,6BAA6B;KACnC,YARQ,EACR;+CASQ,kBAAkB;cAX9B,QAAQ;eAAC;gBACN,OAAO,EAAE,EACR;gBACD,YAAY,EAAE,EACb;gBACD,OAAO,EAAE,EACR;gBACD,SAAS,EAAE;oBACP,GAAG,6BAA6B;iBACnC;aACJ;;;ACpBD;;;;;;"}