{"version":3,"file":"sinequa-core-web-services.js","sources":["../../projects/core/web-services/config/ccapp.ts","../../../projects/core/web-services/http.service.ts","../../../projects/core/web-services/start-config.web.service.ts","../../../projects/core/web-services/http-client.ts","../../../projects/core/web-services/app.web.service.ts","../../../projects/core/web-services/audit.web.service.ts","../../../projects/core/web-services/dataset.web.service.ts","../../../projects/core/web-services/download.web.service.ts","../../../projects/core/web-services/json-method-plugin.web.service.ts","../../../projects/core/web-services/labels.web.service.ts","../../../projects/core/web-services/preview.web.service.ts","../../../projects/core/web-services/principal.web.service.ts","../../../projects/core/web-services/query-export.web.service.ts","../../../projects/core/web-services/query.web.service.ts","../../../projects/core/web-services/recent-queries.web.service.ts","../../../projects/core/web-services/rfm.web.service.ts","../../../projects/core/web-services/similar-documents.web.service.ts","../../../projects/core/web-services/sponsored-links.web.service.ts","../../../projects/core/web-services/suggest-field.web.service.ts","../../../projects/core/web-services/suggest-query.web.service.ts","../../../projects/core/web-services/user-ratings.web.service.ts","../../../projects/core/web-services/user-settings.web.service.ts","../../../projects/core/web-services/queryintent.service.ts","../../../projects/core/web-services/module.providers.ts","../../../projects/core/web-services/web-services.module.ts","../../../projects/core/web-services/sinequa-core-web-services.ts"],"sourcesContent":["import {MapOf, JsonObject, PatternMatcher} from \"@sinequa/core/base\";\n\n/**\n * Describes the fields available in all configuration objects. By convention, configuration object\n * interfaces are prefixed by `CC`.\n */\nexport interface CCConfig {\n    /**\n     * The name of the configuration object\n     */\n    name: string;\n    /**\n     * An optional description of the configuration object\n     */\n    description?: string;\n}\n\n/**\n * Describes the fields available in all web service configuration objects\n */\nexport interface CCWebService extends CCConfig {\n    webServiceType: \"Query\" | \"sponsoredlinks\" | \"queryexport\" | \"Preview\" | \"Labels\" | \"Autocomplete\" | \"DataSet\";\n}\n\n/**\n * Describes the fields available in the index configuration object\n */\nexport interface CCIndex extends CCConfig {\n    /**\n     * The type of the index\n     */\n    indexType: string;\n    /**\n     * The columns in the index\n     */\n    columns?: MapOf<CCColumn>;\n}\n\n/**\n * Describes the fields available in a list item configuration object\n */\nexport interface CCListItem {\n    /**\n     * The name is used to display an item\n     */\n    name: string;\n    /**\n     * The value holds the underlying value of the item\n     */\n    value: string;\n}\n\n/**\n * Describes a list configuration object. Lists can be created in `App Dependencies/Lists` in the admin interface.\n */\nexport interface CCList extends CCConfig {\n    /**\n     * The name of the list\n     */\n    name: string;\n    /**\n     * The items in the list\n     */\n    items: CCListItem[];\n}\n\n/**\n * Describes an RFM action configuration object\n */\nexport interface CCRFMAction {\n    name: string;\n    enabled: boolean;\n    actionEnabled: boolean;\n    noMenu: boolean;\n    displayUnrated: boolean;\n    negAvailable: boolean;\n}\n\n/**\n * Describes an RFM configuration object\n */\nexport interface CCRFM {\n    name: string;\n    click: CCRFMAction;\n    like: CCRFMAction;\n    important: CCRFMAction;\n}\n\n/**\n * Describes an aggregation configuration object\n */\nexport interface CCAggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The underlying column in the aggregation\n     */\n    column: string;\n    /**\n     * Determines whether this aggregation should be included in a regular search\n     */\n    includeInStandardSearch: boolean;\n    /**\n     * The maximum number of values to retrieve\n     */\n    count: number;\n    /**\n     * The value of the `order` clause\n     */\n    order: string;\n    /**\n     * The value of the `mask` clause\n     */\n    mask: string;\n    /**\n     * The name of an associated distribution configuration object\n     */\n    distribution: string;\n    /**\n     * Determines whether the aggregation is requested in the context of the currently selected tab or globally.\n     * The default is to respect the [CCTabSearch.loadAggregationsForSelectedTab]{@link CCTabSearch#loadAggregationsForSelectedTab} setting\n     */\n    tabBehavior: \"\" | \"Default\" | \"LoadForSelectedTab\" | \"LoadForAllTabs\";\n    /**\n     * The separator used for crossed aggregations\n     */\n    keySeparator: string;\n    /**\n     * The display separator used for crossed aggregations\n     */\n    displayKeySeparator: string;\n}\n\n/**\n * Describes the fields for a tab configuration object\n */\nexport interface CCTab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The values in the tab distribution that contribute to this tab\n     */\n    value: string;\n    /**\n     * Set if this tab is the default to be used when no tab is specified in a query\n     */\n    isDefault: boolean;\n    /**\n     * Indexes to exclude when executing a query with this tab selected\n     */\n    excludedIndices: string;\n    /**\n     * Aggregations to exclude when executing a query with this tab selected\n     */\n    excludedAggregations: string;\n    /**\n     * Results sorting options that should be available when executing a query with this tab selected\n     */\n    sortingChoices: CCSortingChoice[];\n}\n\n/**\n * Describes the fields for the tab search configuration in a query. A tab search defines a special distribution which is evaluated\n * as a part of query to group the results by a set of tab items. The distribution gives the count of documents\n * associated with each tab item. The values associated with a tab item are used to filter a query when a tab item is selected.\n */\nexport interface CCTabSearch {\n    /**\n     * Determines whether this tab search is used in a query\n     */\n    isActive: boolean;\n    /**\n     * Defines the column to be used in the tab distribution and for filtering results by a selected tab item\n     */\n    column: string;\n    /**\n     * `true` if the associated column is a tree\n     */\n    columnIsTree: boolean;\n    /**\n     * Determines whether the overall document total should be calculated from the per-tab item documents totals\n     */\n    totalIsSumOfTabTotals: boolean;\n    /**\n     * Determines whether configured aggregations should be evaluated in the context of the selected tab or not.\n     * This setting can be overridden at the tab item level using [CCTab.excludedAggregations]{@link CCTab#excludedAggregations}\n     */\n    loadAggregationsForSelectedTab: boolean;\n    /**\n     * Determines the `minlevel` value to use when evaluating the tab distribution for a tree column\n     */\n    valueLevels: number;\n    /**\n     * Determines whether `post-group-by=true` should be used in the tab distribution\n     */\n    postGroupBy: boolean;\n    /**\n     * Determines whether 'merge-groups=true` should be used in the tab distribution. This is only used if `postGroupBy` is set to `true`\n     */\n    mergeGroups: boolean;\n    /**\n     * The set of configured tab items\n     */\n    tabs: CCTab[];\n}\n\n/**\n * Describes a sorting choice which can be selected for a query\n */\nexport interface CCSortingChoice {\n    /**\n     * The name of this sorting choice\n     */\n    name: string;\n    /**\n     * The description of this sorting choice\n     */\n    description: string;\n    /**\n     * The display value to use when rendering this sorting choice\n     */\n    display: string;\n    /**\n     * The `ORDER BY` clause to use when this sorting choice is selected\n     */\n    orderByClause: string;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has no `text contains` clause\n     */\n    isDefaultNoRelevance: boolean;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has a `text contains` clause\n     */\n    isDefaultWithRelevance: boolean;\n}\n\n/**\n * Describes a scope configuration object. A scope defines a set of conditions which\n * will be added to the query `where clause` when the scope is selected\n */\nexport interface CCScope {\n    /**\n     * The name of the scope\n     */\n    name: string;\n    /**\n     * The description of the scope\n     */\n    description: string;\n    /**\n     * The display value to be used when rendering the scope\n     */\n    display: string;\n    /**\n     * Determines whether the scope is active or not\n     */\n    isActive: boolean;\n    /**\n     * Determines whether the scope should be considered the default scope\n     * when a scope is not specified in a query\n     */\n    isDefault: boolean;\n}\n\n/**\n * Defines different precision operators that can be automatically added to a `text contains` clause\n * when no precision operators are present.\n *\n * `Default` - no operators are added\n *\n * `ExactExpression` - text surrounded by `\"...\"`\n *\n * `InTheSamePhrase` - text surrounded by `[...]`\n *\n * `EveryWord` - text surrounded by `+(...)`\n */\nexport type QueryPrecision  = \"Default\" | \"ExactExpression\" | \"InTheSamePhrase\" | \"EveryWord\";\n\n/**\n * Defines strategies that can used in the query search parameters. Each strategy defines a pair of word weight (`ww`) and meaning\n * weight (`mw`) values to be used.\n *\n * `Default` - no `ww` and `mw` parameters used\n *\n * `WordsOnly` - `ww=1;mw=0`\n *\n * `WordsFirst` - `ww=0.8;mw=0.2`\n *\n * `WordsAndMeaning` - `ww=0.6;mw=0.4`\n *\n * `MeaningFirst` - `ww=0.3;mw=0.7`\n *\n * `MeaningOnly` - `ww=0;mw=1`\n */\nexport type QueryStrategy = \"Default\" | \"WordsOnly\" | \"WordsFirst\" | \"WordsAndMeaning\" | \"MeaningFirst\" | \"MeaningOnly\";\n\n/**\n * Defines modes for the spelling correction of search terms and did-you-mean functionality. Corrections\n * are based on edit and phonetic distance and exist among the searched documents\n *\n * `default | classic` - corrections are sought for terms that are not present in any documents. The original terms\n * and corrections are included in the query\n *\n * `smart` - corrections are sought for terms that are present in less than 10 documents and where the correction\n * is 20 times more frequent than the original term. Only the best corrections are kept. The original terms and corrections\n * are included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"We included\n * results for these terms...\" feedback to be displayed\n *\n * `correct` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. Only the best corrections are kept. The original terms that have corrections\n * are not included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"Your query\n * has been corrected to...\" feedback to be displayed\n *\n * `dymonly` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. The actual query is unaffected but the\n * [Results.didYouMean]{@link Results#didYouMean] member will be populated allowing for a \"Did you mean...\" feedback to be\n * displayed\n *\n * `force` - corrections are sought for all terms. All terms and corrections are included in the query\n *\n * `false` - no spelling correction processing occurs\n */\nexport type SpellingCorrectionMode = \"default\" | \"classic\" | \"smart\" | \"correct\" | \"dymonly\" | \"force\" | \"false\";\n\n/**\n * Describes the query web service configuration object\n */\nexport interface CCQuery extends CCWebService {\n    /**\n     * Defines the number of records or documents to request when executing the query\n     */\n    pageSize: number;\n    /**\n     * Defines the aggregations that should be included in the query\n     */\n    aggregations: CCAggregation[];\n    /**\n     * Defines configuration information for the columns in the indexes\n     */\n    columnsInfo: CCColumnsInfo;\n    /**\n     * Defines the sorting choices that can be used\n     */\n    sortingChoices: CCSortingChoice[];\n    /**\n     * Defines the scopes that can be used\n     */\n    scopes: CCScope[];\n    /**\n     * Defines whether scopes processing is activated for this query\n     */\n    scopesActive: boolean;\n    /**\n     * Defines the spelling correction mode for this query\n     */\n    sCMode: SpellingCorrectionMode;\n    /**\n     * Defines the distance to use for the `NEAR` operator when no value is specified\n     */\n    defaultNearValue: number;\n    /**\n     * Defines the tab search configuration for this query\n     */\n    tabSearch: CCTabSearch;\n    /**\n     * Defines the name of the [CCRFM]{@link CCRFM} configuration for this query\n     */\n    rFM: string;\n    /**\n     * Defines the default language to use when parsing the query text\n     */\n    questionLanguage: string;\n    /**\n     * Defines the default precision to use for this query\n     */\n    questionPrecision: QueryPrecision;\n    /**\n     * Defines the default strategy to use for this query\n     */\n    questionStrategy: QueryStrategy;\n    /**\n     * Defines the indexes that the query selects from\n     */\n    searchIndexes: string;\n    /**\n     * Determines whether filter-less queries are permitted\n     */\n    allowEmptySearch: boolean;\n    /**\n     * Defines the patterns to control which column fields are allowed\n     * in fielded search expressions.\n     */\n    columnFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which column fields are disallowed\n     * in fielded search expressions.\n     */\n    columnFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `columnFieldsIncluded` and `columnFieldsExcluded` values.\n     */\n    $columnFieldsPattern: PatternMatcher;\n    /**\n     * Defines the patterns to control which part name fields are allowed\n     * in fielded search expressions.\n     */\n    partnameFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which part name fields are disallowed\n     * in fielded search expressions.\n     */\n    partnameFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `partnameFieldsIncluded` and `partnameFieldsExcluded` values.\n     */\n    $partnameFieldsPattern: PatternMatcher;\n}\n\n/**\n * Defines configuration parameters for a column\n */\nexport interface CCColumnInfo {\n    /**\n     * The column name\n     */\n    name: string;\n    /**\n     * A description of the column\n     */\n    description: string;\n    /**\n     * A comma-separated list of aliases for the column\n     */\n    aliases: string;\n    /**\n     * A display label for the column\n     */\n    label: string;\n    /**\n     * A plural form display label for the column\n     */\n    labelPlural: string;\n    /**\n     * The name of a formatter function that produces a formatted string value from the column value. See {@link FormatService}\n     */\n    formatter: string;\n    /**\n     * A set of transform functions that are applied to the a formatted string value. See {@link FormatService}\n     */\n    transforms: string;\n    /**\n     * The name of a parser function that produces a column value from a formatted string value. See {@link FormatService}\n     */\n    parser: string;\n}\n\n/**\n * Describes a set of `CCColumnInfo` objects\n */\nexport interface CCColumnsInfo {\n    columns: CCColumnInfo[];\n}\n\n/**\n * Defines the range of column types for a column\n */\nexport const enum EngineType {\n    none = 0,\n    bool = 1,\n    date = 2,\n    dateTime = 3,\n    time = 4,\n    unsigned = 5,\n    integer = 6,\n    float = 7,\n    double = 8,\n    dates = 9,\n    dateTimes = 10,\n    times = 11,\n    varchar = 12,\n    binary = 13,\n    string = 14,\n    csv = 15\n}\n\n/**\n * Defines the type modifiers that can be used for a column\n */\nexport const enum EngineTypeModifier {\n    none  = 0x0000000,\n    a     = 0x0000805, // a -> lc\n    // b  = 0x0000002,\n    c     = 0x0000004,\n    d     = 0x0000008,\n    e     = 0x0000814, // e -> lc\n    // f  = 0x0000020,\n    // g  = 0x0000040,\n    // h  = 0x0000080,\n    i     = 0x0000100,\n    // j  = 0x0000200,\n    // k  = 0x0000400,\n    l     = 0x0000804, // l -> c\n    // m  = 0x0001000,\n    n     = 0x0002000,\n    // o  = 0x0004000,\n    // p  = 0x0008000,\n    // q  = 0x0010000,\n    // r  = 0x0020000,\n    // s  = 0x0040000,\n    t     = 0x0080004, // t -> c\n    // u  = 0x0100000,\n    // v  = 0x0200000,\n    // w  = 0x0400000,\n    x     = 0x0800000,\n    // y  = 0x1000000,\n    z     = 0x2000000,\n\n    f_ordinal    = 0x0002000, //             n\n    f_multidates = 0x0002000, //             n\n    f_varchar    = 0x2000000, //                   z\n    f_binary     = 0x2002000, //             n     z\n    f_string     = 0x2002108, //     d   i   n     z\n    f_csv        = 0x288291d, // a c d e i l n t x z\n\n    f_overridable= 0x2000108  //     d   i         z\n}\n\n/**\n * Defines the fields for a column configuration object defined in an index. See {@link CCIndex}\n */\nexport interface CCColumn {\n    name: string;\n    description?: string;\n    type: string;\n    typeModifier?: string;\n    eType: EngineType;\n    eTypeModifier: EngineTypeModifier;\n    aliases?: string[];\n    label?: string;\n    labelPlural?: string;\n    formatter?: string;\n    transforms?: string;\n    parser?: string;\n}\n\n/**\n * Enum representing supported export source.\n */\nexport enum ExportSourceType {\n    None = 0,\n    Result = 1,\n    Selection = 2,\n    SavedQuery = 4\n}\n\n/**\n * Enum representing supported export format.\n */\nexport enum ExportOutputFormat {\n    None = 0,\n    Csv = 1,\n    Xlsx = 2,\n    Json = 4\n}\n\n/**\n * Data model of the Export dialog.\n */\nexport interface ExportDialogModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n}\n\n/**\n * Describes the fields in the labels web service configuration object\n */\nexport interface CCLabels extends CCWebService {\n    /**\n     * The the index column to use for public labels\n     */\n    publicLabelsField: string;\n    /**\n     * A semi-colon separated list of predefined public labels\n     */\n    defaultPublicLabels: string;\n    /**\n     * Determines whether new public labels can be created by users\n     */\n    allowPublicLabelsCreation: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can create public labels\n     */\n    publicLabelsCreationPrincipalIds: string;\n    /**\n     * Determines whether existing public labels can be modified by users\n     */\n    allowPublicLabelsModification: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can modify existing public labels\n     */\n    publicLabelsModificationPrincipalIds: string;\n\n    /**\n     * The the index column to use for private labels\n     */\n    privateLabelsField: string;\n\n    /**\n     * The maximum number of labels to return when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestMaxCount: number;\n\n    /**\n     * The wildcard character to recognise when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestWildcard: string;\n}\n\n/**\n * Describes the fields in the autocomplete web service configuration object\n */\nexport interface CCAutocomplete extends CCWebService {\n    /**\n     * Defines whether this autocomplete service is enabled\n     */\n    enabled: boolean;\n    /**\n     * Contains a comma-separated list of suggest queries for this service\n     */\n    suggestQueries: string;\n    /**\n     * Defines the minimum number of characters that must be entered before presenting\n     * suggestions\n     */\n    inputLengthTrigger: number;\n    /**\n     * Defines whether suggestions should be grouped into categories when they are displayed\n     */\n    groupSuggestionsByCategory: boolean;\n    /**\n     * Defines whether fielded search should be used when processing suggestions\n     */\n    useFieldedSearch: boolean;\n    /**\n     * Defines the number of items per category to display when a category is not collapsed\n     */\n    uncollapsedItemsPerCategory: number;\n}\n\n/**\n * Describes the fields in the application configuration object\n */\nexport interface CCApp extends CCConfig {\n    /**\n     * Identifies the version of the application configuration. This field can be passed\n     * to the [AppWebService.refresh]{@link AppWebService#refresh} api to update the application\n     * configuration if the version now available on the server is different.\n     */\n    versionId: string;\n    /**\n     * Defines the queries configured on the application\n     */\n    queries: MapOf<CCQuery>;\n    /**\n     * Defines the RFM objects configured on the application\n     */\n    rfms: MapOf<CCRFM>;\n    /**\n     * Defines the indexes configured on the application\n     */\n    indexes: MapOf<CCIndex>;\n    /**\n     * Defines the lists configured on the application\n     */\n    lists: MapOf<CCList>;\n    /**\n     * Defines the web services configured on the application\n     */\n    webServices: MapOf<CCWebService>;\n    /**\n     * A comma-separated list of the names of the queries configured on the application\n     */\n    queryNames: string;\n    /**\n     * The name of the labels web service configured on the application\n     */\n    labels: string;\n    /**\n     * The name of the preview web service configured on the application\n     */\n    preview: string;\n    /**\n     * The name of the autocomplete web service configured on the application\n     */\n    autocomplete: string;\n    /**\n     * The name of the sponsored links web service configured on the application\n     */\n    sponsoredLinks: string;\n    /**\n     * The name of the query export web service configured on the application\n     */\n    queryExport: string;\n    /**\n     * Determines whether RSS feeds are available on saved queries\n     */\n    queryRssEnabled: boolean;\n    /**\n     * Custom JSON configuration (see App Customization tab in Sinequa admin)\n     */\n    data: JsonObject;\n    /**\n     * The version of the server API.\n     * This field is used to compare with [MINIMUM_COMPATIBLE_SERVER_API_VERSION]{@link MINIMUM_COMPATIBLE_SERVER_API_VERSION}\n     */\n    apiVersion: string;\n    /**\n     * The workspace associated with this app\n     */\n    workspaceApp: string;\n    /**\n     * The name of the default query\n     */\n    defaultQueryName: string;\n}\n\n/**\n * The minimum server api version that compatible with this version of SBA.\n */\nexport const MINIMUM_COMPATIBLE_SERVER_API_VERSION = '1.0';\n","import {HttpParams} from \"@angular/common/http\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {StartConfig} from \"./start-config.web.service\";\n\n/**\n * A base helper class for web services. It holds the {@link StartConfig} for the app\n */\nexport abstract class HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig The start configuration\n     */\n    constructor(\n        protected startConfig: StartConfig) {\n    }\n\n    /**\n     * The name of the application\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Makes an API url by appending the api name to the api path\n     * held on the {@link StartConfig}\n     *\n     * @param api An API name\n     */\n    makeUrl(api: string): string {\n        return Utils.addUrl(this.startConfig.apiPath!, api);\n    }\n\n    /**\n     * Makes an Angular {@link HttpParams} object from a basic Javascript object\n     *\n     * @param params A map of parameter values\n     */\n    makeParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        return Utils.makeHttpParams(params);\n    }\n}","import {Injectable, InjectionToken, Optional, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport atomic from \"atomicjs\";\nimport {IProviders} from \"ng2-ui-auth\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An {@link InjectionToken} to access the app's {@link StartConfig} instance\n */\nexport const START_CONFIG = new InjectionToken<StartConfig>(\"START_CONFIG\");\n\n/**\n * Defines members whose values are automatically deduced from direct {@link StartConfig} members\n */\nexport interface DeducedStartConfig {\n    /**\n     * The origin of the url used to make Sinequa API calls\n     */\n    origin?: string;\n    /**\n     * The application path of the url used to make Sinequa API calls\n     */\n    applicationPath?: string;\n    /**\n     * The url in the browser (origin + pathname)\n     */\n    browserUrl?: string;\n    /**\n     * The path used to make Sinequa API calls, including any virtual directories.\n     * If CORS is active then it will be prefixed by the Sinequa server origin\n     */\n    apiPath?: string;\n    /**\n     * A flag indicating whether the app is running in a CORS context.\n     */\n    corsActive?: boolean;\n}\n\n/**\n * Defines members whose values are retrieved from the Sinequa app configuration and that are available prior to user login\n */\nexport interface PreloginAppConfig {\n    /**\n     * Specifies which storage should be used to hold the CSRF token used to protect Sinequa API calls against\n     * CSRF attacks\n     */\n    authenticationStorage?: 'session' | 'local';\n    /**\n     * Contains the available login providers (only used for popup-based login)\n     */\n    providers?: IProviders;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoOAuthProvider?: string;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoSAMLProvider?: string;\n    /**\n     * A boolean value indicating whether popup-based login should be used\n     */\n    usePopupForLogin?: boolean;\n    /**\n     * The URL to be used to display online help\n     */\n    helpUrl?: string;\n    /**\n     * A boolean value indicating whether auditing is enabled\n     */\n    auditEnabled?: boolean;\n    /**\n     * A boolean value indicating whether ML auditing is enabled\n     */\n    mlAuditEnabled?: boolean;\n    /**\n     * The version of Sinequa running on the server\n     */\n    version?: string;\n    /**\n     * The date of the version of Sinequa running on the server\n     */\n    versionDate?: Date;\n}\n\n/**\n * Contains start-up configuration for the application. An instance of this object\n * must be provided when registering the {@link WebServicesModule} either by providing the START_CONFIG\n * injection token or by using the [forRoot]{@link WebServicesModule#forRoot} static method.\n *\n * Typically only the members declared directly (url, app, production) should be specified.\n * The other values are either deduced from these members or are retrieved from the Sinequa configuration\n */\nexport interface StartConfig extends DeducedStartConfig, PreloginAppConfig {\n    /**\n     * The url of the sinequa server including any virtual directories - defaults to the browser url\n     */\n    url?: string;\n    /**\n     * The app name (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    app?: string;\n    /**\n     * A flag indicating whether the app is running in production mode or not\n     * (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    production?: boolean;\n}\n\n/**\n * Defines Sinequa server configuration that can be held on a web server and retrieved using\n * [StartConfigWebService.fetchServerConfig]{@link StartConfigWebService#fetchServerConfig}\n */\nexport interface ServerConfig {\n    /**\n     * The URL of the Sinequa server including any virtual directories\n     */\n    url?: string;\n    /**\n     * The name of the application\n     */\n    app?: string;\n}\n\n/**\n * A service to manage the initialization of the app's {@link StartConfig} instance. The service\n * is automatically instantiated by an {@link APP_INITIALIZER} in {@link WebServicesModule} and the\n * initialization is performed in the constructor.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class StartConfigWebService {\n    private static API_PATH = \"/api/v1\";\n\n    /**\n     * Initializes the injected {@link StartConfig} instance. Outputs an error to the\n     * console if no instance is injected.\n     *\n     * @param startConfig The start configuration instance\n     */\n    constructor(@Optional() @Inject(START_CONFIG) private startConfig: StartConfig) {\n        if (!startConfig) {\n            console.error(\"START_CONFIG must be provided in your app module\");\n            return;\n        }\n        this.initStartConfig();\n    }\n\n    private getDefaultStartConfig(): StartConfig {\n        const startConfig: StartConfig = {};\n        const browserUrl = Utils.makeURL(window.location.href);\n        let parts = Utils.split(browserUrl.pathname, \"/\");\n        const appSpecifierIndex = parts.findIndex(value => Utils.eqNCN(value, \"app\", \"app-debug\"));\n        if (appSpecifierIndex !== -1 && appSpecifierIndex < parts.length - 1) {\n            const appSpecifier = parts[appSpecifierIndex];\n            startConfig.app = parts[appSpecifierIndex + 1];\n            startConfig.production = appSpecifier === \"app\" ? true : false;\n            parts = parts.slice(0, appSpecifierIndex);\n        }\n        startConfig.url = Utils.addUrl(browserUrl.origin, ...parts);\n        return startConfig;\n    }\n\n    private initStartConfig() {\n        const defaultStartConfig = this.getDefaultStartConfig();\n        const initialStartConfig = Utils.copy(this.startConfig);\n        Utils.extend(this.startConfig, defaultStartConfig, initialStartConfig);\n        const browserUrl = Utils.makeURL(window.location.href);\n        const url = Utils.makeURL(this.startConfig.url!);\n        let apiPath = Utils.addUrl(url.pathname, StartConfigWebService.API_PATH);\n        let applicationPath = url.pathname;\n        const corsActive = url.origin !== browserUrl.origin;\n        if (corsActive) {\n            apiPath = Utils.addUrl(url.origin, apiPath);\n            applicationPath = Utils.addUrl(url.origin, applicationPath);\n        }\n        this.startConfig.origin = url.origin;\n        this.startConfig.applicationPath = applicationPath;\n        this.startConfig.apiPath = apiPath;\n        this.startConfig.corsActive = corsActive;\n        this.startConfig.browserUrl = Utils.addUrl(browserUrl.origin, browserUrl.pathname);\n    }\n\n    /**\n     * Fetches pre-login app configuration from the Sinequa server and merges it\n     * into the start config instance\n     *\n     * @returns An observable of the start config after being merged with the pre-login app configuration\n     */\n    fetchPreLoginAppConfig(): Observable<StartConfig> {\n        return Observable.create(observer => {\n            let _url = Utils.addUrl(this.startConfig.apiPath!, \"app\");\n            _url = Utils.addSearchParams(_url, {\n                app: this.startConfig.app,\n                preLogin: true\n            });\n            atomic(_url, {\n                headers: {\n                    \"sinequa-force-camel-case\": true\n                }\n            })\n                .then(response => {\n                    const initialStartConfig = Utils.copy(this.startConfig);\n                    Utils.extend(this.startConfig, response.data, initialStartConfig);\n                    const versionDate = this.startConfig.versionDate;\n                    if (Utils.isString(versionDate)) { // it will be\n                        this.startConfig.versionDate = Utils.fromSysDateStr(versionDate);\n                    }\n                    observer.next(this.startConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.error(\"Error retrieving app config\");\n                    observer.error(error);\n                });\n        });\n    }\n\n    /**\n     * Retrieves Sinequa server configuration from a web server hosting the app\n     *\n     * @param url A URL to a JSON file containing the Sinequa server configuration\n     *\n     * @returns An observable of the Sinequa server configuration\n     */\n    fetchServerConfig(url?: string): Observable<ServerConfig> {\n        return Observable.create(observer => {\n            if (!url) {\n                const _url = Utils.makeURL(window.location.href);\n                url = Utils.addUrl(_url.pathname, \"sinequa-config.json\");\n            }\n            atomic(url)\n                .then(response => {\n                    // If the config file is empty or not valid json we'll most likely get a string for data\n                    let serverConfig = response.data;\n                    if (!Utils.isObject(serverConfig)) {\n                        console.warn(\"invalid sinequa-config.json file\");\n                        serverConfig = {};\n                    }\n                    observer.next(serverConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.log(\"sinequa-config.json not found\");\n                    observer.next({});\n                    observer.complete();\n                });\n        });\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpRequest, HttpHandler} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {share, tap} from \"rxjs/operators\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A helper service that overrides the standard Angular [HttpClient]{@link https://angular.io/api/common/http/HttpClient}\n * to prevent multiple subscribers from causing multiple requests to be issued and to mitigate against request flooding\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SqHttpClient extends HttpClient {\n\n    private responseCache = new Map<string, Observable<any>>();\n\n    constructor(\n        httpHandler: HttpHandler) {\n        super(httpHandler);\n    }\n\n    private getRequestHash(first: string | HttpRequest<any>, url?: string, options = {}): string {\n        // The replacer ensures that object keys are always serialized in the same order\n        const strRequest = JSON.stringify([first, url, options],\n            (key: string, value: any) => {\n                if (Utils.isObject(value) && !Utils.isIterable(value)) {\n                    return Object.keys(value).sort().reduce(\n                        (s, k) => {\n                            s[k] = value[k];\n                            return s;\n                        }, {});\n                }\n                else {\n                    return value;\n                }\n            });\n        return Utils.sha256(strRequest);\n    }\n\n    /**\n     * Overrides the standard `HttpClient.request` method to change its behavior as follows:\n     * * pipes the observable to the share operator so that only a single request is issued even if there are multiple subscribers\n     * * to mitigate request flooding, a cache of pending response observables keyed by the request thumbprint is maintained.\n     * An observable from the cache is returned if the incoming request is identical to one in the cache\n     */\n    request(first: string | HttpRequest<any>, url?: string, options = {}): Observable<any> {\n        const requestHash = this.getRequestHash(first, url, options);\n        let observable = this.responseCache.get(requestHash);\n        if (!observable) {\n            observable = super.request(first as string, url as string, options)\n                .pipe(share())\n                .pipe(tap(() => this.responseCache.delete(requestHash)));\n            this.responseCache.set(requestHash, observable);\n        }\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {CCApp} from \"./config/ccapp\";\n\n/**\n * Defines the object returned by a call to [AppWebService.refresh]{@link AppWebService#refresh}. If the upToDate\n * member is false then the app member contains the latest version of the app configuration\n */\nexport interface CCAppRefresh {\n    upToDate: boolean;\n    app?: CCApp;\n}\n\n/**\n * This service provides methods to retrieve and refresh the configuration of an app\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppWebService extends HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig Provides the app name\n     * @param httpClient The HTTP client\n     */\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    /**\n     * Gets the app configuration for the app name\n     *\n     * @returns An observable of the app configuration\n     */\n    get(): Observable<CCApp> {\n        const observable = this.httpClient.get<CCApp>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\"\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                //console.log(\"appWebService.get success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.get failure - reason: \", error);\n                });\n        return observable;\n    }\n\n    /**\n     * Refreshes the app configuration based on a version identifier\n     *\n     * @param appVersionId The current app version id [CCApp.versionId]{@link CCApp#versionId}\n     * @param auditEvents Audit events to be recorded for this call\n     *\n     * @returns An observable of an object containing a flag indicating whether the configuration was up to date. If false\n     * then the app member of the object will be set to the new version of the configuration.\n     */\n    refresh(appVersionId: string, auditEvents?: AuditEvents): Observable<CCAppRefresh> {\n        const observable = this.httpClient.get<{upToDate: boolean, app: CCApp}>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\",\n                versionId: appVersionId,\n                $auditRecord: auditEvents\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                    //console.log(\"appWebService.refresh success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.refresh failure - reason: \", error);\n                });\n        return observable;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\nimport {Results, Record} from \"./query.web.service\";\nimport {LinkResult} from \"./sponsored-links.web.service\";\n\n/**\n * Describes a single audit event\n */\nexport interface AuditEvent {\n    type: AuditEventType | string; // allow custom event types\n    detail?: JsonObject;\n    rfmDetail?: JsonObject;\n}\n\n/**\n * Contains an array of {@link AuditEvent} objects and an array of ML audit event records\n */\nexport interface AuditRecord {\n    auditEvents?: AuditEvent[];\n    mlAuditEvents?: any[];\n}\n\n/**\n * A composite type describing a set of AuditEvents\n */\nexport type AuditEvents = AuditEvent | AuditEvent[] | AuditRecord;\n\n/**\n * The standard audit event types\n */\nexport const enum AuditEventType {\n    // Should be in par with AuditEventType enum from AuditManager.cs\n    None = \"None\",\n\n    // WebApp event types\n    Search_FirstPage = \"Search_FirstPage\",\n    Search_Text = \"Search_Text\",\n    Search_Refine = \"Search_Refine\",\n    Search_Select_Item = \"Search_Select_Item\",\n    Search_Select_Custom = \"Search_Select_Custom\",\n    Search_Select_Concept = \"Search_Select_Concept\",\n    Search_Select_Correction = \"Search_Select_Correction\",\n    Search_GotoPage = \"Search_GotoPage\",\n    Search_GotoTab = \"Search_GotoTab\",\n    Search_DisplayResult = \"Search_DisplayResult\",\n    Search_RemoveResult = \"Search_RemoveResult\",\n    Search_RemoveAdvanced = \"Search_RemoveAdvanced\",\n    Search_SavedQuery = \"Search_SavedQuery\",\n    Search_WebService = \"Search_WebService\",\n    Search_DidYouMean_Original = \"Search_DidYouMean_Original\",\n    Search_DidYouMean_Correction = \"Search_DidYouMean_Correction\",\n    Search_ExportCSV = \"Search_ExportCSV\",\n    Search_SavedQuery_ExportCSV = \"Search_SavedQuery_ExportCSV\",\n    Search_Selection_ExportCSV = \"Search_Selection_ExportCSV\",\n    Search_AlertQuery = \"Search_AlertQuery\",\n    Search_Select_AnalyticsItem = \"Search_Select_AnalyticsItem\",\n    Search_Sort = \"Search_Sort\",\n    Search_Exit_Logout = \"Search_Exit_Logout\",\n    Search_Timeline_Usage = \"Search_Timeline_Usage\",\n    Search_AutoComplete = \"Search_Autocomplete\",\n\n    SavedQuery_Add = \"SavedQuery_Add\",\n    SavedQuery_Delete = \"SavedQuery_Delete\",\n    SavedQuery_DeleteAll = \"SavedQuery_DeleteAll\",\n    SavedQuery_Rename = \"SavedQuery_Rename\",\n\n    Alert_Edit = \"Alert_Edit\",\n    Alert_Delete = \"Alert_Delete\",\n    Alert_DeleteAll = \"Alert_DeleteAll\",\n\n    Link_Display = \"Link_Display\",\n    Link_Click = \"Link_Click\",\n\n    Basket_Add = \"Basket_Add\",\n    Basket_Delete = \"Basket_Delete\",\n    Basket_DeleteAll = \"Basket_DeleteAll\",\n    Basket_Rename = \"Basket_Rename\",\n    Basket_AddDoc = \"Basket_AddDoc\",\n    Basket_RemoveDoc = \"Basket_RemoveDoc\",\n    Basket_Open = \"Basket_Open\",\n    Basket_ExportCSV = \"Basket_ExportCSV\",\n\n    Label_Add = \"Label_Add\",\n    Label_Delete = \"Label_Delete\",\n    Label_Rename = \"Label_Rename\",\n    Label_Open = \"Label_Open\",\n    Label_AddDoc = \"Label_AddDoc\",\n    Label_RemoveDoc = \"Label_RemoveDoc\",\n    Label_ExportCSV = \"Label_ExportCSV\",\n    Label_Menu_ExportCSV = \"Label_Menu_ExportCSV\",\n\n    Rating_Set = \"Rating_Set\",\n    Rating_Delete = \"Rating_Delete\",\n\n    Doc_Preview = \"Doc_Preview\",\n    Doc_CacheHtml = \"Doc_CacheHtml\",\n    Doc_CachePdf = \"Doc_CachePdf\",\n    Doc_CacheOriginal = \"Doc_CacheOriginal\",\n    Doc_Url1 = \"Doc_Url1\",\n    Doc_Url2 = \"Doc_Url2\",\n\n    Click_ResultLink = \"Click_ResultLink\",\n    Click_ResultLink1 = \"Click_ResultLink1\",\n    Click_ResultLink2 = \"Click_ResultLink2\",\n    Click_ResultLink3 = \"Click_ResultLink3\",\n    Click_ResultLink4 = \"Click_ResultLink4\",\n    Click_ResultLink5 = \"Click_ResultLink5\",\n    Click_ResultLink6 = \"Click_ResultLink6\",\n    Click_ResultLink7 = \"Click_ResultLink7\",\n    Click_ResultLink8 = \"Click_ResultLink8\",\n    Click_ResultLink9 = \"Click_ResultLink9\",\n    Click_ResultLink10 = \"Click_ResultLink10\",\n    Click_PreviewLink1 = \"Click_PreviewLink1\",\n    Click_PreviewLink2 = \"Click_PreviewLink2\",\n    Click_PreviewLink3 = \"Click_PreviewLink3\",\n    Click_PreviewLink4 = \"Click_PreviewLink4\",\n    Click_PreviewLink5 = \"Click_PreviewLink5\",\n    Click_PreviewLink6 = \"Click_PreviewLink6\",\n    Click_PreviewLink7 = \"Click_PreviewLink7\",\n    Click_PreviewLink8 = \"Click_PreviewLink8\",\n    Click_PreviewLink9 = \"Click_PreviewLink9\",\n    Click_PreviewLink10 = \"Click_PreviewLink10\",\n\n    RFM_ClickSet = \"RFM_ClickSet\",\n    RFM_ClickReset = \"RFM_ClickReset\",\n    RFM_Like = \"RFM_Like\",\n    RFM_LikeReset = \"RFM_LikeReset\",\n    RFM_Dislike = \"RFM_Dislike\",\n    RFM_Important = \"RFM_Important\",\n    RFM_ImportantReset = \"RFM_ImportantReset\",\n    RFM_Ban = \"RFM_Ban\"\n}\n\n/**\n * A service to notify the audit manager on the Sinequa server of client-side events\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditWebService extends HttpService {\n    private static readonly endpoint = \"audit.notify\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        protected httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Notify the Sinequa server of a sponsored link event\n     *\n     * @param evt The audit event type\n     * @param sl The sponsored link\n     * @param resultId The id of the results that showed the sponsored link\n     * @param parameters Additional information\n     */\n    notifySponsoredLink(\n        evt: AuditEventType, sl: LinkResult, resultId: string,\n        parameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const detail: JsonObject = {\n            \"link-id\": sl.id,\n            rank: sl.rank || 0,\n            title: sl.title,\n            url: sl.url,\n            \"result-id\": resultId\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param doc The document (record) in question\n     * @param resultsOrId The results or resultid that contain the document\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocument(\n        evt: AuditEventType, doc: Record, resultsOrId: Results | string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        let resultId: string | null;\n        let results: Results | undefined;\n        if (Utils.isString(resultsOrId)) {\n            resultId = resultsOrId;\n        }\n        else {\n            results = resultsOrId;\n            resultId = results ? results.id : null;\n        }\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": doc.id,\n            rank: doc.rank,\n            title: doc.title,\n            source: Utils.treeFirstNode(doc.collection[0]),\n            collection: doc.collection[0],\n            \"result-id\": resultId,\n            filename: doc.filename,\n            fileext: doc.fileext,\n            index: doc.databasealias\n        };\n        if (results) {\n            detail[\"result-count\"] = results.totalRowCount;\n        }\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param id The id of the document (record) in question\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocumentById(\n        evt: AuditEventType, id: string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const collection = id.substr(0, id.indexOf(\"|\"));\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": id,\n            rank: -1,\n            source: Utils.treeFirstNode(collection),\n            collection\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify logout\n     */\n    notifyLogout() : Observable<void> {\n        const detail: JsonObject = {\n            app: this.appName,\n        };\n\n        const data: AuditEvent = {\n            type: AuditEventType.Search_Exit_Logout,\n            detail\n        };\n\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a set of audit events\n     *\n     * @param auditEvents The audit events\n     */\n    notify(auditEvents: AuditEvents): Observable<void> {\n        if (!this.startConfig.auditEnabled) {\n            return of(undefined);\n        }\n        const observable = this.httpClient.post<void>(this.makeUrl(AuditWebService.endpoint), {\n            event: AuditEventType.None,\n            app: this.appName,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"auditService.notify failure - error: \", error);\n            });\n        return observable;\n    }\n}","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SqHttpClient } from \"./http-client\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Results } from \"./query.web.service\";\r\nimport { StartConfig, START_CONFIG } from \"./start-config.web.service\";\r\n\r\nexport type Dataset = {[key: string]: Results|DatasetError};\r\n\r\nexport interface DatasetError {\r\n    errorCode: number;\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface DatasetDescription {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\n/**\r\n * A service to notify the audit manager on the Sinequa server of client-side events\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DatasetWebService extends HttpService {\r\n    private static readonly endpoint = \"search.dataset\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        protected httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    /**\r\n     * Return the list of queries configured in the given\r\n     * dataset web service.\r\n     * @param webServiceName name of the web service\r\n     */\r\n    list(webServiceName: string): Observable<DatasetDescription[]> {\r\n        return this.httpClient.get<DatasetDescription[]>(\r\n            `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param query name of the query\r\n     * @param params parameters of the queries\r\n     */\r\n    get(webServiceName: string, query: string, parameters = {}): Observable<Results|DatasetError> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}/${query}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets[query]));\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param params parameters of the queries\r\n     */\r\n    getAll(webServiceName: string, parameters = {}): Observable<Dataset> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets));\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Utils } from \"@sinequa/core/base\";\n\n/**\n * A service to manage navigator downloads\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DownloadWebService {\n\n    /**\n     * Subscribes to the given observable to trigger a download action on the navigator\n     * when the observed object is ready.\n     *\n     * @param observable The observable to subscribe.\n     * @returns The observable for chaining.\n     */\n    public download(observable: Observable<HttpResponse<Blob>>): Observable<HttpResponse<Blob>> {\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                const header = response.headers.get('content-disposition');\n                const fileName = header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n\n                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                    // For IE\n                    window.navigator.msSaveOrOpenBlob(response.body, fileName);\n                } else {\n                    const link = document.createElement('a');\n                    document.body.appendChild(link);\n                    const blobUrl = window.URL.createObjectURL(response.body);\n                    link.href = blobUrl;\n                    link.download = fileName;\n                    link.click();\n                    link.remove();\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n\n                return response;\n            }\n        );\n        return observable;\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A generic service for invoking JsonMethod plugins\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class JsonMethodPluginService extends HttpService{\n  constructor(\n    public httpClient: SqHttpClient,\n    @Inject(START_CONFIG) startConfig: StartConfig\n    ) {\n      super(startConfig);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  post(method: string, query: any, options?: {[key: string]: any}) : Observable<any> {\n    if (!Utils.isObject(query)) {\n      return throwError({error: \"invalid query object\"});\n    }\n    const observable = this.httpClient.post(this.makeUrl(method), query, options);\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.post success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.post failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.post complete\");\n      });\n\n    return observable;\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  call(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    return this.post(method, query, options);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP GET\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  get(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    const observable = this.httpClient.get(this.makeUrl(method), {\n      params: this.makeParams(query),\n      ...options\n    });\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.get success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.get failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.get complete\");\n      });\n\n    return observable;\n  }\n\n  makeUrl(api: string): string {\n    return super.makeUrl('plugin/' + api);\n  }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes the object returned by the list action of the labels web service\n */\nexport interface Labels {\n    labels: string[];\n}\n\n/**\n * Describes the object returned by the getUserRights action of the labels web service\n */\nexport interface LabelsRights {\n    canManagePublicLabels: boolean;\n    canEditPublicLabels: boolean;\n}\n\n/**\n * A service for calling the labels web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LabelsWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Calls the list action of the labels web service\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    list(\n        prefix: string,\n        _public: boolean): Observable<Labels> {\n        const observable = this.httpClient.get<Labels>(this.makeUrl(\"labels\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"list\",\n                q: prefix,\n                public: _public,\n                locale: this.intlService.currentLocale.name,\n                localize: false\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.list failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * A wrapper around the list method. The matching labels are returned as an array of strings\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    array(\n        prefix: string,\n        _public: boolean): Observable<string[]> {\n        return this.list(prefix, _public)\n            .pipe(map((value) => {\n                return value.labels;\n            }));\n    }\n\n    /**\n     * Calls the getUserRights action of the labels web service\n     */\n\n    getUserRights(): Observable<LabelsRights> {\n        const observable = this.httpClient.get<LabelsRights>(\n            this.makeUrl('labels'),\n            {\n                params: this.makeParams({\n                    app: this.appName,\n                    action: 'getUserRights'\n                })\n            }\n        );\n        Utils.subscribe(\n            observable,\n            response => response,\n            error => console.log(\"labelsService.getUserRights failure - error: \", error)\n        );\n        return observable;\n    }\n\n    /**\n     * Add labels to a set of documents\n     *\n     * @param labels The labels to add\n     * @param ids The ids of the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    add(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"add\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_AddDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addToLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.add failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from a set of documents\n     *\n     * @param labels The labels to remove\n     * @param ids The ids of the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    remove(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"remove\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_RemoveDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeFromLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.remove failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Renames a set of labels\n     *\n     * @param labels The labels to rename\n     * @param newLabel The new name for the labels\n     * @param _public Determines whether the labels are public or private\n     */\n    rename(labels: string[],\n        newLabel: string,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"rename\",\n            labels: labels,\n            newLabel: newLabel,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Rename,\n                detail: {\n                    public: _public,\n                    oldlabel: !!labels ? labels.toString() : null,\n                    label: newLabel\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.rename failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Deletes a set of labels\n     *\n     * @param labels The labels to be deleted\n     * @param _public Determines whether the labels are public or private\n     */\n    delete(labels: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"delete\",\n            labels: labels,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.delete failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Adds labels to the documents identified by the passed query\n     *\n     * @param labels The labels to add\n     * @param query The query to produce the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkAdd(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkAdd\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Add,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkAdd failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from the documents identified by the passed query\n     *\n     * @param labels The labels to remove\n     * @param query The query to produce the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkRemove(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkRemove\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkRemove failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {IQuery} from \"./query/query\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {catchError, distinctUntilChanged, shareReplay} from \"rxjs/operators\";\n\n/**\n * Describes highlight data for a set of categories\n */\nexport interface HighlightDataPerCategory {\n    [key: string] : CategoryHighlightData;\n}\n\n/**\n * Describes highlight data for a category\n */\nexport interface CategoryHighlightData {\n    categoryDisplayLabel: string;\n    categoryDisplayLabelPlural: string;\n    categoryFilterAllLabel: string;\n    categoryFilterNoneLabel: string;\n    values: HighlightValue[];\n}\n\n/**\n * Describes a highlight value\n */\nexport interface HighlightValue {\n    value: string;\n    displayValue: string;\n    locations: Location[];\n}\n\n/**\n * Describes a single highlight location\n */\nexport interface Location {\n    start: number;\n    enclosingLength: number;\n}\n\n/**\n * Describes highlight data for a set of locations\n */\nexport interface HighlightDataPerLocation {\n    [index: number]: {\n        start: number,\n        length: number,\n        values: string[],\n        displayValue: string,\n        positionInCategories: { [category: string]: number }\n    };\n\n    size(): number;\n}\n\n/**\n * Describes the data returned by [PreviewWebService.get]{@link PreviewWebService#get}\n */\nexport interface PreviewData {\n    record: Record;\n    resultId: string;\n    cacheId: string;\n    highlightsPerCategory: HighlightDataPerCategory;\n    highlightsPerLocation: HighlightDataPerLocation;\n    documentCachedContentUrl: string;\n}\n\n/**\n * A service for calling the preview web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PreviewWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets {@link PreviewData} for a document in the context of a {@link IQuery}\n     *\n     * @param id The document id\n     * @param query The query context\n     * @param auditEvents Audit events to store on the server\n     */\n    public get(id: string, query: IQuery, auditEvents?: AuditEvents): Observable<PreviewData> {\n        return this.httpClient.post<PreviewData>(this.makeUrl(\"preview\"), {\n            app: this.appName,\n            action: \"get\",\n            id,\n            query,\n            browserUrl: this.startConfig.browserUrl,\n            $auditRecord: auditEvents\n        }).pipe(shareReplay(1));\n    }\n    \n    /**\n     * Gets document's preview HTML content\n     * \n     * @param url The document preview URL\n     * @returns \n     */\n    public getHtmlPreview(url: string): Observable<any> {\n        return this.httpClient.get(url, {responseType: \"text\"}).pipe(\n            catchError(err => throwError(err)),\n            distinctUntilChanged(),\n            shareReplay(1)\n        );                \n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {pluck} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Describes a Sinequa princpal\n */\nexport interface Principal {\n    id: string;\n    id2: string;\n    id3: string;\n    id4: string;\n    id5: string;\n    name: string;\n    email: string;\n    description: string;\n    longName: string;\n    userId: string;\n    fullName: string;\n    isAdministrator: boolean;\n    isDelegatedAdmin: boolean;\n    param1: string;\n    param2: string;\n    param3: string;\n    param4: string;\n    param5: string;\n    param6: string;\n    param7: string;\n    param8: string;\n    param9: string;\n    param10: string;\n}\n\nexport interface PrincipalUserInfo {\n    id: string;\n    userId: string;\n    name: string;\n    fullName: string;\n    longName: string;\n    email: string;\n    isUser: string;\n    isGroup: string;\n}\n\nexport interface PrincipalParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    isUser?: boolean;   // true\n    isGroup?: boolean;  // true\n    search?: string;    // search by name, fullname or email\n\n}\n\nexport interface PrincipalUserIdsParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    userIds: string[];\n}\n\n/**\n * A base event from which all events that can be issued by the {@link PrincipalWebService} are derived\n */\nexport interface PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [principal]{@link PrincipalWebService#principal} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface PrincipalChangedEvent extends PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the principal web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PrincipalWebService extends HttpService implements OnDestroy {\n    private _principal: Principal | undefined;\n    private _events = new Subject<PrincipalChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<PrincipalChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link Principal}\n     */\n    get principal(): Principal | undefined {\n        return this._principal;\n    }\n\n    /**\n     * Sets the current {@link Principal} and issues the \"changed\" event\n     */\n    set principal(value: Principal | undefined) {\n        this._principal = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    /**\n     * Gets the list of user info (user or group)\n     *\n     * @param params query params to specify the search\n     * @returns list of user info\n     */\n    list(params?: PrincipalParams): Observable<(PrincipalUserInfo | undefined)[]> {\n        return this.httpClient.get<(PrincipalUserInfo | undefined)[]>(this.makeUrl(\"principal/list\"), {\n            params: this.makeParams({...params})\n        });\n    }\n\n    userId(userId: string): Observable<Partial<PrincipalUserInfo>> {\n        return this.httpClient.get<Partial<PrincipalUserInfo>>(this.makeUrl(`principal/userId/${userId}`));\n    }\n\n    userIds(params?: PrincipalUserIdsParams): Observable<Partial<PrincipalUserInfo[]>> {\n        return this.httpClient.post<Partial<PrincipalUserInfo>>(this.makeUrl(\"principal/userids\"), params).pipe(\n            pluck(\"principals\")\n        );\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials\n     *\n     * @param autoAuthenticate Determines whether the {@link HttpInterceptor} should perform HTTP 401 handling\n     * for this request\n     */\n    get(autoAuthenticate = true): Observable<Principal> {\n        return this.httpClient.get<Principal>(this.makeUrl(\"principal\"), {\n            params: this.makeParams({\n                action: \"get\",\n                noAutoAuthentication: !autoAuthenticate\n            })\n        });\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials and sets the\n     * principal member\n     */\n    load(): Observable<Principal> {\n        const observable = this.get();\n        Utils.subscribe(observable,\n            (response) => {\n                this.principal = response;\n                return response;\n            },\n            (error) => {\n                console.log(\"principalService.get failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport {Utils} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport { ExportOutputFormat, ExportSourceType } from './config/ccapp';\nimport { IQuery } from './query/query';\nimport { Results } from \"./query.web.service\";\nimport { AuditEventType } from './audit.web.service';\n\n/**\n * A service to export the result of a query.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryExportWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    private logErrorToConsole(methodName: string, errorMessage: string): void {\n        console.log(`queryExportService.${methodName} ${errorMessage}.`);\n    }\n\n    private preliminaryCheck(\n        methodName: string,\n        webService: string,\n        format: ExportOutputFormat): Observable<HttpResponse<Blob>> | undefined {\n\n        if (!this.appName) {\n            const errorMessage = 'No app';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!webService) {\n            const errorMessage = 'No web service';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!format || format as ExportOutputFormat === ExportOutputFormat.None) {\n            const errorMessage = 'No output format';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Exports the current result.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query The query to export.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportResult(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportResult';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            type: ExportSourceType[ExportSourceType.Result],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the current selected records.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query\n     * @param selection\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSelection(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        selection: string[],\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSelection';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!selection || selection.length === 0) {\n            const errorMessage = 'No selection';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            selection,\n            type: ExportSourceType[ExportSourceType.Selection],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_Selection_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the result of a saved query.\n     *\n     * @param webService The configuration for the export web service.\n     * @param queryName The query name.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSavedQuery(\n        webService: string,\n        queryName: string,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSavedQuery';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!queryName) {\n            const errorMessage = 'No saved query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            type: ExportSourceType[ExportSourceType.SavedQuery],\n            format: ExportOutputFormat[format],\n            name: queryName,\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_SavedQuery_ExportCSV,\n                detail: {\n                    query: queryName\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    private doExport(body: {}): Observable<HttpResponse<Blob>> {\n        const observable = this.httpClient.post(\n            this.makeUrl('query.export'),\n            body,\n            {\n                observe: 'response',\n                responseType: 'blob'\n            }\n        );\n\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                console.log('queryExportService.export success: ', this.readBlobFileName(response));\n                return response;\n            },\n            (error) => {\n                console.log('queryExportService.export failure - error: ', error);\n            });\n\n        return observable;\n    }\n\n    private readBlobFileName(response: HttpResponse<Blob>): string {\n        const header = response.headers.get('content-disposition');\n        return header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {CCColumn, SpellingCorrectionMode} from \"./config/ccapp\";\n\n/**\n * Describes the results of a call to the query web service\n */\nexport interface Results {\n    /**\n     * A unique identifier for this set of results - typically used for auditing\n     */\n    id: string;\n    /**\n     * The sql queries that were executed on the server to produce these results\n     */\n    sql: string[];\n    /**\n     * The page number of these results\n     */\n    page: number;\n    /**\n     * The page size or number of document per page\n     */\n    pageSize: number;\n    /**\n     * The number of document results for the query.\n     */\n    rowCount: number;\n    /**\n     * The number of document results for the query. If tab search is active and the `CCTabSearch.totalIsSumOfTabTotals` option is set then\n     * the total of counts of all the tabs will be returned. Otherwise this returns the same value as `rowCount`.\n     */\n    totalRowCount: number;\n    /**\n     * Returns the number of documents included in these results, as reported by the engine. It will have the same value as `records.length`.\n     */\n    cursorRowCount: number;\n    /**\n     * The number of attributes in these results\n     */\n    attributeCount: number;\n    /**\n     * The number of columns in these results\n     */\n    columnCount: number;\n    /**\n     * The name of currently selected tab. See {@link CCTab}\n     */\n    tab: string;\n    /**\n     * Information on the tabs for these results. See {@link CCTabSearch}\n     */\n    tabs: Tab[];\n    /**\n     * The name of the currently selected scope. See {@link CCScope}\n     */\n    scope: string;\n    /**\n     * The name of the currently selected sorting choice. See {@link CCSortingChoice}\n     */\n    sort: string;\n    /**\n     * Details of the \"did you mean\" state for these results\n     */\n    didYouMean: DidYouMean;\n    /**\n     * The aggregation results\n     */\n    aggregations: Aggregation[];\n    /**\n     * The attributes for these results\n     */\n    attributes: Attributes;\n    /**\n     * Any query intents associated with these results\n     */\n    queryIntents: QueryIntent[];\n    /**\n     * An analysis of the query associated with these resullts\n     */\n    queryAnalysis: QueryAnalysis;\n    /**\n     * The document records\n     */\n    records: Record[];\n    /**\n     * A hash of the associated results for use with RFM (relevance feedback model) functionality\n     */\n    rfmQueryHash: string;\n    /**\n     * The name of the {@link IQuery} that produced these results\n     */\n    queryName: string;\n    /**\n     * SQL statements executed by the query web service\n     */\n    statements: string[];\n}\n\n/**\n * Describes the results for a particular tab\n */\nexport interface Tab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The tab value\n     */\n    value: string;\n    /**\n     * The number of document records that would be returned if this tab is selected\n     */\n    count: number;\n}\n\n/**\n * Describes a single \"did you mean\" item\n */\nexport interface DidYouMeanItem {\n    /**\n     * The original search term\n     */\n    original: string;\n    /**\n     * The corrected search term\n     */\n    corrected: string;\n}\n\n/**\n * Describes the \"did you mean\" results\n */\nexport interface DidYouMean {\n    /**\n     * The spelling correction mode used for these results\n     */\n    spellingCorrectionMode: SpellingCorrectionMode;\n    /**\n     * The `DidYouMeanItem` corresponding to the main fulltext terms\n     */\n    text: DidYouMeanItem;\n    /**\n     * The `DidYouMeanItem`s corresponding to any refine fulltext term selections\n     */\n    refine: DidYouMeanItem[];\n}\n\n/**\n * Used to inform whether a query is being executed using original or corrected search terms\n */\nexport enum DidYouMeanKind {\n    Original,\n    Corrected\n}\n\n/**\n * Various attributes that are returned with a set of search results\n */\nexport interface  Attributes {\n    queryid: string;\n    searchid: string;\n    processingtime: string;\n    rowfetchtime: string;\n    cachehit: string;\n    matchingrowcount: string;\n    internalqueryanalysis: string;\n    internalquerylog: string;\n}\n\n/**\n * Describes a single query intent item\n */\nexport interface QueryIntent {\n    name: string;\n    component: string;\n    entities: QueryIntentEntity[];\n    words: QueryIntentWord[];\n    actions: QueryIntentAction[];\n    datasets: QueryIntentDatasets;\n}\n\n/**\n * Describes a query intent entity\n */\nexport interface QueryIntentEntity {\n    name: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent word\n */\nexport interface QueryIntentWord {\n    word: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent action\n */\nexport interface QueryIntentAction {\n    type: string;\n    data: string;\n}\n\n/**\n * Describes a set of query intent datasets\n */\nexport interface QueryIntentDatasets {\n    [name: string] : {\n        attributes : [any],\n        rows : [any]\n    };\n}\n\n/**\n * Describes an analysis of a query\n */\nexport interface QueryAnalysis {\n    text: string;\n    initial: boolean;\n    queryLanguage: string | undefined;\n    elements: QueryAnalysisElement[];\n}\n\n/**\n * Describes an element of query analysis\n */\nexport interface QueryAnalysisElement {\n    text: string;\n    entity: string;\n    weight: number;\n    length: number;\n    offset: number;\n    stopword: boolean;\n    root: string;\n    normalization: string;\n    lemmas: {text: string}[];\n    entities: QueryAnalysisElement[];\n    synonyms: QueryAnalysisElement[];\n    reformulations: QueryAnalysisElement[];\n    typos: QueryAnalysisElement[];\n    expression: QueryAnalysisElement[];\n    adjacency: QueryAnalysisElement[];\n    exact: QueryAnalysisElement[];\n}\n\n/**\n * Describes the match location information for a particular partname\n */\nexport interface PartnameMatchLocations {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname match locations\n */\nexport interface MatchLocationsPerPartname {\n    matchlocations: PartnameMatchLocations[];\n}\n\n/**\n * Describes the locations of relevant extracts for a partname\n */\nexport interface PartnameExtracts {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname relevant extracts locations\n */\nexport interface ExtractsPerPartname {\n    highlight: PartnameExtracts[];\n}\n\n/**\n * Describes the term presence for a particular search term\n */\nexport interface TermPresence {\n    term: string;\n    presence: \"found\" | \"missing\";\n}\n\n/**\n * Describes an aggregation item. This serves as a base interface for list aggregation items and tree aggregation nodes\n */\nexport interface AggregationItem {\n    /**\n     * The value of the item\n     */\n    value: FieldValue;\n    /**\n     * The display value of the item, if any\n     */\n    display?: string;\n    /**\n     * The number of documents that contain this item in the current results\n     */\n    count: number;\n    /**\n     * Identifies any operator with their associated results\n     */\n    operatorResults?: {\n        [key in \"min\" | \"max\" | \"sum\" | \"avg\" | \"stddev\" | \"variance\"]: number | Date\n    };\n\n    /**\n     * A client-side field that indicates whether this item is currrently selected\n     */\n    $selected?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently excluded\n     */\n    $excluded?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently filtered\n     */\n    $filtered?: boolean;\n    /**\n     * A client-side field that indicates the column that provided the value for this item.\n     * This can be useful when mixing items from different aggregations.\n     */\n    $column?: CCColumn;\n}\n\n/**\n * Describes any fields particular to a list aggregation item\n */\nexport type ListAggregationItem = AggregationItem;\n\n/**\n * Describes any fields particular to a tree aggregation node\n */\nexport interface TreeAggregationNode extends AggregationItem {\n    /**\n     * Determines whether this node has any children even if the `items` field is not currently populated\n     */\n    hasChildren: boolean;\n    /**\n     * Contains the child nodes of this node\n     */\n    items: TreeAggregationNode[];\n\n    /**\n     * A client-side field that contains the full path of the node\n     */\n    $path?: string;\n    /**\n     * A client-side field that indicates whether a parent node is currently open\n     */\n    $opened?: boolean;\n    /**\n     * The level at which this node is in the Tree aggregation\n     */\n    $level: number;\n}\n\n/**\n * Describes the results of an aggregation. This serves as a base interface for list and tree aggregations\n */\nexport interface Aggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The name of the index column used to provide aggregation items\n     */\n    column: string;\n    /**\n     * Indicates whether the aggregation items are calculated using a distrbution (see App Dependencies in the Sinequa admin interface)\n     */\n    isDistribution?: boolean;\n    /**\n     * Indicates whether the aggregation items should be handled as tree nodes. This can be set to false for a tree aggregation\n     * if the \"Load tree as csv\" option is checked in the Sinequa configuration\n     */\n    isTree?: boolean;\n    /**\n     * Indicates whether the values for the items are fielded search expressions. This is the case for aggregations using a\n     * distribution (see `isDistribution`) and crossed distributions\n     */\n    valuesAreExpressions?: boolean;\n    /**\n     * The aggregation items for this aggregation\n     */\n    items?: AggregationItem[];\n}\n\n/**\n * Describes the fields specific to a list aggregation\n */\nexport type ListAggregation = Aggregation;\n\n/**\n * Describes the fields specific to a tree aggregation\n */\nexport type TreeAggregation = Aggregation;\n\n/**\n * Describes the fields making up an entity in the context of a particular document\n */\nexport interface EntityItem {\n    /**\n     * The value\n     */\n    value: string;\n    /**\n     * The display\n     */\n    display: string;\n    /**\n     * The locations of this item in the document text in the form `row1,col1;row2,col2;...`\n     */\n    locations?: string;\n    /**\n     * The remapped locations of this item in the original document in the form `row1,col1;row2,col2;...`\n     */\n    originalLocations?: string;\n    /**\n     * Following ES-11166, the number of occurrence of this entity in the document can be included\n     */\n    count?: number;\n}\n\n/**\n * Display kinds for RFM\n */\nexport enum RFMDisplay {\n    // Must be in par with C# RFMDisplay enum (RFM.cs)\n    none          = 0,\n\n    positiveRate  = 1,\n    mainlyPosRate = 2,\n    unrate        = 4,\n    mainlyNegRate = 8,\n    negativeRate  = 16,\n\n    all          = 31,\n    positiveOnly = 7,\n    negativeOnly = 28,\n\n    personalAll = 21,\n    personalPosOnly = 5,\n    personalNegOnly = 20,\n}\n\n/**\n * Describes the fields of an RFM action\n */\nexport interface RFMActionDisplay {\n    eventCount: number;\n    average: number;\n    status: RFMDisplay;\n    image: RFMDisplay;\n    imageAction: RFMDisplay;\n    availableActions: RFMDisplay;\n}\n\n/**\n * Describes the RFM data returned with a set of results\n */\nexport interface RFMData {\n    click?: RFMActionDisplay;\n    like?: RFMActionDisplay;\n    important?: RFMActionDisplay;\n}\n\n/**\n * Describes the standard fields in a document result record\n */\nexport interface Record {\n    /**\n     * The zero-based position of this document in the results\n     */\n    rank: number;\n    /**\n     * The unique identifier of this document\n     */\n    id: string;\n    /**\n     * The name of the index that contains this document\n     */\n    databasealias: string;\n    /**\n     * The global relevance of this document in the context of the query\n     */\n    globalrelevance: number;\n    /**\n     * Partnames that contain one or more of the search terms\n     */\n    matchingpartnames: string[];\n    /**\n     * The locations of the search terms in the document\n     */\n    matchlocations: string[];\n    /**\n     * The locations of the search terms in the document grouped by partname\n     */\n    matchlocationsperpartname: MatchLocationsPerPartname;\n    /**\n     * The relevant extracts in the document grouped by partname\n     */\n    extractsperpartname: ExtractsPerPartname;\n    /**\n     * The languages in the document\n     */\n    documentlanguages: string[];\n    /**\n     * The documentweight value of the document\n     */\n    documentweight: string;\n    /**\n     * The modified date and time of the document\n     */\n    modified: string;\n    /**\n     * The time and date when the document was indexed\n     */\n    indexationtime: string;\n    /**\n     * The version of the document\n     */\n    version: string;\n    /**\n     * The title of the document\n     */\n    title: string;\n    /**\n     * The display title of the document. This can contain HTML highlighting of the search terms\n     */\n    displayTitle: string;\n    /**\n     * The size in bytes of the document\n     */\n    size: number;\n    /**\n     * The value of the treepath of the document\n     */\n    treepath: string[];\n    /**\n     * The filename of the document\n     */\n    filename: string;\n    /**\n     * The file extension of the document\n     */\n    fileext: string;\n    /**\n     * The document flags\n     */\n    flags: string[];\n    /**\n     * The collection that produced the document (only one element will exist)\n     */\n    collection: string[];\n    /**\n     * The value of the docformat column\n     */\n    docformat: string;\n    /**\n     * The value of the doctype column\n     */\n    doctype: string;\n    /**\n     * The value of the url1 column\n     */\n    url1: string;\n    /**\n     * The value of the url2 column\n     */\n    url2: string;\n    /**\n     * The relevant extracts from the document. This can contain HTML highlighting of the search terms\n     */\n    relevantExtracts: string;\n    /**\n     * The text of the document\n     */\n    text: string;\n    /**\n     * The document authors\n     */\n    authors: string[];\n    /**\n     * The document access lists\n     */\n    accesslists: DocumentAccessLists;\n    /**\n     * The URL of the document's thumbnail\n     */\n    thumbnailUrl: string;\n    /**\n     * Indicates whether RFM has been enabled for this document\n     */\n    rfmEnabled: boolean;\n    /**\n     * Any RFM data for this document\n     */\n    rfm: RFMData;\n    /**\n     * Information about the search terms and whether they exist in the document or not\n     */\n    termspresence: TermPresence[];\n    /**\n     * A client-side field that indicates whether this document is currrently selected\n     */\n    $selected: boolean;\n    /**\n     * id of the container of this document (for splitted documents, attachments, etc.)\n     */\n    containerid?: string;\n    /**\n     * Page number of this document (for splitted documents). Added by the front-end\n     */\n    $page?: number;\n}\n\n/**\n * Describes the authorized and denied access lists for a document\n */\nexport interface DocumentAccessLists {\n    accessListIndices: number[];\n    authorizedLists: AccessLists;\n    deniedLists: AccessLists;\n}\n\n/**\n * Describes the access lists\n */\nexport interface AccessLists {\n    /**\n     * An array of `AccessListPrincipal` arrays. Each item in the outer array corresponds to column value of the document\n     */\n    [index: number]: AccessListPrincipal[];\n}\n\n/**\n * Describes the fields of a principal item in an access list\n */\nexport interface AccessListPrincipal {\n    /**\n     * The Sinequa domain to which the principal belongs\n     */\n    domain: string;\n    /**\n     * The identifier of the principal\n     */\n    id: string;\n}\n\nexport interface IMulti<T> {\n    results: T[];\n}\n\n/**\n * Describes information to be sent to the server when executing a query for server-side query intent processing\n */\nexport interface QueryIntentData {\n    /**\n     * The current results view\n     */\n    resultsView?: string;\n    /**\n     * The current tab\n     */\n    tab?: string;\n    /**\n     * Query intents\n     */\n    queryIntents?: QueryIntent[];\n    /**\n     * Analysis of the current query\n     */\n    queryAnalysis?: QueryAnalysis;\n}\n\n/**\n * A service to call the query web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        public httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    protected endPoint = \"query\";\n\n    /**\n     * Get the results for the passed query\n     *\n     * @param query The query to execute\n     * @param auditEvents Any audit events to store on the server\n     * @param queryIntentData Any accompanying query intent data\n     */\n    public getResults(query: IQuery, auditEvents?: AuditEvents, queryIntentData?: QueryIntentData): Observable<Results> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n        const observable = this.httpClient.post<Results>(this.makeUrl(this.endPoint), {\n            app: this.appName,\n            query,\n            $auditRecord: auditEvents,\n            queryIntentData\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"queryService.getResults success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"queryService.getResults failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Get the results for a set of queries\n     *\n     * @param queries The queries to execute\n     * @param auditEvents Any audit events to store on the server\n     */\n    public getMultipleResults(queries: IQuery[], auditEvents?: AuditEvents): Observable<IMulti<Results>> {\n        if (!queries || queries.length === 0) {\n            return throwError({ error: \"no queries\" });\n        }\n        const data: {\n            methods: {\n                method: string,\n                app: string,\n                query: IQuery\n            }[],\n            propagateErrors: true,\n            $auditRecord?: AuditEvents\n        } = {\n            methods: [],\n            propagateErrors: true,\n            $auditRecord: auditEvents\n        };\n        for (const query of queries) {\n            data.methods.push({\n                method: this.endPoint,\n                app: this.appName,\n                query\n            });\n        }\n        return this.httpClient.post<IMulti<Results>>(this.makeUrl(\"multi\"), data);\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\n\nexport class RecentQueriesList {\n    constructor(name: string) {\n        this.name = name;\n        this.queries = [];\t// Make sure to have at least a valid \"queries\" member, to simplify tests in GUI code.\n    }\n    name: string;\t\t// App name or user name the queries are related to.\n    queries: IQuery[];\n}\n\nexport class RecentQueries {\n    app?: RecentQueriesList;\n    user?: RecentQueriesList;\n}\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RecentQueriesWebService extends HttpService {\n    recentQueries: RecentQueries;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    load(): Observable<RecentQueries> {\n        const observable = this.httpClient.get<RecentQueries>(this.makeUrl(\"recentqueries\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.recentQueries = response;\n                if (!this.recentQueries)\n                    this.recentQueries = new RecentQueries();\n                if (this.recentQueries) {\n                    if (!this.recentQueries.app)\n                        this.recentQueries.app = new RecentQueriesList(this.appName);\n                    if (!this.recentQueries.user)\n                        this.recentQueries.user = new RecentQueriesList(\"currentuser\");\n                }\n                console.log(\"recentQueriesService.load success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"recentQueriesService.load failure - error: \", error);\n            });\n        return observable;\n    }\n    // No save/patch action for the recent queries: MRU lists are generated server side when the query is executed.\n\n    appRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries;\n        else {\n            return [];\n        }\n    }\n\n    appRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries.length;\n        else\n            return 0;\n    }\n\n    userRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries;\n        else {\n            return [];\n        }\n    }\n\n    userRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries.length;\n        else\n            return 0;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, EMPTY} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {Results, RFMData} from \"./query.web.service\";\n\n/**\n * A service for calling the search.rfm web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RfmWebService extends HttpService {\n    private static readonly endpoint = \"search.rfm\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get RFM data for a set of results\n     *\n     * @param rfm The name of the RFM\n     * @param results The results for which to retrieve RFM data\n     */\n    getRfmData(rfm: string, results: Results): Observable<MapOf<RFMData>> {\n        const ids: string[] = [];\n        for (const record of results.records) {\n            if (!!record.flags && record.flags.indexOf(\"r\") !== -1) {\n                ids.push(record.id);\n            }\n        }\n        if (ids.length === 0) {\n            return EMPTY;\n        }\n        const data = {\n            rfm,\n            queryHash: results.rfmQueryHash,\n            ids\n        };\n        const observable = this.httpClient.post<MapOf<RFMData>>(this.makeUrl(RfmWebService.endpoint), data);\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"rfmService.getRfmData failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from \"./http.service\";\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { Record } from \"./query.web.service\";\n\n/**\n * A service for calling the similardocuments web service\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class SimilarDocumentsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets an array of documents (records) similar to the passed document\n     *\n     * @param sourceDocumentId The id of the document for which to retrieve similar documents\n     * @param queryName The name of the query\n     */\n    public get(sourceDocumentId: string, queryName: string): Observable<Record[]> {\n      return this.httpClient.post<{data: Record[]}>(this.makeUrl(\"similardocuments\"),\n        {\n          app: this.appName,\n          sourceDocumentId,\n          query: {\n            name: queryName\n          }\n        }).pipe(map((response) => response.data));\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport { IntlService } from \"@sinequa/core/intl\";\nimport {Utils} from \"@sinequa/core/base\";\n\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { IQuery } from './query/query';\n\n/**\n * Describes a single sponsored link\n */\nexport interface LinkResult {\n    id: string;\n    title: string;\n    url: string;\n    icon: string;\n    thumbnail: string;\n    tooltip: string;\n    summary: string;\n    rank: number;\n    relevance: number;\n}\n\n/**\n * Describes a set of sponsored links\n */\nexport interface LinksResults {\n    sql: string[];\n    links: LinkResult[];\n}\n\n/**\n * A service for calling the query.links web service.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SponsoredLinksWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Queries the server for sponsored links.\n     *\n     * @param query The query information.\n     * @param webService The web service configuration.\n     */\n    getLinks(query: IQuery, webService: string): Observable<LinksResults> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n\n        const url = this.makeUrl(\"query.links\");\n        const observable = this.httpClient.post<LinksResults>(url, {\n            app: this.appName,\n            webservice: webService,\n            query,\n            locale: this.intlService.currentLocale.name\n        });\n\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"SponsoredLinksService.getLinks success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"SponsoredLinksService.getLinks failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Suggestion} from \"./suggest/suggestion\";\nimport {IQuery} from \"./query/query\";\n\n/**\n * A service for calling the suggestfield web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestFieldWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields and in the context of the passed query\n     *\n     * @param text The text to match\n     * @param fields The fields for which to return suggestions\n     * @param query The query context\n     */\n    get(text: string, fields: string | string[], query?: IQuery): Observable<Suggestion[]> {\n        if (!fields) {\n            return of([]);\n        }\n        else {\n            if (!Utils.isArray(fields)) {\n                fields = [fields];\n            }\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestfield\"), {\n                app: this.appName,\n                text: text,\n                fields: fields,\n                query: query\n            }).pipe(map((value) => {\n                value.suggests.forEach(value => value.display = Utils.toSqlValue(value.display)); // because dates get automatically converted by the interceptor\n                return value.suggests;\n            }));\n            return observable;\n        }\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Suggestion} from \"./suggest/suggestion\";\n\n/**\n * A service for calling the suggestquery web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestQueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields using the passed suggestquery web service\n     *\n     * @param suggestQuery The name of the suggestquery web service to use\n     * @param text The text to match\n     * @param query The name of the current query\n     * @param fields The fields for which to return suggestions\n     */\n    get(suggestQuery: string, text: string, query: string, fields?: string | string[]): Observable<Suggestion[]> {\n        if (!suggestQuery) {\n            return of([]);\n        }\n        else {\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestquery\"), {\n                app: this.appName,\n                suggestQuery: suggestQuery,\n                text: text,\n                query: query,\n                kinds: fields\n            });\n            return observable.pipe(map(value => value.suggests));\n        }\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes a rating configuration object\n */\nexport interface CCRating {\n    ratingsColumn: string;\n    averageColumn: string;\n\n    updateDocWeight: boolean;\n\n    ratingsDistribution: string[];\n}\n\n/**\n * Describes a user rating response object\n */\nexport interface UserRatingResponse {\n    rating: number;\n    averagerating: number;\n}\n\n/**\n * A service for calling the ratings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserRatingsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets the current user rating for a document\n     *\n     * @param docid The id of a document for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRating(docid: string, config: CCRating): Observable<UserRatingResponse> {\n        return this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"get\",\n            docid,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution\n        }).pipe(tap(\n            r => {},\n            error => console.log(\"ratingsService.getRating failure - error: \", error)\n        ));\n    }\n\n    /**\n     * Sets the current user rating for a document\n     *\n     * @param record The document for which to set the rating\n     * @param rating A rating value\n     * @param config The ratings configuration\n     */\n    setRating(record: Record, rating: number, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"set\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            rating,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Set,\n                        detail: {\n                            \"doc-id\": record.id,\n                            ratingnum: rating,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.setRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Delete a rating for a document\n     *\n     * @param record The document for which to delete the rating\n     * @param config The ratings configuration\n     */\n    deleteRating(record: Record, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"delete\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Delete,\n                        detail: {\n                            \"doc-id\": record.id,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.deleteRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Gets user rating information from the given record\n     *\n     * @param record The record for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRecordRating(record: Record, config: CCRating): UserRatingResponse {\n        return {\n            rating: this.parseUserRating(record[config.ratingsColumn], config),\n            averagerating: this.parseAverageRating(record[config.averageColumn], config)\n        };\n    }\n\n    private parseAverageRating(columnEntries: string[], config: CCRating): number {\n        if (config.ratingsDistribution && columnEntries) {\n            return config.ratingsDistribution.indexOf(columnEntries[0]);\n        }\n        else {\n            return -1;\n        }\n    }\n\n    private parseUserRating(ratingValues: string[], config: CCRating): number {\n        if(ratingValues) {\n            if (config.ratingsDistribution) {\n                return config.ratingsDistribution.indexOf(ratingValues[0]);\n            }\n        }\n        return -1;\n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport jstz from \"jstz\";\n\n/**\n * Minimal built-in user settings. Can be extended in the context of\n * complex applications to store user data, preferences, objects, etc.\n */\nexport interface UserSettings {\n    language?: string;\n    skipCount?: number;\n    email?: string;\n    [key: string]: any;\n}\n\n/**\n * A base event from which all events that can be issued by the {@link UserSettingsWebService} are derived\n */\nexport interface UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [userSettings]{@link UserSettingsWebService#userSettings} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface UserSettingsChangedEvent extends UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the usersettings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserSettingsWebService extends HttpService implements OnDestroy {\n    private _userSettings: UserSettings | undefined;\n    /**\n     * The timezone for the user\n     */\n    timezone: string;\n    /**\n     * A reviver function that, if set, will be called on the user settings when they are loaded\n     */\n    reviver: (us: UserSettings) => void;\n    private _events = new Subject<UserSettingsChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n        this.timezone = jstz.determine().name(); // until momentjs gets this\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<UserSettingsChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link UserSettings}\n     */\n    get userSettings(): UserSettings | undefined {\n        return this._userSettings;\n    }\n\n    /**\n     * Sets the current {@link UserSettings} and issues the \"changed\" event\n     */\n    set userSettings(value: UserSettings | undefined) {\n        this._userSettings = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    //TODO remove\n    /**\n     * @deprecated use \"userSettings\" get property to retrieve the user settings\n     * @returns User settings object or undefined\n     */\n    public getUserSettings(): UserSettings | undefined{\n        return this.userSettings;\n    }\n\n    /**\n     * Load the user settings for the currently logged in user.\n     * Sets the userSettings member and issues the \"changed\" event\n     */\n    public load(): Observable<UserSettings> {\n        const observable = this.httpClient.get<UserSettings>(this.makeUrl(\"usersettings\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.userSettings = response;\n                if (this.userSettings) {\n                    if (this.reviver) {\n                        this.reviver(this.userSettings);\n                    }\n                }\n            },\n            (error) => {\n                console.log(\"userSettingsService.load failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Saves the current user settings on the server\n     *\n     * @param auditEvents\n     */\n    public save(auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"save\",\n            userSettings: this.userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.save failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Patches the user settings on the server using a partial user settings object. The partial\n     * object is used to update the user settings on the server according to [RFC7396]{@link https://tools.ietf.org/html/rfc7396}\n     *\n     * @param userSettings The partial user settings\n     * @param auditEvents Any associated audit events to store on the server\n     */\n    public patch(userSettings: UserSettings, auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"patch\",\n            userSettings: userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.patch failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Resets User Settings (emits a change event and audit events).\n     */\n    public reset() {\n        // Save current state\n        const currentState = this.userSettings;\n        // Reset User settings (and emit an event!)\n        this.userSettings = {};\n        const observable = this.save({\n            type: 'UserSettings_Reset'\n        });\n        observable.subscribe({\n            next: () => {},\n            error: () => this.userSettings = currentState // Restore previous state\n        })\n        return observable;\n    }\n\n    /**\n     * Reads a user setting.\n     *\n     * @param paths The path to the setting in the JSON.\n     */\n    public readUserSetting(paths: string[]): any {\n        let json: any = this.userSettings;\n        if (json) {\n            for (const path of paths) {\n                json = json[path];\n                if (!json) {\n                    // Value does not exist yet\n                    return undefined;\n                }\n            }\n        }\n        return json;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {SqHttpClient} from \"./http-client\";\r\nimport {HttpService} from \"./http.service\";\r\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\r\nimport {IQuery} from \"./query/query\";\r\n\r\nexport interface QueryIntentResponse {\r\n    query: string;\r\n    intents: QueryIntentMatch[];\r\n}\r\n\r\nexport interface QueryIntentMatch {\r\n    /** name of the intent */\r\n    name: string;\r\n    /** global entities that match */\r\n    globalEntities?: QueryIntentEntity2[];\r\n    /** rule that match if exact match rule */\r\n    matchRule: string | null;\r\n    /** ml score or 1 if rule */\r\n    score: number;\r\n    /** ml confidence score or 1 if rule */\r\n    confidence: number;\r\n}\r\n\r\nexport interface QueryIntentEntity2 {\r\n    /** global entity name, eg. \"person\" */\r\n    name: string;\r\n    /** global entity type (entities are detected by classical NLP, slots are detected by ML) */\r\n    type: \"entity\" | \"slot\";\r\n    /** global entity resource */\r\n    resource: string;\r\n    /** text that match the global entity, eg. \"Bill gates\" */\r\n    value: string;\r\n    /** offset in the query */\r\n    offset: number;\r\n    /** length in the query */\r\n    length: number;\r\n    /** basic form if type=entity, eg. \"BILL GATES\"*/\r\n    basic: string | null;\r\n    /** normalization form if type=entity, eg. \"William H Gates\"*/\r\n    normalization: string | null;\r\n    /** score for the extraction if type=slot */\r\n    score?: number;\r\n}\r\n\r\n/**\r\n * A service for calling the queryintent web service\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class QueryIntentWebService extends HttpService {\r\n    private readonly endpoint = \"queryintent\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        private httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    getQueryIntent(query: IQuery): Observable<QueryIntentResponse> {\r\n        const data = {\r\n            query,\r\n            app: this.appName\r\n        };\r\n        return this.httpClient.post<QueryIntentResponse>(\r\n            this.makeUrl(this.endpoint), data);\r\n    }\r\n}\r\n","const WEB_SERVICES_MODULE_PROVIDERS = [];\n\nexport {WEB_SERVICES_MODULE_PROVIDERS};\n","import {HttpClientModule} from \"@angular/common/http\";\n\nimport {NgModule, ModuleWithProviders, APP_INITIALIZER} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\n// Intl is required by various web services\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\n// StartConfig\nimport {StartConfigWebService, START_CONFIG, StartConfig} from \"./start-config.web.service\";\n\nimport {WEB_SERVICES_MODULE_PROVIDERS} from \"./module.providers\";\n\n// Used to ensure that the StartConfigWebService is instantiated\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<void> {\n    const init = () => Promise.resolve();\n    return init;\n}\n\n/**\n * This module implements client services for the Sinequa web service APIs\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BaseModule,\n        IntlModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        // Ensure that the StartConfigWebService is instantiated so StartConfig is initialized\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n        ...WEB_SERVICES_MODULE_PROVIDERS\n    ]\n})\nexport class WebServicesModule {\n    /**\n     * Configures the module with a start configuration\n     *\n     * @param startConfig The start configuration object\n     *\n     * @returns The configured module\n     */\n    static forRoot(startConfig: StartConfig) : ModuleWithProviders<WebServicesModule> {\n        return {\n            ngModule: WebServicesModule,\n            providers: [\n                // Provide START_CONFIG\n                {provide: START_CONFIG, useValue: startConfig},\n            ]\n        };\n    }\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}