{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/core/login/token.service.ts","../../../projects/core/login/jwt.service.ts","../../../projects/core/login/authentication.service.ts","../../../projects/core/login/login.service.ts","../../../projects/core/login/component-with-login.component.ts","../../../projects/core/login/authentication-oauth.service.ts","../../../projects/core/login/authentication-popup.service.ts","../../../projects/core/login/login.component.ts","../../../projects/core/login/module.providers.ts","../../../projects/core/login/login.module.ts","../../../projects/core/login/login.interceptor.ts","../../projects/core/login/messages/en.ts","../../projects/core/login/messages/index.ts","../../projects/core/login/messages/fr.ts","../../projects/core/login/messages/de.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TokenService","startConfig","httpClient","_this","_super","getCsrfToken","notify","get","makeUrl","params","makeParams","action","suppressErrors","noUserOverride","noAutoAuthentication","noNotify","pipe","map","csrfToken","deleteWebTokenCookie","HttpService","i0","ɵɵinject","START_CONFIG","i1","SqHttpClient","factory","ɵfac","providedIn","JWTService","getToken","credentials","post","user","userName","password","tokenInCookie","AuthenticationService","tokenService","auditService","jWTService","authService","init","defineProperty","_userOverride","_userOverrideActive","domain","_processedCredentials","newProcessedCredentialsStr","Utils","toJson","_processedCredentialsStr","storage","setItem","undefined","removeItem","autoOAuthProvider","autoSAMLProvider","deactivateUserOverride","loadCredentials","sinequaCredentials","getItem","fromJson","saveCredentials","processedCredentials","authenticationStorage","window","localStorage","sessionStorage","addEventListener","event","storageArea","key","newValue","addAuthentication","config","doAuthentication","authentication","headers","header","set","param","updateAuthentication","response","data","setCsrfToken","refreshAuthentication","sinequa-csrf-token","getAuthenticateHeader","regex","authenticationHeaders","ic","authenticationHeader","matches","exec","prefix","slice","authenticate","wwwAuthenticate","console","Promise","resolve","authenticateHeaders","split","toPromise","then","kind","provider","logout","notifyLogout","subscribe","_","addUserOverride","userOverride","userOverrideActive","authenticateWithProvider","timer","flatMap","observable1","share","initiateAutoAuthentication","usePopupForLogin","autoLoginActive","originalUrl","location","href","replace","redirectUrl","autoAuthenticate","catchError","throwError","of","AuditWebService","i2","AuthService","MODAL_LOGIN","InjectionToken","LoginService","loginModal","router","appService","principalService","userSettingsService","modalService","notificationsService","authenticationService","_events","BehaviorSubject","type","beforeUnloadEventListener","ngOnDestroy","complete","removeEventListener","principal","setComplete","app","userSettings","userOverrideFailed","hideNotifications","clear","overrideUser","delay","login","switchPrincipal","isAdministrator","appNeeded","appName","hash","URLSearchParams","queryParams_1","forEach","v","k","overrideDomain","url","makeURL","navigate","pathname","queryParams","observable","success","observables","name","loadUserSettings","load","makeObservables","forkJoin","result","log","getAutomaticProvider","providers","keys","find","automatic","getCredentials","acceptCurrent","reject","firstCaller","automaticProvider","automaticLoginPromise","catch","reason","SqError","SqErrorCode","autoLoginError","message","loginModalPromise","open","model","processCredentialsPromise","checkPrincipalPromise","id","principalSwitched","info","is","processedCredentialsError","loginCancelled","i1$1","Router","i2$1","AppService","PrincipalWebService","UserSettingsWebService","i4","ModalService","i5","NotificationsService","ComponentWithLogin","loginService","changeDetectorRef","onLoginComplete","ngOnInit","loginComplete","loginSubscription","events","markForCheck","unsubscribe","ngAfterViewInit","ɵɵdirectiveInject","ChangeDetectorRef","selectors","decls","vars","template","rf","ctx","encapsulation","AuthenticationOauthService","sharedService","popupService","configService","userData","options","sqInitState","addUrl","apiPath","makeHttpParams","loginInPopup","ret","state","OauthService","i1$2","HttpClient","SharedService","PopupService","ConfigService","AuthenticationPopupService","cordova","startsWith","i0.ɵɵelementContainerStart","i0.ɵɵelement","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","Login","modalRef","formBuilder","userNameControl","FormControl","Validators","required","passwordControl","form","group","formChanges","valueChanges","showError","control","invalid","dirty","submitted","ok","valid","close","cancel","MODAL_MODEL","ModalRef","i2$2","FormBuilder","consts","i0.ɵɵtemplate","i0.ɵɵlistener","i0.ɵɵproperty","i0.ɵɵpropertyInterpolate","LOGIN_MODULE_PROVIDERS","storageType","AuthConfig","LoginModule","forRoot","ngModule","provide","useValue","CONFIG_OPTIONS","useClass","useExisting","imports","CommonModule","FormsModule","ReactiveFormsModule","Ng2UiAuthModule","ModalModule","OverlayModule","A11yModule","BaseModule","AppUtilsModule","WebServicesModule","IntlModule","ValidationModule","NotificationModule","declarations","HTTP_REQUEST_INITIALIZERS","LoginInterceptor","requestInitializers","processRequestInitializers","request","_b","_c","requestInitializer","isJsonable","obj","isObject","isArray","isArrayBuffer","isBlob","isString","HttpParams","shouldIntercept","notifyError","HttpErrorResponse","JSON","parse","exception","errorMessage","errorCodeText","errorCode","status","statusText","intercept","has","handle","isTrue","hadCredentials","haveCredentials","delete","body","enter","_request","clone","withCredentials","caught","leave","handle401Error","HttpResponse","err","req","from","switchMap","enLogin","merge","modal","title","singleSignOn","signInWith","enIntl","enModal","enValidation","frLogin","frIntl","frModal","frValidation","deLogin","deIntl","deModal","deValidation"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n/**\n * A service to manage JWT and CSRF tokens. The methods of this service\n * can be called before the authentication process has completed\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class TokenService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Retrieve the CSRF token corresponding to the current JWT cookie\n     * which should accompany the request. This method is called by\n     * [AuthenticationService.autoAuthenticate]{@link AuthenticationService#autoAuthenticate}\n     *\n     * @param notify `true` if any errors should be notified using the {@NotificationService}\n     */\n    getCsrfToken(notify = false): Observable<string> {\n        return this.httpClient.get<{csrfToken: string}>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"getCsrfToken\",\n                suppressErrors: !notify,\n                noUserOverride: true,\n                noAutoAuthentication: true,\n                noNotify: !notify\n            })\n        }).pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n\n    /**\n     * Delete the current JWT cookie.\n     * This method is called by [AuthenticationService.logout]{@link AuthenticationService#logout}\n     */\n    deleteWebTokenCookie(): Observable<void> {\n        return this.httpClient.get<void>(this.makeUrl(\"challenge\"), {\n            params: this.makeParams({\n                action: \"deleteWebTokenCookie\",\n                noUserOverride: true,\n                noAutoAuthentication: true\n            })\n        });\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {START_CONFIG, StartConfig, SqHttpClient, HttpService} from \"@sinequa/core/web-services\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Credentials} from \"./authentication.service\";\n\n/**\n * A service to retrieve a JWT (JSON Web Token) from the Sinequa server.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class JWTService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get a JWT from the Sinequa server using the passed credentials. The JWT is received in a cookie\n     * and the associated CSRF token in the response payload.\n     *\n     * @param credentials The credentials to be used for the JWT. These are sent in clear text\n     */\n    getToken(credentials: Credentials): Observable<string> {\n        const observable = this.httpClient.post<{csrfToken: string}>(this.makeUrl(\"webToken\"),\n            {\n                action: \"get\",\n                user: credentials.userName,\n                password: credentials.password,\n                tokenInCookie: true,\n            },\n            {\n                params: this.makeParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            });\n        return observable.pipe(\n            map((value) => {\n                return value.csrfToken;\n            }));\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpHeaders, HttpParams, HttpResponse, HttpErrorResponse} from \"@angular/common/http\";\nimport {Observable, timer, of, throwError} from \"rxjs\";\nimport {share, flatMap, map, catchError} from \"rxjs/operators\";\nimport {AuthService} from \"ng2-ui-auth\";\nimport {HttpService, START_CONFIG, StartConfig, AuditWebService} from \"@sinequa/core/web-services\";\nimport {Utils, IRef, MapOf} from \"@sinequa/core/base\";\nimport {SqHttpClient} from \"@sinequa/core/web-services\";\nimport {TokenService} from \"./token.service\";\nimport {JWTService} from \"./jwt.service\";\n\ninterface Authentication {\n    csrfToken: string;\n    headers?: MapOf<string>;    // set in http headers\n    params?: MapOf<string>;     // added to query string\n}\n\n/**\n * Describes the credentials that a user would enter manually to authenticate\n */\nexport interface Credentials {\n    userName?: string;\n    password?: string;\n}\n\nconst LEGACY_PROCESSED_CREDENTIALS_KIND = 0;\n\n/**\n * Describes the object created after successful authentication. The form of this object\n * is designed to maintain compatibility with previous SBA libraries\n */\nexport interface ProcessedCredentials {\n    /**\n     * An unused \"kind\" value - always set to 0\n     */\n    kind: number;\n    /**\n     * The user name of the authenticated user\n     */\n    userName?: string;\n    /**\n     * Additional data containing the associated CSRF token that is sent with\n     * authenticated web service requests and the provider for informational\n     * purposes only. The provider will be `Sinequa` for form-based authentication\n     * and the name of the auto-login provider in the Sinequa configuration for\n     * OAuth and SAML authentication\n     */\n    data: {\n        csrfToken: string, // the web token itself is stored in the sinequa-web-token cookie\n        provider: string\n    };\n}\n\n/**\n * Describes the object used by an administrator to authenticate as another user\n */\nexport interface UserOverride {\n    /**\n     * The user name of the user to authenticate as\n     */\n    userName: string;\n    /**\n     * The Sinequa domain name containing the user\n     */\n    domain: string;\n}\n\n/**\n * Describes a JWT object\n */\nexport interface JsonWebToken {\n    header: {\n        typ: string,\n        alg: string\n    };\n    payload: {\n        iss: string,\n        iat: string,\n        exp: string,\n        sub: string,\n        hash: string\n    };\n    signature: string;\n}\n\n/**\n * A service to authenticate a user with a Sinequa server. Authentication can be automatic (OAuth/SAML), if configured in the\n * Sinequa administration, or manual where the user name and password are entered in a modal dialog box and transmitted in\n * clear text. There is also support for the ng2-ui-auth library where the authentication process occurs in a browser popup window.\n * Successful authentication results in a JWT stored in cookie along with a CSRF token which is stored in storage so it can\n * be picked up in other browser tabs.\n *\n * The service also holds information on the status of the \"override user\" administrator function\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationService extends HttpService {\n    private authentication: Authentication | undefined;\n    private storage: Storage;\n    /**\n     * A flag indicating whether an attempt to \"override user\" has failed. This is normally\n     * only set by the {@link HttpInterceptor} and tested and reset in {@link LoginService}\n     */\n    userOverrideFailed: boolean;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private tokenService: TokenService,\n        private auditService: AuditWebService,\n        private jWTService: JWTService,\n        private authService: AuthService) {\n        super(startConfig);\n        this.init();\n    }\n\n    private _userOverride: UserOverride | undefined;\n    /**\n     * Get the currrent user override, if any\n     */\n    get userOverride(): UserOverride | undefined {\n        return this._userOverride;\n    }\n\n    /**\n     * Set/unset the user override. The {@link #userOverrideActive} flag\n     * is set accordingly\n     */\n    set userOverride(value: UserOverride | undefined) {\n        this._userOverride = value;\n        if (this._userOverride) {\n            this._userOverrideActive = !!this._userOverride.userName && !!this._userOverride.domain;\n        }\n        else {\n            this._userOverrideActive = false;\n        }\n    }\n\n    private _userOverrideActive: boolean;\n\n    /**\n     * A flag indicating whether the current user override is active\n     */\n    get userOverrideActive(): boolean {\n        return this._userOverrideActive;\n    }\n\n    private _processedCredentials: ProcessedCredentials | undefined;\n    private _processedCredentialsStr: string | undefined;\n\n    /**\n     * Get the current processed credentials\n     */\n    get processedCredentials(): ProcessedCredentials | undefined {\n        return this._processedCredentials;\n    }\n\n    /**\n     * Set the current processed credentials. A stringified version\n     * is stored in either local or session storage\n     */\n    set processedCredentials(value: ProcessedCredentials | undefined) {\n        this._processedCredentials = value;\n        if (value) {\n            const newProcessedCredentialsStr = Utils.toJson(this._processedCredentials);\n            if (this._processedCredentialsStr !== newProcessedCredentialsStr) {\n                this._processedCredentialsStr = newProcessedCredentialsStr;\n                this.storage.setItem(\"sinequa-credentials\", this._processedCredentialsStr);\n            }\n        }\n        else {\n            if (this._processedCredentialsStr) {\n                this._processedCredentialsStr = undefined;\n                this.storage.removeItem(\"sinequa-credentials\");\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if an OAuth or SAML auto provider is configured\n     */\n    get autoLoginActive(): boolean {\n        return !!this.startConfig.autoOAuthProvider || !!this.startConfig.autoSAMLProvider;\n    }\n\n    /**\n     * Deactivate the current user override\n     */\n    deactivateUserOverride() {\n        this._userOverrideActive = false;\n    }\n\n    private loadCredentials() {\n        const sinequaCredentials = this.storage.getItem(\"sinequa-credentials\");\n        this._processedCredentialsStr = sinequaCredentials ? sinequaCredentials : undefined;\n        this._processedCredentials = this._processedCredentialsStr ? Utils.fromJson(this._processedCredentialsStr) : null;\n    }\n\n    private saveCredentials(value: ProcessedCredentials) {\n        this.processedCredentials = value;\n    }\n\n    private init() {\n        if (this.startConfig.authenticationStorage === \"local\") {\n            this.storage = window.localStorage;\n        }\n        else {\n            this.storage = window.sessionStorage;\n        }\n        this.loadCredentials();\n        window.addEventListener('storage', (event: StorageEvent) => {\n            if (event.storageArea === this.storage) {\n                if (!event.key) { // clear\n                    this.processedCredentials = undefined;\n                }\n                else if (event.key === \"sinequa-credentials\") {\n                    if (event.newValue !== this._processedCredentialsStr) {\n                        this.loadCredentials();\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Return `true` if `processedCredentials` exists\n     */\n    get haveCredentials(): boolean {\n        return !!this.processedCredentials;\n    }\n\n    /**\n     * Add the current authentication information to the passed `HttpHeaders` and `HttpParams`.\n     * Currently, this adds the `sinequa-csrf-token` value to the HTTP headers. Called from\n     * {@link HttpInterceptor}\n     *\n     * @param config HttpHeaders and HttpParams to be updated\n     *\n     * @returns new configuration\n     */\n    addAuthentication(config: {headers: HttpHeaders, params: HttpParams}): {headers: HttpHeaders, params: HttpParams} {\n        this.doAuthentication();\n        if (this.authentication) {\n            if (this.authentication.headers) {\n                for (const header in this.authentication.headers) {\n                    if (this.authentication.headers.hasOwnProperty(header)) {\n                        config.headers = config.headers.set(header, this.authentication.headers[header]);\n                    }\n                }\n            }\n            if (this.authentication.params) {\n                for (const param in this.authentication.params) {\n                    if (this.authentication.params.hasOwnProperty(param)) {\n                        config.params = config.params.set(param, this.authentication.params[param]);\n                    }\n                }\n            }\n        }\n        return config;\n    }\n\n    /**\n     * Update the current authentication information with information in the passed `response`.\n     * This processes the `sinequa-jwt-refresh` header which will contain an updated CSRF token\n     * to correspond to the new JWT cookie. Called from {@link HttpInterceptor}\n     *\n     * @param response An `HttpResponse`\n     */\n    updateAuthentication(response: HttpResponse<any>) {\n        const csrfToken = response.headers.get(\"sinequa-jwt-refresh\");\n        if (csrfToken) {\n            if (this.processedCredentials) {\n                if (this.processedCredentials.data.csrfToken !== csrfToken) {\n                    this.processedCredentials.data.csrfToken = csrfToken;\n                    this.saveCredentials(this.processedCredentials);\n                }\n            }\n            else {\n                this.setCsrfToken(csrfToken);\n            }\n        }\n    }\n\n    private refreshAuthentication() {\n        if (this.processedCredentials) {\n            if (!this.authentication) {\n                this.authentication = {\n                    csrfToken: this.processedCredentials.data.csrfToken\n                };\n            }\n            else {\n                this.authentication.csrfToken = this.processedCredentials.data.csrfToken;\n            }\n        }\n        else {\n            this.authentication = undefined;\n        }\n    }\n\n    private doAuthentication() {\n        this.refreshAuthentication();\n        if (this.authentication && this.authentication.csrfToken) {\n            this.authentication.headers = {\n                \"sinequa-csrf-token\": this.authentication.csrfToken\n            };\n        }\n    }\n\n    private getAuthenticateHeader(regex: RegExp, authenticationHeaders: string[], header: IRef<string>): boolean {\n        if (authenticationHeaders) {\n            for (let i = 0, ic = authenticationHeaders.length; i < ic; i++) {\n                const authenticationHeader = authenticationHeaders[i];\n                const matches = regex.exec(authenticationHeader);\n                if (matches && matches.length > 0) {\n                    const prefix = matches[0];\n                    header.value = authenticationHeader.slice(prefix.length);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Authenticate with the Sinequa server using the passed credentials. The credentials are sent\n     * in clear text. Prior to the authentication the passed `response` is checked for a\n     * `WWW-Authenticate: Bearer` header.\n     *\n     * @param credentials The credentials to authenticate with\n     * @param response The error response the reception of which initiated the call to this method\n     */\n    authenticate(\n        credentials: Credentials,\n        response: HttpErrorResponse): Promise<ProcessedCredentials | undefined> {\n        const wwwAuthenticate = response.headers.get(\"WWW-Authenticate\");\n        if (!wwwAuthenticate) {\n            console.error(\"Missing WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        const authenticateHeaders = wwwAuthenticate.split(\", \");\n        const header: IRef<string> = {value: \"\"};\n        if (!this.getAuthenticateHeader(/^Bearer ?/, authenticateHeaders, header)) {\n            console.error(\"Unexpected WWW-Authenticate header\");\n            return Promise.resolve(undefined);\n        }\n        return this.jWTService.getToken(credentials).toPromise()\n            .then((value) => {\n                return {\n                    kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                    userName: credentials.userName,\n                    data: {\n                        csrfToken: value,\n                        provider: \"Sinequa\"\n                    }\n                };\n            });\n    }\n\n    /**\n     * Remove all current authentication data. The JWT cookie\n     * is removed\n     */\n    logout() {\n        this.auditService.notifyLogout().subscribe(\n            _ => {\n                this.tokenService.deleteWebTokenCookie().subscribe()\n                this.authentication = undefined;\n                this.processedCredentials = undefined;\n            }\n        );\n    }\n\n    /**\n     * Add the current user override information to the passed headers.\n     *\n     * @param config An object containing the `HttpHeaders` to update\n     */\n    addUserOverride(config: {headers: HttpHeaders}): HttpHeaders {\n        if (this.userOverride && this.userOverrideActive) {\n            config.headers = config.headers.set(\"sinequa-override-user\", this.userOverride.userName);\n            config.headers = config.headers.set(\"sinequa-override-domain\", this.userOverride.domain);\n        }\n\n        return config.headers;\n    }\n\n    /**\n     * Initiate authentication using the ng2-ui-auth library. The authentication process will be performed\n     * in a browser popup window\n     *\n     * @param provider The name of the provider to use. This is the name configured in the Sinequa administration\n     * console\n     */\n    authenticateWithProvider(provider: string): Observable<any> {\n        // AuthService.authenticate opens a popup. On some platforms (Firefox) this is asynchronous\n        // so we add a delay (timer(0)) so the caller can create a promise from the returned observable\n        // without yielding\n        const observable = timer(0).pipe(flatMap((value) => {\n            const observable1 = this.authService.authenticate(provider, true).pipe(share());\n            Utils.subscribe(observable1,\n                (response) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    if (response) {\n                        this.processedCredentials = {\n                            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n                            data: {\n                                csrfToken: response.csrfToken,\n                                provider\n                            }\n                        };\n                    }\n                });\n            return observable1;\n        }));\n        return observable;\n    }\n\n    private setCsrfToken(csrfToken: string, provider = \"Sinequa\"): boolean {\n        if (!csrfToken) {\n            return false;\n        }\n        this.processedCredentials = {\n            kind: LEGACY_PROCESSED_CREDENTIALS_KIND,\n            data: {\n                csrfToken,\n                provider\n            }\n        };\n        return true;\n    }\n\n    private initiateAutoAuthentication(): boolean {\n        if (!this.startConfig.usePopupForLogin && this.autoLoginActive) {\n            let observable: Observable<{redirectUrl: string}>;\n            if (this.startConfig.autoOAuthProvider) {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.oauth\"),\n                    {\n                        action: \"getcode\",\n                        provider: this.startConfig.autoOAuthProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            else {\n                observable = this.httpClient.post<{redirectUrl: string}>(this.makeUrl(\"security.saml\"),\n                    {\n                        action: \"getresponse\",\n                        provider: this.startConfig.autoSAMLProvider,\n                        tokenInCookie: true,\n                        originalUrl: window.location.href,\n                    },\n                    {\n                        params: this.makeParams({\n                            noUserOverride: true,\n                            noAutoAuthentication: true\n                        })\n                    });\n            }\n            observable.subscribe(\n                (response) => {\n                    window.location.replace(response.redirectUrl);\n                }\n            );\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Initiate the auto-authentication process if an automatic OAuth or SAML provider is configured.\n     * The {@LoginService} calls this method at startup. First, an attempt is made to retrieve a CSRF token.\n     * If that works, then the token is set and authentication is complete. Otherwise, the initial OAuth or SAML\n     * call is made to the Sinequa server. The `redirectUrl` in the response to this call is then used to redirect\n     * the browser to continue the normal OAuth/SAML autentication flow. A successful authentiction will culminate\n     * in the SBA being loaded a second time, this method being called again and the attempt to retrieve a CSRF\n     * token succeeding because a valid JWT cookie will now be present.\n     *\n     * A CSRF token is always requested to allow automatic login if a valid web token cookie has previously been\n     * written via, for example, a login to the admin console.\n     *\n     * @returns An Observable of a boolean value which if `true` indicates that auto-authentication has been initiated.\n     */\n    autoAuthenticate(): Observable<boolean> {\n        return this.tokenService.getCsrfToken().pipe(\n            map((csrfToken) => {\n                // Token can be empty as getCsrfToken suppresses application errors (no cookie or cookie invalid)\n                // (We do this to avoid having errors in the console for normal situations.)\n                if (csrfToken) {\n                    this.setCsrfToken(csrfToken);\n                    return false;\n                }\n                else {\n                    this.initiateAutoAuthentication();\n                    return true;\n                }\n            }),\n            catchError((error) => {\n                // We should rarely have an error now as getCsrfToken\n                // suppresses the application-level ones\n                if (this.initiateAutoAuthentication()) {\n                    return throwError(error);\n                }\n                // Swallow the error and continue with non-auto login process\n                return of(false);\n            }));\n    }\n}\n","import {Injectable, Inject, OnDestroy, Type, InjectionToken, Optional} from \"@angular/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {BehaviorSubject, Observable, forkJoin, of, throwError} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig, CCApp, PrincipalWebService, Principal,\n    UserSettingsWebService, UserSettings} from \"@sinequa/core/web-services\";\nimport {ModalService, ModalResult} from \"@sinequa/core/modal\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {AuthenticationService, ProcessedCredentials, Credentials, UserOverride} from \"./authentication.service\";\n\n/**\n * Describes the different session events that are emitted by the {@link LoginService}\n * * `session-start`: emitted after successful login\n * * `session-end`: emitted after logout and also when the {@link LoginService} is destroyed\n * * `session-changed`: emitted whenever the login state changes - login, logout and user override\n */\nexport interface SessionEvent {\n    type: \"session-start\" | \"session-end\" | \"session-changed\";\n}\n\n\n/**\n * An `InjectionToken` to set the component to use for the login modal dialog which is displayed\n * by the {@link LoginService} when performing a manual login. This makes the service independent\n * of any particular UI framework. If manual login is to be used a component must be configured by\n * providing this token.\n */\nexport const MODAL_LOGIN = new InjectionToken<Type<any>>('MODAL_LOGIN');\n\n/**\n * Describes the data retrieved during the login process.\n */\nexport interface LoginData {\n    /**\n     * The application configuration.\n     */\n    app: CCApp;\n    /**\n     * The principal corresponding to the logged in user.\n     */\n    principal: Principal;\n    /**\n     * The user settings for the logged in user.\n     */\n    userSettings: UserSettings;\n}\n\n/**\n * A high-level service to manage user login\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginService implements OnDestroy {\n    /**\n     * `true` if a user is currently logged in\n     */\n    complete: boolean;\n    // getCredentials handling (concurrent calls)\n    protected loginModalPromise: Promise<ModalResult> | undefined;\n    protected processCredentialsPromise: Promise<ProcessedCredentials | undefined> | undefined;\n    protected checkPrincipalPromise: Promise<Principal> | undefined;\n    protected automaticLoginPromise: Promise<any> | undefined;\n    protected _events = new BehaviorSubject<SessionEvent>({type: \"session-changed\"});\n\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        @Inject(MODAL_LOGIN) protected loginModal: Type<any>,\n        @Optional() protected router: Router,\n        protected appService: AppService,\n        protected principalService: PrincipalWebService,\n        protected userSettingsService: UserSettingsWebService,\n        protected modalService: ModalService,\n        protected notificationsService: NotificationsService,\n        protected authenticationService: AuthenticationService) {\n        // NB unload doesn't fire reliably so we listen for beforeunload\n        window.addEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    protected beforeUnloadEventListener = (e: Event) => {\n        this._events.next({type: \"session-end\"});\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n        window.removeEventListener(\"beforeunload\", this.beforeUnloadEventListener);\n    }\n\n    /**\n     * Get an `Observable` stream of {@link SessionEvent} events emitted by the service\n     */\n    get events(): Observable<SessionEvent> {\n        return this._events;\n    }\n\n    /**\n     * Get the currently logged in {@link Principal}, if any. Note that a principal can exist\n     * without the login being complete. For example, in the situation where access is denied to\n     * the selected app.\n     */\n    get principal(): Principal | undefined {\n        return this.principalService.principal;\n    }\n\n    private setComplete() {\n        const complete = this.complete;\n        this.complete = !!this.appService.app && !!this.principalService.principal && !!this.userSettingsService.userSettings;\n        if (this.complete) {\n            if (!this.authenticationService.userOverrideFailed) {\n                this.notificationsService.hideNotifications();\n            }\n            this.authenticationService.userOverrideFailed = false;\n        }\n        if (!!complete !== !!this.complete) {\n            this._events.next({type: \"session-changed\"});\n        }\n    }\n\n    /**\n     * Perform a logout of the currently logged in user. [AppService.app]{@link AppService#app},\n     * [PrincipalWebService.principal]{@link PrincipalWebService#prinicpal} and\n     * [UserSettingsWebService.userSettings]{@link UserSettingsWebService#userSettings} are reset.\n     * The `session-end` event is emitted\n     */\n    logout() {\n        this._events.next({type: \"session-end\"});\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.authenticationService.deactivateUserOverride();\n        this.authenticationService.logout();\n        this.setComplete();\n    }\n\n    /**\n     * Override the current user to the user specified in `userOverride`. Only an administrator\n     * is permitted to do this. They can revert to the normal login by calling this method with\n     * `undefined`\n     *\n     * @param userOverride The user override\n     */\n    overrideUser(userOverride: UserOverride | undefined) {\n        this.authenticationService.userOverride = userOverride;\n        this.appService.clear();\n        this.principalService.principal = undefined;\n        this.userSettingsService.userSettings = undefined;\n        this.setComplete();\n        Utils.delay().then(() => this.login());\n    }\n\n    private switchPrincipal(principal: Principal) {\n        if (!principal.isAdministrator) {\n            this.authenticationService.deactivateUserOverride();\n        }\n        this.principalService.principal = principal;\n        this.userSettingsService.userSettings = undefined;\n        Utils.delay().then(() => this.login());\n    }\n\n    /**\n     * Initiate the user login process. The method attempts to retrieve\n     * the [application configuration]{@link CCApp}, the\n     * [logged in user]{@link Principal} and the [user settings]{@link UserSettings}.\n     * If a user is not currently authenticated then authentication is performed using\n     * the {@link AuthenticationService} - OAuth/SAML if configured on the Sinequa Server\n     * or manual using a login modal dialog provided using the {@link MODAL_LOGIN} injection\n     * token.\n     */\n    login(): Observable<LoginData> {\n        const appName = this.appService.appName;\n        if (!appName) {\n            return throwError({error: \"App not specified\"});\n        }\n        let appNeeded: boolean;\n        if (this.router) {\n            const hash = window.location.hash.replace(\"#\", \"\");\n            const href = hash.split(\"?\")[0];\n            const params = new URLSearchParams(hash.split(\"?\")[1]);\n            const queryParams = {}\n            params.forEach((v, k) => queryParams[k] = v);\n\n            // Pick up any user override from the query string\n            const overrideUser = queryParams[\"overrideUser\"];\n            const overrideDomain = queryParams[\"overrideDomain\"];\n            if (overrideUser) {\n                this.authenticationService.userOverride = {\n                    userName: overrideUser,\n                    domain: overrideDomain\n                };\n                delete queryParams[\"overrideUser\"];\n                delete queryParams[\"overrideDomain\"];\n                const url = Utils.makeURL(href);\n                this.router.navigate([url.pathname], {queryParams});\n            }\n        }\n\n        interface ObservableLoginData {\n            app: Observable<CCApp> | undefined;\n            principal: Observable<Principal> | undefined;\n            userSettings: Observable<UserSettings> | undefined;\n        }\n\n        const makeObservables = (): ObservableLoginData => {\n            const observables: ObservableLoginData = {\n                app: undefined,\n                principal: undefined,\n                userSettings: undefined\n            };\n            if (!this.appService.app || (appName && this.appService.app.name !== appName)) {\n                appNeeded = true;\n                observables.app = this.appService.init();\n            }\n            else {\n                observables.app = of(this.appService.app);\n            }\n            let loadUserSettings = false;\n            if (!this.principalService.principal) {\n                loadUserSettings = true;\n                observables.principal = this.principalService.load();\n            }\n            else {\n                observables.principal = of(this.principalService.principal);\n            }\n            if (!this.userSettingsService.userSettings || loadUserSettings) {\n                observables.userSettings = this.userSettingsService.load();\n            }\n            else {\n                observables.userSettings = of(this.userSettingsService.userSettings);\n            }\n            return observables;\n        };\n\n        const observable = this.authenticationService.autoAuthenticate()\n            .pipe(flatMap((success) => {\n                const observables = makeObservables();\n                return forkJoin<ObservableLoginData, keyof ObservableLoginData>(observables);\n            }));\n        Utils.subscribe(observable,\n            (result) => {\n                console.log(\"loginService.login ok: \", result);\n                this.setComplete();\n                if (appNeeded) {\n                    this._events.next({type: \"session-start\"});\n                }\n            },\n            (error) => {\n                console.log(\"loginService.login failed: \", error);\n                // proceed to logout to clean process\n                this.logout();\n                return throwError(error);\n            });\n        return observable;\n    }\n\n    private getAutomaticProvider(): string | undefined {\n        if (this.startConfig.providers) {\n            return Object.keys(this.startConfig.providers).find((value) => {\n                const provider = this.startConfig.providers && this.startConfig.providers[value];\n                return !!provider && (provider as any).automatic;\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Called by the {@link HttpInterceptor} on reception of an `HTTP 401` response.\n     * This will either initiate an auto login process (OAuth/SAML) if configured on\n     * the Sinequa server or display the login modal dialog to request user credentials\n     *\n     * @param response An `HTTP 401` response\n     * @param acceptCurrent If `true` and the `AuthenticationService` currently has\n     * processed credentials then use them instead of starting a new login\n     * @returns A promise that is resolved when credentials have been obtained. Note that\n     * when auto-authentication is configured the promise will be rejected and the browser\n     * redirected to the OAuth/SAML redirect url\n     */\n    getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        if (acceptCurrent && this.authenticationService.processedCredentials) {\n            return Promise.resolve(); // initiate retry\n        }\n        if (!this.startConfig.usePopupForLogin && this.authenticationService.autoLoginActive) {\n            return this.authenticationService.autoAuthenticate().toPromise()\n                .then(result => {\n                    if (result/*auto-authentication initiated*/) {\n                        return Promise.reject(\"performing auto login\");\n                    }\n                    else {\n                        return undefined;\n                    }\n                });\n        }\n        let firstCaller = false;\n        const automaticProvider = this.getAutomaticProvider();\n        if (automaticProvider) {\n            if (!this.automaticLoginPromise) {\n                this.automaticLoginPromise = this.authenticationService.authenticateWithProvider(automaticProvider).toPromise();\n                firstCaller = true;\n            }\n            return this.automaticLoginPromise\n                .then((result) => {\n                    // NB response should be the return value from JOAuth/JSaml json methods\n                    // It can be undefined eg if the popup fails to open\n                    this.automaticLoginPromise = undefined;\n                    return result ? Promise.resolve() : Promise.reject(\"popup failed?\");\n                })\n                .catch((reason) => {\n                    this.automaticLoginPromise = undefined;\n                    const error = new SqError(SqErrorCode.autoLoginError);\n                    if (firstCaller) {\n                        this.notificationsService.error(error.message);\n                    }\n                    throw error;\n                });\n        }\n        const credentials: Credentials = {};\n        if (this.authenticationService.processedCredentials) {\n            credentials.userName = this.authenticationService.processedCredentials.userName;\n        }\n        if (!this.loginModalPromise) {\n            this.loginModalPromise = this.modalService.open(this.loginModal, {model: credentials});\n            firstCaller = true;\n        }\n        return this.loginModalPromise\n            .then((result) => {\n                this.loginModalPromise = undefined;\n                // result === ModalResult.Yes is a special return from Login when using AuthenticationService.authenticateWithProvider\n                if (result === ModalResult.OK || result === ModalResult.Yes) {\n                    if (!this.processCredentialsPromise) {\n                        this.processCredentialsPromise = result === ModalResult.Yes ?\n                            Promise.resolve<ProcessedCredentials | undefined>(undefined) :\n                            this.authenticationService.authenticate(credentials, response);\n                    }\n                    return this.processCredentialsPromise\n                        .then((value) => {\n                            this.processCredentialsPromise = undefined;\n                            if (result !== ModalResult.Yes) {\n                                this.authenticationService.processedCredentials = value;\n                            }\n                            if (!this.checkPrincipalPromise) {\n                                this.checkPrincipalPromise = this.principalService.get(false).toPromise();\n                            }\n                            return this.checkPrincipalPromise\n                                .then((principal) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    if (!this.principalService.principal || this.principalService.principal.id === principal.id) {\n                                        // no current principal OR prinicpal unchanged - initiate retry\n                                        return Promise.resolve();\n                                    }\n                                    const error = new SqError(SqErrorCode.principalSwitched);\n                                    if (firstCaller) {\n                                        this.switchPrincipal(principal);\n                                        this.notificationsService.info(error.message);\n                                    }\n                                    throw error;\n                                })\n                                .catch((reason) => {\n                                    this.checkPrincipalPromise = undefined;\n                                    throw reason;\n                                });\n                        })\n                        .catch((reason) => {\n                            this.processCredentialsPromise = undefined;\n                            if (SqError.is(reason, SqErrorCode.principalSwitched)) {\n                                throw reason;\n                            }\n                            throw new SqError(SqErrorCode.processedCredentialsError);\n                        });\n                }\n                else {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                    const error = new SqError(SqErrorCode.loginCancelled);\n                    if (firstCaller) {\n                        this.notificationsService.info(error.message);\n                    }\n                    throw error;\n                }\n            })\n            .catch((reason) => {\n                if (!SqError.is(reason, SqErrorCode.principalSwitched)) {\n                    this.authenticationService.processedCredentials = undefined; // clean slate\n                }\n                this.loginModalPromise = undefined;\n                throw reason;\n            });\n    }\n}\n","import {Component, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {LoginService} from \"./login.service\";\n\n/**\n * A utility base class to assist main components in the handling of the login state of the\n * the application. It initiates the login process and sets `loginComplete` accordingly\n * whenever the login state changes\n */\n@Component({\n    template: ''\n})\nexport class ComponentWithLogin implements OnInit, OnDestroy, AfterViewInit {\n    protected loginSubscription: Subscription;\n    /**\n     * `true` if the application is currently logged in successfully\n     */\n    loginComplete: boolean;\n\n    constructor(\n        protected loginService: LoginService,\n        protected changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    /**\n     * A method called whenever the `session-changed` event is received. This can be\n     * overridden by the subclassing component.\n     */\n    onLoginComplete() {\n    }\n\n    /**\n     * Subscribes to the [LoginService.events]{@link LoginService#events} and sets\n     * the `loginComplete` member whenever the `session-changed` event is received\n     */\n    ngOnInit() {\n        this.loginComplete = this.loginService.complete;\n        this.loginSubscription = this.loginService.events.subscribe(event => {\n            if (event.type === \"session-changed\") {\n                this.loginComplete = this.loginService.complete;\n                this.onLoginComplete();\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.loginSubscription.unsubscribe();\n    }\n\n    /**\n     * Initiates the login process by calling [LoginService.login]{@link LoginService#login}\n     */\n    ngAfterViewInit() {\n        this.loginService.login();\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {OauthService, SharedService, PopupService, ConfigService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's state handling to retrieve a state from the Sinequa server\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationOauthService extends OauthService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient,\n        protected sharedService: SharedService,\n        protected popupService: PopupService,\n        protected configService: ConfigService) {\n        super(httpClient, sharedService, configService, popupService);\n    }\n\n    authenticate<T extends object | string>(name: string, userData: any): Observable<T> {\n        const options = this.configService.options.providers[name];\n        if (options.sqInitState) {\n            return this.httpClient.get<{state: string}>(Utils.addUrl(this.startConfig.apiPath!, \"oauth\"), {\n                params: Utils.makeHttpParams({\n                    action: \"initstate\",\n                    provider: options.name,\n                    tokenInCookie: true,\n                    loginInPopup: true,\n                    noUserOverride: true,\n                    noAutoAuthentication: true\n                })\n            }).pipe<T>(flatMap<{state: string}, Observable<T>>((ret) => {\n                options.state = ret.state;\n                return super.authenticate(name, userData);\n            }));\n        }\n        return super.authenticate(name, userData);\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {flatMap} from \"rxjs/operators\";\nimport {PopupService} from \"ng2-ui-auth\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Override ng2-ui-auth's popup handling as it doesn't work with SAML + IE11 because\n * of a double redirection.\n * The initial request is to Sinequa which redirects to the authentication provider.\n * On successful authentication, the authentication provider redirects back\n * to Sinequa to perform the login.\n * In IE the initial redirection causes the popup window to be reported as \"closed\"\n * which breaks the process.\n * So, override ng2-ui-auth's PopupService and do the inital request to get the\n * redirect url outside of the popup\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthenticationPopupService extends PopupService {\n    constructor(\n        @Inject(START_CONFIG) protected startConfig: StartConfig,\n        protected httpClient: HttpClient) {\n        super();\n    }\n\n    open(url: string, options: any/*IOauth2Options | IOauth1Options*/, cordova: boolean | undefined): Observable<Window> {\n        if (Utils.startsWith(url, this.startConfig.apiPath!)) {\n            return this.httpClient.get<{redirectUrl: string}>(url, {\n                params: Utils.makeHttpParams({\n                    noUserOverride: true,\n                    noAutoAuthentication: true,\n                    tokenInCookie: true,\n                    loginInPopup: true\n                })\n            }).pipe(flatMap((ret) => {\n                return super.open(ret.redirectUrl, options, cordova);\n            }));\n        }\n        return super.open(url, options, cordova);\n    }\n}\n","import {Component, OnInit, OnDestroy, Inject} from \"@angular/core\";\nimport {FormBuilder, FormGroup, FormControl, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {MODAL_MODEL, ModalResult, ModalRef} from \"@sinequa/core/modal\";\nimport {Credentials} from \"./authentication.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A basic login component that request a user name and password. It is designed to work with\n * [LoginService.getCredentials]{@link LoginService#getCredentials} and can be set using the\n * {@link MODAL_LOGIN} injection token\n */\n@Component({\n    selector: \"sq-core-login\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\"\n            cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{'msg#modal.login.title' | sqMessage}}</h3>\n            <input placeholder=\"{{'msg#modal.login.userName' | sqMessage}}\" formControlName=\"userName\">\n            <ng-container *ngIf=\"showError(userNameControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"userName\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <div style=\"margin-bottom: 8px;\"></div>\n            <input type=\"password\" placeholder=\"{{'msg#modal.login.password' | sqMessage}}\" formControlName=\"password\">\n            <ng-container *ngIf=\"showError(passwordControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"password\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Login implements OnInit, OnDestroy {\n    userNameControl: FormControl;\n    passwordControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) protected model: Credentials,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.userNameControl = new FormControl(this.model.userName, Validators.required);\n        this.passwordControl = new FormControl(this.model.password, Validators.required);\n        this.form = this.formBuilder.group({\n            userName: this.userNameControl,\n            password: this.passwordControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.userName = this.userNameControl.value;\n                this.model.password = this.passwordControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n}\n","const LOGIN_MODULE_PROVIDERS = [];\n\nexport {LOGIN_MODULE_PROVIDERS};\n","import {NgModule, Injectable, Inject, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {Ng2UiAuthModule, /*IPartialConfigOptions,*/ CONFIG_OPTIONS, IProviders, StorageType, OauthService, PopupService} from \"ng2-ui-auth\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {AuthenticationOauthService} from \"./authentication-oauth.service\";\nimport {AuthenticationPopupService} from \"./authentication-popup.service\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {WebServicesModule, START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ModalModule} from \"@sinequa/core/modal\";\nimport {NotificationModule} from \"@sinequa/core/notification\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\n\n// Login\nimport {MODAL_LOGIN} from \"./login.service\";\nimport {Login} from \"./login.component\";\n\nimport {LOGIN_MODULE_PROVIDERS} from \"./module.providers\";\n\nexport interface IPartialConfigOptions {} // until export restored to ng2-ui-auth@9\n\n/**\n * Configuration for the ng2-ui-auth library\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthConfig implements IPartialConfigOptions {\n    storageType: StorageType;\n    providers: IProviders;\n    constructor(@Inject(START_CONFIG) startConfig: StartConfig) {\n        this.storageType = \"memory\" as StorageType;\n        this.providers = startConfig.providers || {};\n    }\n}\n\n/**\n * This module provides support for user authentication in the {@link AuthenticationService}. This authentication can be\n * automatic (OAuth/SAML), if configured in the Sinequa administration, or manual where the user name and password are\n * entered in a modal dialog box and transmitted in clear text. There is also support for the ng2-ui-auth library where the\n * authentication process occurs in a browser popup window. Authentication is instigated by the handling of HTTP 401 errors\n * in an `HttpInterceptor` so all web service calls requiring authentication are automatically protected. This module will\n * not be used for authentication when the web server is configured for Windows authentication.\n *\n * A higher level {@link LoginService} groups the successful retrieval of the current `application configuration` ({@link AppService}),\n * `principal` ({@link PrincipalWebService}), and `user settings` ({@link UserSettingsWebService}) all of which require the user\n * to be authenticated. This can be used as a \"gatekeeper\" to protect access to the main, often routed, component(s).\n *\n * The {@link LoginInterceptor} in this module must be registered using `HTTP_INTERCEPTORS` in your app module.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        Ng2UiAuthModule.forRoot(undefined, false),\n        ModalModule.forRoot(),\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        AppUtilsModule,\n        WebServicesModule,  // Required for start-up config (START_CONFIG token)\n        IntlModule,\n        ValidationModule,\n        NotificationModule\n    ],\n    declarations: [\n        Login, // Default Login components\n    ],\n    exports: [\n    ],\n    providers: [\n        // Auth module dependencies\n        {provide: CONFIG_OPTIONS, useClass: AuthConfig},\n        {provide: OauthService, useExisting: AuthenticationOauthService},\n        {provide: PopupService, useExisting: AuthenticationPopupService},\n\n        ...LOGIN_MODULE_PROVIDERS\n    ]\n})\nexport class LoginModule {\n    static forRoot(loginModal: Type<any> = Login): ModuleWithProviders<LoginModule> {\n        return {\n            ngModule: LoginModule,\n            providers: [\n                // Login\n                {provide: MODAL_LOGIN, useValue: loginModal},\n            ]\n        };\n    }\n}\n","import {Injectable, Inject, InjectionToken, Optional} from \"@angular/core\";\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpEvent, HttpErrorResponse, HttpParams, HttpResponse\n} from \"@angular/common/http\";\nimport {from, Observable, throwError} from \"rxjs\";\nimport {catchError, map, switchMap} from \"rxjs/operators\";\nimport {Utils, SqError, SqErrorCode} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"@sinequa/core/web-services\";\nimport {NotificationsService} from \"@sinequa/core/notification\";\nimport {LoginService} from \"./login.service\";\nimport {AuthenticationService} from \"./authentication.service\";\n\nexport type HttpRequestInitializer = (request: HttpRequest<any>) => boolean;\nexport const HTTP_REQUEST_INITIALIZERS = new InjectionToken<HttpRequestInitializer[]>(\"HTTP_REQUEST_INITIALIZERS\");\n\ntype Options = {noAutoAuthentication: boolean, noUserOverride: boolean, hadCredentials: boolean, userOverrideActive: boolean};\n\n/**\n * An `HttpInterceptor` to handle `HTTP 401 unauthorized` error responses by calling\n * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles\n * the `sinequa-jwt-refresh` header set when auto refreshing of JWT is configured in\n * the Sinequa administration console.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LoginInterceptor implements HttpInterceptor {\n\n    constructor(\n        @Inject(START_CONFIG) private startConfig: StartConfig,\n        @Optional() @Inject(HTTP_REQUEST_INITIALIZERS) private requestInitializers: HttpRequestInitializer[],\n        private notificationsService: NotificationsService,\n        private loginService: LoginService,\n        private authService: AuthenticationService) {}\n\n    private processRequestInitializers(request: HttpRequest<any>) {\n        if (this.requestInitializers) {\n            for (const requestInitializer of this.requestInitializers) {\n                if (!requestInitializer(request)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    private isJsonable(obj): boolean {\n        return (Utils.isObject(obj) || Utils.isArray(obj)) && !Utils.isArrayBuffer(obj) && !Utils.isBlob(obj) &&\n            !Utils.isString(obj) && !(obj instanceof HttpParams);\n    }\n\n    private shouldIntercept(url: string): boolean {\n        return Utils.startsWith(url, this.startConfig.apiPath!);\n    }\n\n    private notifyError(error: any) {\n        let message;\n        const title = \"msg#error.serverError\";\n        if (error instanceof HttpErrorResponse) {\n            const response = error;\n            try {\n                let data = response.error;\n                if (Utils.isString(data)) {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (exception) {\n                    }\n                }\n                if (data && data.errorMessage) {\n                    message = data.errorMessage;\n                    if (data.errorCodeText) {\n                        message = `${message} (${data.errorCodeText})`;\n                    }\n                    else if (data.errorCode) {\n                        message = `${message} (${data.errorCode})`;\n                    }\n                }\n            }\n            catch (exception) {\n            }\n            if (!message) {\n                if (response.status === 200) {\n                    message = \"msg#error.responseLoadFailure\";\n                }\n                else if (response.statusText) {\n                    message = `${response.statusText} (${response.status})`;\n                }\n                else {\n                    message = `HTTP error: ${response.status}`;\n                }\n            }\n        }\n        else if (SqError.is(error)) {\n            message = error.message;\n        }\n        else {\n            message = (error + \"\") || \"msg#error.unknownError\";\n        }\n        this.notificationsService.error(message, undefined, title);\n    }\n\n    private getCredentials(response: HttpErrorResponse, acceptCurrent: boolean): Promise<void> {\n        return this.loginService.getCredentials(response, acceptCurrent)\n            .catch((error) => {\n                if (SqError.is(error, SqErrorCode.processedCredentialsError)) {\n                    return this.getCredentials(response, acceptCurrent);\n                }\n                throw error;\n            });\n    }\n\n    /**\n     * Handles `HTTP 401 unauthorized errors responses by calling\n     * [LoginService.getCredentials]{@link LoginService#getCredentials}. It also handles auto\n     * refreshing of JWT by processing the `sinequa-jwt-refresh` header. The JWT cookie itself\n     * is updated by a `Set-Cookie` header in the response. There are a number of flags that\n     * can be set in the request parameters which will be removed before the request is actually\n     * sent:\n     * * `noAutoAuthentication` - set to bypass the `HTTP 401` handling\n     * * `noUserOverride` - set to not add the current user override to the request\n     * * `noNotify` - set to not notify errors using the {@link NotificationService}\n     *\n     * @param request The intercepted request\n     * @param next The next interceptor in the chain\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!this.shouldIntercept(request.url) || request.params.has(\"noIntercept\")) {\n            return next.handle(request);\n        }\n\n        let config = {headers: request.headers, params: request.params};\n\n        const options: Options = {\n            noAutoAuthentication: Utils.isTrue(config.params.get(\"noAutoAuthentication\")) || false,\n            noUserOverride: Utils.isTrue(config.params.get(\"noUserOverride\")) || false,\n            hadCredentials: this.authService.haveCredentials,\n            userOverrideActive: false\n        }\n\n        const noNotify = Utils.isTrue(config.params.get(\"noNotify\")) || false;\n\n        config.params = config.params.delete(\"noAutoAuthentication\");\n        config.params = config.params.delete(\"noUserOverride\");\n        config.params = config.params.delete(\"noNotify\");\n\n        config = this.authService.addAuthentication(config);\n\n        if (this.authService.userOverrideActive && !options.noUserOverride) {\n            options.userOverrideActive = true;\n            config.headers = this.authService.addUserOverride(config);\n        }\n\n        config.headers = config.headers.set(\"sinequa-force-camel-case\", \"true\");\n\n        if (this.isJsonable(request.body)) {\n            this.processRequestInitializers(request);\n        }\n\n        this.notificationsService.enter(\"network\");\n        \n        const _request = request.clone({\n            headers: config.headers,\n            params: config.params,\n            body: request.body,\n            withCredentials: true\n        });\n\n        return next.handle(_request).pipe(\n            catchError((error, caught) => {\n                this.notificationsService.leave(\"network\");\n                if (error instanceof HttpErrorResponse) {\n                    switch (error.status) {\n                        case 401: {\n                            return this.handle401Error(error, _request, next, options, caught);\n                        }\n                    }\n                }\n                if (!noNotify) {\n                    this.notifyError(error);\n                }\n                return throwError(error);\n            }),\n            map((event) => {\n                if (event instanceof HttpResponse) {\n                    this.notificationsService.leave(\"network\");\n                    this.authService.updateAuthentication(event);\n                }\n                return event;\n            })\n        );\n    }\n\n    private handle401Error(err: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler, options: Options, caught: Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\n        if (!options.noAutoAuthentication) {\n            if (options.userOverrideActive) {\n                if (this.authService.userOverrideActive) {\n                    this.authService.deactivateUserOverride();\n                    this.authService.userOverrideFailed = true;\n                    this.notificationsService.error(\"msg#error.userOverrideFailure\");\n                }\n                return throwError(err);\n            }\n\n            return from(this.getCredentials(err, !options.hadCredentials))\n                .pipe(\n                    switchMap(value => {\n                        const {headers} = this.authService.addAuthentication(req);\n                        return next.handle(req.clone({headers}));\n                    }),\n                    catchError(err => \n                        // in case of an Http error, 'caught' must be returned to be catched by the interceptor\n                        err instanceof HttpErrorResponse ? caught : throwError(err)\n                    ));\n        }\n\n        return throwError(err);\n    }\n}\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Login\",\n            \"userName\": \"User name\",\n            \"password\": \"Password\",\n            \"singleSignOn\": \"Single sign-on\",\n            \"signInWith\": \"Sign in with...\"\n        }\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport {enModal, frModal, deModal} from \"@sinequa/core/modal\";\nimport {enValidation, frValidation, deValidation} from \"@sinequa/core/validation\";\nimport _enLogin from \"./en\";\nimport _frLogin from \"./fr\";\nimport _deLogin from \"./de\";\n\nconst enLogin = Utils.merge({}, _enLogin, enIntl, enModal, enValidation);\nconst frLogin = Utils.merge({}, _frLogin, frIntl, frModal, frValidation);\nconst deLogin = Utils.merge({}, _deLogin, deIntl, deModal, deValidation);\n\nexport { enLogin, frLogin, deLogin };\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Connexion\",\n            \"userName\": \"Identifiant\",\n            \"password\": \"Mot de passe\",\n            \"singleSignOn\": \"Authentification unique\",\n            \"signInWith\": \"S'identifier avec ...\"\n        }\n    },\n};\n","export default {\n    \"modal\": {\n        \"login\": {\n            \"title\": \"Anmeldung\",\n            \"userName\": \"Benutzername\",\n            \"password\": \"Passwort\",\n            \"singleSignOn\": \"Einmalanmeldung (Single sign-on)\",\n            \"signInWith\": \"Anmelden mit...\"\n        }\n    }\n};\n"]}