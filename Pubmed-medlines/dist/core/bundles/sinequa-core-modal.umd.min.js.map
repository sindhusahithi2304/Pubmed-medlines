{"version":3,"sources":["../../../projects/core/modal/modal-ref.ts","../../../projects/core/modal/modal.service.ts","../../../projects/core/modal/confirm.component.ts","../../../projects/core/modal/prompt.component.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/core/modal/module.providers.ts","../../../projects/core/modal/modal.module.ts","../../projects/core/modal/messages/en.ts","../../projects/core/modal/messages/index.ts","../../projects/core/modal/messages/fr.ts","../../projects/core/modal/messages/de.ts"],"names":["ModalRef","overlayRef","_this","this","_checkClose","Subject","_beforeClosed","_afterClosed","submitListener","event","submitted","preventDefault","prototype","checkClose","asObservable","beforeClosed","afterClosed","close","result","Utils","delay","then","checkCloseEvent","next","cancelled","of","subscribe","complete","removeSubmitListener","detachBackdrop","dispose","componentInstance","undefined","disableSubmit","formElement","overlayElement","querySelector","addEventListener","removeEventListener","DEFAULT_CONFIG","hasBackdrop","backdropClass","panelClass","model","closeOnBackdropClick","MODAL_MODEL","InjectionToken","ModalButton","options","extend","visible","anchor","getText","text","click","closer","validation","valid","action","MODAL_CONFIRM","MODAL_PROMPT","ModalService","injector","overlay","confirmModal","promptModal","openRef","component","config","modalConfig","Object","assign","fullscreen","width","height","isString","push","createOverlay","modalRef","overlayComponent","attachDialogContainer","hostElement","classList","add","backdropClick","target","keydownEvents","keyCode","Keys","esc","open","toPromise","overlayConfig","getOverlayConfig","create","Injector","providers","provide","useValue","parent","containerPortal","ComponentPortal","attach","instance","positionStrategy","position","global","centerHorizontally","centerVertically","OverlayConfig","scrollStrategy","scrollStrategies","block","confirm","prompt","oK","message","messageParams","title","confirmType","buttons","primary","oKCancel","primaryButton","yesNo","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵpropertyInterpolate","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵproperty","i0","ɵɵinject","i1","Overlay","factory","ɵfac","providedIn","Confirm","defineProperty","buttonClick","button","i0.ɵɵelement","ɵɵdirectiveInject","selectors","decls","vars","consts","template","rf","ctx","Prompt","formBuilder","ngOnInit","inputControl","FormControl","output","validators","Validators","required","form","group","input","formChanges","valueChanges","value","ngOnDestroy","unsubscribe","showError","control","invalid","dirty","ok","cancel","i2$1","FormBuilder","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","done","error","__spread","arguments","length","concat","MODAL_MODULE_PROVIDERS","ModalModule","forRoot","ngModule","imports","CommonModule","FormsModule","ReactiveFormsModule","OverlayModule","A11yModule","BaseModule","IntlModule","ValidationModule","declarations","enModal","merge","modal","yes","no","abort","retry","ignore","enIntl","frModal","frIntl","deModal","deIntl"],"mappings":"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","sourcesContent":["import {Type} from \"@angular/core\";\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subject, Observable, of} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {ModalResult} from \"./modal.service\";\n\n/**\n * Describes the event raised by an {@link IModalRef} instance before a modal dialog is closed.\n */\nexport interface CheckCloseEvent {\n    /**\n     * The result passed to the [IModalRef.close]{@link IModalRef#close} method.\n     */\n    result: ModalResult;\n    /**\n     * A flag that can be set by the event receiver to indicate that the closing of the modal dialog\n     * should be cancelled.\n     */\n    cancelled?: Observable<boolean>;\n}\n\n/**\n * Describes the object returned by the [ModalService.openRef]{@link ModalService.openRef} method\n * to maintain a reference to the opened modal.\n */\nexport interface IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent>;\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult>;\n    /**\n     * A stream that emits after the referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult>;\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result: ModalResult);\n}\n\n/**\n * An implementation of the {@link IModalRef} interface.\n */\nexport class ModalRef implements IModalRef {\n    /**\n     * The component instance of the referenced modal component.\n     */\n    componentInstance: Type<any> | undefined;\n    /**\n     * A flag indicating whether the referenced modal has been submitted.\n     */\n    submitted: boolean;\n    private _checkClose = new Subject<CheckCloseEvent>();\n    private _beforeClosed = new Subject<ModalResult>();\n    private _afterClosed = new Subject<ModalResult>();\n    private formElement: HTMLFormElement | undefined;\n\n    constructor(private overlayRef: OverlayRef) {\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed to allow an observer\n     * to cancel the closing.\n     */\n    checkClose(): Observable<CheckCloseEvent> {\n        return this._checkClose.asObservable();\n    }\n\n    /**\n     * A stream that emits before the referenced modal is closed.\n     */\n    beforeClosed(): Observable<ModalResult> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * A stream that emits aftervthe referenced modal is closed.\n     */\n    afterClosed(): Observable<ModalResult> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Close the referenced modal with the passed `result`.\n     * @param result The referenced modal's result.\n     */\n    close(result = ModalResult.Cancel) {\n        // Delay to allow submit handling\n        Utils.delay().then(() => {\n            const checkCloseEvent: CheckCloseEvent = { result };\n            this._checkClose.next(checkCloseEvent);\n            (checkCloseEvent.cancelled || of(false)).subscribe(\n                (cancelled) => {\n                    if (!cancelled) {\n                        this._checkClose.complete();\n                        this._beforeClosed.next(result);\n                        this._beforeClosed.complete();\n                        this.removeSubmitListener();\n                        this.overlayRef.detachBackdrop();\n                        this.overlayRef.dispose();\n                        this.componentInstance = undefined;\n                        this._afterClosed.next(result);\n                        this._afterClosed.complete();\n                    }\n                }\n            );\n        });\n    }\n\n    private submitListener = (event) => {\n        this.submitted = true;\n        event.preventDefault();\n        return false;\n    }\n\n    /**\n     * Disable the standard browser submit handling on any HTML form in the modal component.\n     */\n    disableSubmit() {\n        if (!this.formElement) {\n            const formElement = this.overlayRef.overlayElement.querySelector(\"form\");\n            if (formElement) {\n                this.formElement = formElement;\n                this.formElement.addEventListener(\"submit\", this.submitListener);\n            }\n        }\n    }\n\n    private removeSubmitListener() {\n        if (this.formElement) {\n            this.formElement.removeEventListener(\"submit\", this.submitListener);\n            this.formElement = undefined;\n        }\n    }\n}\n","import {Injectable, Inject, Type, Injector, InjectionToken} from \"@angular/core\";\nimport {FormGroup, ValidatorFn} from \"@angular/forms\";\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Utils, Keys} from \"@sinequa/core/base\";\nimport {MessageParams} from \"@sinequa/core/intl\"; // Dependency to INTL !\nimport {ModalRef, IModalRef} from \"./modal-ref\";\n\n/** Describes the configuration object that can be passed when opening\n * a modal with the {@link ModalService}.\n */\nexport interface ModalConfig {\n    /**\n     * Classes that should be added to the `Overlay` pane.\n     */\n    panelClass?: string | string[];\n    /**\n     * Indicates whether a backdrop should be added when opening the modal.\n     */\n    hasBackdrop?: boolean;\n    /**\n     * Classes that should be added to the backdrop.\n     */\n    backdropClass?: string | string[];\n    /**\n     * The data model that the modal will operate on.\n     */\n    model?: any;\n    /**\n     * The CSS width of the modal.\n     */\n    width?: string;\n    /**\n     * The CSS height of the modal.\n     */\n    height?: string;\n    /**\n     * Indicates whether the modal should occupy the screen width and height. In this case\n     * `width` and `height` are set to `100%` and the `sq-modal-fullscreen` class is added\n     * to `panelClass`\n     */\n    fullscreen?: boolean;\n    /**\n     * Indicates whether a click on the backdrop should close the modal. The default value\n     * is `true`.\n     */\n    closeOnBackdropClick?: boolean;\n}\n\nconst DEFAULT_CONFIG: ModalConfig = {\n    hasBackdrop: true,\n    backdropClass: [\"cdk-overlay-dark-backdrop\", \"sq-modal-backdrop\"],\n    panelClass: \"sq-modal-pane\",\n    model: null,\n    closeOnBackdropClick: true\n};\n\n/**\n * The `MODAL_MODEL` injection token can be used to access the modal's model in\n * the the modal component. The value is `provided` from the value set in the\n * {@link ModalConfig} options when the modal is opened.\n */\nexport const MODAL_MODEL = new InjectionToken<any>('MODAL_MODEL');\n\n/**\n * The possible result values that can be set when a modal is closed. Buttons in a modal\n * have an associated `ModalResult` value. All buttons except those with a `Custom` result\n * value will close the modal when they are clicked.\n */\nexport const enum ModalResult {\n    OK = -1,\n    Cancel = -2,\n    Yes = -3,\n    No = -4,\n    Abort = -5,\n    Retry = -6,\n    Ignore = -7,\n    Custom = 0\n}\n\n/**\n * An enumeration of the types of confirm modals. The type of the confirm modal\n * can be reflected in the icon and/or colors used.\n */\nexport const enum ConfirmType {\n    Success,\n    Info,\n    Warning,\n    Error\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.confirm]{@link ModalService#confirm}\n * method.\n */\nexport interface ConfirmOptions {\n    /**\n     * The title of the confirm modal.\n     */\n    title?: string;\n    /**\n     * The message dispayed in the confirm modal.\n     */\n    message: string;\n    /**\n     * Any parameters for the `message`.\n     */\n    messageParams?: MessageParams;\n    /**\n     * The type of the confirm modal.\n     */\n    confirmType?: ConfirmType;\n    /**\n     * The buttons to display in the confirm modal.\n     */\n    buttons: ModalButton[];\n}\n\n/**\n * Describes the options that can be passed to the [ModalService.prompt]{@link ModalService#prompt}\n * method.\n */\nexport interface PromptOptions extends ConfirmOptions {\n    /**\n     * text written by the user in the prompt input\n     */\n    output: string;\n    /**\n     * List of validators for the input form control\n     */\n    validators?: ValidatorFn[];\n    /**\n     * If omitted, a single-line input is displayed. If specified, a textarea with the\n     * given number of rows is displayed\n     */    \n    rowCount?: number;\n}\n\n/**\n * Describes the options that can be used when creating an instance of a {@link ModalButton}.\n */\nexport interface IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary?: boolean;\n    /**\n     * The button text.\n     */\n    text?: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible?: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation?: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor?: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action?: (button: ModalButton) => void;\n}\n\n/**\n * A class representing a button displayed in a modal.\n */\nexport class ModalButton implements IModalButton {\n    /**\n     * The result associated with the button.\n     */\n    result: ModalResult;\n    /**\n     * Indicates whether this button is the primary button amongst a set of buttons.\n     */\n    primary: boolean;\n    /**\n     * The button text.\n     */\n    text: string;\n    /**\n     * Indicates whether the button is currently visible.\n     */\n    visible: boolean;\n    /**\n     * The validation `FormGroup` that should be tested when the button is clicked.\n     * The button will only perform its `action` when the validation is `valid`.\n     */\n    validation: FormGroup;\n    /**\n     * Indicats whether the button should be rendered with an `<a>` tag rather than\n     * a `<button>` tag.\n     */\n    anchor: boolean;\n\n    /**\n     * The action to perform when the button is clicked. Buttons with `result` values other\n     * than `Custom` also close the modal.\n     */\n    action: (button: ModalButton) => void;\n\n    constructor(options: IModalButton) {\n        Utils.extend(this, {visible: true, anchor: false}, options);\n    }\n\n    /**\n     * Get the button text. Buttons with non-custom result types\n     * have default text depending on their result type -\n     * `msg#modal.buttons.ok`, `msg#modal.buttons.cancel` etc\n     */\n    getText() {\n        if (this.text) {\n            return this.text;\n        }\n        switch (this.result) {\n            case ModalResult.OK:\n                return \"msg#modal.buttons.ok\";\n            case ModalResult.Cancel:\n                return \"msg#modal.buttons.cancel\";\n            case ModalResult.Yes:\n                return \"msg#modal.buttons.yes\";\n            case ModalResult.No:\n                return \"msg#modal.buttons.no\";\n            case ModalResult.Abort:\n                return \"msg#modal.buttons.abort\";\n            case ModalResult.Retry:\n                return \"msg#modal.buttons.retry\";\n            case ModalResult.Ignore:\n                return \"msg#modal.buttons.ignore\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Perform a click on a button. The button's explicit action is performed if set and\n     * the modal closed with the button's modal result if the `result` type is non-`Custom`.\n     * If the validation status not `valid` this method returns without performing any action.\n     *\n     * @param closer An object with a `close` method. If the result type is non-custom then\n     * the `close` method of this object is called.\n     */\n    click(closer: {close(result: any): void}) {\n        if (this.validation && !this.validation.valid) {\n            return;\n        }\n        if (this.action) {\n            this.action(this);\n        }\n        if (this.result !== ModalResult.Custom) {\n            closer.close(this.result);\n        }\n    }\n}\n\n/**\n * An injection token to set the component to use for the `confirm` modal displayed\n * by the [ModalService.confirm]{@link ModalService#confirm} method.\n */\nexport const MODAL_CONFIRM = new InjectionToken<Type<any>>('MODAL_CONFIRM');\n\n/**\n * An injection token to set the component to use for the `prompt` modal displayed\n * by the [ModalService.prompt]{@link ModalService#confirm} method.\n */\nexport const MODAL_PROMPT = new InjectionToken<Type<any>>('MODAL_PROMPT');\n\n/**\n * A service to open modal dialogs.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ModalService {\n    constructor(\n        protected injector: Injector,\n        protected overlay: Overlay,\n        @Inject(MODAL_CONFIRM) protected confirmModal: Type<any>,\n        @Inject(MODAL_PROMPT) protected promptModal: Type<any>\n    ) {\n    }\n\n    /**\n     * Open a modal dialog using the passed configuration options.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns An `IModalRef` object that can be used to close the modal.\n     */\n    openRef(component: Type<any>, config: ModalConfig = {}): IModalRef {\n        // Override default configuration\n        const modalConfig = { ...DEFAULT_CONFIG, ...config };\n        if (modalConfig.fullscreen) {\n            modalConfig.width = \"100%\";\n            modalConfig.height = \"100%\";\n            if (Utils.isString(modalConfig.panelClass)) {\n                modalConfig.panelClass = [modalConfig.panelClass, \"sq-modal-fullscreen\"];\n            }\n            else if (modalConfig.panelClass) {\n                modalConfig.panelClass.push(\"sq-modal-fullscreen\");\n            }\n            else {\n                modalConfig.panelClass = \"sq-modal-fullscreen\";\n            }\n        }\n        // Returns an OverlayRef which is a PortalHost\n        const overlayRef = this.createOverlay(modalConfig);\n        // Instantiate remote control\n        const modalRef = new ModalRef(overlayRef);\n        const overlayComponent = this.attachDialogContainer(component, overlayRef, modalConfig, modalRef);\n        modalRef.componentInstance = overlayComponent;\n        overlayRef.hostElement.classList.add(\"sq-modal-host\");\n        if (modalConfig.closeOnBackdropClick) {\n            // NB backdropClick will not fire if pointer-events are enabled on modal-host\n            overlayRef.backdropClick().subscribe(() => modalRef.close());\n            // Provide support for a scrollable sq-modal-host (overlay wrapper)\n            // The standard cdk styling disables pointer-events at this level which means that scrolling\n            // won't work. We can enable pointer-events in css but then the backdrop will not receive the\n            // click event. So, we handle the click event directly on sq-modal-host also and if the\n            // click target === sq-modal-host then we initiate modal closing here\n            overlayRef.hostElement.addEventListener(\"click\", (event) => {\n                if (event.target === overlayRef.hostElement) {\n                    modalRef.close();\n                }\n            });\n        }\n        overlayRef.keydownEvents().subscribe((event) => {\n            if (event.keyCode === Keys.esc) {\n                modalRef.close();\n            }\n        });\n        modalRef.disableSubmit();\n        return modalRef;\n    }\n\n    /**\n     * A wrapper around the {@link #openRef} method which returns a `Promise` that resolves\n     * with the `ModalResult` when the modal is closed.\n     *\n     * @param component The type of the component to use for the modal.\n     * @param config Configuration options for the modal.\n     * @retuns The `ModalResult` when the modal is closed.\n     */\n    open(component: Type<any>, config: ModalConfig = {}): Promise<ModalResult> {\n        const modalRef = this.openRef(component, config);\n        return modalRef.afterClosed().toPromise();\n    }\n\n    private createOverlay(config: ModalConfig): OverlayRef {\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(component: Type<any>, overlayRef: OverlayRef, config: ModalConfig, modalRef: ModalRef) {\n        // PortalInjector() is deprecated\n        const injector = Injector.create({\n            providers:[\n                {provide: ModalRef, useValue: modalRef},\n                {provide: MODAL_MODEL, useValue: config.model}\n            ], \n            parent:this.injector\n        });\n        const containerPortal = new ComponentPortal(component, null, injector);\n        const containerRef = overlayRef.attach<Type<any>>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    private getOverlayConfig(config: ModalConfig): OverlayConfig {\n        const positionStrategy = this.overlay.position()\n            .global()\n            .centerHorizontally()\n            .centerVertically();\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n\n        return overlayConfig;\n    }\n\n    /**\n     * Open a confirmation modal dialog displaying a message and a set buttons. This is similar to the Javacsript\n     * `Window.alert` method but renders a modal.\n     *\n     * @param options The options used to open the confirm modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    confirm(options: ConfirmOptions): Promise<ModalResult> {\n        return this.open(this.confirmModal, {model: options});\n    }\n\n    /**\n     * Open a prompt modal dialog displaying a message, an input and OK/Cancel buttons.\n     *\n     * @param options The options used to open the prompt modal. These are set as the `MODAL_MODEL`  of the modal.\n     */\n    prompt(options: PromptOptions): Promise<ModalResult> {\n        return this.open(this.promptModal, {model: options});\n    }\n\n    /**\n     * Open a confirm modal that has an `OK` button.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     */\n    oK(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Success): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: true })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `OK` and `Cancel` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    oKCancel(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.OK): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.OK, primary: primaryButton === ModalResult.OK }),\n                new ModalButton({ visible: true, result: ModalResult.Cancel, primary: primaryButton === ModalResult.Cancel })\n            ]\n        });\n    }\n\n    /**\n     * Open a confirm modal that has `Yes` and `No` buttons.\n     *\n     * @param message The message to display in the modal.\n     * @param messageParams The parameters for the message.\n     * @param title The confirm modal's title.\n     * @param confirmType The type of the confirm modal.\n     * @param primaryButton The result type of the button which should be primary.\n     */\n    yesNo(\n        message: string,\n        messageParams?: MessageParams,\n        title?: string,\n        confirmType = ConfirmType.Info,\n        primaryButton = ModalResult.Yes): Promise<ModalResult> {\n        return this.confirm({\n            title,\n            message,\n            messageParams,\n            confirmType,\n            buttons: [\n                new ModalButton({ visible: true, result: ModalResult.Yes, primary: primaryButton === ModalResult.Yes }),\n                new ModalButton({ visible: true, result: ModalResult.No, primary: primaryButton === ModalResult.No })\n            ]\n        });\n    }\n}\n","import {Component, Inject} from \"@angular/core\";\nimport {MODAL_MODEL, ConfirmOptions, ModalButton} from \"./modal.service\";\nimport {ModalRef} from \"./modal-ref\";\n\n@Component({\n    selector: \"sq-core-confirm\",\n    template: `\n        <div style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <hr>\n            <ng-container *ngFor=\"let button of model.buttons\">\n                <button *ngIf=\"button.visible\" type=\"{{button.primary ? 'submit' : 'button'}}\"\n                    (click)=\"buttonClick(button)\">{{button.getText() | sqMessage}}</button>\n            </ng-container>\n        </div>\n    `\n})\nexport class Confirm {\n    constructor(\n        @Inject(MODAL_MODEL) public model: ConfirmOptions,\n        protected modalRef: ModalRef) {\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.confirm.title\";\n    }\n\n    buttonClick(button: ModalButton) {\n        button.click(this.modalRef);\n    }\n}\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { MODAL_MODEL, PromptOptions, ModalResult} from \"./modal.service\";\nimport { ModalRef } from \"./modal-ref\";\nimport { Utils } from '@sinequa/core/base';\n\n@Component({\n    selector: \"sq-core-prompt\",\n    template: `\n        <form novalidate [formGroup]=\"form\" style=\"border: solid;padding: 16px;background-color: white;\" cdkTrapFocus [cdkTrapFocusAutoCapture]=\"true\">\n            <h3 style=\"margin-top: 0;\">{{title | sqMessage}}</h3>\n            <div>{{model.message | sqMessage:model.messageParams}}</div>\n            <input type=\"text\" formControlName=\"input\" *ngIf=\"!model.rowCount\">\n            <textarea type=\"text\" formControlName=\"input\" spellcheck=\"on\" rows=\"{{model.rowCount}}\" autofocus *ngIf=\"!!model.rowCount\">\n            </textarea>\n            <ng-container *ngIf=\"showError(inputControl)\">\n                <br>\n                <span style=\"color: red;\">{{form.get(\"input\")?.errors | sqValidationError}}</span>\n            </ng-container>\n            <hr>\n            <button type=\"submit\" (click)=\"ok()\">{{'msg#modal.buttons.ok' | sqMessage}}</button>\n            <button type=\"button\" (click)=\"cancel()\">{{'msg#modal.buttons.cancel' | sqMessage}}</button>\n        </form>\n    `\n})\nexport class Prompt implements OnInit, OnDestroy {\n    inputControl: FormControl;\n    form: FormGroup;\n    formChanges: Subscription;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: PromptOptions,\n        protected modalRef: ModalRef,\n        protected formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.inputControl = new FormControl(this.model.output, this.model.validators || Validators.required);\n        this.form = this.formBuilder.group({\n            input: this.inputControl\n        });\n        this.formChanges = Utils.subscribe(this.form.valueChanges,\n            (value) => {\n                this.model.output = this.inputControl.value;\n            });\n    }\n\n    ngOnDestroy() {\n        this.formChanges.unsubscribe();\n    }\n\n    showError(control: FormControl): boolean {\n        return control.invalid && (control.dirty || this.modalRef.submitted);\n    }\n\n    ok() {\n        if (!this.form.valid) {\n            return;\n        }\n        this.modalRef.close(ModalResult.OK);\n    }\n\n    cancel() {\n        this.modalRef.close(ModalResult.Cancel);\n    }\n\n    get title(): string {\n        return this.model.title ? this.model.title : \"msg#modal.prompt.title\";\n    }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","const MODAL_MODULE_PROVIDERS = [];\n\nexport {MODAL_MODULE_PROVIDERS};\n","import {NgModule, ModuleWithProviders, Type} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\n\n// Sinequa modules\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {ValidationModule} from \"@sinequa/core/validation\";\n\nimport {MODAL_CONFIRM} from \"./modal.service\";\nimport {MODAL_PROMPT} from \"./modal.service\";\n\nimport {MODAL_MODULE_PROVIDERS} from \"./module.providers\";\n\nimport {Confirm} from \"./confirm.component\";\nimport {Prompt} from './prompt.component';\n\n/**\n * This module contains an implementation of a [modal dialog service]{@link ModalService} which can be extended\n * to support UI frameworks such as Bootstrap and Material Design. It uses the `Overlay` and `Portal` funcionality\n * provided by the [Angular CDK]{@link https://material.angular.io/cdk/categories} library.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // CDK\n        OverlayModule, // Needed for the modal service\n        A11yModule,\n\n        // Sinequa modules\n        BaseModule,\n        IntlModule,\n        ValidationModule,\n    ],\n    declarations: [\n        Confirm,    // Default confirm\n        Prompt\n    ],\n    exports: [\n    ],\n    providers: [\n        ...MODAL_MODULE_PROVIDERS\n    ]\n})\nexport class ModalModule {\n    static forRoot(confirmModal: Type<any> = Confirm, promptModal: Type<any> = Prompt): ModuleWithProviders<ModalModule> {\n        return {\n            ngModule: ModalModule,\n            providers: [\n                {provide: MODAL_CONFIRM, useValue: confirmModal},\n                {provide: MODAL_PROMPT, useValue: promptModal},\n            ]\n        };\n    }\n}\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Cancel\",\n            \"yes\": \"Yes\",\n            \"no\": \"No\",\n            \"abort\": \"Abort\",\n            \"retry\": \"Retry\",\n            \"ignore\": \"Ignore\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirm\"\n        },\n\n        \"prompt\": {\n            \"title\": \"Enter a value\"\n        }\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enModal from \"./en\";\nimport _frModal from \"./fr\";\nimport _deModal from \"./de\";\n\nconst enModal = Utils.merge({}, _enModal, enIntl);\nconst frModal = Utils.merge({}, _frModal, frIntl);\nconst deModal = Utils.merge({}, _deModal, deIntl);\n\nexport { enModal, frModal, deModal };\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Annuler\",\n            \"yes\": \"Oui\",\n            \"no\": \"Non\",\n            \"abort\": \"Abandonner\",\n            \"retry\": \"Réessayer\",\n            \"ignore\": \"Ignorer\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Confirmer\"\n        },\n        \"prompt\": {\n            \"title\": \"Saississez une valeur\"\n        }\n    }\n};\n","export default {\n    \"modal\": {\n        \"buttons\": {\n            \"ok\": \"OK\",\n            \"cancel\": \"Abbrechen\",\n            \"yes\": \"Ja\",\n            \"no\": \"Nein\",\n            \"abort\": \"Abbrechen\",\n            \"retry\": \"Wiederholen\",\n            \"ignore\": \"Ignorieren\"\n        },\n\n        \"confirm\": {\n            \"title\": \"Bestätigen\"\n        },\n        \"prompt\": {\n            \"title\": \"Geben Sie einen Wert ein\"\n        }\n    }\n};\n"]}