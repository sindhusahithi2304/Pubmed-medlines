{"version":3,"sources":["../../projects/core/web-services/config/ccapp.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/core/web-services/http.service.ts","../../../projects/core/web-services/start-config.web.service.ts","../../../projects/core/web-services/http-client.ts","../../../projects/core/web-services/app.web.service.ts","../../../projects/core/web-services/audit.web.service.ts","../../../projects/core/web-services/dataset.web.service.ts","../../../projects/core/web-services/download.web.service.ts","../../../projects/core/web-services/json-method-plugin.web.service.ts","../../../projects/core/web-services/labels.web.service.ts","../../../projects/core/web-services/preview.web.service.ts","../../../projects/core/web-services/principal.web.service.ts","../../../projects/core/web-services/query.web.service.ts","../../../projects/core/web-services/query-export.web.service.ts","../../../projects/core/web-services/recent-queries.web.service.ts","../../../projects/core/web-services/rfm.web.service.ts","../../../projects/core/web-services/similar-documents.web.service.ts","../../../projects/core/web-services/sponsored-links.web.service.ts","../../../projects/core/web-services/suggest-field.web.service.ts","../../../projects/core/web-services/suggest-query.web.service.ts","../../../projects/core/web-services/user-ratings.web.service.ts","../../../projects/core/web-services/user-settings.web.service.ts","../../../projects/core/web-services/queryintent.service.ts","../../../projects/core/web-services/module.providers.ts","../../../projects/core/web-services/web-services.module.ts"],"names":["ExportSourceType","ExportOutputFormat","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","HttpService","startConfig","defineProperty","app","makeUrl","api","Utils","addUrl","apiPath","makeParams","params","makeHttpParams","START_CONFIG","InjectionToken","StartConfigWebService","initStartConfig","console","getDefaultStartConfig","browserUrl","makeURL","window","location","href","parts","split","pathname","appSpecifierIndex","findIndex","eqNCN","appSpecifier","production","slice","url","apply","origin","defaultStartConfig","initialStartConfig","copy","extend","API_PATH","applicationPath","corsActive","fetchPreLoginAppConfig","_this","Observable","observer","_url","addSearchParams","preLogin","atomic","headers","sinequa-force-camel-case","then","response","data","versionDate","isString","fromSysDateStr","complete","catch","fetchServerConfig","serverConfig","isObject","warn","log","i0","ɵɵinject","factory","ɵfac","providedIn","SqHttpClient","httpHandler","_super","responseCache","Map","getRequestHash","first","options","strRequest","JSON","stringify","key","isIterable","keys","sort","reduce","k","sha256","request","requestHash","observable","get","pipe","share","tap","delete","set","HttpClient","i1","HttpHandler","AppWebService","httpClient","appName","subscribe","refresh","appVersionId","auditEvents","versionId","$auditRecord","AuditWebService","notifySponsoredLink","evt","sl","resultId","parameters","detail","link-id","id","rank","title","result-id","forEach","type","notify","notifyDocument","doc","resultsOrId","rfmParameters","results","doc-id","source","treeFirstNode","collection","filename","fileext","index","databasealias","totalRowCount","rfmDetail_1","rfmDetail","notifyDocumentById","substr","indexOf","rfmDetail_2","notifyLogout","auditEnabled","of","undefined","post","endpoint","event","DatasetWebService","list","webServiceName","query","map","datasets","getAll","DownloadWebService","download","header","fileName","replace","navigator","msSaveOrOpenBlob","body","link","document","createElement","appendChild","blobUrl","URL","createObjectURL","click","remove","revokeObjectURL","JsonMethodPluginService","method","throwError","assign","LabelsWebService","intlService","prefix","_public","action","q","public","locale","currentLocale","name","localize","array","labels","getUserRights","add","ids","label","toString","doccount","mlAuditEvents","actionType","documentIds","rename","newLabel","oldlabel","bulkAdd","bulkRemove","i2","IntlService","PreviewWebService","shareReplay","getHtmlPreview","responseType","catchError","err","distinctUntilChanged","PrincipalWebService","_events","Subject","ngOnDestroy","_principal","userId","userIds","pluck","autoAuthenticate","noAutoAuthentication","load","principal","DidYouMeanKind","RFMDisplay","QueryExportWebService","logErrorToConsole","methodName","errorMessage","preliminaryCheck","webService","format","None","exportResult","maxCount","exportedColumns","preliminaryCheckResult","postData","Result","doExport","exportSelection","selection","Selection","exportSavedQuery","queryName","SavedQuery","observe","readBlobFileName","QueryWebService","endPoint","getResults","queryIntentData","getMultipleResults","queries","methods","propagateErrors","queries_1","queries_1_1","RecentQueriesWebService","recentQueries","RecentQueries","RecentQueriesList","user","appRecentQueries","appRecentQueriesLength","userRecentQueries","userRecentQueriesLength","RfmWebService","getRfmData","rfm","_b","records","_c","record","flags","EMPTY","queryHash","rfmQueryHash","SimilarDocumentsWebService","sourceDocumentId","SponsoredLinksWebService","getLinks","webservice","SuggestFieldWebService","text","fields","isArray","suggests","display","toSqlValue","SuggestQueryWebService","suggestQuery","kinds","UserRatingsWebService","getRating","docid","config","ratingscolumn","ratingsColumn","averagecolumn","averageColumn","ratingsdistribution","ratingsDistribution","setRating","rating","ratingResponse","getRecordRating","updatedocweight","updateDocWeight","ratingnum","average","averagerating","deleteRating","parseUserRating","parseAverageRating","columnEntries","ratingValues","UserSettingsWebService","timezone","jstz","determine","_userSettings","getUserSettings","userSettings","reviver","save","patch","reset","currentState","readUserSetting","paths","json","paths_1","paths_1_1","QueryIntentWebService","getQueryIntent","WEB_SERVICES_MODULE_PROVIDERS","StartConfigInitializer","startConfigWebService","Promise","resolve","WebServicesModule","forRoot","ngModule","providers","provide","useValue","APP_INITIALIZER","useFactory","deps","multi","imports","CommonModule","HttpClientModule","BaseModule","IntlModule"],"mappings":"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","sourcesContent":["import {MapOf, JsonObject, PatternMatcher} from \"@sinequa/core/base\";\n\n/**\n * Describes the fields available in all configuration objects. By convention, configuration object\n * interfaces are prefixed by `CC`.\n */\nexport interface CCConfig {\n    /**\n     * The name of the configuration object\n     */\n    name: string;\n    /**\n     * An optional description of the configuration object\n     */\n    description?: string;\n}\n\n/**\n * Describes the fields available in all web service configuration objects\n */\nexport interface CCWebService extends CCConfig {\n    webServiceType: \"Query\" | \"sponsoredlinks\" | \"queryexport\" | \"Preview\" | \"Labels\" | \"Autocomplete\" | \"DataSet\";\n}\n\n/**\n * Describes the fields available in the index configuration object\n */\nexport interface CCIndex extends CCConfig {\n    /**\n     * The type of the index\n     */\n    indexType: string;\n    /**\n     * The columns in the index\n     */\n    columns?: MapOf<CCColumn>;\n}\n\n/**\n * Describes the fields available in a list item configuration object\n */\nexport interface CCListItem {\n    /**\n     * The name is used to display an item\n     */\n    name: string;\n    /**\n     * The value holds the underlying value of the item\n     */\n    value: string;\n}\n\n/**\n * Describes a list configuration object. Lists can be created in `App Dependencies/Lists` in the admin interface.\n */\nexport interface CCList extends CCConfig {\n    /**\n     * The name of the list\n     */\n    name: string;\n    /**\n     * The items in the list\n     */\n    items: CCListItem[];\n}\n\n/**\n * Describes an RFM action configuration object\n */\nexport interface CCRFMAction {\n    name: string;\n    enabled: boolean;\n    actionEnabled: boolean;\n    noMenu: boolean;\n    displayUnrated: boolean;\n    negAvailable: boolean;\n}\n\n/**\n * Describes an RFM configuration object\n */\nexport interface CCRFM {\n    name: string;\n    click: CCRFMAction;\n    like: CCRFMAction;\n    important: CCRFMAction;\n}\n\n/**\n * Describes an aggregation configuration object\n */\nexport interface CCAggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The underlying column in the aggregation\n     */\n    column: string;\n    /**\n     * Determines whether this aggregation should be included in a regular search\n     */\n    includeInStandardSearch: boolean;\n    /**\n     * The maximum number of values to retrieve\n     */\n    count: number;\n    /**\n     * The value of the `order` clause\n     */\n    order: string;\n    /**\n     * The value of the `mask` clause\n     */\n    mask: string;\n    /**\n     * The name of an associated distribution configuration object\n     */\n    distribution: string;\n    /**\n     * Determines whether the aggregation is requested in the context of the currently selected tab or globally.\n     * The default is to respect the [CCTabSearch.loadAggregationsForSelectedTab]{@link CCTabSearch#loadAggregationsForSelectedTab} setting\n     */\n    tabBehavior: \"\" | \"Default\" | \"LoadForSelectedTab\" | \"LoadForAllTabs\";\n    /**\n     * The separator used for crossed aggregations\n     */\n    keySeparator: string;\n    /**\n     * The display separator used for crossed aggregations\n     */\n    displayKeySeparator: string;\n}\n\n/**\n * Describes the fields for a tab configuration object\n */\nexport interface CCTab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The values in the tab distribution that contribute to this tab\n     */\n    value: string;\n    /**\n     * Set if this tab is the default to be used when no tab is specified in a query\n     */\n    isDefault: boolean;\n    /**\n     * Indexes to exclude when executing a query with this tab selected\n     */\n    excludedIndices: string;\n    /**\n     * Aggregations to exclude when executing a query with this tab selected\n     */\n    excludedAggregations: string;\n    /**\n     * Results sorting options that should be available when executing a query with this tab selected\n     */\n    sortingChoices: CCSortingChoice[];\n}\n\n/**\n * Describes the fields for the tab search configuration in a query. A tab search defines a special distribution which is evaluated\n * as a part of query to group the results by a set of tab items. The distribution gives the count of documents\n * associated with each tab item. The values associated with a tab item are used to filter a query when a tab item is selected.\n */\nexport interface CCTabSearch {\n    /**\n     * Determines whether this tab search is used in a query\n     */\n    isActive: boolean;\n    /**\n     * Defines the column to be used in the tab distribution and for filtering results by a selected tab item\n     */\n    column: string;\n    /**\n     * `true` if the associated column is a tree\n     */\n    columnIsTree: boolean;\n    /**\n     * Determines whether the overall document total should be calculated from the per-tab item documents totals\n     */\n    totalIsSumOfTabTotals: boolean;\n    /**\n     * Determines whether configured aggregations should be evaluated in the context of the selected tab or not.\n     * This setting can be overridden at the tab item level using [CCTab.excludedAggregations]{@link CCTab#excludedAggregations}\n     */\n    loadAggregationsForSelectedTab: boolean;\n    /**\n     * Determines the `minlevel` value to use when evaluating the tab distribution for a tree column\n     */\n    valueLevels: number;\n    /**\n     * Determines whether `post-group-by=true` should be used in the tab distribution\n     */\n    postGroupBy: boolean;\n    /**\n     * Determines whether 'merge-groups=true` should be used in the tab distribution. This is only used if `postGroupBy` is set to `true`\n     */\n    mergeGroups: boolean;\n    /**\n     * The set of configured tab items\n     */\n    tabs: CCTab[];\n}\n\n/**\n * Describes a sorting choice which can be selected for a query\n */\nexport interface CCSortingChoice {\n    /**\n     * The name of this sorting choice\n     */\n    name: string;\n    /**\n     * The description of this sorting choice\n     */\n    description: string;\n    /**\n     * The display value to use when rendering this sorting choice\n     */\n    display: string;\n    /**\n     * The `ORDER BY` clause to use when this sorting choice is selected\n     */\n    orderByClause: string;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has no `text contains` clause\n     */\n    isDefaultNoRelevance: boolean;\n    /**\n     * Determines whether this sorting choice should be used as the default when\n     * the query has a `text contains` clause\n     */\n    isDefaultWithRelevance: boolean;\n}\n\n/**\n * Describes a scope configuration object. A scope defines a set of conditions which\n * will be added to the query `where clause` when the scope is selected\n */\nexport interface CCScope {\n    /**\n     * The name of the scope\n     */\n    name: string;\n    /**\n     * The description of the scope\n     */\n    description: string;\n    /**\n     * The display value to be used when rendering the scope\n     */\n    display: string;\n    /**\n     * Determines whether the scope is active or not\n     */\n    isActive: boolean;\n    /**\n     * Determines whether the scope should be considered the default scope\n     * when a scope is not specified in a query\n     */\n    isDefault: boolean;\n}\n\n/**\n * Defines different precision operators that can be automatically added to a `text contains` clause\n * when no precision operators are present.\n *\n * `Default` - no operators are added\n *\n * `ExactExpression` - text surrounded by `\"...\"`\n *\n * `InTheSamePhrase` - text surrounded by `[...]`\n *\n * `EveryWord` - text surrounded by `+(...)`\n */\nexport type QueryPrecision  = \"Default\" | \"ExactExpression\" | \"InTheSamePhrase\" | \"EveryWord\";\n\n/**\n * Defines strategies that can used in the query search parameters. Each strategy defines a pair of word weight (`ww`) and meaning\n * weight (`mw`) values to be used.\n *\n * `Default` - no `ww` and `mw` parameters used\n *\n * `WordsOnly` - `ww=1;mw=0`\n *\n * `WordsFirst` - `ww=0.8;mw=0.2`\n *\n * `WordsAndMeaning` - `ww=0.6;mw=0.4`\n *\n * `MeaningFirst` - `ww=0.3;mw=0.7`\n *\n * `MeaningOnly` - `ww=0;mw=1`\n */\nexport type QueryStrategy = \"Default\" | \"WordsOnly\" | \"WordsFirst\" | \"WordsAndMeaning\" | \"MeaningFirst\" | \"MeaningOnly\";\n\n/**\n * Defines modes for the spelling correction of search terms and did-you-mean functionality. Corrections\n * are based on edit and phonetic distance and exist among the searched documents\n *\n * `default | classic` - corrections are sought for terms that are not present in any documents. The original terms\n * and corrections are included in the query\n *\n * `smart` - corrections are sought for terms that are present in less than 10 documents and where the correction\n * is 20 times more frequent than the original term. Only the best corrections are kept. The original terms and corrections\n * are included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"We included\n * results for these terms...\" feedback to be displayed\n *\n * `correct` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. Only the best corrections are kept. The original terms that have corrections\n * are not included in the query. The [Results.didYouMean]{@link Results#didYouMean] member is populated allowing for a \"Your query\n * has been corrected to...\" feedback to be displayed\n *\n * `dymonly` - corrections are sought for terms that are present in less than 10 documents and where the correction is\n * 20 times more frequent than the original term. The actual query is unaffected but the\n * [Results.didYouMean]{@link Results#didYouMean] member will be populated allowing for a \"Did you mean...\" feedback to be\n * displayed\n *\n * `force` - corrections are sought for all terms. All terms and corrections are included in the query\n *\n * `false` - no spelling correction processing occurs\n */\nexport type SpellingCorrectionMode = \"default\" | \"classic\" | \"smart\" | \"correct\" | \"dymonly\" | \"force\" | \"false\";\n\n/**\n * Describes the query web service configuration object\n */\nexport interface CCQuery extends CCWebService {\n    /**\n     * Defines the number of records or documents to request when executing the query\n     */\n    pageSize: number;\n    /**\n     * Defines the aggregations that should be included in the query\n     */\n    aggregations: CCAggregation[];\n    /**\n     * Defines configuration information for the columns in the indexes\n     */\n    columnsInfo: CCColumnsInfo;\n    /**\n     * Defines the sorting choices that can be used\n     */\n    sortingChoices: CCSortingChoice[];\n    /**\n     * Defines the scopes that can be used\n     */\n    scopes: CCScope[];\n    /**\n     * Defines whether scopes processing is activated for this query\n     */\n    scopesActive: boolean;\n    /**\n     * Defines the spelling correction mode for this query\n     */\n    sCMode: SpellingCorrectionMode;\n    /**\n     * Defines the distance to use for the `NEAR` operator when no value is specified\n     */\n    defaultNearValue: number;\n    /**\n     * Defines the tab search configuration for this query\n     */\n    tabSearch: CCTabSearch;\n    /**\n     * Defines the name of the [CCRFM]{@link CCRFM} configuration for this query\n     */\n    rFM: string;\n    /**\n     * Defines the default language to use when parsing the query text\n     */\n    questionLanguage: string;\n    /**\n     * Defines the default precision to use for this query\n     */\n    questionPrecision: QueryPrecision;\n    /**\n     * Defines the default strategy to use for this query\n     */\n    questionStrategy: QueryStrategy;\n    /**\n     * Defines the indexes that the query selects from\n     */\n    searchIndexes: string;\n    /**\n     * Determines whether filter-less queries are permitted\n     */\n    allowEmptySearch: boolean;\n    /**\n     * Defines the patterns to control which column fields are allowed\n     * in fielded search expressions.\n     */\n    columnFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which column fields are disallowed\n     * in fielded search expressions.\n     */\n    columnFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `columnFieldsIncluded` and `columnFieldsExcluded` values.\n     */\n    $columnFieldsPattern: PatternMatcher;\n    /**\n     * Defines the patterns to control which part name fields are allowed\n     * in fielded search expressions.\n     */\n    partnameFieldsIncluded: string[];\n    /**\n     * Defines the patterns to control which part name fields are disallowed\n     * in fielded search expressions.\n     */\n    partnameFieldsExcluded: string[];\n    /**\n     * The `PatternMatcher` instance created on the client using the `partnameFieldsIncluded` and `partnameFieldsExcluded` values.\n     */\n    $partnameFieldsPattern: PatternMatcher;\n}\n\n/**\n * Defines configuration parameters for a column\n */\nexport interface CCColumnInfo {\n    /**\n     * The column name\n     */\n    name: string;\n    /**\n     * A description of the column\n     */\n    description: string;\n    /**\n     * A comma-separated list of aliases for the column\n     */\n    aliases: string;\n    /**\n     * A display label for the column\n     */\n    label: string;\n    /**\n     * A plural form display label for the column\n     */\n    labelPlural: string;\n    /**\n     * The name of a formatter function that produces a formatted string value from the column value. See {@link FormatService}\n     */\n    formatter: string;\n    /**\n     * A set of transform functions that are applied to the a formatted string value. See {@link FormatService}\n     */\n    transforms: string;\n    /**\n     * The name of a parser function that produces a column value from a formatted string value. See {@link FormatService}\n     */\n    parser: string;\n}\n\n/**\n * Describes a set of `CCColumnInfo` objects\n */\nexport interface CCColumnsInfo {\n    columns: CCColumnInfo[];\n}\n\n/**\n * Defines the range of column types for a column\n */\nexport const enum EngineType {\n    none = 0,\n    bool = 1,\n    date = 2,\n    dateTime = 3,\n    time = 4,\n    unsigned = 5,\n    integer = 6,\n    float = 7,\n    double = 8,\n    dates = 9,\n    dateTimes = 10,\n    times = 11,\n    varchar = 12,\n    binary = 13,\n    string = 14,\n    csv = 15\n}\n\n/**\n * Defines the type modifiers that can be used for a column\n */\nexport const enum EngineTypeModifier {\n    none  = 0x0000000,\n    a     = 0x0000805, // a -> lc\n    // b  = 0x0000002,\n    c     = 0x0000004,\n    d     = 0x0000008,\n    e     = 0x0000814, // e -> lc\n    // f  = 0x0000020,\n    // g  = 0x0000040,\n    // h  = 0x0000080,\n    i     = 0x0000100,\n    // j  = 0x0000200,\n    // k  = 0x0000400,\n    l     = 0x0000804, // l -> c\n    // m  = 0x0001000,\n    n     = 0x0002000,\n    // o  = 0x0004000,\n    // p  = 0x0008000,\n    // q  = 0x0010000,\n    // r  = 0x0020000,\n    // s  = 0x0040000,\n    t     = 0x0080004, // t -> c\n    // u  = 0x0100000,\n    // v  = 0x0200000,\n    // w  = 0x0400000,\n    x     = 0x0800000,\n    // y  = 0x1000000,\n    z     = 0x2000000,\n\n    f_ordinal    = 0x0002000, //             n\n    f_multidates = 0x0002000, //             n\n    f_varchar    = 0x2000000, //                   z\n    f_binary     = 0x2002000, //             n     z\n    f_string     = 0x2002108, //     d   i   n     z\n    f_csv        = 0x288291d, // a c d e i l n t x z\n\n    f_overridable= 0x2000108  //     d   i         z\n}\n\n/**\n * Defines the fields for a column configuration object defined in an index. See {@link CCIndex}\n */\nexport interface CCColumn {\n    name: string;\n    description?: string;\n    type: string;\n    typeModifier?: string;\n    eType: EngineType;\n    eTypeModifier: EngineTypeModifier;\n    aliases?: string[];\n    label?: string;\n    labelPlural?: string;\n    formatter?: string;\n    transforms?: string;\n    parser?: string;\n}\n\n/**\n * Enum representing supported export source.\n */\nexport enum ExportSourceType {\n    None = 0,\n    Result = 1,\n    Selection = 2,\n    SavedQuery = 4\n}\n\n/**\n * Enum representing supported export format.\n */\nexport enum ExportOutputFormat {\n    None = 0,\n    Csv = 1,\n    Xlsx = 2,\n    Json = 4\n}\n\n/**\n * Data model of the Export dialog.\n */\nexport interface ExportDialogModel {\n    format: ExportOutputFormat;\n    export: ExportSourceType;\n    webService: string;\n    maxCount?: number;\n    queryName?: string;\n}\n\n/**\n * Describes the fields in the labels web service configuration object\n */\nexport interface CCLabels extends CCWebService {\n    /**\n     * The the index column to use for public labels\n     */\n    publicLabelsField: string;\n    /**\n     * A semi-colon separated list of predefined public labels\n     */\n    defaultPublicLabels: string;\n    /**\n     * Determines whether new public labels can be created by users\n     */\n    allowPublicLabelsCreation: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can create public labels\n     */\n    publicLabelsCreationPrincipalIds: string;\n    /**\n     * Determines whether existing public labels can be modified by users\n     */\n    allowPublicLabelsModification: boolean;\n    /**\n     * A list of principal ids identifying users and groups that can modify existing public labels\n     */\n    publicLabelsModificationPrincipalIds: string;\n\n    /**\n     * The the index column to use for private labels\n     */\n    privateLabelsField: string;\n\n    /**\n     * The maximum number of labels to return when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestMaxCount: number;\n\n    /**\n     * The wildcard character to recognise when listing labels using the [LabelsWebService.list]{@link LabelsWebService#list} api\n     */\n    labelsAutoSuggestWildcard: string;\n}\n\n/**\n * Describes the fields in the autocomplete web service configuration object\n */\nexport interface CCAutocomplete extends CCWebService {\n    /**\n     * Defines whether this autocomplete service is enabled\n     */\n    enabled: boolean;\n    /**\n     * Contains a comma-separated list of suggest queries for this service\n     */\n    suggestQueries: string;\n    /**\n     * Defines the minimum number of characters that must be entered before presenting\n     * suggestions\n     */\n    inputLengthTrigger: number;\n    /**\n     * Defines whether suggestions should be grouped into categories when they are displayed\n     */\n    groupSuggestionsByCategory: boolean;\n    /**\n     * Defines whether fielded search should be used when processing suggestions\n     */\n    useFieldedSearch: boolean;\n    /**\n     * Defines the number of items per category to display when a category is not collapsed\n     */\n    uncollapsedItemsPerCategory: number;\n}\n\n/**\n * Describes the fields in the application configuration object\n */\nexport interface CCApp extends CCConfig {\n    /**\n     * Identifies the version of the application configuration. This field can be passed\n     * to the [AppWebService.refresh]{@link AppWebService#refresh} api to update the application\n     * configuration if the version now available on the server is different.\n     */\n    versionId: string;\n    /**\n     * Defines the queries configured on the application\n     */\n    queries: MapOf<CCQuery>;\n    /**\n     * Defines the RFM objects configured on the application\n     */\n    rfms: MapOf<CCRFM>;\n    /**\n     * Defines the indexes configured on the application\n     */\n    indexes: MapOf<CCIndex>;\n    /**\n     * Defines the lists configured on the application\n     */\n    lists: MapOf<CCList>;\n    /**\n     * Defines the web services configured on the application\n     */\n    webServices: MapOf<CCWebService>;\n    /**\n     * A comma-separated list of the names of the queries configured on the application\n     */\n    queryNames: string;\n    /**\n     * The name of the labels web service configured on the application\n     */\n    labels: string;\n    /**\n     * The name of the preview web service configured on the application\n     */\n    preview: string;\n    /**\n     * The name of the autocomplete web service configured on the application\n     */\n    autocomplete: string;\n    /**\n     * The name of the sponsored links web service configured on the application\n     */\n    sponsoredLinks: string;\n    /**\n     * The name of the query export web service configured on the application\n     */\n    queryExport: string;\n    /**\n     * Determines whether RSS feeds are available on saved queries\n     */\n    queryRssEnabled: boolean;\n    /**\n     * Custom JSON configuration (see App Customization tab in Sinequa admin)\n     */\n    data: JsonObject;\n    /**\n     * The version of the server API.\n     * This field is used to compare with [MINIMUM_COMPATIBLE_SERVER_API_VERSION]{@link MINIMUM_COMPATIBLE_SERVER_API_VERSION}\n     */\n    apiVersion: string;\n    /**\n     * The workspace associated with this app\n     */\n    workspaceApp: string;\n    /**\n     * The name of the default query\n     */\n    defaultQueryName: string;\n}\n\n/**\n * The minimum server api version that compatible with this version of SBA.\n */\nexport const MINIMUM_COMPATIBLE_SERVER_API_VERSION = '1.0';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {HttpParams} from \"@angular/common/http\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {StartConfig} from \"./start-config.web.service\";\n\n/**\n * A base helper class for web services. It holds the {@link StartConfig} for the app\n */\nexport abstract class HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig The start configuration\n     */\n    constructor(\n        protected startConfig: StartConfig) {\n    }\n\n    /**\n     * The name of the application\n     */\n    get appName(): string {\n        return this.startConfig.app!;\n    }\n\n    /**\n     * Makes an API url by appending the api name to the api path\n     * held on the {@link StartConfig}\n     *\n     * @param api An API name\n     */\n    makeUrl(api: string): string {\n        return Utils.addUrl(this.startConfig.apiPath!, api);\n    }\n\n    /**\n     * Makes an Angular {@link HttpParams} object from a basic Javascript object\n     *\n     * @param params A map of parameter values\n     */\n    makeParams(params: MapOf<string | boolean | number | Date | object | undefined>): HttpParams {\n        return Utils.makeHttpParams(params);\n    }\n}","import {Injectable, InjectionToken, Optional, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport atomic from \"atomicjs\";\nimport {IProviders} from \"ng2-ui-auth\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * An {@link InjectionToken} to access the app's {@link StartConfig} instance\n */\nexport const START_CONFIG = new InjectionToken<StartConfig>(\"START_CONFIG\");\n\n/**\n * Defines members whose values are automatically deduced from direct {@link StartConfig} members\n */\nexport interface DeducedStartConfig {\n    /**\n     * The origin of the url used to make Sinequa API calls\n     */\n    origin?: string;\n    /**\n     * The application path of the url used to make Sinequa API calls\n     */\n    applicationPath?: string;\n    /**\n     * The url in the browser (origin + pathname)\n     */\n    browserUrl?: string;\n    /**\n     * The path used to make Sinequa API calls, including any virtual directories.\n     * If CORS is active then it will be prefixed by the Sinequa server origin\n     */\n    apiPath?: string;\n    /**\n     * A flag indicating whether the app is running in a CORS context.\n     */\n    corsActive?: boolean;\n}\n\n/**\n * Defines members whose values are retrieved from the Sinequa app configuration and that are available prior to user login\n */\nexport interface PreloginAppConfig {\n    /**\n     * Specifies which storage should be used to hold the CSRF token used to protect Sinequa API calls against\n     * CSRF attacks\n     */\n    authenticationStorage?: 'session' | 'local';\n    /**\n     * Contains the available login providers (only used for popup-based login)\n     */\n    providers?: IProviders;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoOAuthProvider?: string;\n    /**\n     * Contains the OAuth auto login provider\n     */\n    autoSAMLProvider?: string;\n    /**\n     * A boolean value indicating whether popup-based login should be used\n     */\n    usePopupForLogin?: boolean;\n    /**\n     * The URL to be used to display online help\n     */\n    helpUrl?: string;\n    /**\n     * A boolean value indicating whether auditing is enabled\n     */\n    auditEnabled?: boolean;\n    /**\n     * A boolean value indicating whether ML auditing is enabled\n     */\n    mlAuditEnabled?: boolean;\n    /**\n     * The version of Sinequa running on the server\n     */\n    version?: string;\n    /**\n     * The date of the version of Sinequa running on the server\n     */\n    versionDate?: Date;\n}\n\n/**\n * Contains start-up configuration for the application. An instance of this object\n * must be provided when registering the {@link WebServicesModule} either by providing the START_CONFIG\n * injection token or by using the [forRoot]{@link WebServicesModule#forRoot} static method.\n *\n * Typically only the members declared directly (url, app, production) should be specified.\n * The other values are either deduced from these members or are retrieved from the Sinequa configuration\n */\nexport interface StartConfig extends DeducedStartConfig, PreloginAppConfig {\n    /**\n     * The url of the sinequa server including any virtual directories - defaults to the browser url\n     */\n    url?: string;\n    /**\n     * The app name (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    app?: string;\n    /**\n     * A flag indicating whether the app is running in production mode or not\n     * (can be deduced from the browser url when the app is served by Sinequa)\n     */\n    production?: boolean;\n}\n\n/**\n * Defines Sinequa server configuration that can be held on a web server and retrieved using\n * [StartConfigWebService.fetchServerConfig]{@link StartConfigWebService#fetchServerConfig}\n */\nexport interface ServerConfig {\n    /**\n     * The URL of the Sinequa server including any virtual directories\n     */\n    url?: string;\n    /**\n     * The name of the application\n     */\n    app?: string;\n}\n\n/**\n * A service to manage the initialization of the app's {@link StartConfig} instance. The service\n * is automatically instantiated by an {@link APP_INITIALIZER} in {@link WebServicesModule} and the\n * initialization is performed in the constructor.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class StartConfigWebService {\n    private static API_PATH = \"/api/v1\";\n\n    /**\n     * Initializes the injected {@link StartConfig} instance. Outputs an error to the\n     * console if no instance is injected.\n     *\n     * @param startConfig The start configuration instance\n     */\n    constructor(@Optional() @Inject(START_CONFIG) private startConfig: StartConfig) {\n        if (!startConfig) {\n            console.error(\"START_CONFIG must be provided in your app module\");\n            return;\n        }\n        this.initStartConfig();\n    }\n\n    private getDefaultStartConfig(): StartConfig {\n        const startConfig: StartConfig = {};\n        const browserUrl = Utils.makeURL(window.location.href);\n        let parts = Utils.split(browserUrl.pathname, \"/\");\n        const appSpecifierIndex = parts.findIndex(value => Utils.eqNCN(value, \"app\", \"app-debug\"));\n        if (appSpecifierIndex !== -1 && appSpecifierIndex < parts.length - 1) {\n            const appSpecifier = parts[appSpecifierIndex];\n            startConfig.app = parts[appSpecifierIndex + 1];\n            startConfig.production = appSpecifier === \"app\" ? true : false;\n            parts = parts.slice(0, appSpecifierIndex);\n        }\n        startConfig.url = Utils.addUrl(browserUrl.origin, ...parts);\n        return startConfig;\n    }\n\n    private initStartConfig() {\n        const defaultStartConfig = this.getDefaultStartConfig();\n        const initialStartConfig = Utils.copy(this.startConfig);\n        Utils.extend(this.startConfig, defaultStartConfig, initialStartConfig);\n        const browserUrl = Utils.makeURL(window.location.href);\n        const url = Utils.makeURL(this.startConfig.url!);\n        let apiPath = Utils.addUrl(url.pathname, StartConfigWebService.API_PATH);\n        let applicationPath = url.pathname;\n        const corsActive = url.origin !== browserUrl.origin;\n        if (corsActive) {\n            apiPath = Utils.addUrl(url.origin, apiPath);\n            applicationPath = Utils.addUrl(url.origin, applicationPath);\n        }\n        this.startConfig.origin = url.origin;\n        this.startConfig.applicationPath = applicationPath;\n        this.startConfig.apiPath = apiPath;\n        this.startConfig.corsActive = corsActive;\n        this.startConfig.browserUrl = Utils.addUrl(browserUrl.origin, browserUrl.pathname);\n    }\n\n    /**\n     * Fetches pre-login app configuration from the Sinequa server and merges it\n     * into the start config instance\n     *\n     * @returns An observable of the start config after being merged with the pre-login app configuration\n     */\n    fetchPreLoginAppConfig(): Observable<StartConfig> {\n        return Observable.create(observer => {\n            let _url = Utils.addUrl(this.startConfig.apiPath!, \"app\");\n            _url = Utils.addSearchParams(_url, {\n                app: this.startConfig.app,\n                preLogin: true\n            });\n            atomic(_url, {\n                headers: {\n                    \"sinequa-force-camel-case\": true\n                }\n            })\n                .then(response => {\n                    const initialStartConfig = Utils.copy(this.startConfig);\n                    Utils.extend(this.startConfig, response.data, initialStartConfig);\n                    const versionDate = this.startConfig.versionDate;\n                    if (Utils.isString(versionDate)) { // it will be\n                        this.startConfig.versionDate = Utils.fromSysDateStr(versionDate);\n                    }\n                    observer.next(this.startConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.error(\"Error retrieving app config\");\n                    observer.error(error);\n                });\n        });\n    }\n\n    /**\n     * Retrieves Sinequa server configuration from a web server hosting the app\n     *\n     * @param url A URL to a JSON file containing the Sinequa server configuration\n     *\n     * @returns An observable of the Sinequa server configuration\n     */\n    fetchServerConfig(url?: string): Observable<ServerConfig> {\n        return Observable.create(observer => {\n            if (!url) {\n                const _url = Utils.makeURL(window.location.href);\n                url = Utils.addUrl(_url.pathname, \"sinequa-config.json\");\n            }\n            atomic(url)\n                .then(response => {\n                    // If the config file is empty or not valid json we'll most likely get a string for data\n                    let serverConfig = response.data;\n                    if (!Utils.isObject(serverConfig)) {\n                        console.warn(\"invalid sinequa-config.json file\");\n                        serverConfig = {};\n                    }\n                    observer.next(serverConfig);\n                    observer.complete();\n                })\n                .catch(error => {\n                    console.log(\"sinequa-config.json not found\");\n                    observer.next({});\n                    observer.complete();\n                });\n        });\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpRequest, HttpHandler} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {share, tap} from \"rxjs/operators\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A helper service that overrides the standard Angular [HttpClient]{@link https://angular.io/api/common/http/HttpClient}\n * to prevent multiple subscribers from causing multiple requests to be issued and to mitigate against request flooding\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SqHttpClient extends HttpClient {\n\n    private responseCache = new Map<string, Observable<any>>();\n\n    constructor(\n        httpHandler: HttpHandler) {\n        super(httpHandler);\n    }\n\n    private getRequestHash(first: string | HttpRequest<any>, url?: string, options = {}): string {\n        // The replacer ensures that object keys are always serialized in the same order\n        const strRequest = JSON.stringify([first, url, options],\n            (key: string, value: any) => {\n                if (Utils.isObject(value) && !Utils.isIterable(value)) {\n                    return Object.keys(value).sort().reduce(\n                        (s, k) => {\n                            s[k] = value[k];\n                            return s;\n                        }, {});\n                }\n                else {\n                    return value;\n                }\n            });\n        return Utils.sha256(strRequest);\n    }\n\n    /**\n     * Overrides the standard `HttpClient.request` method to change its behavior as follows:\n     * * pipes the observable to the share operator so that only a single request is issued even if there are multiple subscribers\n     * * to mitigate request flooding, a cache of pending response observables keyed by the request thumbprint is maintained.\n     * An observable from the cache is returned if the incoming request is identical to one in the cache\n     */\n    request(first: string | HttpRequest<any>, url?: string, options = {}): Observable<any> {\n        const requestHash = this.getRequestHash(first, url, options);\n        let observable = this.responseCache.get(requestHash);\n        if (!observable) {\n            observable = super.request(first as string, url as string, options)\n                .pipe(share())\n                .pipe(tap(() => this.responseCache.delete(requestHash)));\n            this.responseCache.set(requestHash, observable);\n        }\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {CCApp} from \"./config/ccapp\";\n\n/**\n * Defines the object returned by a call to [AppWebService.refresh]{@link AppWebService#refresh}. If the upToDate\n * member is false then the app member contains the latest version of the app configuration\n */\nexport interface CCAppRefresh {\n    upToDate: boolean;\n    app?: CCApp;\n}\n\n/**\n * This service provides methods to retrieve and refresh the configuration of an app\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppWebService extends HttpService {\n    /**\n     * Constructor\n     *\n     * @param startConfig Provides the app name\n     * @param httpClient The HTTP client\n     */\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n\n        if (!this.appName) {\n            console.error(\"Missing app name!\");\n        }\n    }\n\n    /**\n     * Gets the app configuration for the app name\n     *\n     * @returns An observable of the app configuration\n     */\n    get(): Observable<CCApp> {\n        const observable = this.httpClient.get<CCApp>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\"\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                //console.log(\"appWebService.get success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.get failure - reason: \", error);\n                });\n        return observable;\n    }\n\n    /**\n     * Refreshes the app configuration based on a version identifier\n     *\n     * @param appVersionId The current app version id [CCApp.versionId]{@link CCApp#versionId}\n     * @param auditEvents Audit events to be recorded for this call\n     *\n     * @returns An observable of an object containing a flag indicating whether the configuration was up to date. If false\n     * then the app member of the object will be set to the new version of the configuration.\n     */\n    refresh(appVersionId: string, auditEvents?: AuditEvents): Observable<CCAppRefresh> {\n        const observable = this.httpClient.get<{upToDate: boolean, app: CCApp}>(this.makeUrl(\"app\"), {\n            params: this.makeParams({\n                app: this.appName || \"\",\n                versionId: appVersionId,\n                $auditRecord: auditEvents\n            })\n        });\n        observable\n            .subscribe(\n                (response) => {\n                    //console.log(\"appWebService.refresh success - data: \", response);\n                    return response;\n                },\n                (error) => {\n                    //console.log(\"appWebService.refresh failure - reason: \", error);\n                });\n        return observable;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf, JsonObject} from \"@sinequa/core/base\";\nimport {Results, Record} from \"./query.web.service\";\nimport {LinkResult} from \"./sponsored-links.web.service\";\n\n/**\n * Describes a single audit event\n */\nexport interface AuditEvent {\n    type: AuditEventType | string; // allow custom event types\n    detail?: JsonObject;\n    rfmDetail?: JsonObject;\n}\n\n/**\n * Contains an array of {@link AuditEvent} objects and an array of ML audit event records\n */\nexport interface AuditRecord {\n    auditEvents?: AuditEvent[];\n    mlAuditEvents?: any[];\n}\n\n/**\n * A composite type describing a set of AuditEvents\n */\nexport type AuditEvents = AuditEvent | AuditEvent[] | AuditRecord;\n\n/**\n * The standard audit event types\n */\nexport const enum AuditEventType {\n    // Should be in par with AuditEventType enum from AuditManager.cs\n    None = \"None\",\n\n    // WebApp event types\n    Search_FirstPage = \"Search_FirstPage\",\n    Search_Text = \"Search_Text\",\n    Search_Refine = \"Search_Refine\",\n    Search_Select_Item = \"Search_Select_Item\",\n    Search_Select_Custom = \"Search_Select_Custom\",\n    Search_Select_Concept = \"Search_Select_Concept\",\n    Search_Select_Correction = \"Search_Select_Correction\",\n    Search_GotoPage = \"Search_GotoPage\",\n    Search_GotoTab = \"Search_GotoTab\",\n    Search_DisplayResult = \"Search_DisplayResult\",\n    Search_RemoveResult = \"Search_RemoveResult\",\n    Search_RemoveAdvanced = \"Search_RemoveAdvanced\",\n    Search_SavedQuery = \"Search_SavedQuery\",\n    Search_WebService = \"Search_WebService\",\n    Search_DidYouMean_Original = \"Search_DidYouMean_Original\",\n    Search_DidYouMean_Correction = \"Search_DidYouMean_Correction\",\n    Search_ExportCSV = \"Search_ExportCSV\",\n    Search_SavedQuery_ExportCSV = \"Search_SavedQuery_ExportCSV\",\n    Search_Selection_ExportCSV = \"Search_Selection_ExportCSV\",\n    Search_AlertQuery = \"Search_AlertQuery\",\n    Search_Select_AnalyticsItem = \"Search_Select_AnalyticsItem\",\n    Search_Sort = \"Search_Sort\",\n    Search_Exit_Logout = \"Search_Exit_Logout\",\n    Search_Timeline_Usage = \"Search_Timeline_Usage\",\n    Search_AutoComplete = \"Search_Autocomplete\",\n\n    SavedQuery_Add = \"SavedQuery_Add\",\n    SavedQuery_Delete = \"SavedQuery_Delete\",\n    SavedQuery_DeleteAll = \"SavedQuery_DeleteAll\",\n    SavedQuery_Rename = \"SavedQuery_Rename\",\n\n    Alert_Edit = \"Alert_Edit\",\n    Alert_Delete = \"Alert_Delete\",\n    Alert_DeleteAll = \"Alert_DeleteAll\",\n\n    Link_Display = \"Link_Display\",\n    Link_Click = \"Link_Click\",\n\n    Basket_Add = \"Basket_Add\",\n    Basket_Delete = \"Basket_Delete\",\n    Basket_DeleteAll = \"Basket_DeleteAll\",\n    Basket_Rename = \"Basket_Rename\",\n    Basket_AddDoc = \"Basket_AddDoc\",\n    Basket_RemoveDoc = \"Basket_RemoveDoc\",\n    Basket_Open = \"Basket_Open\",\n    Basket_ExportCSV = \"Basket_ExportCSV\",\n\n    Label_Add = \"Label_Add\",\n    Label_Delete = \"Label_Delete\",\n    Label_Rename = \"Label_Rename\",\n    Label_Open = \"Label_Open\",\n    Label_AddDoc = \"Label_AddDoc\",\n    Label_RemoveDoc = \"Label_RemoveDoc\",\n    Label_ExportCSV = \"Label_ExportCSV\",\n    Label_Menu_ExportCSV = \"Label_Menu_ExportCSV\",\n\n    Rating_Set = \"Rating_Set\",\n    Rating_Delete = \"Rating_Delete\",\n\n    Doc_Preview = \"Doc_Preview\",\n    Doc_CacheHtml = \"Doc_CacheHtml\",\n    Doc_CachePdf = \"Doc_CachePdf\",\n    Doc_CacheOriginal = \"Doc_CacheOriginal\",\n    Doc_Url1 = \"Doc_Url1\",\n    Doc_Url2 = \"Doc_Url2\",\n\n    Click_ResultLink = \"Click_ResultLink\",\n    Click_ResultLink1 = \"Click_ResultLink1\",\n    Click_ResultLink2 = \"Click_ResultLink2\",\n    Click_ResultLink3 = \"Click_ResultLink3\",\n    Click_ResultLink4 = \"Click_ResultLink4\",\n    Click_ResultLink5 = \"Click_ResultLink5\",\n    Click_ResultLink6 = \"Click_ResultLink6\",\n    Click_ResultLink7 = \"Click_ResultLink7\",\n    Click_ResultLink8 = \"Click_ResultLink8\",\n    Click_ResultLink9 = \"Click_ResultLink9\",\n    Click_ResultLink10 = \"Click_ResultLink10\",\n    Click_PreviewLink1 = \"Click_PreviewLink1\",\n    Click_PreviewLink2 = \"Click_PreviewLink2\",\n    Click_PreviewLink3 = \"Click_PreviewLink3\",\n    Click_PreviewLink4 = \"Click_PreviewLink4\",\n    Click_PreviewLink5 = \"Click_PreviewLink5\",\n    Click_PreviewLink6 = \"Click_PreviewLink6\",\n    Click_PreviewLink7 = \"Click_PreviewLink7\",\n    Click_PreviewLink8 = \"Click_PreviewLink8\",\n    Click_PreviewLink9 = \"Click_PreviewLink9\",\n    Click_PreviewLink10 = \"Click_PreviewLink10\",\n\n    RFM_ClickSet = \"RFM_ClickSet\",\n    RFM_ClickReset = \"RFM_ClickReset\",\n    RFM_Like = \"RFM_Like\",\n    RFM_LikeReset = \"RFM_LikeReset\",\n    RFM_Dislike = \"RFM_Dislike\",\n    RFM_Important = \"RFM_Important\",\n    RFM_ImportantReset = \"RFM_ImportantReset\",\n    RFM_Ban = \"RFM_Ban\"\n}\n\n/**\n * A service to notify the audit manager on the Sinequa server of client-side events\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuditWebService extends HttpService {\n    private static readonly endpoint = \"audit.notify\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        protected httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Notify the Sinequa server of a sponsored link event\n     *\n     * @param evt The audit event type\n     * @param sl The sponsored link\n     * @param resultId The id of the results that showed the sponsored link\n     * @param parameters Additional information\n     */\n    notifySponsoredLink(\n        evt: AuditEventType, sl: LinkResult, resultId: string,\n        parameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const detail: JsonObject = {\n            \"link-id\": sl.id,\n            rank: sl.rank || 0,\n            title: sl.title,\n            url: sl.url,\n            \"result-id\": resultId\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param doc The document (record) in question\n     * @param resultsOrId The results or resultid that contain the document\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocument(\n        evt: AuditEventType, doc: Record, resultsOrId: Results | string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        let resultId: string | null;\n        let results: Results | undefined;\n        if (Utils.isString(resultsOrId)) {\n            resultId = resultsOrId;\n        }\n        else {\n            results = resultsOrId;\n            resultId = results ? results.id : null;\n        }\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": doc.id,\n            rank: doc.rank,\n            title: doc.title,\n            source: Utils.treeFirstNode(doc.collection[0]),\n            collection: doc.collection[0],\n            \"result-id\": resultId,\n            filename: doc.filename,\n            fileext: doc.fileext,\n            index: doc.databasealias\n        };\n        if (results) {\n            detail[\"result-count\"] = results.totalRowCount;\n        }\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a document event\n     *\n     * @param evt The audit event type\n     * @param id The id of the document (record) in question\n     * @param parameters Additional parameters\n     * @param rfmParameters Additional RFM parameters\n     */\n    notifyDocumentById(\n        evt: AuditEventType, id: string,\n        parameters?: MapOf<string | number | boolean | undefined>,\n        rfmParameters?: MapOf<string | number | boolean | undefined>): Observable<void>  {\n        const collection = id.substr(0, id.indexOf(\"|\"));\n        const detail: JsonObject = {\n            app: this.appName,\n            \"doc-id\": id,\n            rank: -1,\n            source: Utils.treeFirstNode(collection),\n            collection\n        };\n        if (parameters) {\n            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);\n        }\n        const data: AuditEvent = {\n            type: evt,\n            detail\n        };\n        if (rfmParameters) {\n            const rfmDetail: JsonObject = {};\n            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);\n            data.rfmDetail = rfmDetail;\n        }\n        return this.notify(data);\n    }\n\n    /**\n     * Notify logout\n     */\n    notifyLogout() : Observable<void> {\n        const detail: JsonObject = {\n            app: this.appName,\n        };\n\n        const data: AuditEvent = {\n            type: AuditEventType.Search_Exit_Logout,\n            detail\n        };\n\n        return this.notify(data);\n    }\n\n    /**\n     * Notify the Sinequa server of a set of audit events\n     *\n     * @param auditEvents The audit events\n     */\n    notify(auditEvents: AuditEvents): Observable<void> {\n        if (!this.startConfig.auditEnabled) {\n            return of(undefined);\n        }\n        const observable = this.httpClient.post<void>(this.makeUrl(AuditWebService.endpoint), {\n            event: AuditEventType.None,\n            app: this.appName,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"auditService.notify failure - error: \", error);\n            });\n        return observable;\n    }\n}","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SqHttpClient } from \"./http-client\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Results } from \"./query.web.service\";\r\nimport { StartConfig, START_CONFIG } from \"./start-config.web.service\";\r\n\r\nexport type Dataset = {[key: string]: Results|DatasetError};\r\n\r\nexport interface DatasetError {\r\n    errorCode: number;\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface DatasetDescription {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\n/**\r\n * A service to notify the audit manager on the Sinequa server of client-side events\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DatasetWebService extends HttpService {\r\n    private static readonly endpoint = \"search.dataset\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        protected httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    /**\r\n     * Return the list of queries configured in the given\r\n     * dataset web service.\r\n     * @param webServiceName name of the web service\r\n     */\r\n    list(webServiceName: string): Observable<DatasetDescription[]> {\r\n        return this.httpClient.get<DatasetDescription[]>(\r\n            `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param query name of the query\r\n     * @param params parameters of the queries\r\n     */\r\n    get(webServiceName: string, query: string, parameters = {}): Observable<Results|DatasetError> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}/${query}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets[query]));\r\n    }\r\n\r\n    /**\r\n     * Queries the given web service.\r\n     * @param webServiceName name of the web service\r\n     * @param params parameters of the queries\r\n     */\r\n    getAll(webServiceName: string, parameters = {}): Observable<Dataset> {\r\n        let url = `${this.makeUrl(DatasetWebService.endpoint)}/${webServiceName}`;\r\n        return this.httpClient.post<{datasets: Dataset}>(url, {parameters})\r\n            .pipe(map(d => d.datasets));\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Utils } from \"@sinequa/core/base\";\n\n/**\n * A service to manage navigator downloads\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DownloadWebService {\n\n    /**\n     * Subscribes to the given observable to trigger a download action on the navigator\n     * when the observed object is ready.\n     *\n     * @param observable The observable to subscribe.\n     * @returns The observable for chaining.\n     */\n    public download(observable: Observable<HttpResponse<Blob>>): Observable<HttpResponse<Blob>> {\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                const header = response.headers.get('content-disposition');\n                const fileName = header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n\n                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                    // For IE\n                    window.navigator.msSaveOrOpenBlob(response.body, fileName);\n                } else {\n                    const link = document.createElement('a');\n                    document.body.appendChild(link);\n                    const blobUrl = window.URL.createObjectURL(response.body);\n                    link.href = blobUrl;\n                    link.download = fileName;\n                    link.click();\n                    link.remove();\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n\n                return response;\n            }\n        );\n        return observable;\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * A generic service for invoking JsonMethod plugins\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class JsonMethodPluginService extends HttpService{\n  constructor(\n    public httpClient: SqHttpClient,\n    @Inject(START_CONFIG) startConfig: StartConfig\n    ) {\n      super(startConfig);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  post(method: string, query: any, options?: {[key: string]: any}) : Observable<any> {\n    if (!Utils.isObject(query)) {\n      return throwError({error: \"invalid query object\"});\n    }\n    const observable = this.httpClient.post(this.makeUrl(method), query, options);\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.post success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.post failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.post complete\");\n      });\n\n    return observable;\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP POST\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  call(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    return this.post(method, query, options);\n  }\n\n  /**\n   * Call a JsonMethod plugin using an HTTP GET\n   *\n   * @param method The name of the JsonMethod plugin\n   * @param query Parameters to pass to the plugin\n   * @param options HTTP options for the request\n   * @returns An observable of the plugin's return value\n   */\n  get(method: string, query: any, options?: {[key: string]: any}): Observable<any> {\n    const observable = this.httpClient.get(this.makeUrl(method), {\n      params: this.makeParams(query),\n      ...options\n    });\n\n    Utils.subscribe(observable,\n      (response) => {\n        console.log(\"JsonMethodPluginService.get success - data: \", response);\n      },\n      (error) => {\n        console.log(\"JsonMethodPluginService.get failure - error: \", error);\n      },\n      () => {\n        console.log(\"JsonMethodPluginService.get complete\");\n      });\n\n    return observable;\n  }\n\n  makeUrl(api: string): string {\n    return super.makeUrl('plugin/' + api);\n  }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes the object returned by the list action of the labels web service\n */\nexport interface Labels {\n    labels: string[];\n}\n\n/**\n * Describes the object returned by the getUserRights action of the labels web service\n */\nexport interface LabelsRights {\n    canManagePublicLabels: boolean;\n    canEditPublicLabels: boolean;\n}\n\n/**\n * A service for calling the labels web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class LabelsWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Calls the list action of the labels web service\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    list(\n        prefix: string,\n        _public: boolean): Observable<Labels> {\n        const observable = this.httpClient.get<Labels>(this.makeUrl(\"labels\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"list\",\n                q: prefix,\n                public: _public,\n                locale: this.intlService.currentLocale.name,\n                localize: false\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.list failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * A wrapper around the list method. The matching labels are returned as an array of strings\n     *\n     * @param prefix The string that the returned labels should begin with\n     * @param _public Determines whether public or private labels should be returned\n     */\n    array(\n        prefix: string,\n        _public: boolean): Observable<string[]> {\n        return this.list(prefix, _public)\n            .pipe(map((value) => {\n                return value.labels;\n            }));\n    }\n\n    /**\n     * Calls the getUserRights action of the labels web service\n     */\n\n    getUserRights(): Observable<LabelsRights> {\n        const observable = this.httpClient.get<LabelsRights>(\n            this.makeUrl('labels'),\n            {\n                params: this.makeParams({\n                    app: this.appName,\n                    action: 'getUserRights'\n                })\n            }\n        );\n        Utils.subscribe(\n            observable,\n            response => response,\n            error => console.log(\"labelsService.getUserRights failure - error: \", error)\n        );\n        return observable;\n    }\n\n    /**\n     * Add labels to a set of documents\n     *\n     * @param labels The labels to add\n     * @param ids The ids of the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    add(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"add\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_AddDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addToLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.add failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from a set of documents\n     *\n     * @param labels The labels to remove\n     * @param ids The ids of the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    remove(labels: string[],\n        ids: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"remove\",\n            labels: labels,\n            ids: ids,\n            public: _public,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Label_RemoveDoc,\n                        detail: {\n                            public: _public,\n                            label: !!labels ? labels.toString() : null,\n                            doccount: !!ids ? ids.length : 0\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeFromLabel\",\n                        documentIds: ids\n                    }\n                ]\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.remove failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Renames a set of labels\n     *\n     * @param labels The labels to rename\n     * @param newLabel The new name for the labels\n     * @param _public Determines whether the labels are public or private\n     */\n    rename(labels: string[],\n        newLabel: string,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"rename\",\n            labels: labels,\n            newLabel: newLabel,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Rename,\n                detail: {\n                    public: _public,\n                    oldlabel: !!labels ? labels.toString() : null,\n                    label: newLabel\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.rename failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Deletes a set of labels\n     *\n     * @param labels The labels to be deleted\n     * @param _public Determines whether the labels are public or private\n     */\n    delete(labels: string[],\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"delete\",\n            labels: labels,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.delete failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Adds labels to the documents identified by the passed query\n     *\n     * @param labels The labels to add\n     * @param query The query to produce the documents to which the labels should be added\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkAdd(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkAdd\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Add,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkAdd failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Removes labels from the documents identified by the passed query\n     *\n     * @param labels The labels to remove\n     * @param query The query to produce the documents from which the labels should be removed\n     * @param _public Determines whether the labels are public or private\n     */\n    bulkRemove(labels: string[],\n        query: IQuery,\n        _public: boolean): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"labels\"), {\n            app: this.appName,\n            action: \"bulkRemove\",\n            labels: labels,\n            query: query,\n            public: _public,\n            auditEvents: {\n                type: AuditEventType.Label_Delete,\n                detail: {\n                    public: _public,\n                    label: !!labels ? labels.toString() : null,\n                    query: query != null ? query.name : null\n                }\n            }\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"labelsService.bulkRemove failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {IQuery} from \"./query/query\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {catchError, distinctUntilChanged, shareReplay} from \"rxjs/operators\";\n\n/**\n * Describes highlight data for a set of categories\n */\nexport interface HighlightDataPerCategory {\n    [key: string] : CategoryHighlightData;\n}\n\n/**\n * Describes highlight data for a category\n */\nexport interface CategoryHighlightData {\n    categoryDisplayLabel: string;\n    categoryDisplayLabelPlural: string;\n    categoryFilterAllLabel: string;\n    categoryFilterNoneLabel: string;\n    values: HighlightValue[];\n}\n\n/**\n * Describes a highlight value\n */\nexport interface HighlightValue {\n    value: string;\n    displayValue: string;\n    locations: Location[];\n}\n\n/**\n * Describes a single highlight location\n */\nexport interface Location {\n    start: number;\n    enclosingLength: number;\n}\n\n/**\n * Describes highlight data for a set of locations\n */\nexport interface HighlightDataPerLocation {\n    [index: number]: {\n        start: number,\n        length: number,\n        values: string[],\n        displayValue: string,\n        positionInCategories: { [category: string]: number }\n    };\n\n    size(): number;\n}\n\n/**\n * Describes the data returned by [PreviewWebService.get]{@link PreviewWebService#get}\n */\nexport interface PreviewData {\n    record: Record;\n    resultId: string;\n    cacheId: string;\n    highlightsPerCategory: HighlightDataPerCategory;\n    highlightsPerLocation: HighlightDataPerLocation;\n    documentCachedContentUrl: string;\n}\n\n/**\n * A service for calling the preview web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PreviewWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets {@link PreviewData} for a document in the context of a {@link IQuery}\n     *\n     * @param id The document id\n     * @param query The query context\n     * @param auditEvents Audit events to store on the server\n     */\n    public get(id: string, query: IQuery, auditEvents?: AuditEvents): Observable<PreviewData> {\n        return this.httpClient.post<PreviewData>(this.makeUrl(\"preview\"), {\n            app: this.appName,\n            action: \"get\",\n            id,\n            query,\n            browserUrl: this.startConfig.browserUrl,\n            $auditRecord: auditEvents\n        }).pipe(shareReplay(1));\n    }\n    \n    /**\n     * Gets document's preview HTML content\n     * \n     * @param url The document preview URL\n     * @returns \n     */\n    public getHtmlPreview(url: string): Observable<any> {\n        return this.httpClient.get(url, {responseType: \"text\"}).pipe(\n            catchError(err => throwError(err)),\n            distinctUntilChanged(),\n            shareReplay(1)\n        );                \n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {pluck} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * Describes a Sinequa princpal\n */\nexport interface Principal {\n    id: string;\n    id2: string;\n    id3: string;\n    id4: string;\n    id5: string;\n    name: string;\n    email: string;\n    description: string;\n    longName: string;\n    userId: string;\n    fullName: string;\n    isAdministrator: boolean;\n    isDelegatedAdmin: boolean;\n    param1: string;\n    param2: string;\n    param3: string;\n    param4: string;\n    param5: string;\n    param6: string;\n    param7: string;\n    param8: string;\n    param9: string;\n    param10: string;\n}\n\nexport interface PrincipalUserInfo {\n    id: string;\n    userId: string;\n    name: string;\n    fullName: string;\n    longName: string;\n    email: string;\n    isUser: string;\n    isGroup: string;\n}\n\nexport interface PrincipalParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    isUser?: boolean;   // true\n    isGroup?: boolean;  // true\n    search?: string;    // search by name, fullname or email\n\n}\n\nexport interface PrincipalUserIdsParams {\n    offset?: number;    // 0\n    limit?: number;     // 10\n    userIds: string[];\n}\n\n/**\n * A base event from which all events that can be issued by the {@link PrincipalWebService} are derived\n */\nexport interface PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [principal]{@link PrincipalWebService#principal} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface PrincipalChangedEvent extends PrincipalEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the principal web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class PrincipalWebService extends HttpService implements OnDestroy {\n    private _principal: Principal | undefined;\n    private _events = new Subject<PrincipalChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<PrincipalChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link Principal}\n     */\n    get principal(): Principal | undefined {\n        return this._principal;\n    }\n\n    /**\n     * Sets the current {@link Principal} and issues the \"changed\" event\n     */\n    set principal(value: Principal | undefined) {\n        this._principal = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    /**\n     * Gets the list of user info (user or group)\n     *\n     * @param params query params to specify the search\n     * @returns list of user info\n     */\n    list(params?: PrincipalParams): Observable<(PrincipalUserInfo | undefined)[]> {\n        return this.httpClient.get<(PrincipalUserInfo | undefined)[]>(this.makeUrl(\"principal/list\"), {\n            params: this.makeParams({...params})\n        });\n    }\n\n    userId(userId: string): Observable<Partial<PrincipalUserInfo>> {\n        return this.httpClient.get<Partial<PrincipalUserInfo>>(this.makeUrl(`principal/userId/${userId}`));\n    }\n\n    userIds(params?: PrincipalUserIdsParams): Observable<Partial<PrincipalUserInfo[]>> {\n        return this.httpClient.post<Partial<PrincipalUserInfo>>(this.makeUrl(\"principal/userids\"), params).pipe(\n            pluck(\"principals\")\n        );\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials\n     *\n     * @param autoAuthenticate Determines whether the {@link HttpInterceptor} should perform HTTP 401 handling\n     * for this request\n     */\n    get(autoAuthenticate = true): Observable<Principal> {\n        return this.httpClient.get<Principal>(this.makeUrl(\"principal\"), {\n            params: this.makeParams({\n                action: \"get\",\n                noAutoAuthentication: !autoAuthenticate\n            })\n        });\n    }\n\n    /**\n     * Gets the principal from the server based on the current login credentials and sets the\n     * principal member\n     */\n    load(): Observable<Principal> {\n        const observable = this.get();\n        Utils.subscribe(observable,\n            (response) => {\n                this.principal = response;\n                return response;\n            },\n            (error) => {\n                console.log(\"principalService.get failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, throwError} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, FieldValue} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport {CCColumn, SpellingCorrectionMode} from \"./config/ccapp\";\n\n/**\n * Describes the results of a call to the query web service\n */\nexport interface Results {\n    /**\n     * A unique identifier for this set of results - typically used for auditing\n     */\n    id: string;\n    /**\n     * The sql queries that were executed on the server to produce these results\n     */\n    sql: string[];\n    /**\n     * The page number of these results\n     */\n    page: number;\n    /**\n     * The page size or number of document per page\n     */\n    pageSize: number;\n    /**\n     * The number of document results for the query.\n     */\n    rowCount: number;\n    /**\n     * The number of document results for the query. If tab search is active and the `CCTabSearch.totalIsSumOfTabTotals` option is set then\n     * the total of counts of all the tabs will be returned. Otherwise this returns the same value as `rowCount`.\n     */\n    totalRowCount: number;\n    /**\n     * Returns the number of documents included in these results, as reported by the engine. It will have the same value as `records.length`.\n     */\n    cursorRowCount: number;\n    /**\n     * The number of attributes in these results\n     */\n    attributeCount: number;\n    /**\n     * The number of columns in these results\n     */\n    columnCount: number;\n    /**\n     * The name of currently selected tab. See {@link CCTab}\n     */\n    tab: string;\n    /**\n     * Information on the tabs for these results. See {@link CCTabSearch}\n     */\n    tabs: Tab[];\n    /**\n     * The name of the currently selected scope. See {@link CCScope}\n     */\n    scope: string;\n    /**\n     * The name of the currently selected sorting choice. See {@link CCSortingChoice}\n     */\n    sort: string;\n    /**\n     * Details of the \"did you mean\" state for these results\n     */\n    didYouMean: DidYouMean;\n    /**\n     * The aggregation results\n     */\n    aggregations: Aggregation[];\n    /**\n     * The attributes for these results\n     */\n    attributes: Attributes;\n    /**\n     * Any query intents associated with these results\n     */\n    queryIntents: QueryIntent[];\n    /**\n     * An analysis of the query associated with these resullts\n     */\n    queryAnalysis: QueryAnalysis;\n    /**\n     * The document records\n     */\n    records: Record[];\n    /**\n     * A hash of the associated results for use with RFM (relevance feedback model) functionality\n     */\n    rfmQueryHash: string;\n    /**\n     * The name of the {@link IQuery} that produced these results\n     */\n    queryName: string;\n    /**\n     * SQL statements executed by the query web service\n     */\n    statements: string[];\n}\n\n/**\n * Describes the results for a particular tab\n */\nexport interface Tab {\n    /**\n     * The name of the tab\n     */\n    name: string;\n    /**\n     * The display value of the tab\n     */\n    display: string;\n    /**\n     * The tab value\n     */\n    value: string;\n    /**\n     * The number of document records that would be returned if this tab is selected\n     */\n    count: number;\n}\n\n/**\n * Describes a single \"did you mean\" item\n */\nexport interface DidYouMeanItem {\n    /**\n     * The original search term\n     */\n    original: string;\n    /**\n     * The corrected search term\n     */\n    corrected: string;\n}\n\n/**\n * Describes the \"did you mean\" results\n */\nexport interface DidYouMean {\n    /**\n     * The spelling correction mode used for these results\n     */\n    spellingCorrectionMode: SpellingCorrectionMode;\n    /**\n     * The `DidYouMeanItem` corresponding to the main fulltext terms\n     */\n    text: DidYouMeanItem;\n    /**\n     * The `DidYouMeanItem`s corresponding to any refine fulltext term selections\n     */\n    refine: DidYouMeanItem[];\n}\n\n/**\n * Used to inform whether a query is being executed using original or corrected search terms\n */\nexport enum DidYouMeanKind {\n    Original,\n    Corrected\n}\n\n/**\n * Various attributes that are returned with a set of search results\n */\nexport interface  Attributes {\n    queryid: string;\n    searchid: string;\n    processingtime: string;\n    rowfetchtime: string;\n    cachehit: string;\n    matchingrowcount: string;\n    internalqueryanalysis: string;\n    internalquerylog: string;\n}\n\n/**\n * Describes a single query intent item\n */\nexport interface QueryIntent {\n    name: string;\n    component: string;\n    entities: QueryIntentEntity[];\n    words: QueryIntentWord[];\n    actions: QueryIntentAction[];\n    datasets: QueryIntentDatasets;\n}\n\n/**\n * Describes a query intent entity\n */\nexport interface QueryIntentEntity {\n    name: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent word\n */\nexport interface QueryIntentWord {\n    word: string;\n    value: string;\n    matched: boolean;\n}\n\n/**\n * Describes a query intent action\n */\nexport interface QueryIntentAction {\n    type: string;\n    data: string;\n}\n\n/**\n * Describes a set of query intent datasets\n */\nexport interface QueryIntentDatasets {\n    [name: string] : {\n        attributes : [any],\n        rows : [any]\n    };\n}\n\n/**\n * Describes an analysis of a query\n */\nexport interface QueryAnalysis {\n    text: string;\n    initial: boolean;\n    queryLanguage: string | undefined;\n    elements: QueryAnalysisElement[];\n}\n\n/**\n * Describes an element of query analysis\n */\nexport interface QueryAnalysisElement {\n    text: string;\n    entity: string;\n    weight: number;\n    length: number;\n    offset: number;\n    stopword: boolean;\n    root: string;\n    normalization: string;\n    lemmas: {text: string}[];\n    entities: QueryAnalysisElement[];\n    synonyms: QueryAnalysisElement[];\n    reformulations: QueryAnalysisElement[];\n    typos: QueryAnalysisElement[];\n    expression: QueryAnalysisElement[];\n    adjacency: QueryAnalysisElement[];\n    exact: QueryAnalysisElement[];\n}\n\n/**\n * Describes the match location information for a particular partname\n */\nexport interface PartnameMatchLocations {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname match locations\n */\nexport interface MatchLocationsPerPartname {\n    matchlocations: PartnameMatchLocations[];\n}\n\n/**\n * Describes the locations of relevant extracts for a partname\n */\nexport interface PartnameExtracts {\n    partname: string;\n    data: string;\n}\n\n/**\n * Describes a set of partname relevant extracts locations\n */\nexport interface ExtractsPerPartname {\n    highlight: PartnameExtracts[];\n}\n\n/**\n * Describes the term presence for a particular search term\n */\nexport interface TermPresence {\n    term: string;\n    presence: \"found\" | \"missing\";\n}\n\n/**\n * Describes an aggregation item. This serves as a base interface for list aggregation items and tree aggregation nodes\n */\nexport interface AggregationItem {\n    /**\n     * The value of the item\n     */\n    value: FieldValue;\n    /**\n     * The display value of the item, if any\n     */\n    display?: string;\n    /**\n     * The number of documents that contain this item in the current results\n     */\n    count: number;\n    /**\n     * Identifies any operator with their associated results\n     */\n    operatorResults?: {\n        [key in \"min\" | \"max\" | \"sum\" | \"avg\" | \"stddev\" | \"variance\"]: number | Date\n    };\n\n    /**\n     * A client-side field that indicates whether this item is currrently selected\n     */\n    $selected?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently excluded\n     */\n    $excluded?: boolean;\n    /**\n     * A client-side field that indicates whether this item is currently filtered\n     */\n    $filtered?: boolean;\n    /**\n     * A client-side field that indicates the column that provided the value for this item.\n     * This can be useful when mixing items from different aggregations.\n     */\n    $column?: CCColumn;\n}\n\n/**\n * Describes any fields particular to a list aggregation item\n */\nexport type ListAggregationItem = AggregationItem;\n\n/**\n * Describes any fields particular to a tree aggregation node\n */\nexport interface TreeAggregationNode extends AggregationItem {\n    /**\n     * Determines whether this node has any children even if the `items` field is not currently populated\n     */\n    hasChildren: boolean;\n    /**\n     * Contains the child nodes of this node\n     */\n    items: TreeAggregationNode[];\n\n    /**\n     * A client-side field that contains the full path of the node\n     */\n    $path?: string;\n    /**\n     * A client-side field that indicates whether a parent node is currently open\n     */\n    $opened?: boolean;\n    /**\n     * The level at which this node is in the Tree aggregation\n     */\n    $level: number;\n}\n\n/**\n * Describes the results of an aggregation. This serves as a base interface for list and tree aggregations\n */\nexport interface Aggregation {\n    /**\n     * The name of the aggregation\n     */\n    name: string;\n    /**\n     * The name of the index column used to provide aggregation items\n     */\n    column: string;\n    /**\n     * Indicates whether the aggregation items are calculated using a distrbution (see App Dependencies in the Sinequa admin interface)\n     */\n    isDistribution?: boolean;\n    /**\n     * Indicates whether the aggregation items should be handled as tree nodes. This can be set to false for a tree aggregation\n     * if the \"Load tree as csv\" option is checked in the Sinequa configuration\n     */\n    isTree?: boolean;\n    /**\n     * Indicates whether the values for the items are fielded search expressions. This is the case for aggregations using a\n     * distribution (see `isDistribution`) and crossed distributions\n     */\n    valuesAreExpressions?: boolean;\n    /**\n     * The aggregation items for this aggregation\n     */\n    items?: AggregationItem[];\n}\n\n/**\n * Describes the fields specific to a list aggregation\n */\nexport type ListAggregation = Aggregation;\n\n/**\n * Describes the fields specific to a tree aggregation\n */\nexport type TreeAggregation = Aggregation;\n\n/**\n * Describes the fields making up an entity in the context of a particular document\n */\nexport interface EntityItem {\n    /**\n     * The value\n     */\n    value: string;\n    /**\n     * The display\n     */\n    display: string;\n    /**\n     * The locations of this item in the document text in the form `row1,col1;row2,col2;...`\n     */\n    locations?: string;\n    /**\n     * The remapped locations of this item in the original document in the form `row1,col1;row2,col2;...`\n     */\n    originalLocations?: string;\n    /**\n     * Following ES-11166, the number of occurrence of this entity in the document can be included\n     */\n    count?: number;\n}\n\n/**\n * Display kinds for RFM\n */\nexport enum RFMDisplay {\n    // Must be in par with C# RFMDisplay enum (RFM.cs)\n    none          = 0,\n\n    positiveRate  = 1,\n    mainlyPosRate = 2,\n    unrate        = 4,\n    mainlyNegRate = 8,\n    negativeRate  = 16,\n\n    all          = 31,\n    positiveOnly = 7,\n    negativeOnly = 28,\n\n    personalAll = 21,\n    personalPosOnly = 5,\n    personalNegOnly = 20,\n}\n\n/**\n * Describes the fields of an RFM action\n */\nexport interface RFMActionDisplay {\n    eventCount: number;\n    average: number;\n    status: RFMDisplay;\n    image: RFMDisplay;\n    imageAction: RFMDisplay;\n    availableActions: RFMDisplay;\n}\n\n/**\n * Describes the RFM data returned with a set of results\n */\nexport interface RFMData {\n    click?: RFMActionDisplay;\n    like?: RFMActionDisplay;\n    important?: RFMActionDisplay;\n}\n\n/**\n * Describes the standard fields in a document result record\n */\nexport interface Record {\n    /**\n     * The zero-based position of this document in the results\n     */\n    rank: number;\n    /**\n     * The unique identifier of this document\n     */\n    id: string;\n    /**\n     * The name of the index that contains this document\n     */\n    databasealias: string;\n    /**\n     * The global relevance of this document in the context of the query\n     */\n    globalrelevance: number;\n    /**\n     * Partnames that contain one or more of the search terms\n     */\n    matchingpartnames: string[];\n    /**\n     * The locations of the search terms in the document\n     */\n    matchlocations: string[];\n    /**\n     * The locations of the search terms in the document grouped by partname\n     */\n    matchlocationsperpartname: MatchLocationsPerPartname;\n    /**\n     * The relevant extracts in the document grouped by partname\n     */\n    extractsperpartname: ExtractsPerPartname;\n    /**\n     * The languages in the document\n     */\n    documentlanguages: string[];\n    /**\n     * The documentweight value of the document\n     */\n    documentweight: string;\n    /**\n     * The modified date and time of the document\n     */\n    modified: string;\n    /**\n     * The time and date when the document was indexed\n     */\n    indexationtime: string;\n    /**\n     * The version of the document\n     */\n    version: string;\n    /**\n     * The title of the document\n     */\n    title: string;\n    /**\n     * The display title of the document. This can contain HTML highlighting of the search terms\n     */\n    displayTitle: string;\n    /**\n     * The size in bytes of the document\n     */\n    size: number;\n    /**\n     * The value of the treepath of the document\n     */\n    treepath: string[];\n    /**\n     * The filename of the document\n     */\n    filename: string;\n    /**\n     * The file extension of the document\n     */\n    fileext: string;\n    /**\n     * The document flags\n     */\n    flags: string[];\n    /**\n     * The collection that produced the document (only one element will exist)\n     */\n    collection: string[];\n    /**\n     * The value of the docformat column\n     */\n    docformat: string;\n    /**\n     * The value of the doctype column\n     */\n    doctype: string;\n    /**\n     * The value of the url1 column\n     */\n    url1: string;\n    /**\n     * The value of the url2 column\n     */\n    url2: string;\n    /**\n     * The relevant extracts from the document. This can contain HTML highlighting of the search terms\n     */\n    relevantExtracts: string;\n    /**\n     * The text of the document\n     */\n    text: string;\n    /**\n     * The document authors\n     */\n    authors: string[];\n    /**\n     * The document access lists\n     */\n    accesslists: DocumentAccessLists;\n    /**\n     * The URL of the document's thumbnail\n     */\n    thumbnailUrl: string;\n    /**\n     * Indicates whether RFM has been enabled for this document\n     */\n    rfmEnabled: boolean;\n    /**\n     * Any RFM data for this document\n     */\n    rfm: RFMData;\n    /**\n     * Information about the search terms and whether they exist in the document or not\n     */\n    termspresence: TermPresence[];\n    /**\n     * A client-side field that indicates whether this document is currrently selected\n     */\n    $selected: boolean;\n    /**\n     * id of the container of this document (for splitted documents, attachments, etc.)\n     */\n    containerid?: string;\n    /**\n     * Page number of this document (for splitted documents). Added by the front-end\n     */\n    $page?: number;\n}\n\n/**\n * Describes the authorized and denied access lists for a document\n */\nexport interface DocumentAccessLists {\n    accessListIndices: number[];\n    authorizedLists: AccessLists;\n    deniedLists: AccessLists;\n}\n\n/**\n * Describes the access lists\n */\nexport interface AccessLists {\n    /**\n     * An array of `AccessListPrincipal` arrays. Each item in the outer array corresponds to column value of the document\n     */\n    [index: number]: AccessListPrincipal[];\n}\n\n/**\n * Describes the fields of a principal item in an access list\n */\nexport interface AccessListPrincipal {\n    /**\n     * The Sinequa domain to which the principal belongs\n     */\n    domain: string;\n    /**\n     * The identifier of the principal\n     */\n    id: string;\n}\n\nexport interface IMulti<T> {\n    results: T[];\n}\n\n/**\n * Describes information to be sent to the server when executing a query for server-side query intent processing\n */\nexport interface QueryIntentData {\n    /**\n     * The current results view\n     */\n    resultsView?: string;\n    /**\n     * The current tab\n     */\n    tab?: string;\n    /**\n     * Query intents\n     */\n    queryIntents?: QueryIntent[];\n    /**\n     * Analysis of the current query\n     */\n    queryAnalysis?: QueryAnalysis;\n}\n\n/**\n * A service to call the query web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        public httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    protected endPoint = \"query\";\n\n    /**\n     * Get the results for the passed query\n     *\n     * @param query The query to execute\n     * @param auditEvents Any audit events to store on the server\n     * @param queryIntentData Any accompanying query intent data\n     */\n    public getResults(query: IQuery, auditEvents?: AuditEvents, queryIntentData?: QueryIntentData): Observable<Results> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n        const observable = this.httpClient.post<Results>(this.makeUrl(this.endPoint), {\n            app: this.appName,\n            query,\n            $auditRecord: auditEvents,\n            queryIntentData\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"queryService.getResults success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"queryService.getResults failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Get the results for a set of queries\n     *\n     * @param queries The queries to execute\n     * @param auditEvents Any audit events to store on the server\n     */\n    public getMultipleResults(queries: IQuery[], auditEvents?: AuditEvents): Observable<IMulti<Results>> {\n        if (!queries || queries.length === 0) {\n            return throwError({ error: \"no queries\" });\n        }\n        const data: {\n            methods: {\n                method: string,\n                app: string,\n                query: IQuery\n            }[],\n            propagateErrors: true,\n            $auditRecord?: AuditEvents\n        } = {\n            methods: [],\n            propagateErrors: true,\n            $auditRecord: auditEvents\n        };\n        for (const query of queries) {\n            data.methods.push({\n                method: this.endPoint,\n                app: this.appName,\n                query\n            });\n        }\n        return this.httpClient.post<IMulti<Results>>(this.makeUrl(\"multi\"), data);\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport {Utils} from \"@sinequa/core/base\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport { ExportOutputFormat, ExportSourceType } from './config/ccapp';\nimport { IQuery } from './query/query';\nimport { Results } from \"./query.web.service\";\nimport { AuditEventType } from './audit.web.service';\n\n/**\n * A service to export the result of a query.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class QueryExportWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    private logErrorToConsole(methodName: string, errorMessage: string): void {\n        console.log(`queryExportService.${methodName} ${errorMessage}.`);\n    }\n\n    private preliminaryCheck(\n        methodName: string,\n        webService: string,\n        format: ExportOutputFormat): Observable<HttpResponse<Blob>> | undefined {\n\n        if (!this.appName) {\n            const errorMessage = 'No app';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!webService) {\n            const errorMessage = 'No web service';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!format || format as ExportOutputFormat === ExportOutputFormat.None) {\n            const errorMessage = 'No output format';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Exports the current result.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query The query to export.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportResult(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportResult';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            type: ExportSourceType[ExportSourceType.Result],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the current selected records.\n     *\n     * @param webService The configuration for the export web service.\n     * @param query\n     * @param selection\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSelection(\n        webService: string,\n        query: IQuery,\n        results: Results | undefined,\n        selection: string[],\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSelection';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!query) {\n            const errorMessage = 'No query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        if (!selection || selection.length === 0) {\n            const errorMessage = 'No selection';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            query,\n            selection,\n            type: ExportSourceType[ExportSourceType.Selection],\n            format: ExportOutputFormat[format],\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_Selection_ExportCSV,\n                detail: {\n                    \"result-id\": !!results ? results.id : undefined\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    /**\n     * Exports the result of a saved query.\n     *\n     * @param webService The configuration for the export web service.\n     * @param queryName The query name.\n     * @param format The export format.\n     * @param maxCount (Optional) The maximum number of exported rows.\n     * @param exportedColumns (Optional) The columns to export, empty means all columns.\n     */\n    public exportSavedQuery(\n        webService: string,\n        queryName: string,\n        format: ExportOutputFormat,\n        maxCount?: number,\n        exportedColumns?: string[]\n    ): Observable<HttpResponse<Blob>> {\n\n        const methodName = 'exportSavedQuery';\n        const preliminaryCheckResult = this.preliminaryCheck(methodName, webService, format);\n        if (preliminaryCheckResult) {\n            return preliminaryCheckResult;\n        }\n\n        if (!queryName) {\n            const errorMessage = 'No saved query';\n            this.logErrorToConsole(methodName, errorMessage);\n            return throwError({ error: errorMessage});\n        }\n\n        const postData = {\n            app: this.appName,\n            webService,\n            type: ExportSourceType[ExportSourceType.SavedQuery],\n            format: ExportOutputFormat[format],\n            name: queryName,\n            maxCount: maxCount ? maxCount.toString() : undefined,\n            exportedColumns: exportedColumns,\n            $auditRecord: {\n                type: AuditEventType.Search_SavedQuery_ExportCSV,\n                detail: {\n                    query: queryName\n                }\n            }\n        };\n\n        return this.doExport(postData);\n    }\n\n    private doExport(body: {}): Observable<HttpResponse<Blob>> {\n        const observable = this.httpClient.post(\n            this.makeUrl('query.export'),\n            body,\n            {\n                observe: 'response',\n                responseType: 'blob'\n            }\n        );\n\n        Utils.subscribe(\n            observable,\n            (response: HttpResponse<Blob>) => {\n                console.log('queryExportService.export success: ', this.readBlobFileName(response));\n                return response;\n            },\n            (error) => {\n                console.log('queryExportService.export failure - error: ', error);\n            });\n\n        return observable;\n    }\n\n    private readBlobFileName(response: HttpResponse<Blob>): string {\n        const header = response.headers.get('content-disposition');\n        return header ? header.split('filename=')[1].replace('\"', '').replace('\"', '') : \"\";\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IQuery} from \"./query/query\";\n\nexport class RecentQueriesList {\n    constructor(name: string) {\n        this.name = name;\n        this.queries = [];\t// Make sure to have at least a valid \"queries\" member, to simplify tests in GUI code.\n    }\n    name: string;\t\t// App name or user name the queries are related to.\n    queries: IQuery[];\n}\n\nexport class RecentQueries {\n    app?: RecentQueriesList;\n    user?: RecentQueriesList;\n}\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RecentQueriesWebService extends HttpService {\n    recentQueries: RecentQueries;\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    load(): Observable<RecentQueries> {\n        const observable = this.httpClient.get<RecentQueries>(this.makeUrl(\"recentqueries\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.recentQueries = response;\n                if (!this.recentQueries)\n                    this.recentQueries = new RecentQueries();\n                if (this.recentQueries) {\n                    if (!this.recentQueries.app)\n                        this.recentQueries.app = new RecentQueriesList(this.appName);\n                    if (!this.recentQueries.user)\n                        this.recentQueries.user = new RecentQueriesList(\"currentuser\");\n                }\n                console.log(\"recentQueriesService.load success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"recentQueriesService.load failure - error: \", error);\n            });\n        return observable;\n    }\n    // No save/patch action for the recent queries: MRU lists are generated server side when the query is executed.\n\n    appRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries;\n        else {\n            return [];\n        }\n    }\n\n    appRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.app && this.recentQueries.app.queries)\n            return this.recentQueries.app.queries.length;\n        else\n            return 0;\n    }\n\n    userRecentQueries(): IQuery[]{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries;\n        else {\n            return [];\n        }\n    }\n\n    userRecentQueriesLength(): number{\n        if (this.recentQueries && this.recentQueries.user && this.recentQueries.user.queries)\n            return this.recentQueries.user.queries.length;\n        else\n            return 0;\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, EMPTY} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {Results, RFMData} from \"./query.web.service\";\n\n/**\n * A service for calling the search.rfm web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RfmWebService extends HttpService {\n    private static readonly endpoint = \"search.rfm\";\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Get RFM data for a set of results\n     *\n     * @param rfm The name of the RFM\n     * @param results The results for which to retrieve RFM data\n     */\n    getRfmData(rfm: string, results: Results): Observable<MapOf<RFMData>> {\n        const ids: string[] = [];\n        for (const record of results.records) {\n            if (!!record.flags && record.flags.indexOf(\"r\") !== -1) {\n                ids.push(record.id);\n            }\n        }\n        if (ids.length === 0) {\n            return EMPTY;\n        }\n        const data = {\n            rfm,\n            queryHash: results.rfmQueryHash,\n            ids\n        };\n        const observable = this.httpClient.post<MapOf<RFMData>>(this.makeUrl(RfmWebService.endpoint), data);\n        Utils.subscribe(observable,\n            (response) => {\n                return response;\n            },\n            (error) => {\n                console.log(\"rfmService.getRfmData failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from \"./http.service\";\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { Record } from \"./query.web.service\";\n\n/**\n * A service for calling the similardocuments web service\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class SimilarDocumentsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets an array of documents (records) similar to the passed document\n     *\n     * @param sourceDocumentId The id of the document for which to retrieve similar documents\n     * @param queryName The name of the query\n     */\n    public get(sourceDocumentId: string, queryName: string): Observable<Record[]> {\n      return this.httpClient.post<{data: Record[]}>(this.makeUrl(\"similardocuments\"),\n        {\n          app: this.appName,\n          sourceDocumentId,\n          query: {\n            name: queryName\n          }\n        }).pipe(map((response) => response.data));\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport { SqHttpClient } from \"./http-client\";\nimport { HttpService } from './http.service';\nimport { IntlService } from \"@sinequa/core/intl\";\nimport {Utils} from \"@sinequa/core/base\";\n\nimport { START_CONFIG, StartConfig } from \"./start-config.web.service\";\nimport { IQuery } from './query/query';\n\n/**\n * Describes a single sponsored link\n */\nexport interface LinkResult {\n    id: string;\n    title: string;\n    url: string;\n    icon: string;\n    thumbnail: string;\n    tooltip: string;\n    summary: string;\n    rank: number;\n    relevance: number;\n}\n\n/**\n * Describes a set of sponsored links\n */\nexport interface LinksResults {\n    sql: string[];\n    links: LinkResult[];\n}\n\n/**\n * A service for calling the query.links web service.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SponsoredLinksWebService extends HttpService {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient,\n        private intlService: IntlService) {\n        super(startConfig);\n    }\n\n    /**\n     * Queries the server for sponsored links.\n     *\n     * @param query The query information.\n     * @param webService The web service configuration.\n     */\n    getLinks(query: IQuery, webService: string): Observable<LinksResults> {\n        if (!query) {\n            return throwError({ error: \"no query\" });\n        }\n\n        const url = this.makeUrl(\"query.links\");\n        const observable = this.httpClient.post<LinksResults>(url, {\n            app: this.appName,\n            webservice: webService,\n            query,\n            locale: this.intlService.currentLocale.name\n        });\n\n        Utils.subscribe(observable,\n            (response) => {\n                console.log(\"SponsoredLinksService.getLinks success - data: \", response);\n                return response;\n            },\n            (error) => {\n                console.log(\"SponsoredLinksService.getLinks failure - error: \", error);\n            });\n        return observable;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {Suggestion} from \"./suggest/suggestion\";\nimport {IQuery} from \"./query/query\";\n\n/**\n * A service for calling the suggestfield web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestFieldWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields and in the context of the passed query\n     *\n     * @param text The text to match\n     * @param fields The fields for which to return suggestions\n     * @param query The query context\n     */\n    get(text: string, fields: string | string[], query?: IQuery): Observable<Suggestion[]> {\n        if (!fields) {\n            return of([]);\n        }\n        else {\n            if (!Utils.isArray(fields)) {\n                fields = [fields];\n            }\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestfield\"), {\n                app: this.appName,\n                text: text,\n                fields: fields,\n                query: query\n            }).pipe(map((value) => {\n                value.suggests.forEach(value => value.display = Utils.toSqlValue(value.display)); // because dates get automatically converted by the interceptor\n                return value.suggests;\n            }));\n            return observable;\n        }\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Suggestion} from \"./suggest/suggestion\";\n\n/**\n * A service for calling the suggestquery web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class SuggestQueryWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets suggestions for the passed text for a set of fields using the passed suggestquery web service\n     *\n     * @param suggestQuery The name of the suggestquery web service to use\n     * @param text The text to match\n     * @param query The name of the current query\n     * @param fields The fields for which to return suggestions\n     */\n    get(suggestQuery: string, text: string, query: string, fields?: string | string[]): Observable<Suggestion[]> {\n        if (!suggestQuery) {\n            return of([]);\n        }\n        else {\n            const observable = this.httpClient.post<{suggests: Suggestion[]}>(this.makeUrl(\"suggestquery\"), {\n                app: this.appName,\n                suggestQuery: suggestQuery,\n                text: text,\n                query: query,\n                kinds: fields\n            });\n            return observable.pipe(map(value => value.suggests));\n        }\n    }\n}","import {Injectable, Inject} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Record} from \"./query.web.service\";\nimport {AuditEventType} from \"./audit.web.service\";\n\n/**\n * Describes a rating configuration object\n */\nexport interface CCRating {\n    ratingsColumn: string;\n    averageColumn: string;\n\n    updateDocWeight: boolean;\n\n    ratingsDistribution: string[];\n}\n\n/**\n * Describes a user rating response object\n */\nexport interface UserRatingResponse {\n    rating: number;\n    averagerating: number;\n}\n\n/**\n * A service for calling the ratings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserRatingsWebService extends HttpService {\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n    }\n\n    /**\n     * Gets the current user rating for a document\n     *\n     * @param docid The id of a document for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRating(docid: string, config: CCRating): Observable<UserRatingResponse> {\n        return this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"get\",\n            docid,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution\n        }).pipe(tap(\n            r => {},\n            error => console.log(\"ratingsService.getRating failure - error: \", error)\n        ));\n    }\n\n    /**\n     * Sets the current user rating for a document\n     *\n     * @param record The document for which to set the rating\n     * @param rating A rating value\n     * @param config The ratings configuration\n     */\n    setRating(record: Record, rating: number, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"set\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            rating,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Set,\n                        detail: {\n                            \"doc-id\": record.id,\n                            ratingnum: rating,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"addRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.setRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Delete a rating for a document\n     *\n     * @param record The document for which to delete the rating\n     * @param config The ratings configuration\n     */\n    deleteRating(record: Record, config: CCRating): Observable<UserRatingResponse> {\n        const ratingResponse = this.getRecordRating(record, config);\n        const observable = this.httpClient.post<UserRatingResponse>(this.makeUrl(\"ratings\"), {\n            action: \"delete\",\n            docid: record.id,\n            ratingscolumn: config.ratingsColumn,\n            averagecolumn: config.averageColumn,\n            ratingsdistribution: config.ratingsDistribution,\n            updatedocweight: config.updateDocWeight,\n            $auditRecord: {\n                auditEvents: [\n                    {\n                        type: AuditEventType.Rating_Delete,\n                        detail: {\n                            \"doc-id\": record.id,\n                            value: ratingResponse.rating,\n                            average: ratingResponse.averagerating\n                        }\n                    }\n                ],\n                mlAuditEvents: [\n                    {\n                        actionType: \"removeRating\",\n                        documentIds: record.id\n                    }\n                ]\n            }\n        });\n\n        observable.subscribe(\n            response => response,\n            error => console.log(\"ratingsService.deleteRating failure - error: \", error)\n        );\n\n        return observable;\n    }\n\n    /**\n     * Gets user rating information from the given record\n     *\n     * @param record The record for which to get the rating\n     * @param config The ratings configuration\n     */\n    getRecordRating(record: Record, config: CCRating): UserRatingResponse {\n        return {\n            rating: this.parseUserRating(record[config.ratingsColumn], config),\n            averagerating: this.parseAverageRating(record[config.averageColumn], config)\n        };\n    }\n\n    private parseAverageRating(columnEntries: string[], config: CCRating): number {\n        if (config.ratingsDistribution && columnEntries) {\n            return config.ratingsDistribution.indexOf(columnEntries[0]);\n        }\n        else {\n            return -1;\n        }\n    }\n\n    private parseUserRating(ratingValues: string[], config: CCRating): number {\n        if(ratingValues) {\n            if (config.ratingsDistribution) {\n                return config.ratingsDistribution.indexOf(ratingValues[0]);\n            }\n        }\n        return -1;\n    }\n}\n","import {Injectable, Inject, OnDestroy} from \"@angular/core\";\nimport {Subject, Observable} from \"rxjs\";\nimport {SqHttpClient} from \"./http-client\";\nimport {HttpService} from \"./http.service\";\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {AuditEvents} from \"./audit.web.service\";\nimport jstz from \"jstz\";\n\n/**\n * Minimal built-in user settings. Can be extended in the context of\n * complex applications to store user data, preferences, objects, etc.\n */\nexport interface UserSettings {\n    language?: string;\n    skipCount?: number;\n    email?: string;\n    [key: string]: any;\n}\n\n/**\n * A base event from which all events that can be issued by the {@link UserSettingsWebService} are derived\n */\nexport interface UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * This event is fired each time the [userSettings]{@link UserSettingsWebService#userSettings} member is modified.\n * Typically this will be at login / logoff and also if the \"override user\" admin feature is used.\n */\nexport interface UserSettingsChangedEvent extends UserSettingsEvent {\n    type: \"changed\";\n}\n\n/**\n * A service for calling the usersettings web service\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserSettingsWebService extends HttpService implements OnDestroy {\n    private _userSettings: UserSettings | undefined;\n    /**\n     * The timezone for the user\n     */\n    timezone: string;\n    /**\n     * A reviver function that, if set, will be called on the user settings when they are loaded\n     */\n    reviver: (us: UserSettings) => void;\n    private _events = new Subject<UserSettingsChangedEvent>();\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        private httpClient: SqHttpClient) {\n        super(startConfig);\n        this.timezone = jstz.determine().name(); // until momentjs gets this\n    }\n\n    ngOnDestroy() {\n        this._events.complete();\n    }\n\n    /**\n     * The observable events emitted by this service\n     */\n    get events(): Observable<UserSettingsChangedEvent> {\n        return this._events;\n    }\n\n    /**\n     * Gets the current {@link UserSettings}\n     */\n    get userSettings(): UserSettings | undefined {\n        return this._userSettings;\n    }\n\n    /**\n     * Sets the current {@link UserSettings} and issues the \"changed\" event\n     */\n    set userSettings(value: UserSettings | undefined) {\n        this._userSettings = value;\n        this._events.next({type: \"changed\"});\n    }\n\n    //TODO remove\n    /**\n     * @deprecated use \"userSettings\" get property to retrieve the user settings\n     * @returns User settings object or undefined\n     */\n    public getUserSettings(): UserSettings | undefined{\n        return this.userSettings;\n    }\n\n    /**\n     * Load the user settings for the currently logged in user.\n     * Sets the userSettings member and issues the \"changed\" event\n     */\n    public load(): Observable<UserSettings> {\n        const observable = this.httpClient.get<UserSettings>(this.makeUrl(\"usersettings\"), {\n            params: this.makeParams({\n                app: this.appName,\n                action: \"load\"\n            })\n        });\n        Utils.subscribe(observable,\n            (response) => {\n                this.userSettings = response;\n                if (this.userSettings) {\n                    if (this.reviver) {\n                        this.reviver(this.userSettings);\n                    }\n                }\n            },\n            (error) => {\n                console.log(\"userSettingsService.load failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Saves the current user settings on the server\n     *\n     * @param auditEvents\n     */\n    public save(auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"save\",\n            userSettings: this.userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.save failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Patches the user settings on the server using a partial user settings object. The partial\n     * object is used to update the user settings on the server according to [RFC7396]{@link https://tools.ietf.org/html/rfc7396}\n     *\n     * @param userSettings The partial user settings\n     * @param auditEvents Any associated audit events to store on the server\n     */\n    public patch(userSettings: UserSettings, auditEvents?: AuditEvents): Observable<void> {\n        const observable = this.httpClient.post<void>(this.makeUrl(\"usersettings\"), {\n            app: this.appName,\n            action: \"patch\",\n            userSettings: userSettings,\n            $auditRecord: auditEvents\n        });\n        Utils.subscribe(observable,\n            (response) => response,\n            (error) => {\n                console.log(\"userSettingsService.patch failure - error: \", error);\n            });\n        return observable;\n    }\n\n    /**\n     * Resets User Settings (emits a change event and audit events).\n     */\n    public reset() {\n        // Save current state\n        const currentState = this.userSettings;\n        // Reset User settings (and emit an event!)\n        this.userSettings = {};\n        const observable = this.save({\n            type: 'UserSettings_Reset'\n        });\n        observable.subscribe({\n            next: () => {},\n            error: () => this.userSettings = currentState // Restore previous state\n        })\n        return observable;\n    }\n\n    /**\n     * Reads a user setting.\n     *\n     * @param paths The path to the setting in the JSON.\n     */\n    public readUserSetting(paths: string[]): any {\n        let json: any = this.userSettings;\n        if (json) {\n            for (const path of paths) {\n                json = json[path];\n                if (!json) {\n                    // Value does not exist yet\n                    return undefined;\n                }\n            }\n        }\n        return json;\n    }\n}\n","import {Injectable, Inject} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {SqHttpClient} from \"./http-client\";\r\nimport {HttpService} from \"./http.service\";\r\nimport {START_CONFIG, StartConfig} from \"./start-config.web.service\";\r\nimport {IQuery} from \"./query/query\";\r\n\r\nexport interface QueryIntentResponse {\r\n    query: string;\r\n    intents: QueryIntentMatch[];\r\n}\r\n\r\nexport interface QueryIntentMatch {\r\n    /** name of the intent */\r\n    name: string;\r\n    /** global entities that match */\r\n    globalEntities?: QueryIntentEntity2[];\r\n    /** rule that match if exact match rule */\r\n    matchRule: string | null;\r\n    /** ml score or 1 if rule */\r\n    score: number;\r\n    /** ml confidence score or 1 if rule */\r\n    confidence: number;\r\n}\r\n\r\nexport interface QueryIntentEntity2 {\r\n    /** global entity name, eg. \"person\" */\r\n    name: string;\r\n    /** global entity type (entities are detected by classical NLP, slots are detected by ML) */\r\n    type: \"entity\" | \"slot\";\r\n    /** global entity resource */\r\n    resource: string;\r\n    /** text that match the global entity, eg. \"Bill gates\" */\r\n    value: string;\r\n    /** offset in the query */\r\n    offset: number;\r\n    /** length in the query */\r\n    length: number;\r\n    /** basic form if type=entity, eg. \"BILL GATES\"*/\r\n    basic: string | null;\r\n    /** normalization form if type=entity, eg. \"William H Gates\"*/\r\n    normalization: string | null;\r\n    /** score for the extraction if type=slot */\r\n    score?: number;\r\n}\r\n\r\n/**\r\n * A service for calling the queryintent web service\r\n */\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class QueryIntentWebService extends HttpService {\r\n    private readonly endpoint = \"queryintent\";\r\n\r\n    constructor(\r\n        @Inject(START_CONFIG) startConfig: StartConfig,\r\n        private httpClient: SqHttpClient) {\r\n        super(startConfig);\r\n    }\r\n\r\n    getQueryIntent(query: IQuery): Observable<QueryIntentResponse> {\r\n        const data = {\r\n            query,\r\n            app: this.appName\r\n        };\r\n        return this.httpClient.post<QueryIntentResponse>(\r\n            this.makeUrl(this.endpoint), data);\r\n    }\r\n}\r\n","const WEB_SERVICES_MODULE_PROVIDERS = [];\n\nexport {WEB_SERVICES_MODULE_PROVIDERS};\n","import {HttpClientModule} from \"@angular/common/http\";\n\nimport {NgModule, ModuleWithProviders, APP_INITIALIZER} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\n// Intl is required by various web services\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {IntlModule} from \"@sinequa/core/intl\";\n// StartConfig\nimport {StartConfigWebService, START_CONFIG, StartConfig} from \"./start-config.web.service\";\n\nimport {WEB_SERVICES_MODULE_PROVIDERS} from \"./module.providers\";\n\n// Used to ensure that the StartConfigWebService is instantiated\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService): () => Promise<void> {\n    const init = () => Promise.resolve();\n    return init;\n}\n\n/**\n * This module implements client services for the Sinequa web service APIs\n */\n// @dynamic\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BaseModule,\n        IntlModule\n    ],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        // Ensure that the StartConfigWebService is instantiated so StartConfig is initialized\n        {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n        ...WEB_SERVICES_MODULE_PROVIDERS\n    ]\n})\nexport class WebServicesModule {\n    /**\n     * Configures the module with a start configuration\n     *\n     * @param startConfig The start configuration object\n     *\n     * @returns The configured module\n     */\n    static forRoot(startConfig: StartConfig) : ModuleWithProviders<WebServicesModule> {\n        return {\n            ngModule: WebServicesModule,\n            providers: [\n                // Provide START_CONFIG\n                {provide: START_CONFIG, useValue: startConfig},\n            ]\n        };\n    }\n}"]}