{"version":3,"file":"sinequa-core-validation.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/core/validation/validation.service.ts","../../../projects/core/validation/validation.directive.ts","../../../projects/core/validation/validation-error.pipe.ts","../../../projects/core/validation/validation-message.component.ts","../../../projects/core/validation/module.providers.ts","../../../projects/core/validation/validation.module.ts","../../projects/core/validation/messages/en.ts","../../projects/core/validation/messages/fr.ts","../../projects/core/validation/messages/de.ts","../../projects/core/validation/messages/index.ts","../../../projects/core/validation/sinequa-core-validation.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {Injectable} from \"@angular/core\";\nimport {Validators, ValidatorFn, AbstractControl, ValidationErrors} from \"@angular/forms\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {FormatService} from \"@sinequa/core/app-utils\";\nimport {Utils} from \"@sinequa/core/base\";\n\n/**\n * @ignore\n */\nfunction isEmptyInputValue(value: any): boolean {\n    // we don't check for string here so it also works with arrays\n    return value === null || value === undefined || value.length === 0;\n}\n\nconst processInputValue = (value: any) => { // add support for object values of the advanced search\n  if (Utils.isArray(value)) {\n    return value.map(\n      (val) => {\n        if (Utils.isObject(val) && val.hasOwnProperty(\"value\")) {\n          return val.value;\n        }\n        return val;\n      }\n    )\n  } else {\n    if (Utils.isObject(value) && value.hasOwnProperty(\"value\")) {\n      return [value.value];\n    }\n    return [value];\n  }\n}\n\n// Email regular expression, taken from built-in Angular validators.\n/**\n * @ignore\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n\n/**\n * Enumerates the supported validator types.\n */\nexport enum ValidatorType {\n    Min = \"Min\",\n    Max = \"Max\",\n    Required = \"Required\",\n    Email = \"Email\",\n    Pattern = \"Pattern\",\n    Integer = \"Integer\",\n    Number = \"Number\",\n    Date = \"Date\",\n    Range = \"Range\",\n}\n\n/**\n * Describes a `Validator` object.\n */\nexport interface Validator {\n    /**\n     * The validator's type.\n     */\n    type: ValidatorType;\n    /**\n     * The validator's name.\n     */\n    name: string;\n    /**\n     * The validator's error message to be displayed when a value is invalid.\n     */\n    errorMessage: string;\n    /**\n     * `true` if the validator is to be applied.\n     */\n    active: boolean;\n}\n\n/**\n * Defines the default error messages for each validator.\n */\nconst errorMessagesMap = {\n    // Built-in Angular validators\n    min: \"msg#validation.min\",\n    max: \"msg#validation.max\",\n    required: \"msg#validation.required\",\n    requiredTrue: \"msg#validation.requiredTrue\",\n    email: \"msg#validation.email\",\n    minlength: \"msg#validation.minLength\",\n    maxlength: \"msg#validation.maxLength\",\n    pattern: \"msg#validation.pattern\",\n\n    // Custom\n    unique: \"msg#validation.unique\",\n    integer: \"msg#validation.integer\",\n    number: \"msg#validation.number\",\n    date: \"msg#validation.date\",\n    range: \"msg#validation.range\"\n};\n\n\n/**\n * This service provides a set of locale-sensitive validators with support for arrays.\n * The validator error messages are {@link IntlService} `msg#` messages of the form:\n * `msg#validation.<validator name>`.\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ValidationService {\n    constructor(\n        protected formatService: FormatService,\n        protected intlService: IntlService) {\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.pattern` with support for value arrays.\n     *\n     * @param pattern The pattern.\n     * @returns The validation function.\n     */\n    static patternValidator(pattern: string | RegExp): ValidatorFn {\n        // #region This code region is based on Validators.pattern()\n        if (!pattern) {\n            return Validators.nullValidator;\n        }\n\n        let regex: RegExp;\n        let regexStr: string;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n\n            if (pattern.charAt(0) !== '^') {\n                regexStr += '^';\n            }\n\n            regexStr += pattern;\n\n            if (pattern.charAt(pattern.length - 1) !== '$') {\n                regexStr += '$';\n            }\n\n            regex = new RegExp(regexStr);\n        } else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        // #endregion\n\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!regex.test(value)) {\n                    return {pattern: {requiredPattern: pattern.toString(), actualValue: value}};\n                }\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * A pattern validator based on Angular's `Validators.email` with support for value arrays.\n     *\n     * @param control The control to validate.\n     * @returns The result.\n     */\n    static emailValidation(control: AbstractControl): ValidationErrors | null {\n        if (isEmptyInputValue(control.value)) {\n            return null;  // don't validate empty values to allow optional controls\n        }\n\n        let values: any[] = [];\n        values = processInputValue(control.value);\n\n        for (const value of values) {\n            if (!EMAIL_REGEXP.test(value)) {\n                return {email: true};\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the name of the first validator in a map of validation errors.\n     * @param errors The validation errors\n     * @returns The name of the first validator, if any - `undefined` otherwise.\n     */\n    getFirstError(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            return Object.keys(errors)[0];\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the error message associated with the passed validator.\n     * @param name The name of a validator.\n     * @returns The error message.\n     */\n    getErrorText(name?: string): string {\n        const text = name ? errorMessagesMap[name] : undefined;\n        if (!text) {\n            return \"Unknown validator: \" + name;\n        }\n        return text;\n    }\n\n    /**\n     * Get the error message associated with first validator in a map of validation errors.\n     * @param errors The validation errors.\n     * @returns The error message.\n     */\n    getFirstErrorText(errors: ValidationErrors): string | undefined {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return this.getErrorText(error);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get the data held for the first error in a map of validation errors\n     * @param errors The validation errors.\n     */\n    getFirstErrorInfo(errors: ValidationErrors): any {\n        if (errors) {\n            const error = this.getFirstError(errors);\n            if (error) {\n                return errors[error];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Get a validator function that validates that values are greater than or equal\n     * to the passed `min` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param min The minimum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    minValidator(min: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(min)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - min;\n                        }\n                    }\n                    else if (Utils.isString(min)) {\n                        cmp = Utils.compare(value1, min);\n                    }\n                    else if (Utils.isDate(min)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - min.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - min.getTime();\n                        }\n                    }\n                    if (cmp < 0) {\n                        return {min: {min, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are less than or equal\n     * to the passed `max` value. The function supports single values and arrays of\n     * values and will optionally parse the values using the {@link FormatService} if\n     * a parser is passed. Dates will be parsed according to the current locale.\n     *\n     * @param max The maximum value to test against. The type determines\n     * how the test will be made.\n     * @param parser An optional parser name.\n     */\n    maxValidator(max: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    let cmp = 0;\n                    if (Utils.isNumber(max)) {\n                        if (Utils.testFloat(value1)) {\n                            value1 = Utils.toNumber(value1);\n                            cmp = value1 - max;\n                        }\n                    }\n                    else if (Utils.isString(max)) {\n                        cmp = Utils.compare(value1, max);\n                    }\n                    else if (Utils.isDate(max)) {\n                        if (Utils.isString(value1)) {\n                            value1 = this.intlService.parseDate(value1);\n                            if (value1) {\n                                cmp = value1.getTime() - max.getTime();\n                            }\n                        }\n                        else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                            cmp = value1.getTime() - max.getTime();\n                        }\n                    }\n                    if (cmp > 0) {\n                        return {max: {max, actual: value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are integers. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    integerValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testInteger(value1)) {\n                        return {integer: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are numeric. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed.\n     *\n     * @param parser An optional parser name.\n     */\n    numberValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    let value1 = value;\n                    if (parser) {\n                        value1 = this.formatService.parseValue(value1, parser);\n                    }\n                    if (!Utils.testFloat(value1)) {\n                        return {number: {value}};\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that values are dates. The function\n     * supports single values and arrays of values and will optionally parse the values\n     * using the {@link FormatService} if a parser is passed. Dates will be parsed according\n     * to the current locale.\n     *\n     * @param parser An optional parser name.\n     */\n    dateValidator(parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value)) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let values: any[] = [];\n            values = processInputValue(control.value);\n\n            for (const value of values) {\n                if (!isEmptyInputValue(value)) {\n                    if (Utils.isString(value)) {\n                        let value1 = value;\n                        if (parser) {\n                            value1 = this.formatService.parseValue(value1, parser);\n                        }\n                        if (!this.intlService.parseDate(value1)) {\n                            return {date: {value}};\n                        }\n                    }\n                    else if (Utils.isDate(value)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                        if (isNaN(value.getTime())) {\n                            return {date: {value}};\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n    }\n\n    /**\n     * Get a validator function that validates that, for pair of values, the second value is\n     * greater than the first. If one or both values are empty then the validation passes.\n     * The validator function supports single values and arrays of values and will optionally\n     * parse the values using the {@link FormatService} if a parser is passed. Dates will be\n     * parsed according to the current locale.\n     *\n     * @param type A value whose type indicates how the range test will be made.\n     * @param parser An optional parser name.\n     */\n    rangeValidator(type: string | number | Date, parser?: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (isEmptyInputValue(control.value) || !Utils.isArray(control.value) || control.value.length !== 2) {\n                return null;  // don't validate empty values to allow optional controls\n            }\n            let value1 = control.value[0];\n            let value2 = control.value[1];\n            if (isEmptyInputValue(value1) || isEmptyInputValue(value2)) {\n                return null;\n            }\n            if (parser) {\n                value1 = this.formatService.parseValue(value1, parser);\n                value2 = this.formatService.parseValue(value2, parser);\n            }\n            let cmp = 0;\n            if (Utils.isString(type)) {\n                cmp = Utils.compare(value2, value1);\n            }\n            else if (Utils.isDate(type)) {\n                let date1: Date | undefined;\n                let date2: Date | undefined;\n                if (Utils.isString(value1)) {\n                    date1 = this.intlService.parseDate(value1);\n                }\n                else if (Utils.isDate(value1)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date1 = value1;\n                }\n                if (Utils.isString(value2)) {\n                    date2 = this.intlService.parseDate(value2);\n                }\n                else if (Utils.isDate(value2)) { // ngx-bootstrap returns date values (new Date(NaN) if invalid)\n                    date2 = value2;\n                }\n                if (date1 && date2) {\n                    cmp = date2.getTime() - date1.getTime();\n                }\n            }\n            else if (Utils.isNumber(type)) {\n                if (Utils.testFloat(value1) && Utils.testFloat(value2)) {\n                    const num1 = Utils.toNumber(value1);\n                    const num2 = Utils.toNumber(value2);\n                    if (num1 !== null && num2 !== null) {\n                        cmp = num2 - num1;\n                    }\n                }\n            }\n            return cmp < 0 ? {range: {value1, value2}} : null;\n        };\n    }\n}\n","import {Directive, Input, OnInit, DoCheck, InjectionToken, Type, Inject, ViewContainerRef} from \"@angular/core\";\nimport {FormGroup, AbstractControl} from \"@angular/forms\";\nimport {Utils, MapOf} from \"@sinequa/core/base\";\nimport {LoadComponentService, LoadedComponent} from \"@sinequa/core/load-component\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * Describes the options that can be passed to {@link ValidationDirective}.\n */\nexport interface ValidationOptions {\n    /**\n     * The `FormGroup` container.\n     */\n    form: FormGroup;\n    /**\n     * Identifies the control to validate. Defaults to the value of the `formControlName`\n     * attribute on the element to which the `ValidationDirective` is attached.\n     */\n    controlName?: string;\n    /**\n     * The class name to set on the element if validation passes. Defaults to `is-valid`.\n     */\n    validClass?: string;\n    /**\n     * The class name to set on the element if validation fails. Defaults to `is-invalid`.\n     */\n    invalidClass?: string;\n    /**\n     * The selector to identify children of the element to which to also apply the validity\n     * classes. Defaults to `.form-control`. Set to `null` to not select any children.\n     */\n    childSelector?: string;\n    /**\n     * Custom error messages to use for the validators. By default the messages defined in\n     * {@link ValidationService} are used.\n     */\n    errorMessages?: MapOf<string>;\n}\n\n/**\n * An injection token that can be provided to override the component loaded by {@link ValidationDirective}\n * to display validation error messages. The default component is {@link ValidationMessageComponent}.\n */\nexport const VALIDATION_MESSAGE_COMPONENT = new InjectionToken<Type<any>>(\"VALIDATION_MESSAGE_COMPONENT\");\n\n/**\n * A directive to automatically add validity classes to the element to which it is attached. In addition,\n * when the associated `FormControl` is invalid a component is dynamically loaded after the element to display\n * the validation message.\n * The component to load can be specified by providing the {@link VALIDATION_MESSAGE_COMPONENT} injection token.\n * By default, the {@link ValidationMessageComponent} component is used.\n */\n@Directive({\n    selector: \"[sqValidation]\"\n})\nexport class ValidationDirective implements OnInit, DoCheck {\n    @Input(\"sqValidation\") options: FormGroup | ValidationOptions;\n    private element: HTMLElement;\n    private form: FormGroup;\n    private control: AbstractControl;\n    private validClass?: string;\n    private invalidClass?: string;\n    private childSelector?: string;\n    private errorMessages?: MapOf<string>;\n    private validationMessage: LoadedComponent;\n    private active: boolean;\n    private valid: boolean;\n    private dirty: boolean;\n    private error?: string;\n    private errorInfo?: string;\n\n    constructor(\n        @Inject(VALIDATION_MESSAGE_COMPONENT) private validationMessageComponent: Type<any>,\n        private viewContainerRef: ViewContainerRef,\n        private loadComponentService: LoadComponentService,\n        private validationService: ValidationService) {\n        this.element = viewContainerRef.element.nativeElement;\n    }\n\n    ngOnInit() {\n        if (!this.options) {\n            console.log(\"Validation.ngOnInit - no options\");\n            return;\n        }\n        let controlName;\n        if (this.options instanceof FormGroup) {\n            this.form = this.options;\n        }\n        else {\n            this.form = this.options.form;\n            controlName = this.options.controlName;\n            this.validClass = this.options.validClass;\n            this.invalidClass = this.options.invalidClass;\n            this.childSelector = this.options.childSelector;\n            this.errorMessages = this.options.errorMessages;\n        }\n        if (!this.form) {\n            console.log(\"Validation.ngOnInit - no form model\");\n            return;\n        }\n        if (!this.form.controls) {\n            console.log(\"Validation.ngOnInit - no form controls\");\n            return;\n        }\n        if (controlName) {\n            this.control = this.form.controls[controlName];\n        }\n        else {\n            const formControlName = this.element.getAttribute(\"formControlName\");\n            if (formControlName) {\n                this.control = this.form.controls[formControlName];\n            }\n        }\n        if (!this.control) {\n            console.log(\"Validation.ngOnInit - no control\");\n            return;\n        }\n        if (!this.validClass) {\n            this.validClass = \"is-valid\";\n        }\n        if (!this.invalidClass) {\n            this.invalidClass = \"is-invalid\";\n        }\n        if (Utils.isUndefined(this.childSelector)) {\n            this.childSelector = \".form-control\";\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        this.active = true;\n        this.error = undefined;\n    }\n\n    private getFirstError(): string | undefined {\n        if (this.control.errors) {\n            return Object.keys(this.control.errors)[0];\n        }\n        return undefined;\n    }\n\n    private getErrorText(error?: string): string {\n        if (error && this.errorMessages && !!this.errorMessages[error]) {\n            return this.errorMessages[error];\n        }\n        return this.validationService.getErrorText(error);\n    }\n\n    private getErrorInfo(error?: string): any {\n        if (error && this.control.errors) {\n            return this.control.errors[error];\n        }\n        return undefined;\n    }\n\n    private setValidityClasses() {\n        const add = this.control.valid ? this.validClass : this.invalidClass;\n        const remove = this.control.valid ? this.invalidClass : this.validClass;\n        if (remove) {\n            this.element.classList.remove(remove);\n        }\n        if (add) {\n            this.element.classList.add(add);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (remove) {\n                    element.classList.remove(remove);\n                }\n                if (add) {\n                    element.classList.add(add);\n                }\n            });\n        }\n    }\n\n    private removeValidityClasses() {\n        if (this.validClass) {\n            this.element.classList.remove(this.validClass);\n        }\n        if (this.invalidClass) {\n            this.element.classList.remove(this.invalidClass);\n        }\n        if (this.childSelector) {\n            const children = Array.from(this.element.querySelectorAll(this.childSelector));\n            children.forEach(element => {\n                if (this.validClass) {\n                    element.classList.remove(this.validClass);\n                }\n                if (this.invalidClass) {\n                    element.classList.remove(this.invalidClass);\n                }\n            });\n        }\n    }\n\n    /**\n     * Update the validity classes on the element depending on the validity state of the\n     * associated `FormControl`. If the control is invalid then the validation message component\n     * is loaded to display an error message.\n     */\n    ngDoCheck() {\n        if (!this.active) {\n            return;\n        }\n        if (this.valid === this.control.valid && this.dirty === this.control.dirty) {\n            const firstError = this.getFirstError();\n            const errorInfo = this.getErrorInfo(firstError);\n            if (firstError === this.error && errorInfo === this.errorInfo) {\n                return;\n            }\n            this.error = firstError;\n            this.errorInfo = errorInfo;\n        }\n        this.valid = this.control.valid;\n        this.dirty = this.control.dirty;\n        if (this.control.dirty) {\n            this.setValidityClasses();\n            if (this.control.valid) {\n                if (this.validationMessage) {\n                    this.validationMessage.componentRef.instance.text = \"\";\n                }\n            }\n            else {\n                if (!this.validationMessage) {\n                    this.validationMessage =\n                        this.loadComponentService.loadComponent({component: this.validationMessageComponent}, this.viewContainerRef);\n                }\n                const error = this.getFirstError();\n                this.validationMessage.componentRef.instance.text = this.getErrorText(error);\n                this.validationMessage.componentRef.instance.info = this.getErrorInfo(error);\n            }\n        }\n        else {\n            this.removeValidityClasses();\n            if (this.validationMessage) {\n                this.validationMessage.componentRef.instance.text = \"\";\n            }\n        }\n    }\n}\n","import {Pipe, ChangeDetectorRef} from \"@angular/core\";\nimport {ValidationErrors} from \"@angular/forms\";\nimport {AbstractIntlPipe, IntlService} from \"@sinequa/core/intl\";\nimport {ValidationService} from \"./validation.service\";\n\n/**\n * A pipe to display the first error in a `ValidationErrors` map.\n */\n@Pipe({name: \"sqValidationError\", pure: false})\nexport class ValidationErrorPipe extends AbstractIntlPipe {\n    constructor(\n        intlService: IntlService,\n        changeDetectorRef: ChangeDetectorRef,\n        protected validationService: ValidationService) {\n        super(intlService, changeDetectorRef);\n    }\n\n    updateValue(key: ValidationErrors, params: any): void {\n        super.updateValue(key, params);\n        const text = this.validationService.getFirstErrorText(key);\n        const info = this.validationService.getFirstErrorInfo(key);\n        this.value = text ? this.intlService.formatMessage(text, {values: info}) : undefined;\n    }\n}\n","import {Component, Input} from \"@angular/core\";\n\n/**\n * A default component to be used by the {@link ValidationDirective} directive to display\n * a validation error message using {@link MessagePipe}.\n */\n@Component({\n    selector: \"sq-validation-message\",\n    template: `\n        <div class=\"sq-validation-message\">{{text | sqMessage:{values: info} }}</div>\n    `\n})\nexport class ValidationMessageComponent {\n    /**\n     * The error message text passed to the `sqMessage` pipe.\n     */\n    @Input() text: string;\n    /**\n     * The entry for the validator in a `ValidationErrors` object. This is passed\n     * as the values to the `sqMessage` pipe.\n     */\n    @Input() info: any;\n}\n","const VALIDATION_MODULE_PROVIDERS = [];\n\nexport {VALIDATION_MODULE_PROVIDERS};\n","import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {BaseModule} from \"@sinequa/core/base\";\nimport {AppUtilsModule} from \"@sinequa/core/app-utils\";\nimport {IntlModule} from \"@sinequa/core/intl\";\nimport {LoadComponentModule} from \"@sinequa/core/load-component\";\n\nimport {ValidationDirective, VALIDATION_MESSAGE_COMPONENT} from \"./validation.directive\";\nimport {ValidationErrorPipe} from \"./validation-error.pipe\";\nimport {ValidationMessageComponent} from \"./validation-message.component\";\n\nimport {VALIDATION_MODULE_PROVIDERS} from \"./module.providers\";\n\n/**\n * This module contains facilities for working with Angular's form validation. It provides a\n * {@link ValidationService} that works with {@link IntlService} and {@link FormatService} to\n * support locale-sensitive validators.\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BaseModule,\n        AppUtilsModule,\n        IntlModule,\n        LoadComponentModule\n    ],\n    declarations: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    exports: [\n        ValidationDirective, ValidationMessageComponent, ValidationErrorPipe,\n    ],\n    providers: [\n        {provide: VALIDATION_MESSAGE_COMPONENT, useValue: ValidationMessageComponent},\n\n        ...VALIDATION_MODULE_PROVIDERS\n    ]\n})\nexport class ValidationModule {\n}\n","export default {\n    \"validation\": {\n        \"min\": \"The value must be at least {min}\",\n        \"max\": \"The value can be no more than {max}\",\n        \"required\": \"This field is required\",\n        \"requiredTrue\": \"This field must be set\",\n        \"email\": \"A valid email address is required\",\n        \"minLength\": \"The value must have at least {requiredLength, plural, one {# character} other {# characters}}\",\n        \"maxLength\": \"The value can have no more than {requiredLength, plural, one {# character} other {# characters}}\",\n        \"pattern\": \"The value is invalid\",\n        \"unique\": \"This field must be unique\",\n        \"integer\": \"The value must be an integer\",\n        \"number\": \"The value must be a number\",\n        \"date\": \"\",\n        \"range\": \"The first value must be less than or equal to the second\"\n    }\n};\n","export default {\n    \"validation\": {\n        \"min\": \"La valeur doit être supérieure ou égale à {min}\",\n        \"max\": \"La valeur ne peut pas être supérieure à {max}\",\n        \"required\": \"Ce champ est obligatoire\",\n        \"requiredTrue\": \"Ce champ doit être positionné\",\n        \"email\": \"Une adresse e-mail valide est exigée\",\n        \"minLength\": \"La valeur doit comporter au moins {requiredLength, plural, one {# caractère} autre que {# caractère}}\",\n        \"maxLength\": \"La valeur ne peut comporter plus de {requiredLength, plural, one {# caractère} autre que {# caractères}}\",\n        \"pattern\": \"La valeur est invalide\",\n        \"unique\": \"Ce champ doit être unique\",\n        \"integer\": \"La valeur doit être un entier\",\n        \"number\": \"La valeur doit être un nombre\",\n        \"date\": \"\",\n        \"range\": \"La première valeur doit être inférieure ou égale à la seconde\"\n    }\n};\n","export default {\n    \"validation\": {\n        \"min\": \"Der Mindestwert ist {min}\",\n        \"max\": \"Der Wert kann nicht größer sein als {max}\",\n        \"required\": \"Dies ist ein Mussfeld\",\n        \"requiredTrue\": \"Dieses Feld muss ausgefüllt werden\",\n        \"email\": \"Eine gültige E-Mail-Adresse ist einzutragen\",\n        \"minLength\": \"Die Mindestlänge des Wertes beträgt {requiredLength, plural, one {# Zeichen} other {# Zeichen}}\",\n        \"maxLength\": \"Der Wert darf nicht mehr als {requiredLength, plural, one {# Zeichen} other {# Zeichen}} haben\",\n        \"pattern\": \"Der Wert ist ungültig\",\n        \"unique\": \"Dieses Feld muss eindeutig sein\",\n        \"integer\": \"Der Wert muss eine ganze Zahl sein\",\n        \"number\": \"Der Wert muss eine Nummer sein\",\n        \"date\": \"\",\n        \"range\": \"Der erste Wert muss kleiner oder gleich dem zweiten Wert sein\"\n    }\n};\n","import {Utils} from \"@sinequa/core/base\";\nimport {enIntl, frIntl, deIntl} from \"@sinequa/core/intl\";\nimport _enValidation from \"./en\";\nimport _frValidation from \"./fr\";\nimport _deValidation from \"./de\";\n\nconst enValidation = Utils.merge({}, _enValidation, enIntl);\nconst frValidation = Utils.merge({}, _frValidation, frIntl);\nconst deValidation = Utils.merge({}, _deValidation, deIntl);\n\nexport { enValidation, frValidation, deValidation };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["Utils","ValidatorType","Validators","Injectable","InjectionToken","FormGroup","Directive","Inject","Input","AbstractIntlPipe","Pipe","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","Component","CommonModule","BaseModule","AppUtilsModule","IntlModule","LoadComponentModule","NgModule","enIntl","frIntl","deIntl"],"mappings":"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"}