import { IteratorAdaptor } from "./iterator-adaptor";
class ArrayBasedView {
    constructor(base, nameSelector, valueSelector) {
        this.base = base;
        this.nameSelector = nameSelector;
        this.valueSelector = valueSelector;
    }
    get length() {
        return this.base.length;
    }
    get(index) {
        return this.toNameValuePair(this.base[index]);
    }
    getName(index) {
        return this.nameSelector(this.base[index]);
    }
    getValue(index) {
        return this.valueSelector(this.base[index]);
    }
    toNameValuePair(obj) {
        return { name: this.nameSelector(obj), value: this.valueSelector(obj) };
    }
    /*
        Iterators
    */
    [Symbol.iterator]() {
        return this.items();
    }
    items() {
        return IteratorAdaptor.forIterable(this.base, (obj) => this.toNameValuePair(obj));
    }
    names() {
        return IteratorAdaptor.forIterable(this.base, this.nameSelector);
    }
    values() {
        return IteratorAdaptor.forIterable(this.base, this.valueSelector);
    }
    forEach(callback, thisArg) {
        for (let idx = 0; idx < this.length; idx++) {
            const r = this.get(idx);
            if (thisArg)
                callback.call(thisArg, r, idx, this);
            else
                callback(r, idx, this);
        }
        return this;
    }
}
/**
 * A helper class for creating {@link NameValueArrayView} instances
 */
// @dynamic
export class NameValueArrayViewHelper {
    /**
     * Creates a {@link NameValueArrayView} from an array of {@link NameValuePair} items
     *
     * @param items An array of `NameValuePair` items
     */
    static fromArray(items) {
        return new ArrayBasedView(items || [], p => p.name, p => p.value);
    }
    static fromObjects(items, nameKey, valueKey) {
        return new ArrayBasedView(items || [], p => p[nameKey], p => p[valueKey]);
    }
    static from(items, nameSelector, valueSelector) {
        return new ArrayBasedView(items || [], nameSelector, valueSelector);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1hcnJheS12aWV3LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvYmFzZS8iLCJzb3VyY2VzIjpbIml0ZW0tYXJyYXktdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFxQnJELE1BQU0sY0FBYztJQUNoQixZQUNZLElBQVMsRUFDVCxZQUF5QixFQUN6QixhQUEwQjtRQUYxQixTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ1QsaUJBQVksR0FBWixZQUFZLENBQWE7UUFDekIsa0JBQWEsR0FBYixhQUFhLENBQWE7SUFDbEMsQ0FBQztJQUVMLElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQWE7UUFDakIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU8sZUFBZSxDQUFDLEdBQU07UUFDMUIsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7SUFDNUUsQ0FBQztJQUVEOztNQUVFO0lBRUYsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUs7UUFDRCxPQUFPLGVBQWUsQ0FBQyxXQUFXLENBQzlCLElBQUksQ0FBQyxJQUFJLEVBQ1QsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQ3JDLENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSztRQUNELE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQStGLEVBQUUsT0FBYTtRQUNsSCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN4QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksT0FBTztnQkFDUCxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOztnQkFFckMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUFFRDs7R0FFRztBQUNILFdBQVc7QUFDWCxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsU0FBUyxDQUFPLEtBQTRCO1FBQy9DLE9BQU8sSUFBSSxjQUFjLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUksS0FBVSxFQUFFLE9BQWdCLEVBQUUsUUFBaUI7UUFDakUsT0FBTyxJQUFJLGNBQWMsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQVUsS0FBVSxFQUFFLFlBQXlCLEVBQUUsYUFBMEI7UUFDbEYsT0FBTyxJQUFJLGNBQWMsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcnJheVZpZXcgfSBmcm9tIFwiLi9hcnJheS12aWV3XCI7XG5pbXBvcnQgeyBJdGVyYXRvckFkYXB0b3IgfSBmcm9tIFwiLi9pdGVyYXRvci1hZGFwdG9yXCI7XG5cbi8qKlxuICogQSBnZW5lcmljIGludGVyZmFjZSBkZXNjcmliaW5nIGEgbmFtZSBhbmQgYXNzb2NpYXRlZCB2YWx1ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVWYWx1ZVBhaXI8VSwgVj4ge1xuICAgIG5hbWU6IFU7XG4gICAgdmFsdWU6IFY7XG59XG5cbi8qKlxuICogQW4ge0BsaW5rIEFycmF5Vmlld30gb2Yge0BsaW5rIE5hbWVWYWx1ZVBhaXJ9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZVZhbHVlQXJyYXlWaWV3PFUsIFY+IGV4dGVuZHMgQXJyYXlWaWV3PE5hbWVWYWx1ZVBhaXI8VSwgVj4+IHtcbiAgICBnZXROYW1lKGluZGV4OiBudW1iZXIpOiBVO1xuICAgIGdldFZhbHVlKGluZGV4OiBudW1iZXIpOiBWO1xuICAgIGl0ZW1zKCk6IEl0ZXJhYmxlSXRlcmF0b3I8TmFtZVZhbHVlUGFpcjxVLCBWPj47XG4gICAgbmFtZXMoKTogSXRlcmFibGVJdGVyYXRvcjxVPjtcbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPjtcbn1cblxuY2xhc3MgQXJyYXlCYXNlZFZpZXc8VCwgVSwgVj4gaW1wbGVtZW50cyBOYW1lVmFsdWVBcnJheVZpZXc8VSwgVj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGJhc2U6IFRbXSxcbiAgICAgICAgcHJpdmF0ZSBuYW1lU2VsZWN0b3I6ICh0OiBUKSA9PiBVLFxuICAgICAgICBwcml2YXRlIHZhbHVlU2VsZWN0b3I6ICh0OiBUKSA9PiBWXG4gICAgKSB7IH1cblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0KGluZGV4OiBudW1iZXIpOiBOYW1lVmFsdWVQYWlyPFUsIFY+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lVmFsdWVQYWlyKHRoaXMuYmFzZVtpbmRleF0pO1xuICAgIH1cblxuICAgIGdldE5hbWUoaW5kZXg6IG51bWJlcik6IFUge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lU2VsZWN0b3IodGhpcy5iYXNlW2luZGV4XSk7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoaW5kZXg6IG51bWJlcik6IFYge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVNlbGVjdG9yKHRoaXMuYmFzZVtpbmRleF0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9OYW1lVmFsdWVQYWlyKG9iajogVCk6IE5hbWVWYWx1ZVBhaXI8VSwgVj4ge1xuICAgICAgICByZXR1cm4geyBuYW1lOiB0aGlzLm5hbWVTZWxlY3RvcihvYmopLCB2YWx1ZTogdGhpcy52YWx1ZVNlbGVjdG9yKG9iaikgfTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBJdGVyYXRvcnNcbiAgICAqL1xuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxOYW1lVmFsdWVQYWlyPFUsIFY+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zKCk7XG4gICAgfVxuXG4gICAgaXRlbXMoKTogSXRlcmFibGVJdGVyYXRvcjxOYW1lVmFsdWVQYWlyPFUsIFY+PiB7XG4gICAgICAgIHJldHVybiBJdGVyYXRvckFkYXB0b3IuZm9ySXRlcmFibGUoXG4gICAgICAgICAgICB0aGlzLmJhc2UsXG4gICAgICAgICAgICAob2JqKSA9PiB0aGlzLnRvTmFtZVZhbHVlUGFpcihvYmopXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbmFtZXMoKTogSXRlcmFibGVJdGVyYXRvcjxVPiB7XG4gICAgICAgIHJldHVybiBJdGVyYXRvckFkYXB0b3IuZm9ySXRlcmFibGUodGhpcy5iYXNlLCB0aGlzLm5hbWVTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Vj4ge1xuICAgICAgICByZXR1cm4gSXRlcmF0b3JBZGFwdG9yLmZvckl0ZXJhYmxlKHRoaXMuYmFzZSwgdGhpcy52YWx1ZVNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogTmFtZVZhbHVlUGFpcjxVLCBWPiwgaW5kZXg/OiBudW1iZXIsIGl0ZW1zPzogTmFtZVZhbHVlQXJyYXlWaWV3PFUsIFY+KSA9PiB2b2lkLCB0aGlzQXJnPzogYW55KSB7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuZ2V0KGlkeCk7XG4gICAgICAgICAgICBpZiAodGhpc0FyZylcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHIsIGlkeCwgdGhpcyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sociwgaWR4LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbi8qKlxuICogQSBoZWxwZXIgY2xhc3MgZm9yIGNyZWF0aW5nIHtAbGluayBOYW1lVmFsdWVBcnJheVZpZXd9IGluc3RhbmNlc1xuICovXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIE5hbWVWYWx1ZUFycmF5Vmlld0hlbHBlciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHtAbGluayBOYW1lVmFsdWVBcnJheVZpZXd9IGZyb20gYW4gYXJyYXkgb2Yge0BsaW5rIE5hbWVWYWx1ZVBhaXJ9IGl0ZW1zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXRlbXMgQW4gYXJyYXkgb2YgYE5hbWVWYWx1ZVBhaXJgIGl0ZW1zXG4gICAgICovXG4gICAgc3RhdGljIGZyb21BcnJheTxVLCBWPihpdGVtczogTmFtZVZhbHVlUGFpcjxVLCBWPltdKTogTmFtZVZhbHVlQXJyYXlWaWV3PFUsIFY+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheUJhc2VkVmlldyhpdGVtcyB8fCBbXSwgcCA9PiBwLm5hbWUsIHAgPT4gcC52YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21PYmplY3RzPFQ+KGl0ZW1zOiBUW10sIG5hbWVLZXk6IGtleW9mIFQsIHZhbHVlS2V5OiBrZXlvZiBUKTogTmFtZVZhbHVlQXJyYXlWaWV3PFRba2V5b2YgVF0sIFRba2V5b2YgVF0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheUJhc2VkVmlldyhpdGVtcyB8fCBbXSwgcCA9PiBwW25hbWVLZXldLCBwID0+IHBbdmFsdWVLZXldKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbTxULCBVLCBWPihpdGVtczogVFtdLCBuYW1lU2VsZWN0b3I6ICh0OiBUKSA9PiBVLCB2YWx1ZVNlbGVjdG9yOiAodDogVCkgPT4gVik6IE5hbWVWYWx1ZUFycmF5VmlldzxVLCBWPiB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlCYXNlZFZpZXcoaXRlbXMgfHwgW10sIG5hbWVTZWxlY3RvciwgdmFsdWVTZWxlY3Rvcik7XG4gICAgfVxufVxuIl19