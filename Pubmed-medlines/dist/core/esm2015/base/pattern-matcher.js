import { Utils } from "./utils";
/**
 * Defines the different pattern types
 * `Empty`: no pattern
 * `RegExp`: a regular expression pattern
 * `Value`: a literal value
 */
export var PatternType;
(function (PatternType) {
    PatternType[PatternType["Empty"] = 0] = "Empty";
    PatternType[PatternType["RegExp"] = 1] = "RegExp";
    // WildCard = 2,
    PatternType[PatternType["Value"] = 3] = "Value";
})(PatternType || (PatternType = {}));
/**
 * A class that represents a single pattern. The pattern type is deduced automatically from the input pattern text.
 *
 * `<empty string>` => `Empty`
 * `<pattern with wildcards ?*>` => `RegExp` (wildcards are converted to regular expressions)
 * `<pattern starting with ~>` => `RegExp` (the text following the ~ character is treated as a regular expression)
 * `<any other value>` => `Value` (a literal value that is matched as-is)
 */
export class Pattern {
    constructor(pattern) {
        if (!pattern) {
            this.clear();
        }
        else {
            this.load(pattern);
        }
    }
    get type() {
        return this._type;
    }
    get text() {
        return this._text;
    }
    static getPatternType(pattern) {
        if (!pattern) {
            return PatternType.Empty;
        }
        if (pattern[0] === "~" || pattern.includes("*") || pattern.includes("?")) {
            return PatternType.RegExp;
        }
        return PatternType.Value;
    }
    static isPattern(pattern) {
        if (!pattern) {
            return false;
        }
        if (pattern[0] === "~" || pattern.includes("*") || pattern.includes("?")) {
            return true;
        }
        return false;
    }
    static doMatch(pattern, text) {
        const _pattern = new Pattern();
        _pattern.load(pattern);
        return _pattern.isMatch(text);
    }
    static wildcardToRegex(pattern) {
        if (!pattern) {
            return pattern;
        }
        return "^" + Utils.regExEscape(pattern).replace("\\*", ".*").replace("\\?", ".") + "$";
    }
    static cleanPattern(s) {
        if (!s) {
            return s;
        }
        const sb = [];
        let lastIsStar = false;
        for (const ch of s) {
            if (ch === "*") {
                if (!lastIsStar) {
                    lastIsStar = true;
                    sb.push(ch);
                }
            }
            else {
                lastIsStar = false;
                sb.push(ch);
            }
        }
        return sb.join("");
    }
    clear() {
        this.reg = undefined;
        this._text = undefined;
        this.preparedPattern1 = undefined;
        // this.preparedPattern2 = undefined;
        this._type = PatternType.Empty;
    }
    isEmpty() {
        return this._type === PatternType.Empty;
    }
    load(pattern) {
        this.clear();
        try {
            let s = pattern;
            this._text = pattern;
            this._type = Pattern.getPatternType(s);
            if (this._type === PatternType.Empty) {
                return true;
            }
            if (this._type === PatternType.Value) {
                this.preparedPattern1 = s;
                return true;
            }
            if (this._type === PatternType.RegExp) {
                if (s[0] === "~") {
                    s = s.substring(1);
                }
                else {
                    s = Pattern.wildcardToRegex(Pattern.cleanPattern(s));
                }
                this.preparedPattern1 = s;
                this.reg = new RegExp(s, "i");
                return true;
            }
            return false;
        }
        catch (e) {
            console.log(`Pattern.Load '${pattern}' error:`, e);
            this.clear();
            return false;
        }
    }
    getTypeValueText() {
        if (this.type === PatternType.Value) {
            return this.preparedPattern1;
        }
        return undefined;
    }
    getTypeRegexPattern() {
        if (this.type === PatternType.RegExp) {
            return this.preparedPattern1;
        }
        return undefined;
    }
    isTypeValue() {
        return this.type === PatternType.Value;
    }
    isMatch(text) {
        var _a;
        text = text || "";
        switch (this._type) {
            default:
            case PatternType.Empty:
                return true;
            case PatternType.Value:
                return Utils.eqNC(text, this.preparedPattern1 || "");
            case PatternType.RegExp:
                return ((_a = this.reg) === null || _a === void 0 ? void 0 : _a.test(text)) || false;
        }
    }
}
export class Patterns {
    constructor(text) {
        this.text = text;
    }
    clear() {
        this._preparedPatterns = undefined;
        this._values = undefined;
        this._isEmpty = true;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value === this._text) {
            return;
        }
        this._text = value;
        const l = Utils.split(this._text || "", ";");
        this.innerSetList(l);
    }
    getTypeCount(type) {
        if (!this._preparedPatterns) {
            return 0;
        }
        if (type === PatternType.Value) {
            return !!this._values ? Object.keys(this._values).length : 0;
        }
        let count = 0;
        for (const pattern of this._preparedPatterns) {
            if (pattern.type === type) {
                count++;
            }
        }
        return count;
    }
    innerSetList(l) {
        this._preparedPatterns = undefined;
        this._values = undefined;
        this._isEmpty = true;
        if (!!l) {
            for (const s of l) {
                if (!s) {
                    continue;
                }
                const pattern = new Pattern();
                if (pattern.load(s)) {
                    if (!this._preparedPatterns) {
                        this._preparedPatterns = [];
                    }
                    this._preparedPatterns.push(pattern);
                }
            }
        }
        if (this._preparedPatterns) {
            const c = this._preparedPatterns.length;
            if (c > 0) {
                this._isEmpty = false;
            }
            for (let i = c - 1; i >= 0; i--) {
                const pattern = this._preparedPatterns[i];
                //do values
                if (pattern.isTypeValue()) {
                    if (!this._values) {
                        this._values = {};
                    }
                    const val = pattern.getTypeValueText() || "";
                    this._values[val] = true;
                    this._preparedPatterns.splice(i, 1);
                }
            }
        }
    }
    get list() {
        return Utils.split(this.text || "", ";");
    }
    set list(value) {
        this.text = !!value ? value.join(";") : undefined;
        this.innerSetList(value);
    }
    setText(list) {
        this.list = list;
    }
    isEmpty() {
        return this._isEmpty;
    }
    hasPatterns() {
        return !this.isEmpty();
    }
    isMatch(name, logdisplay) {
        if (this.isEmpty()) {
            return true;
        }
        if (!!this._values) {
            if (this._values[name]) {
                if (!!logdisplay) {
                    console.log(logdisplay, ` : the pattern '${name}' matches the value '${name}'`);
                }
                return true;
            }
        }
        if (!!this._preparedPatterns) {
            for (const pattern of this._preparedPatterns) {
                if (!pattern) {
                    continue;
                }
                if (pattern.isTypeValue()) {
                    continue;
                }
                if (pattern.isMatch(name)) {
                    if (!!logdisplay) {
                        console.log(logdisplay, ` : the pattern '${pattern.text}' matches the value '${name}'`);
                    }
                    return true;
                }
            }
        }
        return false;
    }
}
/**
 * This class is used to process "included" and "excluded" patterns typically specified in the Sinequa configuration.
 */
export class PatternMatcher {
    constructor(includedLogDisplay, excludedLogDisplay) {
        this.includedPattern = new Patterns();
        this.excludedPattern = new Patterns();
        this.includedLogDisplay = includedLogDisplay;
        this.excludedLogDisplay = excludedLogDisplay;
    }
    get included() {
        return this.includedPattern.text;
    }
    set included(value) {
        this.includedPattern.text = value;
    }
    get excluded() {
        return this.excludedPattern.text;
    }
    set excluded(value) {
        this.excludedPattern.text = value;
    }
    set includedList(value) {
        this.includedPattern.list = value;
    }
    set excludedList(value) {
        this.excludedPattern.list = value;
    }
    hasPatterns() {
        return this.includedPattern.hasPatterns() || this.excludedPattern.hasPatterns();
    }
    isExcluded(name) {
        return !this.isIncluded(name);
    }
    isIncluded(name) {
        if (!name) {
            return true;
        }
        if (this.includedPattern.hasPatterns()) {
            if (this.excludedPattern.hasPatterns()) {
                if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {
                    return false;
                }
            }
            if (!this.includedPattern.isMatch(name, this.includedLogDisplay)) {
                return false;
            }
            return true;
        }
        else if (this.excludedPattern.hasPatterns()) {
            if (this.excludedPattern.isMatch(name, this.excludedLogDisplay)) {
                return false;
            }
            return true;
        }
        return true;
    }
    isExplicitlyIncluded(name) {
        return this.includedPattern.hasPatterns() && this.includedPattern.isMatch(name, this.includedLogDisplay);
    }
    isExplicitlyExcluded(name) {
        return this.excludedPattern.hasPatterns() && this.excludedPattern.isMatch(name, this.excludedLogDisplay);
    }
}
//# sourceMappingURL=data:application/json;base64,