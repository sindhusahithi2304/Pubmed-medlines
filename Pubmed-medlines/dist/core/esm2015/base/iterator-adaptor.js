export class IteratorAdaptor {
    constructor(base, adaptor) {
        this.base = base;
        this.adaptor = adaptor;
        this.return = (base.return) ? (v) => this.translate(this.base.return(v)) : undefined;
        this.throw = (base.throw) ? (e) => this.translate(this.base.throw(e)) : undefined;
    }
    static forIterable(iterable, adaptor) {
        /*if (iterable === undefined) {
            return undefined;
        }*/
        return new IteratorAdaptor(iterable[Symbol.iterator](), adaptor);
    }
    translate(result) {
        if (result.done) {
            return {
                done: result.done,
                value: (result.done && result.value === undefined) ? undefined : this.adaptor(result.value)
            };
        }
        else {
            return {
                value: this.adaptor(result.value)
            };
        }
    }
    next(value) { return this.translate(this.base.next(value)); }
    [Symbol.iterator]() { return this; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0b3ItYWRhcHRvci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2Jhc2UvIiwic291cmNlcyI6WyJpdGVyYXRvci1hZGFwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxlQUFlO0lBSXhCLFlBQW9CLElBQWlCLEVBQVUsT0FBb0I7UUFBL0MsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWE7UUFDL0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxLQUFLLEdBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMxRixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBTyxRQUFxQixFQUFFLE9BQW9CO1FBQ2hFOztXQUVHO1FBRUgsT0FBTyxJQUFJLGVBQWUsQ0FDdEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUMzQixPQUFPLENBQ1YsQ0FBQztJQUNOLENBQUM7SUFFTyxTQUFTLENBQUMsTUFBeUI7UUFDdkMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2IsT0FBTztnQkFDSCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7Z0JBQ2pCLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDOUYsQ0FBQztTQUNMO2FBQ0k7WUFDRCxPQUFPO2dCQUNILEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDcEMsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFXLElBQUssT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUEwQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDNUQiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSXRlcmF0b3JBZGFwdG9yPFQsQj4gaW1wbGVtZW50cyBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICByZWFkb25seSByZXR1cm4/OiAodmFsdWU/OiBhbnkpID0+IEl0ZXJhdG9yUmVzdWx0PFQ+O1xuICAgIHJlYWRvbmx5IHRocm93PzogKGVycm9yPzogYW55KSA9PiBJdGVyYXRvclJlc3VsdDxUPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZTogSXRlcmF0b3I8Qj4sIHByaXZhdGUgYWRhcHRvcjogKGI6IEIpID0+IFQpIHtcbiAgICAgICAgdGhpcy5yZXR1cm4gPSAoYmFzZS5yZXR1cm4pID8gKHYpID0+IHRoaXMudHJhbnNsYXRlKHRoaXMuYmFzZS5yZXR1cm4hKHYpKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aHJvdyAgPSAoYmFzZS50aHJvdykgID8gKGUpID0+IHRoaXMudHJhbnNsYXRlKHRoaXMuYmFzZS50aHJvdyEoZSkpICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ySXRlcmFibGU8QiwgVD4oaXRlcmFibGU6IEl0ZXJhYmxlPEI+LCBhZGFwdG9yOiAoYjogQikgPT4gVCk6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgICAgICAvKmlmIChpdGVyYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9Ki9cblxuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yQWRhcHRvcjxULEI+KFxuICAgICAgICAgICAgaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLFxuICAgICAgICAgICAgYWRhcHRvclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNsYXRlKHJlc3VsdDogSXRlcmF0b3JSZXN1bHQ8Qj4pOiBJdGVyYXRvclJlc3VsdDxUPiB7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkb25lOiByZXN1bHQuZG9uZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHJlc3VsdC5kb25lICYmIHJlc3VsdC52YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IHVuZGVmaW5lZCA6IHRoaXMuYWRhcHRvcihyZXN1bHQudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5hZGFwdG9yKHJlc3VsdC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0KHZhbHVlPzogYW55KSAgeyByZXR1cm4gdGhpcy50cmFuc2xhdGUodGhpcy5iYXNlLm5leHQodmFsdWUpKTsgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUPiB7IHJldHVybiB0aGlzOyB9XG59XG4iXX0=