/**
 * Enum representing supported export source.
 */
export var ExportSourceType;
(function (ExportSourceType) {
    ExportSourceType[ExportSourceType["None"] = 0] = "None";
    ExportSourceType[ExportSourceType["Result"] = 1] = "Result";
    ExportSourceType[ExportSourceType["Selection"] = 2] = "Selection";
    ExportSourceType[ExportSourceType["SavedQuery"] = 4] = "SavedQuery";
})(ExportSourceType || (ExportSourceType = {}));
/**
 * Enum representing supported export format.
 */
export var ExportOutputFormat;
(function (ExportOutputFormat) {
    ExportOutputFormat[ExportOutputFormat["None"] = 0] = "None";
    ExportOutputFormat[ExportOutputFormat["Csv"] = 1] = "Csv";
    ExportOutputFormat[ExportOutputFormat["Xlsx"] = 2] = "Xlsx";
    ExportOutputFormat[ExportOutputFormat["Json"] = 4] = "Json";
})(ExportOutputFormat || (ExportOutputFormat = {}));
/**
 * The minimum server api version that compatible with this version of SBA.
 */
export const MINIMUM_COMPATIBLE_SERVER_API_VERSION = '1.0';
//# sourceMappingURL=data:application/json;base64,