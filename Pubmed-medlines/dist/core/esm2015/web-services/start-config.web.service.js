import { Injectable, InjectionToken, Optional, Inject } from "@angular/core";
import { Observable } from "rxjs";
import atomic from "atomicjs";
import { Utils } from "@sinequa/core/base";
import * as i0 from "@angular/core";
/**
 * An {@link InjectionToken} to access the app's {@link StartConfig} instance
 */
export const START_CONFIG = new InjectionToken("START_CONFIG");
/**
 * A service to manage the initialization of the app's {@link StartConfig} instance. The service
 * is automatically instantiated by an {@link APP_INITIALIZER} in {@link WebServicesModule} and the
 * initialization is performed in the constructor.
 */
export class StartConfigWebService {
    /**
     * Initializes the injected {@link StartConfig} instance. Outputs an error to the
     * console if no instance is injected.
     *
     * @param startConfig The start configuration instance
     */
    constructor(startConfig) {
        this.startConfig = startConfig;
        if (!startConfig) {
            console.error("START_CONFIG must be provided in your app module");
            return;
        }
        this.initStartConfig();
    }
    getDefaultStartConfig() {
        const startConfig = {};
        const browserUrl = Utils.makeURL(window.location.href);
        let parts = Utils.split(browserUrl.pathname, "/");
        const appSpecifierIndex = parts.findIndex(value => Utils.eqNCN(value, "app", "app-debug"));
        if (appSpecifierIndex !== -1 && appSpecifierIndex < parts.length - 1) {
            const appSpecifier = parts[appSpecifierIndex];
            startConfig.app = parts[appSpecifierIndex + 1];
            startConfig.production = appSpecifier === "app" ? true : false;
            parts = parts.slice(0, appSpecifierIndex);
        }
        startConfig.url = Utils.addUrl(browserUrl.origin, ...parts);
        return startConfig;
    }
    initStartConfig() {
        const defaultStartConfig = this.getDefaultStartConfig();
        const initialStartConfig = Utils.copy(this.startConfig);
        Utils.extend(this.startConfig, defaultStartConfig, initialStartConfig);
        const browserUrl = Utils.makeURL(window.location.href);
        const url = Utils.makeURL(this.startConfig.url);
        let apiPath = Utils.addUrl(url.pathname, StartConfigWebService.API_PATH);
        let applicationPath = url.pathname;
        const corsActive = url.origin !== browserUrl.origin;
        if (corsActive) {
            apiPath = Utils.addUrl(url.origin, apiPath);
            applicationPath = Utils.addUrl(url.origin, applicationPath);
        }
        this.startConfig.origin = url.origin;
        this.startConfig.applicationPath = applicationPath;
        this.startConfig.apiPath = apiPath;
        this.startConfig.corsActive = corsActive;
        this.startConfig.browserUrl = Utils.addUrl(browserUrl.origin, browserUrl.pathname);
    }
    /**
     * Fetches pre-login app configuration from the Sinequa server and merges it
     * into the start config instance
     *
     * @returns An observable of the start config after being merged with the pre-login app configuration
     */
    fetchPreLoginAppConfig() {
        return Observable.create(observer => {
            let _url = Utils.addUrl(this.startConfig.apiPath, "app");
            _url = Utils.addSearchParams(_url, {
                app: this.startConfig.app,
                preLogin: true
            });
            atomic(_url, {
                headers: {
                    "sinequa-force-camel-case": true
                }
            })
                .then(response => {
                const initialStartConfig = Utils.copy(this.startConfig);
                Utils.extend(this.startConfig, response.data, initialStartConfig);
                const versionDate = this.startConfig.versionDate;
                if (Utils.isString(versionDate)) { // it will be
                    this.startConfig.versionDate = Utils.fromSysDateStr(versionDate);
                }
                observer.next(this.startConfig);
                observer.complete();
            })
                .catch(error => {
                console.error("Error retrieving app config");
                observer.error(error);
            });
        });
    }
    /**
     * Retrieves Sinequa server configuration from a web server hosting the app
     *
     * @param url A URL to a JSON file containing the Sinequa server configuration
     *
     * @returns An observable of the Sinequa server configuration
     */
    fetchServerConfig(url) {
        return Observable.create(observer => {
            if (!url) {
                const _url = Utils.makeURL(window.location.href);
                url = Utils.addUrl(_url.pathname, "sinequa-config.json");
            }
            atomic(url)
                .then(response => {
                // If the config file is empty or not valid json we'll most likely get a string for data
                let serverConfig = response.data;
                if (!Utils.isObject(serverConfig)) {
                    console.warn("invalid sinequa-config.json file");
                    serverConfig = {};
                }
                observer.next(serverConfig);
                observer.complete();
            })
                .catch(error => {
                console.log("sinequa-config.json not found");
                observer.next({});
                observer.complete();
            });
        });
    }
}
StartConfigWebService.API_PATH = "/api/v1";
StartConfigWebService.ɵfac = function StartConfigWebService_Factory(t) { return new (t || StartConfigWebService)(i0.ɵɵinject(START_CONFIG, 8)); };
StartConfigWebService.ɵprov = i0.ɵɵdefineInjectable({ token: StartConfigWebService, factory: StartConfigWebService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(StartConfigWebService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [START_CONFIG]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,