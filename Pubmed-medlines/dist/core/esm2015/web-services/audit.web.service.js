import { Injectable, Inject } from "@angular/core";
import { of } from "rxjs";
import { HttpService } from "./http.service";
import { START_CONFIG } from "./start-config.web.service";
import { Utils } from "@sinequa/core/base";
import * as i0 from "@angular/core";
import * as i1 from "./http-client";
/**
 * A service to notify the audit manager on the Sinequa server of client-side events
 */
export class AuditWebService extends HttpService {
    constructor(startConfig, httpClient) {
        super(startConfig);
        this.httpClient = httpClient;
    }
    /**
     * Notify the Sinequa server of a sponsored link event
     *
     * @param evt The audit event type
     * @param sl The sponsored link
     * @param resultId The id of the results that showed the sponsored link
     * @param parameters Additional information
     */
    notifySponsoredLink(evt, sl, resultId, parameters) {
        const detail = {
            "link-id": sl.id,
            rank: sl.rank || 0,
            title: sl.title,
            url: sl.url,
            "result-id": resultId
        };
        if (parameters) {
            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);
        }
        const data = {
            type: evt,
            detail
        };
        return this.notify(data);
    }
    /**
     * Notify the Sinequa server of a document event
     *
     * @param evt The audit event type
     * @param doc The document (record) in question
     * @param resultsOrId The results or resultid that contain the document
     * @param parameters Additional parameters
     * @param rfmParameters Additional RFM parameters
     */
    notifyDocument(evt, doc, resultsOrId, parameters, rfmParameters) {
        let resultId;
        let results;
        if (Utils.isString(resultsOrId)) {
            resultId = resultsOrId;
        }
        else {
            results = resultsOrId;
            resultId = results ? results.id : null;
        }
        const detail = {
            app: this.appName,
            "doc-id": doc.id,
            rank: doc.rank,
            title: doc.title,
            source: Utils.treeFirstNode(doc.collection[0]),
            collection: doc.collection[0],
            "result-id": resultId,
            filename: doc.filename,
            fileext: doc.fileext,
            index: doc.databasealias
        };
        if (results) {
            detail["result-count"] = results.totalRowCount;
        }
        if (parameters) {
            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);
        }
        const data = {
            type: evt,
            detail
        };
        if (rfmParameters) {
            const rfmDetail = {};
            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);
            data.rfmDetail = rfmDetail;
        }
        return this.notify(data);
    }
    /**
     * Notify the Sinequa server of a document event
     *
     * @param evt The audit event type
     * @param id The id of the document (record) in question
     * @param parameters Additional parameters
     * @param rfmParameters Additional RFM parameters
     */
    notifyDocumentById(evt, id, parameters, rfmParameters) {
        const collection = id.substr(0, id.indexOf("|"));
        const detail = {
            app: this.appName,
            "doc-id": id,
            rank: -1,
            source: Utils.treeFirstNode(collection),
            collection
        };
        if (parameters) {
            Object.keys(parameters).forEach(key => detail[key] = parameters[key]);
        }
        const data = {
            type: evt,
            detail
        };
        if (rfmParameters) {
            const rfmDetail = {};
            Object.keys(rfmParameters).forEach(key => rfmDetail[key] = rfmParameters[key]);
            data.rfmDetail = rfmDetail;
        }
        return this.notify(data);
    }
    /**
     * Notify logout
     */
    notifyLogout() {
        const detail = {
            app: this.appName,
        };
        const data = {
            type: "Search_Exit_Logout" /* Search_Exit_Logout */,
            detail
        };
        return this.notify(data);
    }
    /**
     * Notify the Sinequa server of a set of audit events
     *
     * @param auditEvents The audit events
     */
    notify(auditEvents) {
        if (!this.startConfig.auditEnabled) {
            return of(undefined);
        }
        const observable = this.httpClient.post(this.makeUrl(AuditWebService.endpoint), {
            event: "None" /* None */,
            app: this.appName,
            $auditRecord: auditEvents
        });
        Utils.subscribe(observable, (response) => {
            return response;
        }, (error) => {
            console.log("auditService.notify failure - error: ", error);
        });
        return observable;
    }
}
AuditWebService.endpoint = "audit.notify";
AuditWebService.ɵfac = function AuditWebService_Factory(t) { return new (t || AuditWebService)(i0.ɵɵinject(START_CONFIG), i0.ɵɵinject(i1.SqHttpClient)); };
AuditWebService.ɵprov = i0.ɵɵdefineInjectable({ token: AuditWebService, factory: AuditWebService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AuditWebService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [START_CONFIG]
            }] }, { type: i1.SqHttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,