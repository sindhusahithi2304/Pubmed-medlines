import { Injectable, Inject } from "@angular/core";
import { throwError } from "rxjs";
import { HttpService } from "./http.service";
import { START_CONFIG } from "./start-config.web.service";
import { Utils } from "@sinequa/core/base";
import * as i0 from "@angular/core";
import * as i1 from "./http-client";
/**
 * Used to inform whether a query is being executed using original or corrected search terms
 */
export var DidYouMeanKind;
(function (DidYouMeanKind) {
    DidYouMeanKind[DidYouMeanKind["Original"] = 0] = "Original";
    DidYouMeanKind[DidYouMeanKind["Corrected"] = 1] = "Corrected";
})(DidYouMeanKind || (DidYouMeanKind = {}));
/**
 * Display kinds for RFM
 */
export var RFMDisplay;
(function (RFMDisplay) {
    // Must be in par with C# RFMDisplay enum (RFM.cs)
    RFMDisplay[RFMDisplay["none"] = 0] = "none";
    RFMDisplay[RFMDisplay["positiveRate"] = 1] = "positiveRate";
    RFMDisplay[RFMDisplay["mainlyPosRate"] = 2] = "mainlyPosRate";
    RFMDisplay[RFMDisplay["unrate"] = 4] = "unrate";
    RFMDisplay[RFMDisplay["mainlyNegRate"] = 8] = "mainlyNegRate";
    RFMDisplay[RFMDisplay["negativeRate"] = 16] = "negativeRate";
    RFMDisplay[RFMDisplay["all"] = 31] = "all";
    RFMDisplay[RFMDisplay["positiveOnly"] = 7] = "positiveOnly";
    RFMDisplay[RFMDisplay["negativeOnly"] = 28] = "negativeOnly";
    RFMDisplay[RFMDisplay["personalAll"] = 21] = "personalAll";
    RFMDisplay[RFMDisplay["personalPosOnly"] = 5] = "personalPosOnly";
    RFMDisplay[RFMDisplay["personalNegOnly"] = 20] = "personalNegOnly";
})(RFMDisplay || (RFMDisplay = {}));
/**
 * A service to call the query web service
 */
export class QueryWebService extends HttpService {
    constructor(startConfig, httpClient) {
        super(startConfig);
        this.httpClient = httpClient;
        this.endPoint = "query";
    }
    /**
     * Get the results for the passed query
     *
     * @param query The query to execute
     * @param auditEvents Any audit events to store on the server
     * @param queryIntentData Any accompanying query intent data
     */
    getResults(query, auditEvents, queryIntentData) {
        if (!query) {
            return throwError({ error: "no query" });
        }
        const observable = this.httpClient.post(this.makeUrl(this.endPoint), {
            app: this.appName,
            query,
            $auditRecord: auditEvents,
            queryIntentData
        });
        Utils.subscribe(observable, (response) => {
            console.log("queryService.getResults success - data: ", response);
            return response;
        }, (error) => {
            console.log("queryService.getResults failure - error: ", error);
        });
        return observable;
    }
    /**
     * Get the results for a set of queries
     *
     * @param queries The queries to execute
     * @param auditEvents Any audit events to store on the server
     */
    getMultipleResults(queries, auditEvents) {
        if (!queries || queries.length === 0) {
            return throwError({ error: "no queries" });
        }
        const data = {
            methods: [],
            propagateErrors: true,
            $auditRecord: auditEvents
        };
        for (const query of queries) {
            data.methods.push({
                method: this.endPoint,
                app: this.appName,
                query
            });
        }
        return this.httpClient.post(this.makeUrl("multi"), data);
    }
}
QueryWebService.ɵfac = function QueryWebService_Factory(t) { return new (t || QueryWebService)(i0.ɵɵinject(START_CONFIG), i0.ɵɵinject(i1.SqHttpClient)); };
QueryWebService.ɵprov = i0.ɵɵdefineInjectable({ token: QueryWebService, factory: QueryWebService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(QueryWebService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [START_CONFIG]
            }] }, { type: i1.SqHttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,