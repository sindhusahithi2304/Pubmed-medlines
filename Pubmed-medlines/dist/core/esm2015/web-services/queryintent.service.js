import { Injectable, Inject } from "@angular/core";
import { HttpService } from "./http.service";
import { START_CONFIG } from "./start-config.web.service";
import * as i0 from "@angular/core";
import * as i1 from "./http-client";
/**
 * A service for calling the queryintent web service
 */
export class QueryIntentWebService extends HttpService {
    constructor(startConfig, httpClient) {
        super(startConfig);
        this.httpClient = httpClient;
        this.endpoint = "queryintent";
    }
    getQueryIntent(query) {
        const data = {
            query,
            app: this.appName
        };
        return this.httpClient.post(this.makeUrl(this.endpoint), data);
    }
}
QueryIntentWebService.ɵfac = function QueryIntentWebService_Factory(t) { return new (t || QueryIntentWebService)(i0.ɵɵinject(START_CONFIG), i0.ɵɵinject(i1.SqHttpClient)); };
QueryIntentWebService.ɵprov = i0.ɵɵdefineInjectable({ token: QueryIntentWebService, factory: QueryIntentWebService.ɵfac, providedIn: "root" });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(QueryIntentWebService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [START_CONFIG]
            }] }, { type: i1.SqHttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlpbnRlbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3dlYi1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInF1ZXJ5aW50ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHakQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxZQUFZLEVBQWMsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBMENyRTs7R0FFRztBQUlILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxXQUFXO0lBR2xELFlBQzBCLFdBQXdCLEVBQ3RDLFVBQXdCO1FBQ2hDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQURYLGVBQVUsR0FBVixVQUFVLENBQWM7UUFKbkIsYUFBUSxHQUFHLGFBQWEsQ0FBQztJQU0xQyxDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQWE7UUFDeEIsTUFBTSxJQUFJLEdBQUc7WUFDVCxLQUFLO1lBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3BCLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDOzswRkFoQlEscUJBQXFCLGNBSWxCLFlBQVk7NkRBSmYscUJBQXFCLFdBQXJCLHFCQUFxQixtQkFGbEIsTUFBTTtrREFFVCxxQkFBcUI7Y0FIakMsVUFBVTtlQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOztzQkFLUSxNQUFNO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIEluamVjdH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQge1NxSHR0cENsaWVudH0gZnJvbSBcIi4vaHR0cC1jbGllbnRcIjtcclxuaW1wb3J0IHtIdHRwU2VydmljZX0gZnJvbSBcIi4vaHR0cC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7U1RBUlRfQ09ORklHLCBTdGFydENvbmZpZ30gZnJvbSBcIi4vc3RhcnQtY29uZmlnLndlYi5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7SVF1ZXJ5fSBmcm9tIFwiLi9xdWVyeS9xdWVyeVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUludGVudFJlc3BvbnNlIHtcclxuICAgIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgICBpbnRlbnRzOiBRdWVyeUludGVudE1hdGNoW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlJbnRlbnRNYXRjaCB7XHJcbiAgICAvKiogbmFtZSBvZiB0aGUgaW50ZW50ICovXHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogZ2xvYmFsIGVudGl0aWVzIHRoYXQgbWF0Y2ggKi9cclxuICAgIGdsb2JhbEVudGl0aWVzPzogUXVlcnlJbnRlbnRFbnRpdHkyW107XHJcbiAgICAvKiogcnVsZSB0aGF0IG1hdGNoIGlmIGV4YWN0IG1hdGNoIHJ1bGUgKi9cclxuICAgIG1hdGNoUnVsZTogc3RyaW5nIHwgbnVsbDtcclxuICAgIC8qKiBtbCBzY29yZSBvciAxIGlmIHJ1bGUgKi9cclxuICAgIHNjb3JlOiBudW1iZXI7XHJcbiAgICAvKiogbWwgY29uZmlkZW5jZSBzY29yZSBvciAxIGlmIHJ1bGUgKi9cclxuICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUludGVudEVudGl0eTIge1xyXG4gICAgLyoqIGdsb2JhbCBlbnRpdHkgbmFtZSwgZWcuIFwicGVyc29uXCIgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKiBnbG9iYWwgZW50aXR5IHR5cGUgKGVudGl0aWVzIGFyZSBkZXRlY3RlZCBieSBjbGFzc2ljYWwgTkxQLCBzbG90cyBhcmUgZGV0ZWN0ZWQgYnkgTUwpICovXHJcbiAgICB0eXBlOiBcImVudGl0eVwiIHwgXCJzbG90XCI7XHJcbiAgICAvKiogZ2xvYmFsIGVudGl0eSByZXNvdXJjZSAqL1xyXG4gICAgcmVzb3VyY2U6IHN0cmluZztcclxuICAgIC8qKiB0ZXh0IHRoYXQgbWF0Y2ggdGhlIGdsb2JhbCBlbnRpdHksIGVnLiBcIkJpbGwgZ2F0ZXNcIiAqL1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIC8qKiBvZmZzZXQgaW4gdGhlIHF1ZXJ5ICovXHJcbiAgICBvZmZzZXQ6IG51bWJlcjtcclxuICAgIC8qKiBsZW5ndGggaW4gdGhlIHF1ZXJ5ICovXHJcbiAgICBsZW5ndGg6IG51bWJlcjtcclxuICAgIC8qKiBiYXNpYyBmb3JtIGlmIHR5cGU9ZW50aXR5LCBlZy4gXCJCSUxMIEdBVEVTXCIqL1xyXG4gICAgYmFzaWM6IHN0cmluZyB8IG51bGw7XHJcbiAgICAvKiogbm9ybWFsaXphdGlvbiBmb3JtIGlmIHR5cGU9ZW50aXR5LCBlZy4gXCJXaWxsaWFtIEggR2F0ZXNcIiovXHJcbiAgICBub3JtYWxpemF0aW9uOiBzdHJpbmcgfCBudWxsO1xyXG4gICAgLyoqIHNjb3JlIGZvciB0aGUgZXh0cmFjdGlvbiBpZiB0eXBlPXNsb3QgKi9cclxuICAgIHNjb3JlPzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXJ2aWNlIGZvciBjYWxsaW5nIHRoZSBxdWVyeWludGVudCB3ZWIgc2VydmljZVxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogXCJyb290XCJcclxufSlcclxuZXhwb3J0IGNsYXNzIFF1ZXJ5SW50ZW50V2ViU2VydmljZSBleHRlbmRzIEh0dHBTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZW5kcG9pbnQgPSBcInF1ZXJ5aW50ZW50XCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChTVEFSVF9DT05GSUcpIHN0YXJ0Q29uZmlnOiBTdGFydENvbmZpZyxcclxuICAgICAgICBwcml2YXRlIGh0dHBDbGllbnQ6IFNxSHR0cENsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKHN0YXJ0Q29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRRdWVyeUludGVudChxdWVyeTogSVF1ZXJ5KTogT2JzZXJ2YWJsZTxRdWVyeUludGVudFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgIGFwcDogdGhpcy5hcHBOYW1lXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8UXVlcnlJbnRlbnRSZXNwb25zZT4oXHJcbiAgICAgICAgICAgIHRoaXMubWFrZVVybCh0aGlzLmVuZHBvaW50KSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIl19