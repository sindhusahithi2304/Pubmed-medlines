import { Subject, of } from "rxjs";
import { Utils } from "@sinequa/core/base";
/**
 * An implementation of the {@link IModalRef} interface.
 */
export class ModalRef {
    constructor(overlayRef) {
        this.overlayRef = overlayRef;
        this._checkClose = new Subject();
        this._beforeClosed = new Subject();
        this._afterClosed = new Subject();
        this.submitListener = (event) => {
            this.submitted = true;
            event.preventDefault();
            return false;
        };
    }
    /**
     * A stream that emits before the referenced modal is closed to allow an observer
     * to cancel the closing.
     */
    checkClose() {
        return this._checkClose.asObservable();
    }
    /**
     * A stream that emits before the referenced modal is closed.
     */
    beforeClosed() {
        return this._beforeClosed.asObservable();
    }
    /**
     * A stream that emits aftervthe referenced modal is closed.
     */
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    /**
     * Close the referenced modal with the passed `result`.
     * @param result The referenced modal's result.
     */
    close(result = -2 /* Cancel */) {
        // Delay to allow submit handling
        Utils.delay().then(() => {
            const checkCloseEvent = { result };
            this._checkClose.next(checkCloseEvent);
            (checkCloseEvent.cancelled || of(false)).subscribe((cancelled) => {
                if (!cancelled) {
                    this._checkClose.complete();
                    this._beforeClosed.next(result);
                    this._beforeClosed.complete();
                    this.removeSubmitListener();
                    this.overlayRef.detachBackdrop();
                    this.overlayRef.dispose();
                    this.componentInstance = undefined;
                    this._afterClosed.next(result);
                    this._afterClosed.complete();
                }
            });
        });
    }
    /**
     * Disable the standard browser submit handling on any HTML form in the modal component.
     */
    disableSubmit() {
        if (!this.formElement) {
            const formElement = this.overlayRef.overlayElement.querySelector("form");
            if (formElement) {
                this.formElement = formElement;
                this.formElement.addEventListener("submit", this.submitListener);
            }
        }
    }
    removeSubmitListener() {
        if (this.formElement) {
            this.formElement.removeEventListener("submit", this.submitListener);
            this.formElement = undefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,